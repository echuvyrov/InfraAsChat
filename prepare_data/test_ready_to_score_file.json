{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/galleries', 'name': \"[parameters('galleryname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'description': \"[parameters('description')]\"}} END", "openai_output": "{'type': 'microsoft.compute/galleries', 'name': \"[parameters('galleryname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'description': 'my private gallery'}}  END"}
{"prompt": "\n\n###\n\nCreates an HDInsight cluster with Schedule-based Autoscale Enabled. Your cluster will scale up and down based on customized schedule\n\n===\n\n", "truth": " {'type': 'microsoft.hdinsight/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2021-06-01', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'spark', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2021-04-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 3, 'autoscale': {'recurrence': {'timezone': 'pacific standard time', 'schedule': [{'days': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'], 'timeandcapacity': {'time': '08:00', 'mininstancecount': 6, 'maxinstancecount': 6}}, {'days': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'], 'timeandcapacity': {'time': '13:00', 'mininstancecount': 8, 'maxinstancecount': 8}}, {'days': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'], 'timeandcapacity': {'time': '18:00', 'mininstancecount': 3, 'maxinstancecount': 3}}, {'days': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'], 'timeandcapacity': {'time': '23:00', 'mininstancecount': 2, 'maxinstancecount': 2}}, {'days': ['saturday', 'sunday'], 'timeandcapacity': {'time': '09:00', 'mininstancecount': 5, 'maxinstancecount': 5}}, {'days': ['saturday', 'sunday'], 'timeandcapacity': {'time': '18:00', 'mininstancecount': 2, 'maxinstancecount': 2}}]}}, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END", "openai_output": "{'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('defaultstorageaccount').name)]\", \"[resourceid('microsoft.keyvault/vaults/', variables('keyvaultname').name)]\", \"[resourceid('microsoft.eventhub/namespaces/', variables('eventhubnamespace').name)]\", \"[resourceid('microsoft.eventhub/namespaces/resourcegroups/', variables('eventhubnamespace'), variables('eventhubresourcegroup').name)]\", \"[resourceid('microsoft.samples/azurescriptsnippets/', variables('scriptsnippet').name)]\", \"[resourceid('microsoft.samples/azurescriptsnippets/resourcegroups/', variables('scriptsnippet'), variables('scriptsnippetresourcegroup').name)]\", \"[resourceid('microsoft.hdinsight/clusters/autoscale/', variables('clustername'), 'enabled')]\"], 'name': \"[variables('clustername')]\", 'location': \"[parameters('location')]\", 'properties': {'clusterversion': '4.0', 'autoscale': {'enabled': true}, 'nodeinstanceconfigurations': [{'name': 'default', 'nodeinstancetype': 't2.medium', 'hardwareprofile': 'dedicated', 'enableautomaticupdates': true}], 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2}], 'osprofile': {'computernameprefix': \"[variables('clustername')]\", 'adminusername': \"[parameters('headnodeadminusername')]\", 'adminpassword': \"[parameters('headnodeadminpassword')]\"}}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': 'nic', 'properties': {'primary': true, 'ipconfigurations': [{'name': 'ipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('loadbalancername'), variables('loadbalancenamebackendpoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('loadbalancername'), variables('loadbalancername'), variables('loadbalancenameinboundnatpoolname'))]\"}]}}]}}]}}}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults/', variables('keyvaultname').name)]\", \"[resourceid('microsoft.eventhub/namespaces/', variables('eventhubnamespace').name)]\", \"[resourceid('microsoft.eventhub/namespaces/resourcegroups/', variables('eventhubnamespace'), variables('eventhubresourcegroup').name)]\", \"[resourceid('microsoft.samples/azurescriptsnippets/', variables('scriptsnippet').name)]\", \"[resourceid('microsoft.samples/azurescriptsnippets/resourcegroups/', variables('scriptsnippet'), variables('scriptsnippetresourcegroup').name)]\", \"[resourceid('microsoft.hdinsight/clusters/autoscale/', variables('clustername'), 'enabled')]\"], 'apiversion': '2018-06-01-preview'} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Windows VM, using the latest patched version.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-03-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('osversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"]} END", "openai_output": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('newstorageaccountname')).primaryendpoints.blob]\"}}}} END {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/install-azure-keyvault')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"], 'properties': {'publisher': 'microsoft.azure.security', 'type': 'keyvault', 'typehandlerversion': '1.0', 'autoupgrademinorversion': true, 'settings': {'vaulturl': \"[parameters('keyvaulturl')]\", 'keyvaultresourceid': \"[resourceid('microsoft.keyvault/vaults/', parameters('keyvaultname'))]\"}, 'protectedsettings': {'encryptionsettings': {'customazurekeyvaultciphers': \"[parameters('customazurekeyvaultciphers')]\"}, 'encryptionkey': \"[listkeys(resourceid('microsoft.keyvault/vaults/', parameters('keyvaultname')), '2021-01-01').key1]\"}, 'connection': {'serverfqdn': \"[parameters('keyvaulturl')]\", 'tenantid': \"[parameters('tenantid')]\", 'applicationid': \"[parameters('applicationid')]\", 'applicationkey': \"[parameters('applicationkey')]\"}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/install-azure-storage')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('newstorageaccountname'))]\"], 'properties': {'publisher': 'microsoft.azure.security', 'type': 'storageaccount', 'typehandlerversion': '1.0', 'autoupgrademinorversion': true, 'settings': {'accountkey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', parameters('newstorageaccountname')), '2021-01-01').key1]\"}, 'protectedsettings': {'encryptionsettings': {'customazurekeyvaultciphers': \"[parameters('customazurekeyvaultciphers')]\"}, 'encryptionkey': \"[listkeys(resourceid('microsoft.keyvault/vaults/', parameters('keyvaultname')), '2021-01-01').key1]\"}, 'connection': {'serverfqdn': \"[parameters('storageaccountname')]\", 'applicationid': \"[parameters('storageaccountid')]\", 'applicationkey': \"[parameters('storageaccountkey')]\"}}}  END"}
{"prompt": "\n\n###\n\nCreate a VM from a generalized VHD and connect it to a new or existing virtual network\n\n===\n\n", "truth": " {'type': 'microsoft.compute/images', 'apiversion': '2020-06-01', 'name': \"[variables('imagename')]\", 'location': \"[parameters('location')]\", 'properties': {'hypervgeneration': 'v2', 'storageprofile': {'osdisk': {'ostype': \"[parameters('ostype')]\", 'osstate': 'generalized', 'bloburi': \"[parameters('osdiskvhduri')]\", 'caching': 'readwrite', 'storageaccounttype': 'standard_lrs'}}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'virtualmachine'}, 'dependson': [\"[variables('nicname')]\", \"[variables('imagename')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'id': \"[resourceid('microsoft.compute/images', variables('imagename'))]\"}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagstorageaccountname')).primaryendpoints.blob]\"}}}} END", "openai_output": "Create a VM from a generalized VHD and connect it to an existing virtual network using a custom script with a custom script extension END"}
{"prompt": "\n\n###\n\nDeploy a Virtual Machine with SSH rsa public key\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-11-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('adminusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('adminpublickey')]\"}]}}}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18_04-lts-gen2', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}} END", "openai_output": "This template deploys a virtual machine with an SSH public key. The template deploys the virtual machine to an existing vnet. END"}
{"prompt": "\n\n###\n\nThis template creates Azure Machine Learning workspace with multiple datasets & datastores.\n\n===\n\n", "truth": " {'type': 'microsoft.machinelearningservices/workspaces', 'apiversion': '2020-03-01', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.insights/components', parameters('applicationinsightsname'))]\", \"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'friendlyname': \"[parameters('workspacename')]\", 'storageaccount': \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\", 'keyvault': \"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\", 'applicationinsights': \"[resourceid('microsoft.insights/components', parameters('applicationinsightsname'))]\"}}{'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', 'datastore', copyindex())]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.machinelearningservices/workspaces', parameters('workspacename'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"], 'copy': {'name': 'datastorecopy', 'count': \"[int(parameters('datastorecount'))]\"}, 'properties': {'datastoretype': 'blob', 'accountname': \"[parameters('storageaccountname')]\", 'containername': \"[parameters('containername')]\", 'accountkey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2019-06-01').keys[0].value]\"}}{'type': 'microsoft.machinelearningservices/workspaces/datasets', 'name': \"[concat(parameters('workspacename'), '/', 'dataset', copyindex())]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.machinelearningservices/workspaces', parameters('workspacename'))]\"], 'copy': {'name': 'datasetcopy', 'count': \"[int(parameters('datasetcount'))]\"}, 'properties': {'datasettype': 'file', 'parameters': {'path': {'datapath': {'relativepath': '/', 'datastorename': 'workspaceblobstore'}}}, 'registration': {'description': 'multiple datasets'}}} END", "openai_output": " END"}
{"prompt": "\n\n###\n\nCreate a Web App with Application Insights sending to Log Analytics\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'tags': {'displayname': 'hostingplan', 'projectname': \"[parameters('appname')]\"}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[variables('websitename')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'tags': {'displayname': 'website', 'projectname': \"[parameters('appname')]\"}, 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'httpsonly': true, 'siteconfig': {'mintlsversion': '1.2'}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('websitename'), 'appsettings')]\", 'properties': {'appinsights_instrumentationkey': \"[reference(resourceid('microsoft.insights/components', variables('appinsightname'))).instrumentationkey]\"}, 'dependson': [\"[resourceid('microsoft.insights/components', variables('appinsightname'))]\", \"[resourceid('microsoft.web/sites', variables('websitename'))]\", \"[resourceid('microsoft.web/sites/siteextensions', variables('websitename'), 'microsoft.applicationinsights.azurewebsites')]\"]}{'type': 'microsoft.web/sites/siteextensions', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('websitename'), 'microsoft.applicationinsights.azurewebsites')]\", 'dependson': [\"[resourceid('microsoft.insights/components', variables('appinsightname'))]\", \"[resourceid('microsoft.web/sites', variables('websitename'))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('websitename'), 'logs')]\", 'properties': {'applicationlogs': {'filesystem': {'level': 'warning'}}, 'httplogs': {'filesystem': {'retentioninmb': 40, 'enabled': true}}, 'failedrequeststracing': {'enabled': true}, 'detailederrormessages': {'enabled': true}}, 'dependson': [\"[resourceid('microsoft.web/sites', variables('websitename'))]\"]} END", "openai_output": "=== END"}
{"prompt": "\n\n###\n\nDeploy Application Insight and create alert in it.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[parameters('applicationinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('workspacename'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', parameters('workspacename'))]\"]}{'type': 'microsoft.insights/metricalerts', 'apiversion': '2018-03-01', 'name': \"[variables('responsealertname')]\", 'location': 'global', 'properties': {'description': 'response time alert', 'severity': 0, 'enabled': true, 'scopes': [\"[resourceid('microsoft.insights/components', parameters('applicationinsightsname'))]\"], 'evaluationfrequency': 'pt1m', 'windowsize': 'pt5m', 'criteria': {'odata.type': 'microsoft.azure.monitor.singleresourcemultiplemetriccriteria', 'allof': [{'name': '1st criterion', 'metricname': 'requests/duration', 'operator': 'greaterthan', 'threshold': \"[parameters('responsetimethreshold')]\", 'timeaggregation': 'average', 'criteriontype': 'staticthresholdcriterion'}]}, 'actions': [{'actiongroupid': \"[resourceid('microsoft.insights/actiongroups', 'emailactiongroup')]\"}]}, 'dependson': [\"[resourceid('microsoft.insights/components', parameters('applicationinsightsname'))]\", \"[resourceid('microsoft.insights/actiongroups', 'emailactiongroup')]\"]}{'type': 'microsoft.insights/actiongroups', 'apiversion': '2019-06-01', 'name': 'emailactiongroup', 'location': 'global', 'properties': {'groupshortname': 'string', 'enabled': true, 'emailreceivers': [{'name': 'example', 'emailaddress': 'example@test.com', 'usecommonalertschema': true}]}} END", "openai_output": " END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for Cassandra API in two regions with a keyspace and table with dedicated throughput.\n\n===\n\n", "truth": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enablecassandra'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/cassandrakeyspaces', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('keyspacename'))]\", 'properties': {'resource': {'id': \"[parameters('keyspacename')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/cassandrakeyspaces/tables', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', format('{0}/{1}', variables('accountname_var'), parameters('keyspacename')), parameters('tablename'))]\", 'properties': {'resource': {'id': \"[parameters('tablename')]\", 'schema': {'columns': [{'name': 'loadid', 'type': 'uuid'}, {'name': 'machine', 'type': 'uuid'}, {'name': 'cpu', 'type': 'int'}, {'name': 'mtime', 'type': 'int'}, {'name': 'load', 'type': 'float'}], 'partitionkeys': [{'name': 'machine'}, {'name': 'cpu'}, {'name': 'mtime'}], 'clusterkeys': [{'name': 'loadid', 'orderby': 'asc'}]}, 'options': {'throughput': \"[parameters('throughput')]\"}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/cassandrakeyspaces', split(format('{0}/{1}', variables('accountname_var'), parameters('keyspacename')), '/')[0], split(format('{0}/{1}', variables('accountname_var'), parameters('keyspacename')), '/')[1])]\"]} END", "openai_output": "  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END END"}
{"prompt": "\n\n###\n\nCreate an API Management instance having MSI Identity using a template\n\n===\n\n", "truth": " {'type': 'microsoft.apimanagement/service', 'apiversion': '2021-08-01', 'name': \"[format('apiservice{0}', uniquestring(resourcegroup().id))]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\"}, 'identity': {'type': 'systemassigned'}} END", "openai_output": "{'apiversion': '2020-12-01', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\"], 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'virtualnetworktype': 'internal', 'virtualnetworkconfiguration': {'subnetresourceid': \"[variables('subnetref')]\"}}} END {'apiversion': '2020-12-01', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service/identity', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))]\"], 'properties': {'userassignedrights': [{'rights': \"[parameters('rights')]\"}]}}  END"}
{"prompt": "\n\n###\n\nCreate SQL AvailabilityGroup listener on existing Always ON setup.\n\n===\n\n", "truth": " {'type': 'microsoft.sqlvirtualmachine/sqlvirtualmachinegroups/availabilitygrouplisteners', 'name': \"[concat(parameters('existingfailoverclustername'), '/', parameters('listener'))]\", 'apiversion': '2017-03-01-preview', 'location': \"[parameters('location')]\", 'properties': {'availabilitygroupname': \"[parameters('existingsqlavailabilitygroup')]\", 'loadbalancerconfigurations': [{'privateipaddress': {'ipaddress': \"[parameters('listenerip')]\", 'subnetresourceid': \"[variables('subnetresourceid')]\"}, 'loadbalancerresourceid': \"[variables('loadbalancerresourceid')]\", 'probeport': \"[parameters('probeport')]\", 'sqlvirtualmachineinstances': \"[variables('sqlvmresourceidlist')]\"}], 'port': \"[parameters('listenerport')]\"}} END", "openai_output": "Create SQL AvailabilityGroup listener on existing Always ON setup. END"}
{"prompt": "\n\n###\n\nDeploy Azure Sql Database Managed Instance (SQL MI) inside new Virtual Network\n\n===\n\n", "truth": " {'type': 'microsoft.sql/managedinstances', 'apiversion': '2020-02-02-preview', 'name': \"[parameters('managedinstancename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\"}, 'identity': {'type': 'systemassigned'}, 'properties': {'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'subnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'storagesizeingb': \"[parameters('storagesizeingb')]\", 'vcores': \"[parameters('vcores')]\", 'licensetype': \"[parameters('licensetype')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]} END", "openai_output": "Deploy Azure Sql Database Managed Instance (SQL MI) inside existing Virtual Network END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('vnetsubnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkname')]\", \"[variables('publicipaddressname')]\"], 'properties': {'sku': {'name': \"[parameters('applicationgatewaysize')]\", 'tier': 'waf_v2', 'capacity': \"[parameters('applicationgatewaycapacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[variables('publicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}, {'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}], 'webapplicationfirewallconfiguration': {'enabled': \"[parameters('wafenabled')]\", 'firewallmode': \"[parameters('wafmode')]\", 'rulesettype': \"[parameters('wafrulesettype')]\", 'rulesetversion': \"[parameters('wafrulesetversion')]\"}}} END", "openai_output": "{ \"type\": \"microsoft.network/publicipaddresses\", \"apiversion\": \"2020-05-01\", \"name\": \"[variables('publicipaddressname')]\", \"location\": \"[parameters('location')]\", \"sku\": { \"[parameters('sku_name')]\": { \"[parameters('sku_capacity')]\": { \"[parameters('sku_unit_price')]\": { \"[parameters('sku_free_units')]\": \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: { \"[parameters('sku_free_units')]: \"[parameters('sku_number_of_free_units')]\", \"[parameters('sku_name')]: { \"[parameters('sku_capacity')]: { \"[parameters('sku_unit_price')]: END"}
{"prompt": "\n\n###\n\nThis template creates a standard internal Azure Load Balancer with a rule load-balancing port 80\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-05-01', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2021-05-01', 'name': \"[format('{0}/{1}', variables('virtualnetworkname'), variables('subnetname'))]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"]}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2021-05-01', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('lbbackendname'))]\"}]}}]}, 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"]}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2021-05-01', 'name': \"[variables('loadbalancername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbsku')]\"}, 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfrontendname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('lbbackendname')]\"}], 'loadbalancingrules': [{'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancername'), variables('lbfrontendname'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('lbbackendname'))]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('loadbalancername'), variables('lbprobename'))]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enabletcpreset': true, 'disableoutboundsnat': true, 'idletimeoutinminutes': 15}, 'name': \"[variables('lbrulename')]\"}], 'probes': [{'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 2}, 'name': \"[variables('lbprobename')]\"}]}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"]} END", "openai_output": "{ \"type\": \"microsoft.network/loadbalancers\", \"apiversion\": \"2020-06-01\", \"name\": \"[parameters('loadbalancername')]\", \"location\": \"[parameters('location')]\", \"properties\": { \"frontendipconfigurations\": [ { \"name\": \"[variables('frontendipconfigurationname')]\", \"properties\": { \"subnet\": { \"[parameters('frontendsubnetid')]\": { \"id\": \"[parameters('frontendsubnetid')]\" } }, \"loadbalancerbackendaddresspools\": [ { \"id\": \"[parameters('backendpoolid')]\", \"properties\": { \"addressprefix\": \"[parameters('backendipaddressprefix')]\" } } ] }], \"backendaddresspools\": [ { \"id\": \"[parameters('backendpoolid')]\", \"properties\": { \"addressprefix\": \"[parameters('backendipaddressprefix')]\" } }], \"loadbalancerrules\": [ { \"name\": \"[parameters('loadbalancerrule')]\", \"properties\": { \"frontendipconfiguration\": { \"[variables('frontendipconfigurationname')]\"}, \"backendaddresspool\": { \"[parameters('backendpoolid')]\"}, \"protocol\": \"[parameters('protocol')]\", \"frontendport\": \"[parameters('frontendport')]\", \"backendport\": \"[parameters('backendport')]\", \"idletimeoutinminutes\": \"[parameters('idletimeoutinminutes')]\", \"enablehealthchecking\": \"[parameters('enablehealthchecking')]\" } }], \"enablearp\": \"[parameters('enablearp')]\"}}{'apiversion': '2020-06-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}]}}{'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkresourcegroupname')]\", 'type': 'microsoft.network/virtualnetworks/subnets', 'location': \"[parameters('location')]\", 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}{'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}]}}{'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'type': 'microsoft.network/virtualnetworks/subnets', 'location': \"[parameters('location')]\", 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}{'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'type': 'microsoft.network/virtualnetworks/subnets', 'location': \"[parameters('location')]\", 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}{'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'type': 'microsoft.network/virtualnetworks/subnets', 'location': \"[parameters('location')]\", 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}{'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'type': 'microsoft.network/virtualnetworks/subnets', 'location': \"[parameters('location')]\", 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}{'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'type': 'microsoft.network END"}
