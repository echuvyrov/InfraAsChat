{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/galleries', 'name': \"[parameters('galleryname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'description': \"[parameters('description')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a Data Share account\n\n===\n\n", "truth": " {'type': 'microsoft.datashare/accounts', 'apiversion': '2021-08-01', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}} END", "openai_output": " with Storage Account Encryption and a blob deletion retention policy\n\n===\n\n {'type': 'microsoft.datashare/accounts', 'apiversion': '2021-08-01', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'kind': 'azureblob', 'properties': {'sharekind': 'azureblob', 'accounttype': \"[parameters('accounttype')]\"}} END"}
{"prompt": "\n\n###\n\nDeploy a Virtual Network for Azure Databricks VNet injection.\n\n===\n\n", "truth": "  END", "openai_output": "\n\n===\n\n {'type': 'microsoft.databricks/workspaces', 'apiversion': '2018-04-01', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('pricingtier')]\"}, 'dependson': [\"[variables('vnetid')]\"], 'properties': {'managedresourcegroupid': \"[parameters('managedresourcegroupid')]\", 'parameters': {'enablenopublicip': {'value': \"[parameters('disablepublicip')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template references existing key-value configurations from an existing config store and uses retrieved values to set properties of the resources the template creates.\n\n===\n\n", "truth": "  END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'tenantid': '[subscription().tenantid]', 'sku': {'name': 'standard', 'family': 'a'}, 'accesspolicies': []}} END"}
{"prompt": "\n\n###\n\nExecute dependent script extensions\n\n===\n\n", "truth": "  END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[concat(variables('virtualmachines_myvm_name'), copyindex(1))]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'vm-loop', 'count': 2}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', concat(variables('net_interface'), copyindex(1)))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}, 'osdisk': {'ostype': 'windows', 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}, 'disksizegb': 127}}, 'osprofile': {'computername': \"[concat(variables('virtualmachines_myvm_name'), copyindex(1))]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'provisionvmagent': true, 'enableautomaticupdates': true}, 'allowextensionoperations': true}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('net_interface'), copyindex(1)))]\"}]}}} END"}
{"prompt": "\n\n###\n\nCreates an HDInsight cluster with Schedule-based Autoscale Enabled. Your cluster will scale up and down based on customized schedule\n\n===\n\n", "truth": " {'type': 'microsoft.hdinsight/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2021-06-01', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'spark', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2021-04-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 3, 'autoscale': {'recurrence': {'timezone': 'pacific standard time', 'schedule': [{'days': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'], 'timeandcapacity': {'time': '08:00', 'mininstancecount': 6, 'maxinstancecount': 6}}, {'days': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'], 'timeandcapacity': {'time': '13:00', 'mininstancecount': 8, 'maxinstancecount': 8}}, {'days': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'], 'timeandcapacity': {'time': '18:00', 'mininstancecount': 3, 'maxinstancecount': 3}}, {'days': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'], 'timeandcapacity': {'time': '23:00', 'mininstancecount': 2, 'maxinstancecount': 2}}, {'days': ['saturday', 'sunday'], 'timeandcapacity': {'time': '09:00', 'mininstancecount': 5, 'maxinstancecount': 5}}, {'days': ['saturday', 'sunday'], 'timeandcapacity': {'time': '18:00', 'mininstancecount': 2, 'maxinstancecount': 2}}]}}, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END", "openai_output": ".\n\n===\n\n {'type': 'microsoft.hdinsight/clusters', 'apiversion': '2018-06-01-preview', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy two HBase clustes with each in its own VNet across two different regions.\n\n===\n\n", "truth": "  END", "openai_output": "\n\n===\n\n {'type': 'microsoft.hdinsight/clusters', 'apiversion': '2018-06-01-preview', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'hbase', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy a Linux-based HDInsight cluster with an empty edge node\n\n===\n\n", "truth": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('clusterstorageaccountname'))]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('clusterstorageaccountname')), '2021-04-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('clusterstorageaccountname')), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}}{'name': \"[concat(parameters('clustername'),'/', variables('applicationname'))]\", 'type': 'microsoft.hdinsight/clusters/applications', 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.hdinsight/clusters/',parameters('clustername'))]\"], 'properties': {'marketplaceidentifier': 'emptynode', 'computeprofile': {'roles': [{'name': 'edgenode', 'targetinstancecount': 1, 'hardwareprofile': {'vmsize': \"[parameters('edgenodevirtualmachinesize')]\"}}]}, 'installscriptactions': [{'name': \"[concat('emptynode','-' ,uniquestring(variables('applicationname')))]\", 'uri': \"[uri(parameters('_artifactslocation'), concat(parameters('installscriptactionfolder'), '/', parameters('installscriptaction'), parameters('_artifactslocationsastoken')))]\", 'roles': ['edgenode']}], 'sshendpoints': [{'location': \"[concat(variables('applicationname'),'.',parameters('clustername'),'-ssh.azurehdinsight.net')]\", 'destinationport': 22, 'publicport': 22}], 'applicationtype': 'customapplication'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.hdinsight/clusters', 'apiversion': '2018-06-01-preview', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nSend email with Logic app\n\n===\n\n", "truth": " {'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/connections', parameters('sendgridname'))]\"], 'properties': {'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'manual': {'type': 'request', 'kind': 'http', 'inputs': {'schema': {'$schema': 'http://json-schema.org/draft-04/schema#', 'properties': {'emailbody': {'type': 'string'}, 'from': {'type': 'string'}, 'subject': {'type': 'string'}, 'to': {'type': 'string'}}, 'required': ['from', 'to', 'subject', 'emailbody'], 'type': 'object'}}}}, 'actions': {'send_email': {'type': 'apiconnection', 'inputs': {'body': {'body': \"@{triggerbody()['emailbody']}\", 'from': \"@{triggerbody()['from']}\", 'ishtml': false, 'subject': \"@{triggerbody()['subject']}\", 'to': \"@{triggerbody()['to']}\"}, 'host': {'connection': {'name': \"@parameters('$connections')['sendgrid']['connectionid']\"}}, 'method': 'post', 'path': '/api/mail.send.json'}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'sendgrid': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'sendgrid')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('sendgridname'))]\"}}}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/connections', parameters('azureblobconnectionname'))]\"], 'properties': {'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'when_a_blob_is_added_or_modified_(properties_only)': {'recurrence': {'frequency': 'minute', 'interval': 1}, 'metadata': {'inputs': {'$connections': {'value': {'azureblob': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'azureblob')]\"}, 'members': {'mail': {'type': 'securestring', 'metadata': {'description': 'azureblob connection - default network security group for template'}}, 'type': 'object'}}, 'required': ['name', 'portal', 'path'], 'type': 'object'}}, 'required': ['name', 'integrationaccount', 'integrationaccountkey'], 'type': 'object'}}}, 'actions': {'when_a_blob_is_modified_or_added_to_the_blob': {'recurrence': {'frequency': 'minute', 'interval': 1}, 'metadata': {'inputs': {'$connections': {'value': {'azureblob': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'azureblob')]\"}, 'members': {'mail': {'type': 'securestring', 'metadata': {'description': 'azureblob connection - default network security group for template'}}}, 'required': ['name', 'portal', 'path'], 'type': 'object'}}}, 'required': ['name', 'integrationaccount', 'integrationaccountkey'], 'type': 'object'}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'azureblob': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'azureblob')]\"}, 'members': {'mail': {'type': 'securestring', 'metadata': {'description': 'azureblob connection - default network security group for template'}}}, 'required': ['name', 'portal', 'path'], 'type': 'object'}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'azureblob': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'azureblob')]\"}, 'members': {'mail': {'type': 'securestring', 'metadata': {'description': 'azureblob connection - default network security group for template'}}}, 'required': ['name', 'integrationaccount', 'integrationaccountkey'], 'type': 'object'}}}, 'parameters': {'$connections': {'value': {'azureblob': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'azureblob')]\"}, 'members': {'mail': {'type': 'securestring', 'metadata': {'description': 'azureblob connection - default network security group for template'}}}, 'required': ['name', 'integrationaccount', 'integrationaccountkey'], 'type': 'object'}}}, 'parameters': {'$connections': {'value': {'azureblob': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'azureblob')]\"}, 'members': {'mail': {'type': 'securestring', 'metadata': {'description': 'azureblob connection - default network security group for template'}}}, 'required': ['name', 'integrationaccount', 'integration END"}
{"prompt": "\n\n###\n\nThis template deploys and Azure Maps account and lists a Sas token and creates an Azure Key Vault secret with the sas token as the value.\n\n===\n\n", "truth": " {'type': 'microsoft.maps/accounts', 'apiversion': '2021-12-01-preview', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('pricingtier')]\"}, 'kind': \"[parameters('kind')]\", 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[parameters('userassignedidentityresourceid')]\": {}}}, 'properties': {'cors': {'corsrules': [{'allowedorigins': \"[parameters('allowedorigins')]\"}]}}}{'type': 'microsoft.maps/accounts/providers/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[concat(parameters('accountname'), '/microsoft.authorization/', guid(parameters('userassignedidentityprincipalid'), variables('azuremapsdatareader'), resourceid('microsoft.maps/accounts', parameters('accountname'))))]\", 'dependson': [\"[parameters('accountname')]\"], 'properties': {'roledefinitionid': \"[variables('azuremapsdatareader')]\", 'principalid': \"[parameters('userassignedidentityprincipalid')]\", 'principaltype': 'serviceprincipal'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.maps/accounts', 'apiversion': '2021-02-01', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('pricingtier')]\"}, 'kind': 'sas', 'properties': {'enablenonsslport': \"[parameters('enablenonsslport')]\", 'minimumtlsversion': '1.2', 'encryption': {'identity': {'type': 'systemassigned'}, 'services': {'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), 'secrets/{1}', parameters('vaultname'), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/vault(secret(resourcegroup().id, parameters('vaultname')), parameters('secretname')))]\", 'microsoft.keyvault/vaults/secrets': \"[format('{0}/ END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Windows VM, using the latest patched version.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-03-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('osversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"]} END", "openai_output": "\n\n===\n\n {'apiversion': '2019-07-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/winrmcustomscriptextension')]\", 'apiversion': '2019-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.4', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('configurewinrm.ps1', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('powershell -executionpolicy unrestricted -file configurewinrm.ps1 ',variables('hostdnsnamescriptargument'))]\"}}} END"}
{"prompt": "\n\n###\n\n2 VMs in a Load Balancer and Load Balancer rules\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}, 'sku': {'name': 'aligned'}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(parameters('nicnameprefix'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('nicnameprefix'),copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(parameters('storageaccountname'), '2019-06-01').primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('networkinterfacename'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}, 'osdisk': {'name': 'tfsworkgroupmanagedosdisk', 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('networkinterfacename'))]\"}]}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/createdc')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('vmname'))]\"], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.19', 'autoupgrademinorversion': true, 'settings': {'modulesurl': \"[uri(parameters('_artifactslocation'), concat('dsc/createdc.ps1.zip', parameters('_artifactslocationsastoken')))]\", 'configurationfunction': 'createdc.ps1\\\\createdc', 'properties': {'domainname': \"[parameters('domainname')]\", 'admincreds': {'username': \"[parameters('adminusername')]\", 'password': 'privatesettingsref:adminpassword'}}}, 'protectedsettings': {'items': {'adminpassword': \"[parameters('adminpassword')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template allows deploying a linux VM using new or existing resources for the Virtual Network, Storage and Public IP Address.  It also allows for choosing between SSH and Password authenticate.\n\n===\n\n", "truth": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('storageaccountname')]\", \"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '16.04-lts', 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid(parameters('storageaccountresourcegroupname'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2020-08-01-preview').primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('disktype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template disables encryption on a running windows vm\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/', variables('extensionname'))]\", 'apiversion': '2016-04-30-preview', 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('sequenceversion')]\", 'settings': {'volumetype': \"[parameters('volumetype')]\", 'encryptionoperation': \"[variables('encryptionoperation')]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/','azurediskencryptionforlinux')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryptionforlinux', 'typehandlerversion': '1.1', 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': 'disableencryption', 'volumetype': \"[parameters('volumetype')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a FreeBSD VM, using the latest patched version.\n\n===\n\n", "truth": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('freebsdosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2020-08-01-preview').primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')[parameters('sku')]]\", 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}]}, 'securityprofile': {'uefisettings': {'securebootenabled': \"[parameters('secureboot')]\", 'vtpmenabled': \"[parameters('vtpm')]\"}, 'securitytype': 'trustedlaunch'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a generalized VHD and connect it to a new or existing virtual network\n\n===\n\n", "truth": " {'type': 'microsoft.compute/images', 'apiversion': '2020-06-01', 'name': \"[variables('imagename')]\", 'location': \"[parameters('location')]\", 'properties': {'hypervgeneration': 'v2', 'storageprofile': {'osdisk': {'ostype': \"[parameters('ostype')]\", 'osstate': 'generalized', 'bloburi': \"[parameters('osdiskvhduri')]\", 'caching': 'readwrite', 'storageaccounttype': 'standard_lrs'}}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'virtualmachine'}, 'dependson': [\"[variables('nicname')]\", \"[variables('imagename')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'id': \"[resourceid('microsoft.compute/images', variables('imagename'))]\"}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagstorageaccountname')).primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', parameters('networkinterfacename'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('osdisktype')]\"}}, 'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('networkinterfacename'))]\"}]}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', parameters('networkinterfacename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Windows VMs behind a load balancer with NAT rules for rdp connections.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': '[resourcegroup().location]', 'apiversion': '2017-03-30', 'dependson': ['storageloop', \"[concat('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[concat('/subscriptions/', subscription().subscriptionid,'/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/virtualnetworks/', variables('virtualnetworkname'), '/subnets/', variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[concat('/subscriptions/', subscription().subscriptionid,'/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/backendaddresspools/', variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[concat('/subscriptions/', subscription().subscriptionid,'/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/inboundnatpools/', variables('natpoolname'))]\"}]}}]}}]}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools/', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Linux VMs behind a load balancer with NAT rules for ssh connections.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'zones': ['1'], 'apiversion': '2017-12-01', 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"], 'sku': {'name': 'standard_a1_v2', 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}, 'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools/', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools/', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template will deploy RedHat (RHEL) VM, using the Pay-As-You-Go RHEL VM image. Additional charges apply.\n\n===\n\n", "truth": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': '7.8', 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('vmname'),'_datadisk1')]\", 'disksizegb': 100, 'lun': 0, 'createoption': 'empty'}, {'name': \"[concat(parameters('vmname'),'_datadisk2')]\", 'disksizegb': 100, 'lun': 1, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2020-08-01-preview').primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('networkinterfacename'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '16.04-lts', 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Windows VM along with the diagnostics extension\n\n===\n\n", "truth": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'), '_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('storageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[concat('http://', parameters('existingdiagnosticsstorageaccountname'), '.blob.', environment().suffixes.storage)]\"}}}, 'resources': [{'name': 'microsoft.insights.vmdiagnosticssettings', 'type': 'extensions', 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'tags': {'displayname': 'azurediagnostics'}, 'properties': {'publisher': 'microsoft.azure.diagnostics', 'type': 'iaasdiagnostics', 'typehandlerversion': '1.5', 'autoupgrademinorversion': true, 'settings': {'xmlcfg': \"[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), variables('wadcfgxend')))]\", 'storageaccount': \"[parameters('existingdiagnosticsstorageaccountname')]\"}, 'protectedsettings': {'storageaccountname': \"[parameters('existingdiagnosticsstorageaccountname')]\", 'storageaccountkey': \"[listkeys(variables('accountid'), '2019-06-01').keys[0].value]\", 'storageaccountendpoint': \"[concat('https://', environment().suffixes.storage)]\"}}}]} END", "openai_output": " and the latest patched version.\n\n===\n\n {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), '2021-01-01').primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nDeploy a Virtual Machine with SSH rsa public key\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-11-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('adminusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('adminpublickey')]\"}]}}}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18_04-lts-gen2', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')[parameters('sku')]]\", 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}]}, 'securityprofile': {'uefisettings': {'securebootenabled': \"[parameters('secureboot')]\", 'vtpmenabled': \"[parameters('vtpm')]\"}, 'securitytype': 'trustedlaunch'}}} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy a Linux or Windows VM Scale Set with MSI.\n\n===\n\n", "truth": "  END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools/', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template creates Event Grid subscription for resource events. It sends the events to a WebHook. The template can be deployed to either a resource group or Azure subscription.\n\n===\n\n", "truth": " {'type': 'microsoft.eventgrid/eventsubscriptions', 'name': \"[parameters('eventsubname')]\", 'apiversion': '2020-06-01', 'properties': {'destination': {'endpointtype': 'webhook', 'properties': {'endpointurl': \"[parameters('endpoint')]\"}}, 'filter': {'issubjectcasesensitive': false}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.eventgrid/systemtopics', 'apiversion': '2020-06-01', 'name': \"[parameters('systemtopicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.eventgrid/systemtopics', parameters('systemtopicname'))]\"], 'properties': {'source': \"[resourceid('microsoft.eventgrid/systemtopics', parameters('systemtopicname'))]\", 'topictype': 'microsoft.eventgrid.systemtopic', 'status': 'enabled', 'topicto': \"[parameters('topicto')]\", 'enabled': true, 'filter': {'issubjectcasesensitive': false}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Service Bus namespace, a topic, a subscription and a rule.\n\n===\n\n", "truth": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'maxsizeinmegabytes': '1024', 'requiresduplicatedetection': 'false', 'duplicatedetectionhistorytimewindow': 'pt10m', 'enablebatchedoperations': 'false', 'supportordering': 'false', 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': 'false', 'enableexpress': 'false'}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebussubscriptionname')]\", 'type': 'subscriptions', 'dependson': [\"[parameters('servicebustopicname')]\"], 'properties': {'lockduration': 'pt1m', 'requiressession': 'false', 'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'deadletteringonmessageexpiration': 'false', 'maxdeliverycount': '10', 'enablebatchedoperations': 'false', 'autodeleteonidle': 'p10675199dt2h48m5.4775807s'}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebusrulename')]\", 'type': 'rules', 'dependson': [\"[parameters('servicebussubscriptionname')]\"], 'properties': {'filtertype': 'sqlfilter', 'sqlfilter': {'sqlexpression': \"filtertag = 'true'\", 'requirespreprocessing': 'false'}}}]}]}]} END", "openai_output": "\n\n===\n\n {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname1')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname1')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname2')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname2')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname3')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname3')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname4')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname4')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname5')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname5')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicsubscriptionname')]\", 'type': 'subscriptions', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'forwardto': \"[parameters('servicebustopicsubscriptionname')]\", 'forwarddeadletteredmessagesto': \"[parameters('servicebustopicsubscriptionname')]\"}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus namespace and IP Filter rule\n\n===\n\n", "truth": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'premium', 'tier': 'premium'}, 'properties': {}}{'apiversion': '2018-01-01-preview', 'name': \"[concat(parameters('servicebusnamespacename'),'/', parameters('ipfilterrulename'))]\", 'type': 'microsoft.servicebus/namespaces/ipfilterrules', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'filtername': \"[parameters('ipfilterrulename')]\", 'action': \"[parameters('ipfilteraction')]\", 'ipmask': \"[parameters('ipmask')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname1')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname1')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname2')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname2')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebussubnetname')]\", 'type': 'subnets', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'addressprefix': \"[parameters('servicebussubnetaddressprefix')]\", 'serviceendpoints': [{'service': 'microsoft.storage'}], 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]} END"}
{"prompt": "\n\n###\n\nThis template creates Azure Machine Learning workspace with multiple datasets & datastores.\n\n===\n\n", "truth": " {'type': 'microsoft.machinelearningservices/workspaces', 'apiversion': '2020-03-01', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.insights/components', parameters('applicationinsightsname'))]\", \"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'friendlyname': \"[parameters('workspacename')]\", 'storageaccount': \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\", 'keyvault': \"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\", 'applicationinsights': \"[resourceid('microsoft.insights/components', parameters('applicationinsightsname'))]\"}}{'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', 'datastore', copyindex())]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.machinelearningservices/workspaces', parameters('workspacename'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"], 'copy': {'name': 'datastorecopy', 'count': \"[int(parameters('datastorecount'))]\"}, 'properties': {'datastoretype': 'blob', 'accountname': \"[parameters('storageaccountname')]\", 'containername': \"[parameters('containername')]\", 'accountkey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2019-06-01').keys[0].value]\"}}{'type': 'microsoft.machinelearningservices/workspaces/datasets', 'name': \"[concat(parameters('workspacename'), '/', 'dataset', copyindex())]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.machinelearningservices/workspaces', parameters('workspacename'))]\"], 'copy': {'name': 'datasetcopy', 'count': \"[int(parameters('datasetcount'))]\"}, 'properties': {'datasettype': 'file', 'parameters': {'path': {'datapath': {'relativepath': '/', 'datastorename': 'workspaceblobstore'}}}, 'registration': {'description': 'multiple datasets'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.machinelearningservices/workspaces', 'apiversion': '2020-05-01-preview', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('storageaccountname')]\", \"[variables('keyvaultname')]\", \"[variables('applicationinsightsname')]\", \"[variables('containerregistryname')]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'friendlyname': \"[parameters('workspacename')]\", 'storageaccount': \"[variables('storageaccountname')]\", 'keyvault': \"[variables('keyvaultname')]\", 'applicationinsights': \"[variables('applicationinsightsname')]\", 'containerregistry': \"[variables('containerregistryname')]\", 'hbiworkspace': \"[parameters('hbi_workspace')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a PostgreSQL datastore in Azure Machine Learning workspace.\n\n===\n\n", "truth": " {'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', parameters('datastorename'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'datastoretype': 'psqldb', 'skipvalidation': \"[parameters('skipvalidation')]\", 'databasename': \"[parameters('databasename')]\", 'password': \"[parameters('password')]\", 'servername': \"[parameters('servername')]\", 'userid': \"[parameters('userid')]\", 'port': \"[parameters('port')]\", 'endpoint': \"[parameters('endpoint')]\", 'enforcessl': \"[parameters('enforcessl')]\"}} END", "openai_output": "\n\nThis template creates a Postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a Postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a Postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a Postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace.\n\nThis template creates a postgresql datastore in Azure Machine Learning workspace END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Machine Learning compute instance on behalf of another user with a sample inline setup script\n\n===\n\n", "truth": " {'type': 'microsoft.machinelearningservices/workspaces/computes', 'name': \"[concat(parameters('workspacename'), '/', parameters('computename'))]\", 'apiversion': '2021-07-01', 'location': \"[parameters('location')]\", 'properties': {'computetype': 'computeinstance', 'properties': {'vmsize': \"[parameters('vmsize')]\", 'subnet': \"[if(and(not(empty(parameters('vnetresourcegroupname'))),not(empty(parameters('vnetname'))),not(empty(parameters('subnetname')))), variables('subnet'), json('null'))]\", 'personalcomputeinstancesettings': {'assigneduser': {'objectid': \"[parameters('objectid')]\", 'tenantid': \"[parameters('tenantid')]\"}}, 'setupscripts': {'scripts': {'creationscript': {'scriptsource': 'inline', 'scriptdata': \"[base64(parameters('inlinecommand'))]\", 'scriptarguments': \"[parameters('creationscript.cmdarguments')]\"}}}, 'schedules': \"[parameters('schedules')]\"}}} END", "openai_output": ".\n\n===\n\n {'type': 'microsoft.machinelearningservices/workspaces/computes', 'apiversion': '2020-08-01', 'name': \"[concat(parameters('workspacename'), '/', parameters('computename'))]\", 'location': \"[parameters('location')]\", 'properties': {'computetype': 'datalakeanalytics', 'resourceid': \"[resourceid('microsoft.datalakeanalytics/accounts', parameters('adlanalyticsname'))]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an IoT Hub and a device to cloud consumer group.\n\n===\n\n", "truth": " {'type': 'microsoft.devices/iothubs', 'apiversion': '2021-03-31', 'name': \"[parameters('iothubname')]\", 'location': \"[parameters('location')]\", 'properties': {'eventhubendpoints': {'events': {'retentiontimeindays': 1, 'partitioncount': 2}}, 'cloudtodevice': {'defaultttlasiso8601': 'pt1h', 'maxdeliverycount': 10, 'feedback': {'ttlasiso8601': 'pt1h', 'lockdurationasiso8601': 'pt60s', 'maxdeliverycount': 10}}, 'messagingendpoints': {'filenotifications': {'ttlasiso8601': 'pt1h', 'lockdurationasiso8601': 'pt1m', 'maxdeliverycount': 10}}}, 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('capacityunits')]\"}}{'type': 'microsoft.devices/iothubs/eventhubendpoints/consumergroups', 'apiversion': '2021-03-31', 'name': \"[variables('consumergroupname')]\", 'properties': {'name': 'cg1'}, 'dependson': [\"[resourceid('microsoft.devices/iothubs', parameters('iothubname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.devices/iothubs', 'apiversion': '2021-03-31', 'name': \"[parameters('iothubname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'properties': {'cloudtodevice': {'consumergroups': [{'name': \"[parameters('consumergroupname')]\", 'capacity': \"[parameters('skuunits')]\"}], 'eventhubconnectionstring': \"[concat('eventhub', variables('eventhubconnectionstring'))]\"}}}{'type': 'microsoft.devices/cloudmanagedapis', 'apiversion': '2021-03-31', 'name': \"[variables('cloudmanagedapename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'dependson': [\"[resourceid('microsoft.devices/iothubs', parameters('iothubname'))]\"], 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'cloudtodevice': {'consumergroups': [{'name': \"[parameters('consumergroupname')]\", 'capacity': \"[parameters('skuunits')]\"}], 'eventhubconnectionstring': \"[concat('eventhub', variables('eventhubconnectionstring'))]\"}}}{'type': 'microsoft.devices/azurecloudservices', 'apiversion': '2021-03-31', 'name': \"[variables('azurecloudservices')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'dependson': [\"[resourceid('microsoft.devices/iothubs', parameters('iothubname'))]\"], 'properties': {'cloudtodevice': {'consumergroups': [{'name': \"[parameters('consumergroupname')]\", 'capacity': \"[parameters('skuunits')]\"}], 'eventhubconnectionstring': \"[concat('eventhub', variables('eventhubconnectionstring'))]\"}}}{'type': 'microsoft.devices/azurecloudservices/containers', 'apiversion': '2021-03-31', 'name': \"[concat(variables('azurecloudservices'), '/', variables('containername'))]\", 'dependson': [\"[resourceid('microsoft.devices/iothubs', parameters('iothubname'))]\"], 'properties': {'public': true, 'managed': true}} END"}
{"prompt": "\n\n###\n\nCreate a Web App plus an Application Gateway v2 using a template. Access to the Web App is protected with a Service Endpoint Access Restriction from the Application Gateway subnet.\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'name': \"[variables('webappplanname')]\", 'apiversion': '2020-06-01', 'location': \"[variables('location')]\", 'properties': {'reserved': 'false'}, 'sku': {'name': \"[variables('webappplansku')]\", 'capacity': 1}}{'name': \"[variables('webappname')]\", 'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'location': \"[variables('location')]\", 'dependson': [\"[variables('webappplanid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'serverfarmid': \"[variables('webappplanid')]\", 'reserved': 'false', 'siteconfig': {'http20enabled': 'true', 'mintlsversion': '1.2', 'ipsecurityrestrictions': [{'vnetsubnetresourceid': \"[variables('virtualnetworksubnetid')]\", 'action': 'allow', 'tag': 'default', 'priority': 200, 'name': 'appgatewaysubnet', 'description': 'isolate traffic to subnet containing azure application gateway'}]}, 'httpsonly': 'false'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('appserviceplanskuname')]\", 'capacity': \"[parameters('appserviceplancapacity')]\"}, 'properties': {'name': \"[variables('appserviceplanname')]\"}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('appname')]\", 'location': \"[parameters('location')]\", 'kind': 'app', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'httpsonly': true, 'siteconfig': {'appsettings': [{'name': 'appsettings', 'value': \"[parameters('appsettings')]\"}]}, 'httpsonly': true}}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('appname'), '/web')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('appname'))]\"], 'properties': {'ftpsstate': 'allallowed', 'mintlsversion': '1.2', 'ipsecurityrestrictions': [{'propertyjtag': 'servicemode', 'propertytype': 'string', 'ipprotocols': ['http'], 'jtjtag': 'servicemanagement', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', 'jtjtag': 'servicetag', END"}
{"prompt": "\n\n###\n\nCreate a Web App with Application Insights sending to Log Analytics\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'tags': {'displayname': 'hostingplan', 'projectname': \"[parameters('appname')]\"}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[variables('websitename')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'tags': {'displayname': 'website', 'projectname': \"[parameters('appname')]\"}, 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'httpsonly': true, 'siteconfig': {'mintlsversion': '1.2'}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('websitename'), 'appsettings')]\", 'properties': {'appinsights_instrumentationkey': \"[reference(resourceid('microsoft.insights/components', variables('appinsightname'))).instrumentationkey]\"}, 'dependson': [\"[resourceid('microsoft.insights/components', variables('appinsightname'))]\", \"[resourceid('microsoft.web/sites', variables('websitename'))]\", \"[resourceid('microsoft.web/sites/siteextensions', variables('websitename'), 'microsoft.applicationinsights.azurewebsites')]\"]}{'type': 'microsoft.web/sites/siteextensions', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('websitename'), 'microsoft.applicationinsights.azurewebsites')]\", 'dependson': [\"[resourceid('microsoft.insights/components', variables('appinsightname'))]\", \"[resourceid('microsoft.web/sites', variables('websitename'))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('websitename'), 'logs')]\", 'properties': {'applicationlogs': {'filesystem': {'level': 'warning'}}, 'httplogs': {'filesystem': {'retentioninmb': 40, 'enabled': true}}, 'failedrequeststracing': {'enabled': true}, 'detailederrormessages': {'enabled': true}}, 'dependson': [\"[resourceid('microsoft.web/sites', variables('websitename'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('appserviceplanskuname')]\", 'capacity': \"[parameters('appserviceplancapacity')]\"}, 'kind': 'app'}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('appname')]\", 'location': \"[parameters('location')]\", 'kind': 'app', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'httpsonly': true, 'siteconfig': {'appsettings': [{'name': 'httptest', 'value': '<i>here</i>', 'type': 'applicationinsights/webtests', 'enabled': true}], 'name': 'appinsights://webtest'}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy an Azure Function Premium plan with regional virtual network integration enabled to a newly created virtual network.\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'ep1', 'tier': 'elasticpremium'}, 'kind': 'elastic', 'properties': {'maximumelasticworkercount': 20}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[variables('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'siteconfig': {'appsettings': [{'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components', variables('functionappname'))).instrumentationkey]\"}, {'name': 'applicationinsights_connection_string', 'value': \"[format('instrumentationkey={0}', reference(resourceid('microsoft.insights/components', variables('functionappname'))).instrumentationkey)]\"}, {'name': 'azurewebjobsstorage', 'value': \"[format('defaultendpointsprotocol=https;accountname={0};endpointsuffix= {1};accountkey={2}', variables('storageaccountname'), environment().suffixes.storage, listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-04-01').keys[0].value)]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[format('defaultendpointsprotocol=https;accountname={0};endpointsuffix={1};accountkey={2};', variables('storageaccountname'), environment().suffixes.storage, listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-04-01').keys[0].value)]\"}, {'name': 'functions_extension_version', 'value': '~3'}, {'name': 'functions_worker_runtime', 'value': \"[variables('functionworkerruntime')]\"}, {'name': 'website_node_default_version', 'value': '~12'}]}}, 'dependson': [\"[resourceid('microsoft.insights/components', variables('functionappname'))]\", \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]}{'type': 'microsoft.web/sites/networkconfig', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('functionappname'), 'virtualnetwork')]\", 'properties': {'subnetresourceid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnetname'))]\", 'swiftsupported': true}, 'dependson': [\"[resourceid('microsoft.web/sites', variables('functionappname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('functionappserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('functionappserviceplanskuname')]\", 'tier': \"[parameters('functionappserviceplansku')]\", 'capacity': \"[parameters('appserviceplancapacity')]\"}, 'kind': 'elastic', 'properties': {'name': \"[variables('functionappserviceplanname')]\"}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[variables('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'elastic', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('functionappserviceplanname'))]\", 'reserved': true, 'siteconfig': {'functionsruntimescalemonitoringenabled': true, 'scmsiteconfig': {'functionsruntimescalemonitoringenabled': true}, 'name': \"[variables('functionappname')]\"}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('functionappserviceplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.storage/storageaccounts/fileservices', variables('storageaccountname'), variables('functionappname'))]\", \"[resourceid('microsoft.insights/components', variables('functionappname'), variables('functionappinsightsname'))]\", \"[resourceid('microsoft.insights/components/functions', variables('functionappname'), variables('functionappname'), variables('functionappinsightsname'))]\", \"[resourceid('microsoft.web/sites', variables('functionappname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy an app service plan and a basic Linux web app\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'kind': 'linux', 'properties': {'reserved': true}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[variables('webappportalname')]\", 'location': \"[parameters('location')]\", 'kind': 'app', 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"], 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'siteconfig': {'linuxfxversion': \"[parameters('linuxfxversion')]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('appserviceplanskuname')]\", 'tier': \"[parameters('appserviceplansku')]\", 'capacity': \"[parameters('appserviceplancapacity')]\"}, 'kind': 'linux'}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('appname')]\", 'location': \"[parameters('location')]\", 'kind': 'linux', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'virtualnetworksubnetid': \"[variables('appserviceintegrationsubnetid')]\", 'httpsonly': true, 'siteconfig': {'vnetrouteallenabled': true, 'http20enabled': true}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.storage/storageaccounts/keys', variables('storageaccountname'), 'mysql')]\", \"[resourceid('microsoft.network/networkinterfaces', variables('appnicname'))]\"], 'resources': [{'type': 'config', 'apiversion': '2020-06-01', 'name': 'appsettings', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('appname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('appnicname'))]\"], 'properties': {'azurewebjobsstorage': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-04-01').keys[0].value)]\", 'appinsights_instrumentationkey': \"[reference(resourceid('microsoft.insights/components', variables('applicationinsightsname')), '2020-02-02-preview').instrumentationkey]\", 'applicationinsights_mode': 'default', 'instrumentationkey': \"[reference(resourceid('microsoft.insights/components', variables('applicationinsightsname')), '2020-02-02-preview').instrumentationkey]\", 'instrumentationkey_var': \"[variables('applicationinsights_base').instrumentationkey]\", 'instrumentationkey_vnet_name': \"[variables('applicationinsights_base').vnetname]\", 'instrumentationkey_vnet_address': \"[variables('applicationinsights_base').vnetaddress]\", 'instrumentationkey_subnet_name': \"[variables('applicationinsights_base').subnetname]\", 'instrumentationkey_subnet_address': \"[variables('applicationinsights_base').subnetaddress]\", 'instrumentationkey_app_service_plan_name': \"[variables('applicationinsights_base').appserviceplanname]\", 'instrumentationkey_app_service_plan_address': \"[variables('applicationinsights_base').appserviceplanaddress]\", 'instrumentationkey_for_log_to_event_hub_policy': \"[variables('applicationinsights_base').forlogscustompolicy]\", 'instrumentationkey_for_bastion_policy': \"[variables('applicationinsights_base').forbastionpolicy]\", 'instrumentationkey_for_client_role': \"[variables('applicationinsights_base').forcredentialsrole]\", 'instrumentationkey_for_databasename': \"[variables('applicationinsights_base').databasename]\", 'instrumentationkey_for_devicename': \"[variables('applicationinsights_base').devicename]\", 'instrumentationkey_for_devicemode': \"[variables('applicationinsights_base').devicemode]\", 'instrumentationkey_for_devicemode_disk': \"[variables('applicationinsights_base').dev END"}
{"prompt": "\n\n###\n\nCreate an App Service Environment\n\n===\n\n", "truth": " {'apiversion': '2020-06-01', 'type': 'microsoft.web/hostingenvironments', 'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'properties': {'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'ipssladdresscount': \"[parameters('ipssladdresscount')]\", 'virtualnetwork': {'id': \"[parameters('subnetid')]\", 'subnet': \"[parameters('subnetname')]\"}, 'multisize': \"[parameters('frontendsize')]\", 'multirolecount': \"[parameters('frontendcount')]\", 'workerpools': [{'workersizeid': 0, 'workersize': \"[parameters('workerpooloneinstancesize')]\", 'workercount': \"[parameters('workerpooloneinstancecount')]\"}, {'workersizeid': 1, 'workersize': \"[parameters('workerpooltwoinstancesize')]\", 'workercount': \"[parameters('workerpooltwoinstancecount')]\"}, {'workersizeid': 2, 'workersize': \"[parameters('workerpoolthreeinstancesize')]\", 'workercount': \"[parameters('workerpoolthreeinstancecount')]\"}]}} END", "openai_output": " with a Shared Image Gallery\n\n===\n\n {'apiversion': '2020-06-01', 'type': 'microsoft.web/hostingenvironments', 'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('vnetname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', parameters('publicipaddressname'))]\"], 'properties': {'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'ipssladdresscount': \"[parameters('ipssladdresscount')]\", 'internalloadbalancingmode': \"[parameters('internalloadbalancingmode')]\", 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnetname'))]\"}, 'publicipaddress': \"[parameters('publicipaddressname')]\"}}}{'apiversion': '2020-06-01', 'type': 'microsoft.web/serverfarms', 'name': \"[parameters('serverfarmsaseaspname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('serverfarmsaseaspsize')]\", 'tier': \"[parameters('serverfarmsaseaspsize')]\", 'capacity': 1}, 'kind': 'app', 'properties': {'name': \"[parameters('serverfarmsaseaspname')]\", 'workersize': \"[parameters('workersize')]\", 'workersizeid': \"[parameters('workersizeid')]\", 'numberofworkers': 1}} END"}
{"prompt": "\n\n###\n\nCreate an AppServicePlan and App in an ASEv3\n\n===\n\n", "truth": " {'type': 'microsoft.web/hostingenvironments', 'apiversion': '2020-12-01', 'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'kind': 'asev3', 'properties': {'dedicatedhostcount': \"[parameters('dedicatedhostcount')]\", 'zoneredundant': \"[parameters('zoneredundant')]\", 'internalloadbalancingmode': \"[parameters('internalloadbalancingmode')]\", 'virtualnetwork': {'id': \"[variables('subnetid')]\"}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]} END", "openai_output": " Web App\n\n===\n\n {'apiversion': '2020-12-01', 'name': \"[parameters('appserviceplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'properties': {'name': \"[parameters('appserviceplanname')]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments', parameters('appserviceenvironmentname'))]\"}}, 'sku': {'name': \"[concat('p',parameters('workerpool'))]\", 'tier': 'premium', 'size': \"[concat('p',parameters('workerpool'))]\", 'family': 'p', 'capacity': \"[parameters('numberofworkersfromworkerpool')]\"}}{'apiversion': '2020-12-01', 'name': \"[parameters('sitename')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'properties': {'name': \"[parameters('sitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('appserviceplanname'))]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments', parameters('appserviceenvironmentname'))]\"}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms/', parameters('appserviceplanname'))]\"]} END"}
{"prompt": "\n\n###\n\nDeploy Application Insight and create alert in it.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[parameters('applicationinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('workspacename'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', parameters('workspacename'))]\"]}{'type': 'microsoft.insights/metricalerts', 'apiversion': '2018-03-01', 'name': \"[variables('responsealertname')]\", 'location': 'global', 'properties': {'description': 'response time alert', 'severity': 0, 'enabled': true, 'scopes': [\"[resourceid('microsoft.insights/components', parameters('applicationinsightsname'))]\"], 'evaluationfrequency': 'pt1m', 'windowsize': 'pt5m', 'criteria': {'odata.type': 'microsoft.azure.monitor.singleresourcemultiplemetriccriteria', 'allof': [{'name': '1st criterion', 'metricname': 'requests/duration', 'operator': 'greaterthan', 'threshold': \"[parameters('responsetimethreshold')]\", 'timeaggregation': 'average', 'criteriontype': 'staticthresholdcriterion'}]}, 'actions': [{'actiongroupid': \"[resourceid('microsoft.insights/actiongroups', 'emailactiongroup')]\"}]}, 'dependson': [\"[resourceid('microsoft.insights/components', parameters('applicationinsightsname'))]\", \"[resourceid('microsoft.insights/actiongroups', 'emailactiongroup')]\"]}{'type': 'microsoft.insights/actiongroups', 'apiversion': '2019-06-01', 'name': 'emailactiongroup', 'location': 'global', 'properties': {'groupshortname': 'string', 'enabled': true, 'emailreceivers': [{'name': 'example', 'emailaddress': 'example@test.com', 'usecommonalertschema': true}]}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/activitylogalerts', 'apiversion': '2019-04-01', 'name': 'allazureadvisoralert', 'location': 'global', 'properties': {'scopes': ['[resourcegroup().id]'], 'condition': {'allof': [{'field': 'category', 'equals': 'recommendation'}, {'field': 'operationname', 'equals': 'microsoft.advisor/recommendations/available/action'}]}, 'enabled': true, 'description': 'all azure advisor alerts'}}{'type': 'microsoft.insights/activitylogalerts/scopes', 'apiversion': '2019-04-01', 'name': 'allazureadvisorarchive', 'location': 'global', 'dependson': [\"[resourceid('microsoft.insights/activitylogalerts', 'allazureadvisor')]\"], 'properties': {'description': 'allow access to azure advisor alerts'}} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": "  END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Time Series Insights environment, a child event source that reads events from an Event Hub, and optionally a source Event Hub.\n\n===\n\n", "truth": " {'type': 'microsoft.timeseriesinsights/environments', 'name': \"[parameters('environmentname')]\", 'apiversion': '2017-11-15', 'location': \"[parameters('location')]\", 'properties': {'dataretentiontime': \"[parameters('environmentdataretentiontime')]\"}, 'sku': {'name': \"[parameters('environmentskuname')]\", 'capacity': \"[parameters('environmentskucapacity')]\"}, 'tags': \"[variables('environmenttagsvalue')]\", 'resources': [{'type': 'eventsources', 'name': \"[parameters('eventsourcename')]\", 'apiversion': '2017-11-15', 'location': \"[parameters('location')]\", 'kind': 'microsoft.eventhub', 'dependson': [\"[resourceid('microsoft.timeseriesinsights/environments/', parameters('environmentname'))]\", \"[resourceid('microsoft.eventhub/namespaces', parameters('eventhubnamespacename'))]\", \"[resourceid('microsoft.eventhub/namespaces/eventhubs/consumergroups', parameters('eventhubnamespacename'), parameters('eventhubname'), parameters('consumergroupname'))]\", \"[resourceid('microsoft.eventhub/namespaces/eventhubs/authorizationrules', parameters('eventhubnamespacename'), parameters('eventhubname'), parameters('eventsourcekeyname'))]\"], 'properties': {'eventsourceresourceid': \"[variables('eventsourceresourceid')]\", 'eventhubname': \"[parameters('eventhubname')]\", 'servicebusnamespace': \"[parameters('eventhubnamespacename')]\", 'consumergroupname': \"[parameters('consumergroupname')]\", 'keyname': \"[parameters('eventsourcekeyname')]\", 'sharedaccesskey': \"[listkeys(resourceid(parameters('eventhubresourcegroup'), 'microsoft.eventhub/namespaces/eventhubs/authorizationrules', parameters('eventhubnamespacename'), parameters('eventhubname'), parameters('eventsourcekeyname')), '2021-01-01-preview').primarykey]\", 'timestamppropertyname': \"[parameters('eventsourcetimestamppropertyname')]\"}, 'tags': \"[variables('eventsourcetagsvalue')]\"}]}{'condition': \"[not(empty(parameters('accesspolicyreaderobjectids')))]\", 'type': 'microsoft.timeseriesinsights/environments/accesspolicies', 'name': \"[concat(parameters('environmentname'), '/', 'readeraccesspolicy', copyindex())]\", 'copy': {'name': 'accesspolicyreadercopy', 'count': \"[if(empty(parameters('accesspolicyreaderobjectids')), 1, length(parameters('accesspolicyreaderobjectids')))]\"}, 'apiversion': '2017-11-15', 'dependson': [\"[resourceid('microsoft.timeseriesinsights/environments/', parameters('environmentname'))]\"], 'properties': {'principalobjectid': \"[parameters('accesspolicyreaderobjectids')[copyindex()]]\", 'roles': ['reader']}}{'condition': \"[not(empty(parameters('accesspolicycontributorobjectids')))]\", 'type': 'microsoft.timeseriesinsights/environments/accesspolicies', 'name': \"[concat(parameters('environmentname'), '/', 'contributoraccesspolicy', copyindex())]\", 'copy': {'name': 'accesspolicycontributorcopy', 'count': \"[if(empty(parameters('accesspolicycontributorobjectids')), 1, length(parameters('accesspolicycontributorobjectids')))]\"}, 'apiversion': '2017-11-15', 'dependson': [\"[resourceid('microsoft.timeseriesinsights/environments/', parameters('environmentname'))]\"], 'properties': {'principalobjectid': \"[parameters('accesspolicycontributorobjectids')[copyindex()]]\", 'roles': ['contributor']}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[parameters('name')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('name'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', parameters('name'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Key Vault and assigns permissions to the supplied objectId (principal).\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'tenantid': \"[parameters('tenantid')]\", 'accesspolicies': [{'objectid': \"[parameters('objectid')]\", 'tenantid': \"[parameters('tenantid')]\", 'permissions': {'keys': \"[parameters('keyspermissions')]\", 'secrets': \"[parameters('secretspermissions')]\"}}], 'sku': {'name': \"[parameters('skuname')]\", 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}}{'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2021-04-01-preview', 'name': \"[format('{0}/{1}', parameters('keyvaultname'), parameters('secretname'))]\", 'properties': {'value': \"[parameters('secretvalue')]\"}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'tenantid': '[subscription().tenantid]', 'accesspolicies': [{'objectid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname')), '2018-11-30').principalid]\", 'tenantid': '[subscription().tenantid]', 'permissions': {'secrets': ['get', 'list']}}], 'sku': {'name': 'standard', 'family': 'a'}}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for Table API in two regions and a single table with autoscale throughput.\n\n===\n\n", "truth": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enabletable'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/tables', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var_var'), parameters('tablename'))]\", 'properties': {'resource': {'id': \"[parameters('tablename')]\"}, 'options': {'autoscalesettings': {'maxthroughput': \"[parameters('autoscalemaxthroughput')]\"}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var_var'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enabletable'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for Cassandra API in two regions with a keyspace and table with dedicated throughput.\n\n===\n\n", "truth": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enablecassandra'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/cassandrakeyspaces', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('keyspacename'))]\", 'properties': {'resource': {'id': \"[parameters('keyspacename')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/cassandrakeyspaces/tables', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', format('{0}/{1}', variables('accountname_var'), parameters('keyspacename')), parameters('tablename'))]\", 'properties': {'resource': {'id': \"[parameters('tablename')]\", 'schema': {'columns': [{'name': 'loadid', 'type': 'uuid'}, {'name': 'machine', 'type': 'uuid'}, {'name': 'cpu', 'type': 'int'}, {'name': 'mtime', 'type': 'int'}, {'name': 'load', 'type': 'float'}], 'partitionkeys': [{'name': 'machine'}, {'name': 'cpu'}, {'name': 'mtime'}], 'clusterkeys': [{'name': 'loadid', 'orderby': 'asc'}]}, 'options': {'throughput': \"[parameters('throughput')]\"}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/cassandrakeyspaces', split(format('{0}/{1}', variables('accountname_var'), parameters('keyspacename')), '/')[0], split(format('{0}/{1}', variables('accountname_var'), parameters('keyspacename')), '/')[1])]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enablecassandra'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Premium and an Azure Storage blob container, and uses a private endpoint for Front Door to send traffic to the storage account.\n\n===\n\n", "truth": "  END", "openai_output": "\n\n===\n\n {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('frontdoorprofilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", 'properties': {'hostname': \"[reference(resourceid('microsoft.resources/deployments', 'vnet')).outputs.publicipaddresshostname.value]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[reference(resourceid('microsoft.resources/deployments', 'vnet')).outputs.publicipaddresshostname.value]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.resources/deployments', 'vnet')]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'), variables('frontdoorroutename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Premium including a web application firewall with the Microsoft-managed default and bot protection rule sets.\n\n===\n\n", "truth": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[variables('skuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/securitypolicies', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('securitypolicyname'))]\", 'properties': {'parameters': {'type': 'webapplicationfirewall', 'wafpolicy': {'id': \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"}, 'associations': [{'domains': [{'id': \"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\"}], 'patternstomatch': ['/*']}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\", \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium including a web application firewall with a geo-filtering rule.\n\n===\n\n", "truth": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/securitypolicies', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('securitypolicyname'))]\", 'properties': {'parameters': {'type': 'webapplicationfirewall', 'wafpolicy': {'id': \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"}, 'associations': [{'domains': [{'id': \"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\"}], 'patternstomatch': ['/*']}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\", \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/securitypolicies', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('securitypolicyname'))]\", 'properties': {'parameters': {'type': 'webapplicationfirewall', 'wafpolicy': {'id': \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"}, 'associations': [{'domains': [{'id': \"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\"}], 'patternstomatch': ['/*']}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create API Management service with additional locations\n\n===\n\n", "truth": " {'type': 'microsoft.apimanagement/service', 'apiversion': '2020-12-01', 'name': \"[parameters('apimanagementservicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'premium', 'capacity': \"[parameters('skucount')]\"}, 'properties': {'copy': [{'name': 'additionallocations', 'count': \"[length(parameters('additionallocations'))]\", 'input': {'location': \"[parameters('additionallocations')[copyindex('additionallocations')]]\", 'sku': {'name': 'premium', 'capacity': \"[parameters('skucount')]\"}, 'disablegateway': \"[parameters('disablegatewayinadditionallocation')]\"}}], 'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'apiversionconstraint': {'minapiversion': \"[parameters('minapiversiontoallowoncontrolplane')]\"}, 'customproperties': {'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_ecdsa_with_aes_256_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_ecdsa_with_aes_128_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_256_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_128_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_gcm_sha256': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha256': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha256': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tripledes168': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.protocols.ssl30': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls10': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls11': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.ssl30': 'false', 'microsoft.windowsazure.apimanagement.gateway.protocols.server.http2': 'true'}}} END", "openai_output": " and subnets.\n\n===\n\n {'type': 'microsoft.apimanagement/service', 'apiversion': '2021-08-01', 'name': \"[parameters('apimanagementservicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'virtualnetworktype': 'internal', 'virtualnetworkconfiguration': {'subnetresourceid': \"[variables('subnetref')]\"}, 'customproperties': {'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_gcm_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement. END"}
{"prompt": "\n\n###\n\nCreate an API Management instance having MSI Identity using a template\n\n===\n\n", "truth": " {'type': 'microsoft.apimanagement/service', 'apiversion': '2021-08-01', 'name': \"[format('apiservice{0}', uniquestring(resourcegroup().id))]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\"}, 'identity': {'type': 'systemassigned'}} END", "openai_output": ".\n\n===\n\n {'type': 'microsoft.apimanagement/service', 'apiversion': '2021-01-01-preview', 'name': \"[parameters('apimanagementservicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'identity': {'type': 'systemassigned'}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\"}} END"}
{"prompt": "\n\n###\n\nCreate a storage account and a file share\n\n===\n\n", "truth": " {'name': \"[variables('containergroupname')]\", 'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2019-12-01', 'location': \"[parameters('containerinstancelocation')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('storageaccountname'))]\"], 'properties': {'containers': [{'name': \"[variables('containername')]\", 'properties': {'image': \"[variables('image')]\", 'command': ['az', 'storage', 'share', 'create', '--name', \"[parameters('filesharename')]\"], 'environmentvariables': [{'name': 'azure_storage_key', 'value': \"[listkeys(parameters('storageaccountname'),'2019-06-01').keys[0].value]\"}, {'name': 'azure_storage_account', 'value': \"[parameters('storageaccountname')]\"}], 'resources': {'requests': {'cpu': \"[variables('cpucores')]\", 'memoryingb': \"[variables('memoryingb')]\"}}}}], 'restartpolicy': 'onfailure', 'ostype': 'linux'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot'}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Automation account and create a new Azure Monitor Log Analytics workspace if it doesn't exist, and then link them together.\n\n===\n\n", "truth": " {'type': 'microsoft.automation/automationaccounts', 'apiversion': '2020-01-13-preview', 'name': \"[parameters('automationaccountname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('workspacename')]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'sku': {'name': 'basic'}}, 'resources': [{'type': 'runbooks', 'apiversion': '2020-01-13-preview', 'name': \"[parameters('samplegraphicalrunbookname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('automationaccountname')]\"], 'properties': {'runbooktype': 'graphpowershell', 'logprogress': 'false', 'logverbose': 'false', 'description': \"[parameters('samplegraphicalrunbookdescription')]\", 'publishcontentlink': {'uri': \"[uri(parameters('_artifactslocation'), concat('scripts/azureautomationtutorial.graphrunbook', parameters('_artifactslocationsastoken')))]\", 'version': '1.0.0.0'}}}, {'type': 'runbooks', 'apiversion': '2020-01-13-preview', 'name': \"[parameters('samplepowershellrunbookname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('automationaccountname')]\"], 'properties': {'runbooktype': 'powershell', 'logprogress': 'false', 'logverbose': 'false', 'description': \"[parameters('samplepowershellrunbookdescription')]\", 'publishcontentlink': {'uri': \"[uri(parameters('_artifactslocation'), concat('scripts/azureautomationtutorial.ps1', parameters('_artifactslocationsastoken')))]\", 'version': '1.0.0.0'}}}, {'type': 'runbooks', 'apiversion': '2020-01-13-preview', 'name': \"[parameters('samplepython2runbookname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('automationaccountname')]\"], 'properties': {'runbooktype': 'python2', 'logprogress': 'false', 'logverbose': 'false', 'description': \"[parameters('samplepython2runbookdescription')]\", 'publishcontentlink': {'uri': \"[uri(parameters('_artifactslocation'), concat('scripts/azureautomationtutorialpython2.py', parameters('_artifactslocationsastoken')))]\", 'version': '1.0.0.0'}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.automation/automationaccounts', 'apiversion': '2021-04-01', 'location': \"[parameters('location')]\", 'name': \"[parameters('automationaccountname')]\", 'tags': {'arotoolkitversion': \"[variables('arotoolkitversion')]\"}, 'comments': 'automation account', 'properties': {'sku': {'name': 'basic'}}}{'type': 'microsoft.automation/automationaccounts/variables', 'apiversion': '2021-04-01', 'name': \"[concat(parameters('automationaccountname'), '/', variables('automationvariables')[copyindex()].name)]\", 'dependson': [\"[resourceid('microsoft.automation/automationaccounts', parameters('automationaccountname'))]\"], 'copy': {'name': 'variableloop', 'count': \"[length(variables('automationvariables'))]\"}, 'properties': {'description': \"[variables('automationvariables')[copyindex()].description]\", 'value': \"[variables('automationvariables')[copyindex()].value]\"}}{'type': 'microsoft.automation/automationaccounts/variables', 'apiversion': '2021-04-01', 'name': \"[concat(parameters('automationaccountname'), '/', variables('internalazuresubscriptionid').name)]\", 'dependson': [\"[resourceid('microsoft.automation/automationaccounts', parameters('automationaccountname'))]\"], 'properties': {'description': \"[variables('internalazuresubscriptionid').description]\", 'isencrypted': true, 'type': 'string', 'value': \"[variables('internalazuresubscriptionid').value]\"}}{'name': \"[concat(parameters('automationaccountname'), '/', variables('azurecredentials'))]\", 'type': 'microsoft.automation/automationaccounts/credentials', 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.automation/automationaccounts', parameters('automationaccountname'))]\"], 'properties': {'description': 'azure subscription credentials', 'password': \"[parameters('azureadminpwd')]\", 'username': \"[parameters('azureadmin')]\"}}{'comments': 'provision the azurerm.profile module first since others are depenedent on it', 'name': \"[concat(parameters('automationaccountname'), '/', variables('azurerm.profile').name)]\", 'type': 'microsoft.automation/automationaccounts/modules', 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.automation/automationaccounts', parameters('automationaccountname'))]\"], 'properties': {'contentlink': {'uri': \"[variables('azurerm.profile').url]\"}}}{'name': \"[concat(parameters('automationaccountname'), '/', variables('psmodules')[copyindex()].name)]\", 'type': 'microsoft.automation/automationaccounts/modules', 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.automation/automationaccounts', parameters('automationaccountname'))]\", \"[variables('azurerm.profile').name]\"], 'copy': {'name': 'modulesloop', 'count': \"[length(variables('psmodules'))]\"}, 'properties': {'contentlink': {'uri': \"[variables('psmodules')[copyindex()].url]\"}}}{'name': \"[concat(parameters('automationaccountname'), '/', variables('runbooks')[copyindex()].name)]\", 'type': 'microsoft.automation/automationaccounts/runbooks', 'apiversion': '2020-01-13-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.automation/automationaccounts', parameters('automationaccountname'))]\", \"[variables('azurerm.profile').name]\", 'modulesloop'], 'tags': {'version': \"[variables('runbooks')[copyindex()].version]\"}, 'copy': {'name': 'runbooksloop END"}
{"prompt": "\n\n###\n\nThis template creates a Recovery Services Vault and enables diagnostics for Azure Backup\n\n===\n\n", "truth": " {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2021-02-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'type': 'microsoft.recoveryservices/vaults/providers/diagnosticsettings', 'name': \"[concat(parameters('vaultname'), '/microsoft.insights/', variables('omsworkspacename'))]\", 'apiversion': '2017-05-01-preview', 'properties': {'name': \"[variables('omsworkspacename')]\", 'storageaccountid': \"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", 'workspaceid': \"[resourceid('microsoft.operationalinsights/workspaces/', variables('omsworkspacename'))]\", 'logs': [{'category': 'azurebackupreport', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}]}, 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults/', parameters('vaultname'))]\", \"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.operationalinsights/workspaces/', variables('omsworkspacename'))]\"]} END", "openai_output": ".\n\n===\n\n {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2020-02-02', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'tier': \"[parameters('skutier')]\"}, 'properties': {}}{'type': 'microsoft.recoveryservices/vaults/backupstorageconfig', 'apiversion': '2020-02-02', 'name': \"[format('{0}/{1}', parameters('vaultname'), 'vaultstorageconfig')]\", 'properties': {'storagemodeltype': \"[parameters('vaultstoragetype')]\", 'crossregionrestoreflag': \"[parameters('enablecrr')]\"}, 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Backup Policy for Recovery Services Vault to protect Azure IaasVMs\n\n===\n\n", "truth": " {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2020-10-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'apiversion': '2016-06-01', 'name': \"[format('{0}/{1}', parameters('vaultname'), parameters('policyname'))]\", 'type': 'microsoft.recoveryservices/vaults/backuppolicies', 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"], 'location': \"[parameters('location')]\", 'properties': {'backupmanagementtype': 'azureiaasvm', 'instantrpretentionrangeindays': 5, 'schedulepolicy': {'schedulerunfrequency': 'weekly', 'schedulerundays': \"[parameters('schedulerundays')]\", 'scheduleruntimes': \"[parameters('scheduleruntimes')]\", 'schedulepolicytype': 'simpleschedulepolicy'}, 'retentionpolicy': {'weeklyschedule': {'daysoftheweek': \"[parameters('schedulerundays')]\", 'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('weeklyretentiondurationcount')]\", 'durationtype': 'weeks'}}, 'monthlyschedule': {'retentionscheduleformattype': 'weekly', 'retentionscheduledaily': {'daysofthemonth': [{'date': 1, 'islast': false}]}, 'retentionscheduleweekly': {'daysoftheweek': \"[parameters('daysoftheweekformontlyretention')]\", 'weeksofthemonth': \"[parameters('weeksofthemonthformonthlyretention')]\"}, 'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('monthlyretentiondurationcount')]\", 'durationtype': 'months'}}, 'yearlyschedule': {'retentionscheduleformattype': 'weekly', 'monthsofyear': \"[parameters('monthsofyear')]\", 'retentionscheduledaily': {'daysofthemonth': [{'date': 1, 'islast': false}]}, 'retentionscheduleweekly': {'daysoftheweek': \"[parameters('daysoftheweekforyearlyretention')]\", 'weeksofthemonth': \"[parameters('weeksofthemonthforyearlyretention')]\"}, 'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('yearlyretentiondurationcount')]\", 'durationtype': 'years'}}, 'retentionpolicytype': 'longtermretentionpolicy'}, 'timezone': \"[parameters('timezone')]\"}} END", "openai_output": "\n\n===\n\n {'condition': \"[equals(parameters('enablenfsbackup'), 'true')]\", 'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2021-01-01', 'name': \"[variables('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'condition': \"[equals(parameters('enablenfsbackup'), 'true')]\", 'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems', 'apiversion': '2021-01-01', 'name': \"[concat(variables('vaultname'), '/', variables('backupfabric'), '/', variables('protectioncontainer'), '/', variables('protecteditem'))]\", 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', variables('vaultname'))]\"], 'properties': {'protecteditemtype': 'microsoft.compute/virtualmachines', 'policyid': \"[resourceid('microsoft.recoveryservices/vaults/backuppolicies', variables('vaultname'), variables('backuppolicyname'))]\"}} END"}
{"prompt": "\n\n###\n\nCreate SQL AvailabilityGroup listener on existing Always ON setup.\n\n===\n\n", "truth": " {'type': 'microsoft.sqlvirtualmachine/sqlvirtualmachinegroups/availabilitygrouplisteners', 'name': \"[concat(parameters('existingfailoverclustername'), '/', parameters('listener'))]\", 'apiversion': '2017-03-01-preview', 'location': \"[parameters('location')]\", 'properties': {'availabilitygroupname': \"[parameters('existingsqlavailabilitygroup')]\", 'loadbalancerconfigurations': [{'privateipaddress': {'ipaddress': \"[parameters('listenerip')]\", 'subnetresourceid': \"[variables('subnetresourceid')]\"}, 'loadbalancerresourceid': \"[variables('loadbalancerresourceid')]\", 'probeport': \"[parameters('probeport')]\", 'sqlvirtualmachineinstances': \"[variables('sqlvmresourceidlist')]\"}], 'port': \"[parameters('listenerport')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('sqlservername')]\", 'properties': {'administratorlogin': \"[parameters('sqladministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqladministratorloginpassword')]\", 'version': '12.0'}, 'resources': [{'type': 'databases', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('sqldatabasename')]\", 'dependson': [\"[parameters('sqlservername')]\"], 'properties': {'edition': \"[parameters('sqledition')]\", 'collation': \"[parameters('sqldatabasecollation')]\", 'maxsizebytes': \"[parameters('sqldatabasemaxsizebytes')]\", 'requestedserviceobjectiveid': \"[parameters('sqleditionperformancelevel')]\"}}, {'type': 'firewallrules', 'apiversion': '2020-02-02-preview', 'dependson': [\"[parameters('sqlservername')]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'location': \"[parameters('location')]\", 'name': 'allowallwindowsazureips', 'properties': {'endipaddress': '0.0.0.0', 'startipaddress': '0.0.0.0'}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus namespace and IP Filter rule\n\n===\n\n", "truth": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('eventhubnamespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {}}{'apiversion': '2018-01-01-preview', 'name': \"[concat(parameters('eventhubnamespacename'), '/', parameters('ipfilterrulename'))]\", 'type': 'microsoft.eventhub/namespaces/ipfilterrules', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('eventhubnamespacename'))]\"], 'properties': {'filtername': \"[parameters('ipfilterrulename')]\", 'action': \"[parameters('ipfilteraction')]\", 'ipmask': \"[parameters('ipmask')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname1')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname1')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname2')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname2')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebussubnetname')]\", 'type': 'subnets', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'addressprefix': \"[parameters('servicebussubnetaddressprefix')]\", 'serviceendpoints': [{'service': 'microsoft.storage'}], 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a vnet and a subnet hosting a Linux virtual machine that accesses an Azure File Share via a private endpoint.\n\n===\n\n", "truth": " {'apiversion': '2021-01-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('filestorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs', 'tier': 'standard'}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot', 'networkacls': {'defaultaction': \"[parameters('networkaclsdefaultaction')]\", 'bypass': 'azureservices'}, 'allowblobpublicaccess': \"[parameters('allowblobpublicaccess')]\"}}{'type': 'microsoft.storage/storageaccounts/fileservices/shares', 'apiversion': '2021-01-01', 'name': \"[concat(parameters('filestorageaccountname'), '/default/', parameters('filesharename'))]\", 'dependson': [\"[variables('filestorageaccountid')]\"], 'properties': {'sharequota': \"[parameters('sharequota')]\"}}{'apiversion': '2021-01-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('blobstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot', 'networkacls': {'defaultaction': \"[parameters('networkaclsdefaultaction')]\", 'bypass': 'azureservices'}, 'allowblobpublicaccess': \"[parameters('allowblobpublicaccess')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.share/accounts', 'apiversion': '2019-06-01', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'kind': 'linux', 'sku': {'name': \"[parameters('shareaccounttype')]\"}, 'properties': {'accesstier': 'hot'}}{'type': 'microsoft.share/accounts/fileservices/shares', 'apiversion': '2019-06-01', 'name': \"[concat(parameters('accountname'), '/default/', parameters('filesharename'))]\", 'dependson': [\"[resourceid('microsoft.share/accounts', parameters('accountname'))]\"], 'properties': {'sharequota': \"[parameters('sharequota')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates function app used as the workload for a custom resource provider in a template deployment.\n\n===\n\n", "truth": " {'condition': \"[parameters('deployfunction')]\", 'type': 'microsoft.customproviders/resourceproviders', 'apiversion': '2018-09-01-preview', 'name': \"[parameters('funcname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('funcname'))]\"], 'properties': {'actions': [{'name': 'ping', 'routingtype': 'proxy', 'endpoint': \"[listsecrets(resourceid('microsoft.web/sites/functions', parameters('funcname'), 'httptrigger1'), '2020-06-01').trigger_url]\"}], 'resourcetypes': [{'name': 'customresources', 'routingtype': 'proxy', 'endpoint': \"[listsecrets(resourceid('microsoft.web/sites/functions', parameters('funcname'), 'httptrigger1'), '2020-06-01').trigger_url]\"}]}}{'type': 'microsoft.customproviders/resourceproviders/customresources', 'name': \"[concat(parameters('funcname'), '/', parameters('azurecustomresourcename'))]\", 'apiversion': '2018-09-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.customproviders/resourceproviders', parameters('funcname'))]\"], 'properties': {'hello': 'world', 'mycustomproperty': \"[parameters('mycustompropertyvalue')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'properties': {'siteconfig': {'appsettings': [{'name': 'azurewebjobsstorage', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'website_contentshare', 'value': \"[tolower(parameters('functionappname'))]\"}, {'name': 'website_run_from_package', 'value': \"[uri(parameters('_artifactslocation'), concat('artifacts/functionapp.zip', parameters('_artifactslocationsastoken')))]\"}]}, 'name': \"[parameters('functionappname')]\", 'clientaffinityenabled': false, 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'clientaffinityenabled': false, 'storageaccountid': \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", 'storageaccountname': \"[variables('storageaccountname')]\", 'contentsharename': \"[tolower(parameters('functionappname'))]\", 'contentsharetype': 'functionapp'}} END"}
{"prompt": "\n\n###\n\nThis will add certificate under azure batch from keyvault pfx with password\n\n===\n\n", "truth": " {'name': \"[variables('certname')]\", 'type': 'microsoft.batch/batchaccounts/certificates', 'apiversion': '2021-01-01', 'properties': {'format': 'pfx', 'thumbprint': \"[parameters('certthumbprint')]\", 'thumbprintalgorithm': 'sha1', 'data': \"[parameters('certdata')]\", 'password': \"[parameters('certpassword')]\"}} END", "openai_output": ".\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'enablesoftdelete': true, 'enablepurgeprotection': true, 'enabledfordeployment': true, 'enabledfordiskencryption': true, 'enabledfortemplatedeployment': true, 'tenantid': \"[parameters('tenantid')]\", 'accesspolicies': [{'tenantid': \"[parameters('tenantid')]\", 'permissions': {'keys': ['unwrapkey', 'wrapkey', 'get']}, 'objectid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', parameters('userassignedidentityname'))).principalid]\"}]}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('userassignedidentityname'))]\"]} END"}
{"prompt": "\n\n###\n\nDeploy Azure Sql Database Managed Instance (SQL MI) inside new Virtual Network\n\n===\n\n", "truth": " {'type': 'microsoft.sql/managedinstances', 'apiversion': '2020-02-02-preview', 'name': \"[parameters('managedinstancename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\"}, 'identity': {'type': 'systemassigned'}, 'properties': {'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'subnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'storagesizeingb': \"[parameters('storagesizeingb')]\", 'vcores': \"[parameters('vcores')]\", 'licensetype': \"[parameters('licensetype')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.sql/managedinstances', 'apiversion': '2019-06-01-preview', 'name': \"[parameters('managedinstancename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'subnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'storagesizeingb': \"[parameters('storagesizeingb')]\", 'vcores': \"[parameters('vcores')]\", 'licensetype': \"[parameters('licensetype')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a SQL Server and a Dedicated SQL pool (formerly SQL DW) with Transparent Data Encryption.\n\n===\n\n", "truth": " {'type': 'microsoft.sql/servers', 'apiversion': '2021-05-01-preview', 'name': \"[parameters('sqlservername')]\", 'location': \"[parameters('location')]\", 'kind': 'v12.0', 'properties': {'administratorlogin': \"[parameters('sqladministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqladministratorpassword')]\", 'version': '12.0', 'publicnetworkaccess': 'enabled', 'restrictoutboundnetworkaccess': 'disabled'}}{'type': 'microsoft.sql/servers/databases', 'apiversion': '2021-05-01-preview', 'name': \"[concat(parameters('sqlservername'), concat('/', parameters('databasesname')))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('sqlservername'))]\"], 'sku': {'name': 'datawarehouse', 'tier': 'datawarehouse', 'capacity': \"[parameters('capacity')]\"}, 'kind': 'v12.0,user,datawarehouse,gen2', 'properties': {'collation': \"[parameters('databasecollation')]\", 'catalogcollation': \"[parameters('databasecollation')]\", 'readscale': 'disabled', 'requestedbackupstorageredundancy': 'geo', 'isledgeron': false}}{'type': 'microsoft.sql/servers/databases/transparentdataencryption', 'apiversion': '2021-05-01-preview', 'name': \"[concat(parameters('sqlservername'), concat(concat('/', parameters('databasesname')), '/current'))]\", 'dependson': [\"[resourceid('microsoft.sql/servers/databases', parameters('sqlservername'), parameters('databasesname'))]\", \"[resourceid('microsoft.sql/servers', parameters('sqlservername'))]\"], 'properties': {'state': \"[parameters('transparentdataencryption')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'name': \"[parameters('sqlservername')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'properties': {'administratorlogin': \"[parameters('sqlserveradministrator')]\", 'administratorloginpassword': \"[parameters('sqlserveradministratorpwd')]\", 'version': '12.0'}}{'type': 'microsoft.sql/servers/databases', 'apiversion': '2020-02-02-preview', 'name': \"[format('{0}/{1}', parameters('sqlservername'), variables('databasename'))]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'basic'}, 'properties': {'collation': 'sql_latin1_general_cp1_ci_as', 'edition': 'basic', 'maxsizebytes': 1073741824}, 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('sqlservername'))]\"]}{'type': 'microsoft.sql/servers/databases/containers', 'apiversion': '2020-02-02-preview', 'name': \"[format('{0}/{1}/{2}', parameters('sqlservername'), variables('databasename'), variables('containername'))]\", 'properties': {'collation': 'sql_latin1_general_cp1_ci_as', 'edition': 'basic', 'maxsizebytes': 1073741824}, 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('sqlservername'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a DDoS protection plan and a virtual network. It also enables the DDoS protection plan for the virtual network.\n\n===\n\n", "truth": " {'type': 'microsoft.network/ddosprotectionplans', 'apiversion': '2020-11-01', 'name': \"[parameters('ddosprotectionplanname')]\", 'location': \"[parameters('location')]\"}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-11-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': 'default', 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}], 'enableddosprotection': \"[parameters('ddosprotectionplanenabled')]\", 'ddosprotectionplan': {'id': \"[resourceid('microsoft.network/ddosprotectionplans', parameters('ddosprotectionplanname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/ddosprotectionplans', parameters('ddosprotectionplanname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[parameters('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'priority': 1000, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '22'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', parameters('networksecuritygroupname'))]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', parameters('networksecuritygroupname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a VNet to VNet connection in the same region using VNet Peering\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'apiversion': '2021-02-01', 'name': \"[format('{0}/peering-to-remote-vnet', parameters('existinglocalvirtualnetworkname'))]\", 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': false, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[resourceid(parameters('existingremotevirtualnetworkresourcegroupname'), 'microsoft.network/virtualnetworks', parameters('existingremotevirtualnetworkname'))]\"}}} END", "openai_output": ".\n\n===\n\n {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnet1cfg').name]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet1cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet1cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet1cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnet2cfg').name]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet2cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet2cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet2cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'apiversion': '2020-06-01', 'name': \"[variables('vnet1cfg').peeringname]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnet1cfg').name)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2cfg').name)]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': false, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2cfg').name)]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door with caching enabled for the defined routing configuration thus caching any static assets for your workload.\n\n===\n\n", "truth": " {'apiversion': '2020-01-01', 'type': 'microsoft.network/frontdoors', 'name': \"[parameters('frontdoorname')]\", 'location': \"[variables('frontdoorlocation')]\", 'properties': {'routingrules': [{'name': 'routingrule1', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'),'frontendendpoint1')]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*', '/site1/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'),parameters('backendpools1').name)]\"}}, 'enabledstate': 'enabled'}}, {'name': 'routingrule2', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'),'frontendendpoint1')]\"}], 'acceptedprotocols': ['https'], 'patternstomatch': ['/site2/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'),parameters('backendpools2').name)]\"}}, 'enabledstate': 'enabled'}}], 'healthprobesettings': [{'name': 'healthprobesettings1', 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}, {'name': 'healthprobesettings2', 'properties': {'path': '/', 'protocol': 'https', 'intervalinseconds': 60}}], 'loadbalancingsettings': [{'name': 'loadbalancingsettings1', 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}, {'name': 'loadbalancingsettings2', 'properties': {'samplesize': 2, 'successfulsamplesrequired': 1}}], 'backendpools': [{'name': \"[parameters('backendpools1').name]\", 'properties': {'copy': [{'name': 'backends', 'count': \"[length(parameters('backendpools1').backends)]\", 'input': {'address': \"[parameters('backendpools1').backends[copyindex('backends')].address]\", 'httpport': \"[parameters('backendpools1').backends[copyindex('backends')].httpport]\", 'httpsport': \"[parameters('backendpools1').backends[copyindex('backends')].httpsport]\", 'weight': \"[parameters('backendpools1').backends[copyindex('backends')].weight]\", 'priority': \"[parameters('backendpools1').backends[copyindex('backends')].priority]\", 'enabledstate': \"[parameters('backendpools1').backends[copyindex('backends')].enabledstate]\"}}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'),'loadbalancingsettings1')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'),'healthprobesettings1')]\"}}}, {'name': \"[parameters('backendpools2').name]\", 'properties': {'copy': [{'name': 'backends', 'count': \"[length(parameters('backendpools2').backends)]\", 'input': {'address': \"[parameters('backendpools2').backends[copyindex('backends')].address]\", 'httpport': \"[parameters('backendpools2').backends[copyindex('backends')].httpport]\", 'httpsport': \"[parameters('backendpools2').backends[copyindex('backends')].httpsport]\", 'weight': \"[parameters('backendpools2').backends[copyindex('backends')].weight]\", 'priority': \"[parameters('backendpools2').backends[copyindex('backends')].priority]\", 'enabledstate': \"[parameters('backendpools2').backends[copyindex('backends')].enabledstate]\"}}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'),'loadbalancingsettings2')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'),'healthprobesettings2')]\"}}}], 'frontendendpoints': [{'name': 'frontendendpoint1', 'properties': {'hostname': \"[variables('frontdoorhostname')]\", 'sessionaffinityenabledstate': 'disabled', 'sessionaffinityttlseconds': 0}}], 'enabledstate': 'enabled'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.network/frontdoors', 'apiversion': '2020-05-01', 'name': \"[parameters('frontdoorname')]\", 'location': 'global', 'properties': {'routingconfiguration': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), 'frontendendpoint1')]\"}], 'acceptedprotocols': ['http'], 'patternstomatch': ['/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), 'backendpool1')]\"}}, 'enabledstate': 'enabled'}}], 'healthprobesettings': [{'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), 'healthprobesettings1')]\"}], 'loadbalancingsettings': [{'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), 'loadbalancingsettings1')]\"}], 'backendpools': [{'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), 'backendpool1')]\"}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), 'loadbalancingsettings1')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), 'healthprobesettings1')]\"}}}], 'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), 'frontendendpoint1')]\"}], 'enabledstate': 'enabled'}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('vnetsubnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkname')]\", \"[variables('publicipaddressname')]\"], 'properties': {'sku': {'name': \"[parameters('applicationgatewaysize')]\", 'tier': 'waf_v2', 'capacity': \"[parameters('applicationgatewaycapacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[variables('publicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}, {'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}], 'webapplicationfirewallconfiguration': {'enabled': \"[parameters('wafenabled')]\", 'firewallmode': \"[parameters('wafmode')]\", 'rulesettype': \"[parameters('wafrulesettype')]\", 'rulesetversion': \"[parameters('wafrulesetversion')]\"}}} END", "openai_output": " with public IP address\n\n===\n\n {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('applicationgatewaysize')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}, {'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'pickhostnamefrombackendaddress': true, 'probeenabled': \"[parameters('probeenabled')]\", 'probe': {'id': \"[resourceid('microsoft.network/applicationgateways/probes',variables('applicationgatewayname'), 'probe1')]\"}}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway in front of a web app with IP restriction\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'static'}, 'sku': {'name': 'standard'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.web/sites/', parameters('sitename'))]\"], 'properties': {'sku': {'name': 'standard_v2', 'tier': 'standard_v2', 'capacity': 2}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[variables('publicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[reference(parameters('sitename')).defaulthostname]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'pickhostnamefrombackendaddress': true, 'probeenabled': true, 'probe': {'id': \"[resourceid('microsoft.network/applicationgateways/probes/',variables('applicationgatewayname'), 'probe1')]\"}}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations/',variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports/',variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners/',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools/',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection/',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}], 'probes': [{'name': 'probe1', 'properties': {'protocol': 'http', 'path': '/', 'interval': 30, 'timeout': 10, 'unhealthythreshold': 3, 'minservers': 0, 'pickhostnamefrombackendhttpsettings': true}}]}} END", "openai_output": ".\n\n===\n\n {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('applicationgatewaysize')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}, {'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'pickhostnamefrombackendaddress': true, 'probeenabled': \"[parameters('probeenabled')]\", 'probe': {'id': \"[resourceid('microsoft.network/applicationgateways/probes',variables('applicationgatewayname'), 'probe1')]\"}}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template provisions Azure Bastion and dependent resources in a Virtual Network.\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'condition': \"[equals(parameters('vnetneworexisting'), 'new')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetipprefix')]\"]}, 'subnets': [{'name': \"[variables('bastionsubnetname')]\", 'properties': {'addressprefix': \"[parameters('bastionsubnetipprefix')]\"}}]}}{'condition': \"[equals(parameters('vnetneworexisting'), 'existing')]\", 'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}', parameters('vnetname'), variables('bastionsubnetname'))]\", 'properties': {'addressprefix': \"[parameters('bastionsubnetipprefix')]\"}}{'type': 'microsoft.network/bastionhosts', 'apiversion': '2020-05-01', 'name': \"[parameters('bastionhostname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), variables('bastionsubnetname'))]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), variables('bastionsubnetname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[parameters('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'priority': 1000, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '22'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'zones': [\"[parameters('zone')]\"], 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4', 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}, 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('networkinterfacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', parameters('networksecuritygroupname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups',parameters('networksecuritygroupname'))]\"}}} END"}
{"prompt": "\n\n###\n\nCreate a sandbox setup of Azure Firewall with Linux jumpbox and Linux server\n\n===\n\n", "truth": " {'type': 'microsoft.network/routetables', 'name': \"[variables('azfwroutetablename')]\", 'apiversion': '2019-04-01', 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'azfwdefaultroute', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('nexthopip')]\"}}]}}{'comments': \"simple network security group for subnet [variables('serverssubnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'name': \"[parameters('virtualnetworkname')]\", 'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'displayname': \"[parameters('virtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('jumpboxsubnetname')]\", 'properties': {'addressprefix': \"[variables('jumpboxsubnetprefix')]\"}}, {'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[variables('azurefirewallsubnetprefix')]\"}}, {'name': \"[variables('serverssubnetname')]\", 'properties': {'addressprefix': \"[variables('serverssubnetprefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\"}, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'name': \"[concat(variables('publicipnameprefix'), add(copyindex(), 1))]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-04-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberoffirewallpublicipaddresses')]\"}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'name': \"[variables('jumpboxpublicipaddressname')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-04-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'name': \"[variables('jumpboxnsgname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-04-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'mynetworksecuritygrouprulessh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('jumpboxnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\"}, 'subnet': {'id': \"[variables('jumpboxsubnetid')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('servernicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('serversubnetid')]\"}}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/azurefirewalls', 'name': \"[variables('firewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", 'publicipcopy'], 'properties': {'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'applicationrulecollections': [{'name': 'apprc1', 'properties': {'priority': 101, 'action': {'type': 'allow'}, 'rules': [{'name': 'apprule1', 'protocols': [{'port': '80', 'protocoltype': 'http'}, {'port': '443', 'protocoltype': 'https'}], 'targetfqdns': ['*microsoft.com']}]}}], 'networkrulecollections': [{'name': 'netrc1', 'properties': {'priority': 200, 'action': {'type': 'allow'}, 'rules': [{'name': 'netrule1', 'protocols': ['tcp'], 'sourceaddresses': ['10.0.2.0/24'], 'destinationaddresses': ['*'], 'destinationports': ['8000-8999']}]}}], 'additionalproperties': {'network.snat.privateranges': \"[parameters('privateranges')]\"}}} END", "openai_output": ", and add the Azure SQL Server with Auditing enabled to your SQL Server.\n\n===\n\n {'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('sqlservername')]\", 'properties': {'administratorlogin': \"[parameters('sqlserveradministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqlserveradministratorloginpassword')]\", 'version': '12.0'}, 'resources': [{'type': 'firewallrules', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('sqlservername'),'firewall')]\", 'properties': {'startipaddress': '0.0.0.0', 'endipaddress': '0.0.0.0'}, 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('sqlservername'))]\"]}]} END"}
{"prompt": "\n\n###\n\nThis template adds and secures a custom domain to your Front Door.\n\n===\n\n", "truth": " {'type': 'microsoft.network/frontdoors', 'apiversion': '2020-01-01', 'name': \"[parameters('frontdoorname')]\", 'location': 'global', 'properties': {'enabledstate': 'enabled', 'frontendendpoints': [{'name': \"[variables('frontendendpointdefaultname')]\", 'properties': {'hostname': \"[variables('frontendendpointdefaulthostname')]\", 'sessionaffinityenabledstate': 'disabled'}}, {'name': \"[variables('frontendendpointcustomname')]\", 'properties': {'hostname': \"[parameters('customdomainname')]\", 'sessionaffinityenabledstate': 'disabled'}}], 'loadbalancingsettings': [{'name': \"[variables('loadbalancingsettingsname')]\", 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}], 'healthprobesettings': [{'name': \"[variables('healthprobesettingsname')]\", 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}], 'backendpools': [{'name': \"[variables('backendpoolname')]\", 'properties': {'backends': [{'address': \"[parameters('backendaddress')]\", 'backendhostheader': \"[parameters('backendaddress')]\", 'httpport': 80, 'httpsport': 443, 'weight': 50, 'priority': 1, 'enabledstate': 'enabled'}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), variables('loadbalancingsettingsname'))]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), variables('healthprobesettingsname'))]\"}}}], 'routingrules': [{'name': \"[variables('routingrulename')]\", 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), variables('frontendendpointdefaultname'))]\"}, {'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), variables('frontendendpointcustomname'))]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), variables('backendpoolname'))]\"}}, 'enabledstate': 'enabled'}}]}}{'type': 'microsoft.network/frontdoors/frontendendpoints/customhttpsconfiguration', 'apiversion': '2020-07-01', 'name': \"[format('{0}/{1}/{2}', parameters('frontdoorname'), variables('frontendendpointcustomname'), 'default')]\", 'properties': {'protocoltype': 'servernameindication', 'certificatesource': 'frontdoor', 'frontdoorcertificatesourceparameters': {'certificatetype': 'dedicated'}, 'minimumtlsversion': '1.2'}, 'dependson': [\"[resourceid('microsoft.network/frontdoors', parameters('frontdoorname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.network/frontdoors', 'apiversion': '2020-05-01', 'name': \"[parameters('frontdoorname')]\", 'location': 'global', 'properties': {'enabledstate': 'enabled', 'frontendendpoints': [{'name': \"[variables('frontendendpointname')]\", 'properties': {'hostname': \"[variables('frontendendpointname')]\", 'sessionaffinityenabledstate': 'disabled'}}], 'loadbalancingsettings': [{'name': \"[variables('loadbalancingsettingsname')]\", 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}], 'healthprobesettings': [{'name': \"[variables('healthprobesettingsname')]\", 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}], 'backendpools': [{'name': \"[variables('backendpoolname')]\", 'properties': {'backends': [{'address': \"[parameters('backendaddress')]\", 'backendhostheader': \"[parameters('backendaddress')]\", 'httpport': 80, 'httpsport': 443, 'weight': 50, 'priority': 1, 'enabledstate': 'enabled'}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), variables('loadbalancingsettingsname'))]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), variables('healthprobesettingsname'))]\"}}}], 'routingrules': [{'name': \"[variables('routingrulename')]\", 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), variables('frontendendpointname'))]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), variables('backendpoolname'))]\"}}, 'enabledstate': 'enabled'}}], 'healthprobesettings': [{'name': \"[variables('healthprobesettingsname')]\", 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}], 'backendpools': [{'name': \"[variables('backendpoolname')]\", 'properties': {'backends': [{'address': \"[parameters('backendaddress')]\", 'backendhostheader': \"[parameters('backendaddress')]\", 'httpport': 80, 'httpsport': 443, 'weight': 50, 'priority': 1, 'enabledstate': 'enabled'}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), variables('loadbalancingsettingsname'))]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), variables('healthprobesettingsname'))]\"}}}], 'routes': [{'name': \"[variables('routes')[copyindex()]]\", 'copy': {'name': 'routescopy', 'count': \"[length(variables('routes'))]\"}, 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), variables('frontendendpointname'))]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'routes': [{'name': \"[variables('routes')[copyindex()]]\", 'copy': {'name': 'routescopy', 'count': \"[length(variables('routes'))]\"}, 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendend END"}
{"prompt": "\n\n###\n\nThis template creates a standard internal Azure Load Balancer with a rule load-balancing port 80\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-05-01', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2021-05-01', 'name': \"[format('{0}/{1}', variables('virtualnetworkname'), variables('subnetname'))]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"]}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2021-05-01', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('lbbackendname'))]\"}]}}]}, 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"]}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2021-05-01', 'name': \"[variables('loadbalancername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbsku')]\"}, 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfrontendname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('lbbackendname')]\"}], 'loadbalancingrules': [{'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancername'), variables('lbfrontendname'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('lbbackendname'))]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('loadbalancername'), variables('lbprobename'))]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enabletcpreset': true, 'disableoutboundsnat': true, 'idletimeoutinminutes': 15}, 'name': \"[variables('lbrulename')]\"}], 'probes': [{'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 2}, 'name': \"[variables('lbprobename')]\"}]}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"]} END", "openai_output": " and a virtual network rule with a subnet in the same subnet.\n\n===\n\n {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix')]\"}}, {'name': \"[parameters('subnet2name')]\", 'properties': {'addressprefix': \"[parameters('subnet2prefix')]\"}}]}}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-06-01', 'name': \"[parameters('loadbalancername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('vnetname'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[parameters('loadbalancerfrontendname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnet1name'))]\"}}}], 'backendaddresspools': [{'name': \"[parameters('loadbalancerbackendname')]\"}], 'loadbalancingrules': [{'name': 'lbrule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', parameters('loadbalancername'), parameters('loadbalancerfrontendname'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', parameters('loadbalancername'), parameters('loadbalancerbackendname'))]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'loaddistribution': 'sourceip', 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', parameters('loadbalancername'), parameters('loadbalancerprobename'))]\"}}}], 'probes': [{'name': \"[parameters('loadbalancerprobename')]\", 'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': '5', 'numberofprobes': '2'}}], 'inboundnatpools': [{'name': \"[parameters('loadbalancernatpoolname')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', parameters('loadbalancername'), parameters('loadbalancerfrontendname'))]\"}, 'protocol': 'tcp', 'frontendportrangestart': 50000, 'frontendportrangeend': 50099, 'backendport': 3389}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VNET to VNET connection across two different regions\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname1')]\", 'location': \"[parameters('location1')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix1')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name1')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix1')]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix1')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname2')]\", 'location': \"[parameters('location2')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix2')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name2')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix2')]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix2')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('gatewaypublicipname1')]\", 'location': \"[parameters('location1')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('gatewaypublicipname2')]\", 'location': \"[parameters('location2')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[parameters('gatewayname1')]\", 'location': \"[parameters('location1')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', parameters('gatewaypublicipname1'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname1'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname1'), 'gatewaysubnet')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',parameters('gatewaypublicipname1'))]\"}}, 'name': 'vnetgatewayconfig1'}], 'gatewaytype': 'vpn', 'vpntype': 'routebased', 'enablebgp': false}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[parameters('gatewayname2')]\", 'location': \"[parameters('location2')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', parameters('gatewaypublicipname2'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname2'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname2'), 'gatewaysubnet')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',parameters('gatewaypublicipname2'))]\"}}, 'name': 'vnetgatewayconfig2'}], 'gatewaytype': 'vpn', 'vpntype': 'routebased', 'enablebgp': false}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/connections', 'name': \"[parameters('connectionname1')]\", 'location': \"[parameters('location1')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways/', parameters('gatewayname1'))]\", \"[resourceid('microsoft.network/virtualnetworkgateways/', parameters('gatewayname2'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',parameters('gatewayname1'))]\"}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',parameters('gatewayname2'))]\"}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\"}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/connections', 'name': \"[parameters('connectionname2')]\", 'location': \"[parameters('location2')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways/', parameters('gatewayname1'))]\", \"[resourceid('microsoft.network/virtualnetworkgateways/', parameters('gatewayname2'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',parameters('gatewayname2'))]\"}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',parameters('gatewayname1'))]\"}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\"}} END", "openai_output": ".\n\n===\n\n {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'privateendpointnetworkpolicies': 'disabled'}}, {'name': \"[variables('subnetappservicename')]\", 'properties': {'addressprefix': \"[variables('subnetappserviceprefix')]\", 'delegations': [{'name': 'delegation', 'properties': {'servicename': 'microsoft.web/serverfarms'}}]}}]}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-06-01', 'name': \"[variables('privateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetname')]\", \"[variables('sqlservername')]\"], 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnet1name'))]\"}, 'privatelinkserviceconnections': [{'name': \"[variables('privateendpointname')]\", 'properties': {'privatelinkserviceid': \"[resourceid('microsoft.sql/servers',variables('sqlservername'))]\", 'groupids': ['sqlserver']}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-01-01', 'name': \"[parameters('privatednszonename')]\", 'location': 'global', 'dependson': [\"[variables('vnetname')]\"]}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-01-01', 'name': \"[concat(parameters('privatednszonename'), '/', parameters('privatednszonename'), '-link')]\", 'location': 'global', 'dependson': [\"[resourceid('microsoft.network/privatednszones', parameters('privatednszonename'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}}}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-06-01', 'name': \"[variables('pvtendpointdnsgroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/privatednszones', parameters('privatednszonename'))]\", \"[variables('privateendpointname')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'config1', 'properties': {'privatednszoneid': \"[resourceid('microsoft.network/privatednszones', parameters('privatednszonename'))]\"}}]}}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-06-01', 'name': \"[variables('privateendpointdnsgroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/privatednszones', parameters('privatednszonename'))]\", \"[variables('privateendpointname')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'config1', 'properties': {'privatednszoneid': \"[resourceid('microsoft.network/privatednszones', parameters('privatednszonename'))]\"}}]}}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-06-01', 'name': \"[variables('privateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/privatednszones', parameters('privatednszonename'))]\", \"[ END"}
{"prompt": "\n\n###\n\nLoad Balancer with 2 public IP addresses (VIP), each VIP associated to one LB rule\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname1')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforlbip')]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname2')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\"}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnetref')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('loadbalancername'), 'loadbalancerbackend')]\"}]}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('loadbalancername')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname1'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname2'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend1', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid1')]\"}}}, {'name': 'loadbalancerfrontend2', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid2')]\"}}}], 'backendaddresspools': [{'name': 'loadbalancerbackend'}], 'loadbalancingrules': [{'name': 'lbruleforvip1', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid1')]\"}, 'backendaddresspool': {'id': \"[variables('lbbackendpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 443, 'backendport': 443, 'probe': {'id': \"[variables('lbprobeid')]\"}}}, {'name': 'lbruleforvip2', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid2')]\"}, 'backendaddresspool': {'id': \"[variables('lbbackendpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 443, 'backendport': 444, 'probe': {'id': \"[variables('lbprobeid')]\"}}}], 'probes': [{'name': 'tcpprobe', 'properties': {'protocol': 'tcp', 'port': 445, 'intervalinseconds': 5, 'numberofprobes': 2}}]}} END", "openai_output": ") and load the vipprefix on the vipprefixes to be used in the vipprefixes' own vipprefix'))]\", 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'vnet01'}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('nsgname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', concat(variables('vm01name'), '_nic_pip'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('subnet1prefix')]\", \"[variables('subnet2prefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}, {'name': \"[variables('subnet2name')]\", 'properties': {'addressprefix': \"[variables('subnet2prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}]}}{'name': \"[concat(variables('vm01name'), '_nic_pip')]\", 'type': 'microsoft.network/networkinterfaces', 'location': \"[parameters('location')]\", 'apiversion': '2020-05-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\", \"[resourceid('microsoft.network/loadbalancers/', variables('lbname'))]\"], 'tags': {'displayname': 'iis01 nic pip'}, 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnet1name'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('lbbackendpoolname'))]\"}], 'loadbalancerinboundnatrules': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatrules', variables('lbname'), concat(variables('vm01name'), '_nic_pip'),'_nat_pip'))]\"}]}}]}}{'name': \"[concat(variables('vm02name'), '_nic_pip')]\", 'type': 'microsoft.network/networkinterfaces', 'location': \"[parameters('location')]\", 'apiversion': '2020-05-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\", \"[resourceid('microsoft.network/loadbalancers/', variables('lbname'))]\"], 'tags': {'displayname': 'appvm01 nic pip'}, 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnet2name'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('lbbackendpoolname'))]\"}], 'loadbalancerinboundnatrules': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatrules', variables('lbname'), concat(variables('vm02name'), '_nic_pip'),'_nat_pip'))]\"}]}}]}}{'name': \"[concat(variables('vm03name'), '_nic_pip')]\", 'type': 'microsoft.network/networkinterfaces', 'location': \"[parameters('location')]\", 'apiversion': '2020-05-01', 'dependson': [\"[resourceid('microsoft END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": " {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-03-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[tenantresourceid('microsoft.authorization/roledefinitions', parameters('roledefinitionid'))]\", 'principalid': \"[parameters('principalid')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'shared-resources', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-11-01', 'comments': 'resources that are shared within the infrastructure environment', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('share-resourcesuri')]\", 'contentversion': '1.0.0.1'}, 'parameters': {'resourceapiversion': {'value': \"[variables('resourceapiversion')]\"}, 'networkspec': {'value': \"[variables('networkspec')]\"}, 'tableauasname': {'value': \"[variables('vmspec').tableauasname]\"}, 'masternodeasname': {'value': \"[variables('vmspec').masternodeasname]\"}, 'datanodeasname': {'value': \"[variables('vmspec').datanodeasname]\"}, 'clouderatags': {'value': \"[variables('clouderatags')]\"}, 'tableautags': {'value': \"[variables('tableautags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(variables('vmname'),'_datadisk1')]\", 'disksizegb': '10', 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'), '/setupdatadisk')]\", 'apiversion': '2017-03-30', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/setup_data_disk.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': 'bash setup_data_disk.sh'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[variables('nsgid')]\"}}}]}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'neo4j', 'properties': {'description': 'allow http connections', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '7474', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'neo4j-ssl', 'properties': {'description': 'allow https connections', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '7473', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}, {'name': 'neo4j-remote-shell', 'properties': {'description': 'remote shell connections', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '1337', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 102, 'direction': 'inbound'}}, {'name': 'ssh', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'name': \"[parameters('webapplication-hostingplannamename')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'tags': {'displayname': 'webapplication-hostingplanname'}, 'sku': {'name': \"[parameters('webapplication-hostingplannamesku')]\", 'tier': \"[parameters('webapplication-hostingplantiersku')]\"}, 'properties': {'name': \"[parameters('webapplication-hostingplannamename')]\", 'workersize': \"[parameters('webapplication-hostingplannameworkersize')]\", 'numberofworkers': 1}}{'name': \"[parameters('webapplicationwebappname')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'apiversion': '2015-08-01', 'dependson': [\"[resourceid('microsoft.web/serverfarms/', parameters('webapplication-hostingplannamename'))]\", \"[resourceid('microsoft.storage/storageaccounts/', parameters('storageaccountname'))]\", \"[resourceid('microsoft.sql/servers/', parameters('sqlservername'))]\", \"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'tags': {\"[concat('hidden-related:', resourcegroup().id, '/providers/microsoft.web/serverfarms/', parameters('webapplication-hostingplannamename'))]\": 'resource', 'displayname': 'webapplication-webapp'}, 'properties': {'name': \"[parameters('webapplicationwebappname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms/', parameters('webapplication-hostingplannamename'))]\", 'websocketsenabled': true, 'alwayson': false}, 'resources': [{'name': 'connectionstrings', 'type': 'config', 'apiversion': '2015-08-01', 'dependson': [\"[resourceid('microsoft.web/sites/', parameters('webapplicationwebappname'))]\"], 'tags': {'displayname': 'webapplication-webapp-connectionstrings'}, 'properties': {'episerverazureblobs': {'value': \"[concat(variables('storageconnectionstringprefix'), listkeys(variables('storageid'), variables('storageaccountapiversion')).key1)]\", 'type': 'custom'}, 'episerverazureevents': {'value': \"[listkeys(variables('defaultauthruleresourceid'), variables('servicebusapiversion')).primaryconnectionstring]\", 'type': 'custom'}, 'episerverdb': {'value': \"[concat('server=tcp:', reference(resourceid('microsoft.sql/servers/', parameters('sqlservername'))).fullyqualifieddomainname, ',1433;initial catalog=', parameters('sql-databasename'), ';user id=', parameters('sqlserveradminlogin'), '@', parameters('sqlservername'), ';password=', parameters('sqlserveradminloginpassword'), ';trusted_connection=false;encrypt=true;connection timeout=30;multipleactiveresultsets=true')]\", 'type': 'sqlazure'}}}, {'name': 'appsettings', 'type': 'config', 'apiversion': '2015-08-01', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('webapplicationwebappname'))]\"], 'tags': {'displayname': 'webapplication-webapp-applicationsettings'}, 'properties': {'episerver:readonlyconfigurationapi': 'true'}}, {'name': 'web', 'type': 'config', 'apiversion': '2015-08-01', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('webapplicationwebappname'))]\"], 'tags': {'displayname': 'webapplication-webapp-generalsettings'}, 'properties': {'websocketsenabled': 'true', 'alwayson': 'true'}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2021-02-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[variables('networksecuritygroupname')]\"}, 'properties': {'securityrules': [{'name': 'http', 'properties': {'description': 'http endpoint', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'httpauth', 'properties': {'description': 'http windows auth endpoint', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '4248', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1100, 'direction': 'inbound'}}, {'name': 'https', 'properties': {'description': 'https endpoint', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1200, 'direction': 'inbound'}}, {'name': 'httpsauth', 'properties': {'description': 'https windows auth endpoint', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '4244', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1300, 'direction': 'inbound'}}, {'name': 'rdp', 'properties': {'description': 'rdp endpoint', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2017-06-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups/', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-08-01', 'name': \"[variables('networkinterfacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressename'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('privatesubnet'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('publicsubnet'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'name': 'vns3 controller'}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[variables('vnsstaticip')]\", 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressename'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('publicsubnet'))]\"}, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': false, 'enableipforwarding': true, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'tags': {'name': 'vns3 controller'}, 'properties': {'securityrules': [{'name': 'vns3_web_api_port', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '8000', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'vns3_udp_1194', 'properties': {'protocol': 'udp', 'sourceportrange': '1194', 'destinationportrange': '1194', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'vns3_udp_500', 'properties': {'protocol': 'udp', 'sourceportrange': '500', 'destinationportrange': '500', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 300, 'direction': 'inbound'}}, {'name': 'vns3_nat_t', 'properties': {'protocol': 'udp', 'sourceportrange': '4500', 'destinationportrange': '4500', 'sourceaddressprefix': '1.2.3.4/32', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 400, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-12-01', 'name': \"[variables('vns3controllername')]\", 'location': \"[parameters('location')]\", 'plan': {'name': 'cohesive-vns3-4_11_x-free', 'product': 'vns3_4x_network_security', 'publisher': 'cohesive'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccount'))]\"], 'tags': {'name': 'vns3 controller'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('instancesize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'cohesive', 'offer': 'vns3_4x_network_security', 'sku': 'cohesive-vns3-4_11_x-free', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('vns3controllername'), '-disc')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}, 'disksizegb': 30}}, 'osprofile': {'computername': \"[variables('vns3controllername')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': {'disablepasswordauthentication': false, 'provisionvmagent': true}, 'allowextensionoperations': true}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccount'),'2021-01-01').primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-08-01', 'name': \"[variables('networkinterfacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressename'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('virtualsubnetname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'name': 'vns3 controller'}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[variables('vnsstaticip')]\", 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressename'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('virtualsubnetname'))]\"}, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': false, 'enableipforwarding': true, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'tags': {'name': 'vns3 controller'}, 'properties': {'securityrules': [{'name': 'vns3_web_api_port', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '8000', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'vns3_udp_1194', 'properties': {'protocol': 'udp', 'sourceportrange': '1194', 'destinationportrange': '1194', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'vns3_udp_500', 'properties': {'protocol': 'udp', 'sourceportrange': '500', 'destinationportrange': '500', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 300, 'direction': 'inbound'}}, {'name': 'vns3_nat_t', 'properties': {'protocol': 'udp', 'sourceportrange': '4500', 'destinationportrange': '4500', 'sourceaddressprefix': '1.2.3.4/32', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 400, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-08-01', 'name': \"[variables('publicipaddressename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'basic', 'tier': 'regional'}, 'tags': {'name': 'vns3 controller'}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('newstorageaccountname')]\", 'apiversion': '2021-01-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('managementpublicipaddrname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[concat(variables('clusterfqdn'), '-manage')]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('nodespublicipaddrname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('clusterfqdn')]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups',variables('mastersnsgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups',variables('nodesnsgname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefixmasters')]\", \"[variables('addressprefixnodes')]\"]}, 'subnets': [{'name': \"[variables('subnetnamemasters')]\", 'properties': {'addressprefix': \"[variables('subnetprefixmasters')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups',variables('mastersnsgname'))]\"}}}, {'name': \"[variables('subnetnamenodes')]\", 'properties': {'addressprefix': \"[variables('subnetprefixnodes')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups',variables('nodesnsgname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2019-07-01', 'type': 'microsoft.compute/virtualmachinescalesets', 'location': \"[variables('location')]\", 'name': \"[concat(variables('agentvmnameprefix'), '-vmss')]\", 'sku': {'capacity': \"[variables('agentcount')]\", 'name': \"[variables('agentvmsize')]\", 'tier': 'standard'}, 'tags': {'creationsource': \"[concat('acsengine-', variables('agentvmnameprefix'), '-vmss')]\"}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('masterpublicipaddressname'))]\", \"[variables('virtualnetworkname')]\", \"[resourceid('microsoft.network/loadbalancers', variables('agentlbname'))]\"], 'properties': {'upgradepolicy': {'mode': 'automatic'}, 'virtualmachineprofile': {'networkprofile': {'networkinterfaceconfigurations': [{'name': 'nic', 'properties': {'ipconfigurations': [{'name': 'nicipconfig', 'properties': {'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('agentlbname'), variables('agentlbbackendpoolname'))]\"}], 'subnet': {'id': \"[variables('agentvnetsubnetid')]\"}}}], 'primary': true}}]}, 'osprofile': {'adminusername': \"[variables('adminusername')]\", 'computernameprefix': \"[variables('agentvmnameprefix')]\", 'customdata': '[base64(concat(\\'#cloud-config\\n\\nwrite_files:\\n -  encoding: gzip\\n    content: !!binary |\\n        h4siackuqlkaa81zbxpbnhl+zl+xptw1nyaipdsxoweug8dwlp6rly9kd24uawoihczwfkeqogsfq/9+u3ihsfmk3tazowuskuac++wunt0fs/ndoeqycmtkxpn2/vzp24ejky2t6ylnmfywfaqniubqzzi8fbcecvxmegljjhvluwlqwmes0lqskuwaijgdiyxnsqjgamciuuf55rzxrwhj9vbl/smtiudyfzhdm6x+gkge5aqcw8/j0usaj6hzrugrwqk0io0i3ljovciy34uz4t5maspjx/2jf/ugn476p+f9ye/tz73b8kr/1vxbzxan2flrcngkc5azktcm1egchg4veooj/uxzrbdx317agfnb793jv3gk40benqygf4fhxwmcflh0dv9zoehddnv0+opsqxgxj2co8nnpw6pbyfnf5eae37xcem8ph73h5duzhq3/t6x38+nz4wmvezurumui6opglk/f4kpx2icniwg/g+qx7mqw+ezdr63g77983puglz983h/wcd+2w12aa5fumftxr5y9/8xod3ntce51rhenfjk6gebfix5d4jzn4+s2fdgk12tejblucbjheslxos6jzqdk94ed64adg8wlffscnh16sk5x5vh8uxpwr8sa4dvy3t/irs2y6vrk8k7iitptg/c4oiytsmtd/+i/z1wtrh6zt+/dewa7yf5p+mxmfda/el/a5/ecpwpy123j0fjkkcbp4b7dxc27fa2xwggaxtxrox/gfb5mrzrcrknzqujz5lqjbnzcyrg+qomfepdp0ijf9bgqzvqngxf7cyzmwojzdbuwwuymqriv3aquawvzyeo/qiwyyczgylcyo5yzg30/tvrfppzpoe1rxjhxpieyrgmctfwgcgl4o7pmkkfyobcrmenczjnfesekcpmwa2zwu00uddylqxyx8gojriydneurzvmtotnahad0bjd8v0fiwwqcpufp1nna6ch0luwfj9fya6m8932baq8qdseeluhtmmdstlvm1/mrdls4vcaluok5v0weafmxp5jxx9oody5a6nntpjrfai9gjcirs1xs93aaqtpfcqxs4ro1vevqwzx1eq0va89mntbajqdaj+faa37jfpupl437tty83jwftsj0szu8hrmfjs+g24rtom24ajujncppeqtqhopgioqqcimq8qfe1hhinkzzngxry8voizfdin0c0lozivbzvweebsjqzg6tp9pa5qmx8cpeystyuwaxzrdqfvrag2dbeqxhu+2xehzubzohs8ziolsza0wul8nkyvdncczq26zzwxcslkiictfg2vd0zlz0viika+7btoxihhbmu4gmsn+cmadslp3vl2fyfk08dthjvc3ftndkdhxbaty8pdyv++addqkydtg9izmcgpnzevio+tgn7tw0zkq88ytizdgz7hpsh+guu+ttbmvreqyhnrevxsjejoavavicrowiqm8xfe2tqf2bpvkgsylhkcbcgomsuiauwxilklzwwbsec5ahezgvspcywk69paqr7bqxfbgancbavvseaaddtcewklk+cpg10c/vquvu0vtn/cfygkmeboe3gpdhzzocfoo5z/mk5k0iyk6l/nb4bgbx/wtg10llr8u2r7sgi+g3jfqijswisgatdsmdisx5ypnkescxwspyhdy2hwzsxmbodk4ku1pkvxk7vsipu7rsebg0ejm36xuwu67gw7dcne+iczh8h9thtdq5weytskww6bgw8q59abaasxzyl2iju964lnor3rfsy05ydtaan41t7b1erdar1u2wymbiq0ajdqo1mqm/alyqipbygra/2hrxtg5vyfyakr2yx++exerfxkm3/bd4ruxxhstd7jgxkxluxhsoks9yqtur/9ftv7e5jyp7ntc0yl9wdnc2f8ge7xu1jctxhkfrdr1i2kiu7dcdlarjfep07dhqlo2o1hlawcbgmwzilwawon4vgnuvfnofsverfdi1zqueiy7r4fb4hhz9gbp8zmlbqojemmniwhn+e7ivsxhd/leupnqsagucyfouxa3puv62n4fr5yljeawjy37bjyxbfm/swedg6am731qk4znchogjmjprqax7zny/tu4abx9e7osgtb4irthtmpbu7dbselmowupvwwxwvmgy+t0auiwiksjsontvrjamr4pcqso37drtrufooq8mqw1mvs0c6+y18bti88rlfn3s2h5yec/mhexi22jbjsq9q7zqwr9gqlxwjdheox3cbbn7dljnwzfhr+dgthhag+/ctq7bvu1g5it+xp/sme8rseoudh3nlenzkektdqdi7bxnz5sd2lxhif2nlxxug5qe08cf080ql6vraff3blkhwttkosihevjp/nzmzs/y8suc/ap8plnyly6pu/fjnkxtsljrq9qrafdkytxavinq8kv7/1fmvvhlsf01ntmdgkzs+ogl32f9inebjbavo68jtq3tgk8e+lwftm6s6izqi/eyuubfm+zpvkz5mlnkrfk/a3sa8gvncaf15o54m9jfksctylbr8eanodek4jpk9i0ltj/xg5eqsqqczqicane2uq46b75vw/fmy4kxs+wc6jze0u4krbpifjlxx+enmdwtkvci/pgp+nak6zhm50lcdh5j2r32i1og1zusmrgrxjnojru4lsefoohaqili4dkkvqpkpmjdffs+zbu4utnnes+dofqxcp74h9dolc7tgqaa\\n    path: /opt/azure/containers/configure-swarmmode-cluster.sh\\n    permissions: \"0744\"\\n\\n\\',variables(\\'agentruncmdfile\\'),variables(\\'agentruncmd\\')))]', 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshrsapublickey')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': {'offer': \"[variables('osimageoffer')]\", 'publisher': \"[variables('osimagepublisher')]\", 'sku': \"[variables('osimagesku')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('agentdisktype')]\"}}}}}}{'apiversion': '2019-07-01', 'type': 'microsoft.compute/availabilitysets', 'location': \"[variables('location')]\", 'name': \"[variables('masteravailabilityset')]\", 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2019-07-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('mastervmnameprefix'), copyindex())]\", 'location': \"[variables('location')]\", 'copy': {'count': \"[variables('mastercount')]\", 'name': 'vmloopnode'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', concat(variables('mastervmnameprefix'), 'nic-', copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets', variables('masteravailabilityset'))]\"], 'tags': {'creationsource': \"[concat('acsengine-', variables('mastervmnameprefix'), copyindex())]\"}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('masteravailabilityset'))]\"}, 'hardwareprofile': {'vmsize': \"[variables('mastervmsize')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('mastervmnameprefix'), 'nic-', copyindex()))]\"}]}, 'osprofile': {'adminusername': \"[variables('adminusername')]\", 'computername': \"[concat(variables('mastervmnameprefix'), copyindex())]\", 'customdata': '[base64(\\'#cloud-config\\n\\nwrite_files:\\n -  encoding: gzip\\n    content: !!binary |\\n        h4siackuqlkaa81zbxpbnhl+zl+xptw1nyaipdsxoweug8dwlp6rly9kd24uawoihczwfkeqogsfq/9+u3ihsfmk3tazowuskuac++wunt0fs/ndoeqycmtkxpn2/vzp24ejky2t6ylnmfywfaqniubqzzi8fbcecvxmegljjhvluwlqwmes0lqskuwaijgdiyxnsqjgamciuuf55rzxrwhj9vbl/smtiudyfzhdm6x+gkge5aqcw8/j0usaj6hzrugrwqk0io0i3ljovciy34uz4t5maspjx/2jf/ugn476p+f9ye/tz73b8kr/1vxbzxan2flrcngkc5azktcm1egchg4veooj/uxzrbdx317agfnb793jv3gk40benqygf4fhxwmcflh0dv9zoehddnv0+opsqxgxj2co8nnpw6pbyfnf5eae37xcem8ph73h5duzhq3/t6x38+nz4wmvezurumui6opglk/f4kpx2icniwg/g+qx7mqw+ezdr63g77983puglz983h/wcd+2w12aa5fumftxr5y9/8xod3ntce51rhenfjk6gebfix5d4jzn4+s2fdgk12tejblucbjheslxos6jzqdk94ed64adg8wlffscnh16sk5x5vh8uxpwr8sa4dvy3t/irs2y6vrk8k7iitptg/c4oiytsmtd/+i/z1wtrh6zt+/dewa7yf5p+mxmfda/el/a5/ecpwpy123j0fjkkcbp4b7dxc27fa2xwggaxtxrox/gfb5mrzrcrknzqujz5lqjbnzcyrg+qomfepdp0ijf9bgqzvqngxf7cyzmwojzdbuwwuymqriv3aquawvzyeo/qiwyyczgylcyo5yzg30/tvrfppzpoe1rxjhxpieyrgmctfwgcgl4o7pmkkfyobcrmenczjnfesekcpmwa2zwu00uddylqxyx8gojriydneurzvmtotnahad0bjd8v0fiwwqcpufp1nna6ch0luwfj9fya6m8932baq8qdseeluhtmmdstlvm1/mrdls4vcaluok5v0weafmxp5jxx9oody5a6nntpjrfai9gjcirs1xs93aaqtpfcqxs4ro1vevqwzx1eq0va89mntbajqdaj+faa37jfpupl437tty83jwftsj0szu8hrmfjs+g24rtom24ajujncppeqtqhopgioqqcimq8qfe1hhinkzzngxry8voizfdin0c0lozivbzvweebsjqzg6tp9pa5qmx8cpeystyuwaxzrdqfvrag2dbeqxhu+2xehzubzohs8ziolsza0wul8nkyvdncczq26zzwxcslkiictfg2vd0zlz0viika+7btoxihhbmu4gmsn+cmadslp3vl2fyfk08dthjvc3ftndkdhxbaty8pdyv++addqkydtg9izmcgpnzevio+tgn7tw0zkq88ytizdgz7hpsh+guu+ttbmvreqyhnrevxsjejoavavicrowiqm8xfe2tqf2bpvkgsylhkcbcgomsuiauwxilklzwwbsec5ahezgvspcywk69paqr7bqxfbgancbavvseaaddtcewklk+cpg10c/vquvu0vtn/cfygkmeboe3gpdhzzocfoo5z/mk5k0iyk6l/nb4bgbx/wtg10llr8u2r7sgi+g3jfqijswisgatdsmdisx5ypnkescxwspyhdy2hwzsxmbodk4ku1pkvxk7vsipu7rsebg0ejm36xuwu67gw7dcne+iczh8h9thtdq5weytskww6bgw8q59abaasxzyl2iju964lnor3rfsy05ydtaan41t7b1erdar1u2wymbiq0ajdqo1mqm/alyqipbygra/2hrxtg5vyfyakr2yx++exerfxkm3/bd4ruxxhstd7jgxkxluxhsoks9yqtur/9ftv7e5jyp7ntc0yl9wdnc2f8ge7xu1jctxhkfrdr1i2kiu7dcdlarjfep07dhqlo2o1hlawcbgmwzilwawon4vgnuvfnofsverfdi1zqueiy7r4fb4hhz9gbp8zmlbqojemmniwhn+e7ivsxhd/leupnqsagucyfouxa3puv62n4fr5yljeawjy37bjyxbfm/swedg6am731qk4znchogjmjprqax7zny/tu4abx9e7osgtb4irthtmpbu7dbselmowupvwwxwvmgy+t0auiwiksjsontvrjamr4pcqso37drtrufooq8mqw1mvs0c6+y18bti88rlfn3s2h5yec/mhexi22jbjsq9q7zqwr9gqlxwjdheox3cbbn7dljnwzfhr+dgthhag+/ctq7bvu1g5it+xp/sme8rseoudh3nlenzkektdqdi7bxnz5sd2lxhif2nlxxug5qe08cf080ql6vraff3blkhwttkosihevjp/nzmzs/y8suc/ap8plnyly6pu/fjnkxtsljrq9qrafdkytxavinq8kv7/1fmvvhlsf01ntmdgkzs+ogl32f9inebjbavo68jtq3tgk8e+lwftm6s6izqi/eyuubfm+zpvkz5mlnkrfk/a3sa8gvncaf15o54m9jfksctylbr8eanodek4jpk9i0ltj/xg5eqsqqczqicane2uq46b75vw/fmy4kxs+wc6jze0u4krbpifjlxx+enmdwtkvci/pgp+nak6zhm50lcdh5j2r32i1og1zusmrgrxjnojru4lsefoohaqili4dkkvqpkpmjdffs+zbu4utnnes+dofqxcp74h9dolc7tgqaa\\n    path: /opt/azure/containers/configure-swarmmode-cluster.sh\\n    permissions: \"0744\"\\n\\n\\')]', 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[variables('sshrsapublickey')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': {'offer': \"[variables('osimageoffer')]\", 'publisher': \"[variables('osimagepublisher')]\", 'sku': \"[variables('osimagesku')]\", 'version': \"[variables('osimageversion')]\"}, 'osdisk': {'name': \"[concat(variables('mastervmnameprefix'), copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('masterdisktype')]\"}}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-04-01', 'location': \"[variables('location')]\", 'name': \"[variables('agentipaddressname')]\", 'properties': {'dnssettings': {'domainnamelabel': \"[variables('agentendpointdnsnameprefix')]\"}, 'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-04-01', 'type': 'microsoft.network/loadbalancers', 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('agentipaddressname'))]\"], 'location': \"[variables('location')]\", 'name': \"[variables('agentlbname')]\", 'properties': {'backendaddresspools': [{'name': \"[variables('agentlbbackendpoolname')]\"}], 'frontendipconfigurations': [{'name': \"[variables('agentlbipconfigname')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('agentipaddressname'))]\"}}}], 'loadbalancingrules': [{'name': 'lbrule80', 'properties': {'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('agentlbname'), variables('agentlbbackendpoolname'))]\"}, 'backendport': 80, 'enablefloatingip': false, 'frontendipconfiguration': {'id': \"[variables('agentlbipconfigid')]\"}, 'frontendport': 80, 'idletimeoutinminutes': 5, 'loaddistribution': 'default', 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('agentlbname'), 'tcp80probe')]\"}, 'protocol': 'tcp'}}, {'name': 'lbrule443', 'properties': {'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('agentlbname'), variables('agentlbbackendpoolname'))]\"}, 'backendport': 443, 'enablefloatingip': false, 'frontendipconfiguration': {'id': \"[variables('agentlbipconfigid')]\"}, 'frontendport': 443, 'idletimeoutinminutes': 5, 'loaddistribution': 'default', 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('agentlbname'), 'tcp443probe')]\"}, 'protocol': 'tcp'}}, {'name': 'lbrule8080', 'properties': {'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('agentlbname'), variables('agentlbbackendpoolname'))]\"}, 'backendport': 8080, 'enablefloatingip': false, 'frontendipconfiguration': {'id': \"[variables('agentlbipconfigid')]\"}, 'frontendport': 8080, 'idletimeoutinminutes': 5, 'loaddistribution': 'default', 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('agentlbname'), 'tcp8080probe')]\"}, 'protocol': 'tcp'}}], 'probes': [{'name': 'tcp80probe', 'properties': {'intervalinseconds': 5, 'numberofprobes': 2, 'port': 80, 'protocol': 'tcp'}}, {'name': 'tcp443probe', 'properties': {'intervalinseconds': 5, 'numberofprobes': 2, 'port': 443, 'protocol': 'tcp'}}, {'name': 'tcp8080probe', 'properties': {'intervalinseconds': 5, 'numberofprobes': 2, 'port': 8080, 'protocol': 'tcp'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-04-01', 'location': \"[variables('location')]\", 'name': \"[variables('virtualnetworkname')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('mastersubnet')]\", \"[variables('agentsubnet')]\"]}, 'subnets': [{'name': \"[variables('mastersubnetname')]\", 'properties': {'addressprefix': \"[variables('mastersubnet')]\"}}, {'name': \"[variables('agentsubnetname')]\", 'properties': {'addressprefix': \"[variables('agentsubnet')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-04-01', 'location': \"[variables('location')]\", 'name': \"[variables('masterpublicipaddressname')]\", 'properties': {'dnssettings': {'domainnamelabel': \"[variables('masterendpointdnsnameprefix')]\"}, 'publicipallocationmethod': 'dynamic'}}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-04-01', 'location': \"[variables('location')]\", 'name': \"[variables('masterlbname')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('masterpublicipaddressname'))]\"], 'properties': {'backendaddresspools': [{'name': \"[variables('masterlbbackendpoolname')]\"}], 'frontendipconfigurations': [{'name': \"[variables('masterlbipconfigname')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('masterpublicipaddressname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'condition': \"[equals(parameters('vnetneworexisting'), 'new')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2019-11-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': \"[parameters('addressprefixes')]\"}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'condition': \"[equals(parameters('neworscaleexisting'), 'deploy new scaleset')]\", 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-11-01', 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[concat('vmss-',parameters('vmssname'),'-',uniquestring(resourcegroup().id))]\"}}}{'condition': \"[equals(parameters('neworscaleexisting'), 'deploy new scaleset')]\", 'type': 'microsoft.network/loadbalancers', 'name': \"[variables('loadbalancername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid')]\"}}}], 'backendaddresspools': [{'name': \"[variables('bepoolname')]\"}], 'inboundnatpools': [{'name': \"[variables('natpoolname')]\", 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendportrangestart': \"[variables('natstartport')]\", 'frontendportrangeend': \"[variables('natendport')]\", 'backendport': \"[variables('natbackendport')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('ossavailabilitysetsettings').name]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': \"[variables('ossavailabilitysetsettings').faultdomaincount]\", 'platformupdatedomaincount': \"[variables('ossavailabilitysetsettings').updatedomaincount]\"}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'),'mgs')]\", 'plan': {'publisher': 'intel', 'product': 'lustre-cloud-edition-gs-image', 'name': 'eval-lustre-2-7'}, 'location': \"[parameters('location')]\", 'dependson': ['storageaccountscopy', \"[concat('microsoft.network/networkinterfaces/', parameters('vmnameprefix'), 'mgs')]\"], 'tags': {'lustretype': 'mgt'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('mgsvmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'),'mgs')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': \"[variables('linuxconfiguration')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagereferencelustre').publisher]\", 'offer': \"[variables('imagereferencelustre').offer]\", 'sku': \"[variables('imagereferencelustre').sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmnameprefix'),'mgs','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('vmnameprefix'),'mgs','_datadisk1')]\", 'disksizegb': 5, 'lun': 0, 'caching': 'none', 'createoption': 'empty'}, {'name': \"[concat(parameters('vmnameprefix'),'mgs','_datadisk2')]\", 'disksizegb': 16, 'lun': 1, 'caching': 'none', 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('vmnameprefix'),'mgs'))]\"}]}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmnameprefix'), 'mgs', '/init')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.compute/virtualmachines/', concat(parameters('vmnameprefix'), 'mgs'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturllustre')]\"], 'commandtoexecute': \"[concat('sh lustre.sh', ' -n mgs', ' -i 0', ' -d ', variables('mgsdiskcount'), ' -m ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mgs'))).ipconfigurations[0].properties.privateipaddress, ' -l ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mgs'))).ipconfigurations[0].properties.privateipaddress, ' -f ', parameters('filesystemname'))]\"}}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'),'mds')]\", 'plan': {'publisher': 'intel', 'product': 'lustre-cloud-edition-gs-image', 'name': 'eval-lustre-2-7'}, 'location': \"[parameters('location')]\", 'dependson': ['storageaccountscopy', \"[concat('microsoft.network/networkinterfaces/', parameters('vmnameprefix'), 'mds')]\"], 'tags': {'lustretype': 'mdt'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('mdsvmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'),'mds')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': \"[variables('linuxconfiguration')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagereferencelustre').publisher]\", 'offer': \"[variables('imagereferencelustre').offer]\", 'sku': \"[variables('imagereferencelustre').sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmnameprefix'),'mds','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('vmnameprefix'),'mds','_datadisk1')]\", 'disksizegb': 128, 'lun': 0, 'caching': 'none', 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('vmnameprefix'),'mds'))]\"}]}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmnameprefix'), 'mds', '/init')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.compute/virtualmachines/', concat(parameters('vmnameprefix'), 'mds'))]\", \"[concat('microsoft.compute/virtualmachines/', parameters('vmnameprefix'), 'mgs', '/extensions/init')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturllustre')]\"], 'commandtoexecute': \"[concat('sh lustre.sh', ' -n mds', ' -i 0', ' -d ', variables('mdsdiskcount'), ' -m ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mgs'))).ipconfigurations[0].properties.privateipaddress, ' -l ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mds'))).ipconfigurations[0].properties.privateipaddress, ' -f ', parameters('filesystemname'))]\"}}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex())]\", 'plan': {'publisher': 'intel', 'product': 'lustre-cloud-edition-gs-image', 'name': 'eval-lustre-2-7'}, 'location': \"[parameters('location')]\", 'dependson': ['storageaccountscopy', \"[concat('microsoft.network/networkinterfaces/', parameters('vmnameprefix'), 'oss', copyindex())]\"], 'copy': {'name': 'ossvmcopy', 'count': \"[parameters('osscount')]\"}, 'tags': {'lustretype': 'ost'}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('ossavailabilitysetsettings').name)]\"}, 'hardwareprofile': {'vmsize': \"[parameters('ossvmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), 'oss', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': \"[variables('linuxconfiguration')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagereferencelustre').publisher]\", 'offer': \"[variables('imagereferencelustre').offer]\", 'sku': \"[variables('imagereferencelustre').sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(),'_datadisk1')]\", 'disksizegb': \"[parameters('ossdisksize')]\", 'lun': 0, 'caching': 'none', 'createoption': 'empty'}, {'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(),'_datadisk2')]\", 'disksizegb': \"[parameters('ossdisksize')]\", 'lun': 1, 'caching': 'none', 'createoption': 'empty'}, {'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(),'_datadisk3')]\", 'disksizegb': \"[parameters('ossdisksize')]\", 'lun': 2, 'caching': 'none', 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('vmnameprefix'), 'oss', copyindex()))]\"}]}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(), '/init')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.compute/virtualmachines/', concat(parameters('vmnameprefix'), 'oss', copyindex()))]\", \"[concat('microsoft.compute/virtualmachines/', parameters('vmnameprefix'), 'mds', '/extensions/init')]\"], 'copy': {'name': 'ossextensionscopy', 'count': \"[parameters('osscount')]\"}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturllustre')]\"], 'commandtoexecute': \"[concat('sh lustre.sh', ' -n oss', ' -i ', copyindex(), ' -d ', variables('ossdiskcount'), ' -m ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mgs'))).ipconfigurations[0].properties.privateipaddress, ' -l ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'oss', copyindex()))).ipconfigurations[0].properties.privateipaddress, ' -f ', parameters('filesystemname'))]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('clientavailabilitysetsettings').name]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': \"[variables('clientavailabilitysetsettings').faultdomaincount]\", 'platformupdatedomaincount': \"[variables('clientavailabilitysetsettings').updatedomaincount]\"}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('clientvmnameprefix'), 'client', copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('clientstorageaccountname'))]\", \"[concat('microsoft.compute/availabilitysets/', variables('clientavailabilitysetsettings').name)]\", \"[concat('microsoft.network/networkinterfaces/', parameters('clientvmnameprefix'), 'client', copyindex())]\"], 'copy': {'name': 'clientvmcopy', 'count': \"[parameters('clientcount')]\"}, 'tags': {'lustretype': 'client'}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('clientavailabilitysetsettings').name)]\"}, 'hardwareprofile': {'vmsize': \"[parameters('clientvmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('clientvmnameprefix'), 'client', copyindex())]\", 'adminusername': \"[parameters('clientadminusername')]\", 'adminpassword': \"[parameters('clientadminpassword')]\", 'linuxconfiguration': \"[variables('linuxconfiguration')]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat(parameters('clientvmnameprefix'), 'client', copyindex(),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('clientvmnameprefix'), 'client', copyindex()))]\"}]}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('clientvmnameprefix'), 'client', copyindex(), '/init')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.compute/virtualmachines/', concat(parameters('clientvmnameprefix'),'client',copyindex()))]\"], 'copy': {'name': 'clientextensionscopy', 'count': \"[parameters('clientcount')]\"}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturllustreclient')]\"], 'commandtoexecute': \"[concat('bash lustre_client.sh', ' -n ', parameters('image'), ' -i ', copyindex(), ' -d 0', ' -m ', parameters('mgsipaddress'), ' -l ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('clientvmnameprefix'), 'client', copyindex()))).ipconfigurations[0].properties.privateipaddress, ' -f ', parameters('clientfilesystemname'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('ossavailabilitysetsettings').name]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': \"[variables('ossavailabilitysetsettings').faultdomaincount]\", 'platformupdatedomaincount': \"[variables('ossavailabilitysetsettings').updatedomaincount]\"}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'),'mgs')]\", 'plan': {'publisher': 'intel', 'product': 'lustre-cloud-edition-gs-image', 'name': 'eval-lustre-2-7'}, 'location': \"[parameters('location')]\", 'dependson': ['storageaccountscopy', \"[concat('microsoft.network/networkinterfaces/', parameters('vmnameprefix'), 'mgs')]\"], 'tags': {'lustretype': 'mgt'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('mgsvmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'),'mgs')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': \"[variables('linuxconfiguration')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagereferencelustre').publisher]\", 'offer': \"[variables('imagereferencelustre').offer]\", 'sku': \"[variables('imagereferencelustre').sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmnameprefix'),'mgs','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('vmnameprefix'),'mgs','_datadisk1')]\", 'disksizegb': 5, 'lun': 0, 'caching': 'none', 'createoption': 'empty'}, {'name': \"[concat(parameters('vmnameprefix'),'mgs','_datadisk2')]\", 'disksizegb': 16, 'lun': 1, 'caching': 'none', 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('vmnameprefix'),'mgs'))]\"}]}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmnameprefix'), 'mgs', '/init')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.compute/virtualmachines/', concat(parameters('vmnameprefix'), 'mgs'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturllustre')]\"], 'commandtoexecute': \"[concat('sh lustre.sh', ' -n mgs', ' -i 0', ' -d ', variables('mgsdiskcount'), ' -m ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mgs'))).ipconfigurations[0].properties.privateipaddress, ' -l ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mgs'))).ipconfigurations[0].properties.privateipaddress, ' -f ', parameters('filesystemname'))]\"}}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'),'mds')]\", 'plan': {'publisher': 'intel', 'product': 'lustre-cloud-edition-gs-image', 'name': 'eval-lustre-2-7'}, 'location': \"[parameters('location')]\", 'dependson': ['storageaccountscopy', \"[concat('microsoft.network/networkinterfaces/', parameters('vmnameprefix'), 'mds')]\"], 'tags': {'lustretype': 'mdt'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('mdsvmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'),'mds')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': \"[variables('linuxconfiguration')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagereferencelustre').publisher]\", 'offer': \"[variables('imagereferencelustre').offer]\", 'sku': \"[variables('imagereferencelustre').sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmnameprefix'),'mds','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('vmnameprefix'),'mds','_datadisk1')]\", 'disksizegb': 128, 'lun': 0, 'caching': 'none', 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('vmnameprefix'),'mds'))]\"}]}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmnameprefix'), 'mds', '/init')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.compute/virtualmachines/', concat(parameters('vmnameprefix'), 'mds'))]\", \"[concat('microsoft.compute/virtualmachines/', parameters('vmnameprefix'), 'mgs', '/extensions/init')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturllustre')]\"], 'commandtoexecute': \"[concat('sh lustre.sh', ' -n mds', ' -i 0', ' -d ', variables('mdsdiskcount'), ' -m ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mgs'))).ipconfigurations[0].properties.privateipaddress, ' -l ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mds'))).ipconfigurations[0].properties.privateipaddress, ' -f ', parameters('filesystemname'))]\"}}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex())]\", 'plan': {'publisher': 'intel', 'product': 'lustre-cloud-edition-gs-image', 'name': 'eval-lustre-2-7'}, 'location': \"[parameters('location')]\", 'dependson': ['storageaccountscopy', \"[concat('microsoft.network/networkinterfaces/', parameters('vmnameprefix'), 'oss', copyindex())]\"], 'copy': {'name': 'ossvmcopy', 'count': \"[parameters('osscount')]\"}, 'tags': {'lustretype': 'ost'}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('ossavailabilitysetsettings').name)]\"}, 'hardwareprofile': {'vmsize': \"[parameters('ossvmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), 'oss', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': \"[variables('linuxconfiguration')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagereferencelustre').publisher]\", 'offer': \"[variables('imagereferencelustre').offer]\", 'sku': \"[variables('imagereferencelustre').sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(),'_datadisk1')]\", 'disksizegb': \"[parameters('ossdisksize')]\", 'lun': 0, 'caching': 'none', 'createoption': 'empty'}, {'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(),'_datadisk2')]\", 'disksizegb': \"[parameters('ossdisksize')]\", 'lun': 1, 'caching': 'none', 'createoption': 'empty'}, {'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(),'_datadisk3')]\", 'disksizegb': \"[parameters('ossdisksize')]\", 'lun': 2, 'caching': 'none', 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('vmnameprefix'), 'oss', copyindex()))]\"}]}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex(), '/init')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.compute/virtualmachines/', concat(parameters('vmnameprefix'), 'oss', copyindex()))]\", \"[concat('microsoft.compute/virtualmachines/', parameters('vmnameprefix'), 'mds', '/extensions/init')]\"], 'copy': {'name': 'ossextensionscopy', 'count': \"[parameters('osscount')]\"}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturllustre')]\"], 'commandtoexecute': \"[concat('sh lustre.sh', ' -n oss', ' -i ', copyindex(), ' -d ', variables('ossdiskcount'), ' -m ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'mgs'))).ipconfigurations[0].properties.privateipaddress, ' -l ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'oss', copyindex()))).ipconfigurations[0].properties.privateipaddress, ' -f ', parameters('filesystemname'))]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('clientavailabilitysetsettings').name]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': \"[variables('clientavailabilitysetsettings').faultdomaincount]\", 'platformupdatedomaincount': \"[variables('clientavailabilitysetsettings').updatedomaincount]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(parameters('vmnameprefix'),'mgs')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'idletimeoutinminutes': 4, 'dnssettings': {'domainnamelabel': \"[concat(parameters('dnsnameprefix'),'')]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(parameters('vmnameprefix'),'mgs')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.resources/deployments/', 'vnet')]\", \"[concat('microsoft.network/publicipaddresses/', concat(parameters('vmnameprefix'),'mgs'))]\"], 'properties': {'ipconfigurations': [{'name': 'ip1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat(parameters('vmnameprefix'), 'mgs'))]\"}, 'subnet': {'id': \"[variables('subnetserversid')]\"}}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(parameters('vmnameprefix'),'mds')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.resources/deployments/', 'vnet')]\", \"[concat('microsoft.network/networkinterfaces/', parameters('vmnameprefix'), 'mgs')]\"], 'properties': {'ipconfigurations': [{'name': 'ip1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnetserversid')]\"}}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(parameters('vmnameprefix'), 'oss', copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.resources/deployments/', 'vnet')]\", \"[concat('microsoft.network/networkinterfaces/', parameters('vmnameprefix'), 'mds')]\"], 'copy': {'name': 'ossniccopy', 'count': \"[parameters('osscount')]\"}, 'properties': {'ipconfigurations': [{'name': 'ip1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnetserversid')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('clientavailabilitysetsettings').name]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': \"[variables('clientavailabilitysetsettings').faultdomaincount]\", 'platformupdatedomaincount': \"[variables('clientavailabilitysetsettings').updatedomaincount]\"}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'), 'client', copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('clientavailabilitysetsettings').name)]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(parameters('vmnameprefix'), 'client', copyindex()))]\"], 'copy': {'name': 'clientvmcopy', 'count': \"[parameters('clientcount')]\"}, 'tags': {'lustretype': 'client'}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('clientavailabilitysetsettings').name)]\"}, 'hardwareprofile': {'vmsize': \"[parameters('clientvmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), 'client', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('ostype')]\", 'osdisk': {'name': \"[concat(parameters('vmnameprefix'), 'client', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('vmnameprefix'), 'client', copyindex()))]\"}]}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmnameprefix'), 'client', copyindex(), '/init')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat(parameters('vmnameprefix'),'client',copyindex()))]\"], 'copy': {'name': 'clientextensionscopy', 'count': \"[parameters('clientcount')]\"}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturllustreclient')]\"], 'commandtoexecute': \"[concat('bash lustre_client.sh -n clientcentos', parameters('imagesku'), ' -i ', copyindex(), ' -d 0', ' -m ', parameters('mgsipaddress'), ' -l ', reference(resourceid('microsoft.network/networkinterfaces', concat(parameters('vmnameprefix'), 'client', copyindex()))).ipconfigurations[0].properties.privateipaddress, ' -f ', parameters('filesystemname'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/autoscalesettings', 'apiversion': '2015-04-01', 'name': \"[concat(parameters('hostingplanlivesite'), '-', resourcegroup().name)]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', parameters('hostingplanlivesite'))]\"], 'tags': {\"[format('{0}:{1}', 'hidden-related', resourceid('microsoft.web/serverfarms', parameters('hostingplanlivesite')))]\": 'resource', 'displayname': 'autoscalesettings'}, 'properties': {'profiles': [{'name': 'default', 'capacity': {'minimum': 1, 'maximum': 2, 'default': 1}, 'rules': [{'metrictrigger': {'metricname': 'cpupercentage', 'metricresourceuri': \"[resourceid('microsoft.web/serverfarms', parameters('hostingplanlivesite'))]\", 'timegrain': 'pt1m', 'statistic': 'average', 'timewindow': 'pt10m', 'timeaggregation': 'average', 'operator': 'greaterthan', 'threshold': 80.0}, 'scaleaction': {'direction': 'increase', 'type': 'changecount', 'value': 1, 'cooldown': 'pt10m'}}, {'metrictrigger': {'metricname': 'cpupercentage', 'metricresourceuri': \"[resourceid('microsoft.web/serverfarms', parameters('hostingplanlivesite'))]\", 'timegrain': 'pt1m', 'statistic': 'average', 'timewindow': 'pt1h', 'timeaggregation': 'average', 'operator': 'lessthan', 'threshold': 60.0}, 'scaleaction': {'direction': 'decrease', 'type': 'changecount', 'value': 1, 'cooldown': 'pt1h'}}]}], 'enabled': false, 'name': \"[concat(parameters('hostingplanlivesite'), '-', resourcegroup().name)]\", 'targetresourceuri': \"[resourceid('microsoft.web/serverfarms', parameters('hostingplanlivesite'))]\"}}{'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[parameters('livesitename')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'tags': {\"[format('{0}:{1}', 'hidden-related', resourceid('microsoft.web/sites', parameters('livesitename')))]\": 'resource', 'displayname': 'appinsightscomponent'}, 'properties': {'application_type': 'web'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': \"[concat(variables('virtualmachinename'), '-rosinstall')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('virtualmachinename'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('extensionurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[variables('location')]\"}, 'extensionname': {'value': 'cse'}, 'vmname': {'value': \"[variables('virtualmachinename')]\"}, 'fileuris': {'value': [\"[variables('rosscriptfileuri')]\"]}, 'commandtoexecute': {'value': \"[concat('powershell -executionpolicy unrestricted -file ', 'installros.ps1')]\"}}}}{'condition': \"[contains(parameters('pipelineprovider'), 'azurepipelines')]\", 'name': \"[concat(variables('virtualmachinename'), '-vstsagentinstall')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.resources/deployments', concat(variables('virtualmachinename'), '-rosinstall'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('extensionurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[variables('location')]\"}, 'extensionname': {'value': 'cse'}, 'vmname': {'value': \"[variables('virtualmachinename')]\"}, 'fileuris': {'value': [\"[variables('vstsscriptfileuri')]\"]}, 'commandtoexecute': {'value': '[concat(\\'powershell.exe -executionpolicy unrestricted -command \"& {\\', \\'./\\', \\'installvstsagent.ps1\\', \\' \\', variables(\\'vstsparameters\\'), \\'}\"\\')]'}}}}{'condition': \"[contains(parameters('pipelineprovider'), 'githubrunner')]\", 'name': \"[concat(variables('virtualmachinename'), '-githubagentinstall')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.resources/deployments', concat(variables('virtualmachinename'), '-rosinstall'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('extensionurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[variables('location')]\"}, 'extensionname': {'value': 'cse'}, 'vmname': {'value': \"[variables('virtualmachinename')]\"}, 'fileuris': {'value': [\"[variables('githubscriptfileuri')]\"]}, 'commandtoexecute': {'value': '[concat(\\'powershell.exe -executionpolicy unrestricted -command \"& {\\', \\'./\\', \\'installgithubagent.ps1\\', \\' \\', variables(\\'githubparameters\\'), \\'}\"\\')]'}}}}{'condition': \"[contains(parameters('virtualmachinesize'), 'standard_nv')]\", 'name': 'nvidia-gpu-driver-windows', 'apiversion': '2019-05-01', 'type': 'microsoft.resources/deployments', 'dependson': [\"[resourceid('microsoft.resources/deployments', concat(variables('virtualmachinename'), '-rosinstall'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nvidiagpudriverwindowsuri')]\"}, 'parameters': {'vmname': {'value': \"[variables('virtualmachinename')]\"}, 'location': {'value': \"[variables('location')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'condition': \"[contains(parameters('virtualmachinesize'), 'standard_nv')]\", 'name': 'nvidia-gpu-driver-linux', 'apiversion': '2021-04-01', 'type': 'microsoft.resources/deployments', 'dependson': [\"[resourceid('microsoft.resources/deployments', concat(variables('virtualmachinename'), '-rosinstall'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nvidiagpudriverlinuxuri')]\"}, 'parameters': {'vmname': {'value': \"[variables('virtualmachinename')]\"}, 'location': {'value': \"[variables('location')]\"}}}}{'name': \"[concat(variables('virtualmachinename'), '-rosinstall')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('virtualmachinename'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('extensionurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[variables('location')]\"}, 'extensionname': {'value': 'cse'}, 'vmname': {'value': \"[variables('virtualmachinename')]\"}, 'fileuris': {'value': [\"[variables('rosscriptfileuri')]\"]}, 'commandtoexecute': {'value': \"[concat('bash ', 'install-ros.sh')]\"}}}}{'condition': \"[contains(parameters('pipelineprovider'), 'azurepipelines')]\", 'name': \"[concat(variables('virtualmachinename'), '-vstsagentinstall')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.resources/deployments', concat(variables('virtualmachinename'), '-rosinstall'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('extensionurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[variables('location')]\"}, 'extensionname': {'value': 'cse'}, 'vmname': {'value': \"[variables('virtualmachinename')]\"}, 'fileuris': {'value': [\"[variables('vstsscriptfileuri')]\"]}, 'commandtoexecute': {'value': \"[concat('bash ', 'install-vsts.sh ', variables('vstsparameters'))]\"}}}}{'condition': \"[contains(parameters('pipelineprovider'), 'githubrunner')]\", 'name': \"[concat(variables('virtualmachinename'), '-githubagentinstall')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.resources/deployments', concat(variables('virtualmachinename'), '-rosinstall'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('extensionurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[variables('location')]\"}, 'extensionname': {'value': 'cse'}, 'vmname': {'value': \"[variables('virtualmachinename')]\"}, 'fileuris': {'value': [\"[variables('githubscriptfileuri')]\"]}, 'commandtoexecute': {'value': \"[concat('bash ', 'install-github.sh ', variables('githubparameters'))]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'shared-resources', 'type': 'microsoft.resources/deployments', 'apiversion': '2016-09-01', 'comments': 'azure resources that are shared within the infrastructure environment', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'),'/nested/', variables('sharedresourcestemplatefilename'),parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'webnsgname': {'value': \"[variables('webnsgname')]\"}, 'datansgname': {'value': \"[variables('datansgname')]\"}, 'virtualnetworkname': {'value': \"[variables('virtualnetworkname')]\"}, 'datasubnetname': {'value': \"[variables('datasubnetname')]\"}, 'websubnetname': {'value': \"[variables('websubnetname')]\"}, 'addressprefix': {'value': \"[variables('addressprefix')]\"}, 'websubnetprefix': {'value': \"[variables('websubnetprefix')]\"}, 'datasubnetprefix': {'value': \"[variables('datasubnetprefix')]\"}, 'remoteallowedcidr': {'value': \"[parameters('remoteallowedcidr')]\"}, 'netapptags': {'value': \"[variables('netapptags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'jump-vm', 'type': 'microsoft.resources/deployments', 'apiversion': '2016-09-01', 'comments': 'jump server deployment', 'dependson': ['microsoft.resources/deployments/shared-resources'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'),'/nested/', variables('jumpvmtemplatefilename'),parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'vnetid': {'value': \"[variables('vnetid')]\"}, 'websubnetname': {'value': \"[variables('websubnetname')]\"}, 'jumpvmname': {'value': \"[variables('jumpvmname')]\"}, 'jumpvmsize': {'value': \"[variables('jumpvmsize')]\"}, 'jumpvmnicname': {'value': \"[variables('jumpvmnicname')]\"}, 'jumpvmpublicipaddressname': {'value': \"[variables('jumpvmpublicipaddressname')]\"}, 'jumpvmdnsname': {'value': \"[variables('jumpvmdnsname')]\"}, 'netapptags': {'value': \"[variables('netapptags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'sql-vm', 'type': 'microsoft.resources/deployments', 'apiversion': '2016-09-01', 'comments': 'sql server deployment', 'dependson': ['microsoft.resources/deployments/shared-resources'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'),'/nested/', variables('sqlvmtemplatefilename'),parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'vnetid': {'value': \"[variables('vnetid')]\"}, 'datasubnetname': {'value': \"[variables('datasubnetname')]\"}, 'sqlvmname': {'value': \"[variables('sqlvmname')]\"}, 'sqlvmnicname': {'value': \"[variables('sqlvmnicname')]\"}, 'sqlvmsize': {'value': \"[variables('sqlvmsize')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'netapptags': {'value': \"[variables('netapptags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'netapp-oncommand-cloudmanager', 'type': 'microsoft.resources/deployments', 'apiversion': '2016-09-01', 'comments': 'netapp oncommand manager deployment', 'dependson': ['microsoft.resources/deployments/shared-resources'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'),'/nested/', variables('netapponcommandcloudmanagervmtemplatefilename'),parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'vnetid': {'value': \"[variables('vnetid')]\"}, 'websubnetname': {'value': \"[variables('websubnetname')]\"}, 'oncommandcloudmanagervmname': {'value': \"[variables('oncommandcloudmanagervmname')]\"}, 'oncommandcloudmanagervmsize': {'value': \"[variables('oncommandcloudmanagervmsize')]\"}, 'oncommandcloudmanagervmnicname': {'value': \"[variables('oncommandcloudmanagervmnicname')]\"}, 'oncommandcloudmanagerpublicipaddressname': {'value': \"[variables('oncommandcloudmanagerpublicipaddressname')]\"}, 'oncommandcloudmanagerdnsname': {'value': \"[variables('oncommandcloudmanagerdnsname')]\"}, 'netapptags': {'value': \"[variables('netapptags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'netapp-ontap-cloud', 'type': 'microsoft.resources/deployments', 'apiversion': '2016-09-01', 'comments': 'netapp ontap cloud env deployment', 'dependson': ['microsoft.resources/deployments/netapp-oncommand-cloudmanager'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'),'/nested/', variables('netappontapcloudtemplatefilename'),parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminemailaddress': {'value': \"[parameters('adminemailaddress')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'otcpassword': {'value': \"[variables('otcpassword')]\"}, 'datansgname': {'value': \"[variables('datansgname')]\"}, 'vnetid': {'value': \"[variables('vnetid')]\"}, 'cidr': {'value': \"[variables('addressprefix')]\"}, 'datasubnetname': {'value': \"[variables('datasubnetname')]\"}, 'oncommandcloudmanagervmname': {'value': \"[variables('oncommandcloudmanagervmname')]\"}, 'azureadapplicationid': {'value': \"[parameters('azureadapplicationid')]\"}, 'azureadapplicationsecret': {'value': \"[parameters('azureadapplicationsecret')]\"}, 'netappontapcloudlicense': {'value': \"[variables(concat('netappontapcloudlicense',parameters('netappontapcloudlicensetype')))]\"}, 'netappontapversion': {'value': \"[variables('netappontapversion')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'netapptags': {'value': \"[variables('netapptags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'sql-netappotc-connect', 'type': 'microsoft.resources/deployments', 'apiversion': '2016-09-01', 'comments': 'configure sql volume extension', 'dependson': ['microsoft.resources/deployments/netapp-ontap-cloud'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'),'/nested/', variables('sqlcustomscripttemplatefilename'),parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminemailaddress': {'value': \"[parameters('adminemailaddress')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'otcpassword': {'value': \"[variables('otcpassword')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'sqlvmname': {'value': \"[variables('sqlvmname')]\"}, 'sqldatavolumesize': {'value': \"[parameters('sqldatavolumesize')]\"}, 'otcip': {'value': \"[reference('netapp-oncommand-cloudmanager').outputs.netapponcommandcloudmanagerpublicip.value]\"}, 'netapptags': {'value': \"[variables('netapptags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-12-01', 'name': \"[concat(tolower(parameters('prefix')),tolower(if(less(copyindex(),length(variables('vminfo'))),variables('vminfo')[variables('vmrole')[copyindex()]].name,if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].name,variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].name))))]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'vmcopy', 'count': \"[add(add(length(variables('vminfo')),length(variables('siteinfo'))),length(variables('clientrole')))]\"}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/',concat(tolower(parameters('prefix')),tolower(if(less(copyindex(),length(variables('vminfo'))),variables('vminfo')[variables('vmrole')[copyindex()]].name,if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].name,variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].name))),'-ni'))]\"], 'properties': {'osprofile': {'computername': \"[concat(tolower(parameters('prefix')),tolower(if(less(copyindex(),length(variables('vminfo'))),variables('vminfo')[variables('vmrole')[copyindex()]].name,if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].name,variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].name))))]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'provisionvmagent': true, 'timezone': \"[variables('timezone')]\"}}, 'hardwareprofile': {'vmsize': \"[if(less(copyindex(),length(variables('vminfo'))),variables('vminfo')[variables('vmrole')[copyindex()]].size,if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].size,variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].size))]\"}, 'storageprofile': {'imagereference': \"[if(less(copyindex(),length(variables('vminfo'))),variables('vminfo')[variables('vmrole')[copyindex()]].imagereference,if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].imagereference,variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].imagereference))]\", 'osdisk': {'ostype': 'windows', 'name': \"[concat(tolower(parameters('prefix')),tolower(if(less(copyindex(),length(variables('vminfo'))),variables('vminfo')[variables('vmrole')[copyindex()]].name,if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].name,variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].name))),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': \"[if(less(copyindex(),length(variables('vminfo'))),variables('vminfo')[variables('vmrole')[copyindex()]].disktype,if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].disktype,variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].disktype))]\"}, 'disksizegb': 150}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(tolower(parameters('prefix')),tolower(if(less(copyindex(),length(variables('vminfo'))),variables('vminfo')[variables('vmrole')[copyindex()]].name,if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].name,variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].name))), '-ni'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': false}}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2019-12-01', 'name': \"[concat(tolower(parameters('prefix')),tolower(if(less(copyindex(),length(variables('vminfo'))),variables('vminfo')[variables('vmrole')[copyindex()]].name,if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].name,variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].name))), '/workflow')]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'dscvmextensioncopy', 'count': \"[add(add(length(variables('vminfo')),length(variables('siteinfo'))),length(variables('clientrole')))]\"}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat(tolower(parameters('prefix')),if(less(copyindex(),length(variables('vminfo'))),tolower(variables('vminfo')[variables('vmrole')[copyindex()]].name),if(greaterorequals(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),tolower(variables('clientinfo')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))][variables('clientrole')[sub(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo'))))]].name),tolower(variables('siteinfo')[variables('siterole')[sub(copyindex(),length(variables('vminfo')))]].name)))))]\"], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.21', 'autoupgrademinorversion': true, 'settings': {'modulesurl': \"[uri(parameters('_artifactslocation'),concat(variables('dscscript'),parameters('_artifactslocationsastoken')))]\", 'configurationfunction': \"[if(less(copyindex(),length(variables('vminfo'))),concat(variables('vmrole')[copyindex()],'configuration.ps1\\\\configuration'),if(less(copyindex(),add(length(variables('vminfo')),length(variables('siteinfo')))),concat(variables('siterole')[sub(copyindex(),length(variables('vminfo')))],'configuration.ps1\\\\configuration'),'clientconfiguration.ps1\\\\configuration'))]\", 'properties': {'domainname': \"[variables('domainname')]\", 'dcname': \"[concat(parameters('prefix'),variables('vminfo')['dc'].name)]\", 'dpmpname': \"[concat(parameters('prefix'),variables('vminfo')['dpmp'].name)]\", 'csname': \"[if(equals(parameters('configuration'),'standalone'),'empty',concat(parameters('prefix'),variables('siteinfo')['cs'].name))]\", 'psname': \"[concat(parameters('prefix'),variables('siteinfo')['ps'].name)]\", 'clientname': \"[variables('clientname')]\", 'dnsipaddress': \"[concat(variables('networksettings').virtualmachinesipaddress,add(int('0'),int('4')))]\", 'configuration': \"[parameters('configuration')]\", 'admincreds': {'username': \"[parameters('adminusername')]\", 'password': 'privatesettingsref:adminpassword'}}}, 'protectedsettings': {'items': {'adminpassword': \"[parameters('adminpassword')]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('diskstoragetype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/', variables('extensionname'))]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'dockerextension', 'typehandlerversion': '1.0', 'autoupgrademinorversion': true}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'vmloop', 'count': \"[parameters('scalenumber')]\"}, 'dependson': ['nicloop'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')[parameters('hostos')]]\", 'osdisk': {'name': \"[concat(parameters('vmnameprefix'), copyindex(), '_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}, 'datadisks': [{'name': \"[concat(parameters('vmnameprefix'), copyindex(), '_datadisk1')]\", 'disksizegb': \"[parameters('disksize')]\", 'lun': 0, 'createoption': 'empty'}, {'name': \"[concat(parameters('vmnameprefix'), copyindex(), '_datadisk2')]\", 'disksizegb': \"[parameters('disksize')]\", 'lun': 1, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicname'), copyindex()))]\"}]}}, 'resources': [{'type': 'extensions', 'name': 'gfs-config', 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', concat(parameters('vmnameprefix'), copyindex()))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('customscriptfilepath')]\"], 'commandtoexecute': \"[concat(variables('customscriptcommandtoexecute'), ' ', parameters('vmnameprefix'), ' ', variables('vmipprefix'), ' ', parameters('volumename'), ' ', copyindex(), ' ', parameters('scalenumber'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nsgname')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups',variables('nsgname'))]\"}}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[variables('nsgname')]\"}, 'properties': {'securityrules': \"[if(variables('os_is_linux'),variables('linuxsecurityrules'),variables('windowssecurityrules'))]\"}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[concat('tabpip', copyindex(1))]\", 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'copy': {'name': 'piploop', 'count': \"[variables('numberofinstances')]\"}, 'dependson': [\"[variables('virtualnetworkname')]\"], 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat('a', variables('publicipname'), copyindex(1))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/', variables('cseextname'))]\", 'apiversion': '2015-06-15', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.resources/deployments/', variables('nesteddeploymentname'))]\"], 'properties': {'publisher': \"[variables('cseextpublisher')]\", 'type': \"[variables('cseextname')]\", 'typehandlerversion': \"[variables('cseextversion')]\", 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('csextension')[variables('internalostype')].script]\"], 'commandtoexecute': '[concat(variables(\\'csextension\\')[variables(\\'internalostype\\')].scriptcall, \\' -dbdataluns \"\\', reference(variables(\\'nesteddeploymentname\\')).outputs.dbdataluns.value , \\'\" -dblogluns \"\\', reference(variables(\\'nesteddeploymentname\\')).outputs.dblogluns.value, \\'\"\\')]'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.resources/deployments/', variables('nesteddeploymentnamevnet'))]\", \"[resourceid('microsoft.resources/deployments/', variables('nesteddeploymentnamenic'))]\", \"[resourceid('microsoft.resources/deployments/', variables('nesteddeploymentnamepip'))]\", \"[resourceid('microsoft.resources/deployments/', variables('nesteddeploymentnamensg'))]\"], 'properties': {'networksecuritygroup': \"[reference(variables('nesteddeploymentnamenic')).outputs.selectedconfiguration.value.networksecuritygroup]\", 'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': \"[reference(variables('nesteddeploymentnamenic')).outputs.selectedconfiguration.value.publicipaddress]\", 'subnet': \"[reference(variables('nesteddeploymentnamenic')).outputs.selectedconfiguration.value.subnet]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('avsetnamedb')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 20}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmnamedb'), '-', copyindex())]\", 'copy': {'name': 'dbvmloop', 'count': \"[variables('dbvmcount')]\"}, 'dependson': ['dbnicloop', \"[resourceid('microsoft.compute/availabilitysets/', variables('avsetnamedb'))]\"], 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('avsetnamedb'))]\"}, 'hardwareprofile': {'vmsize': \"[variables('sizes')[parameters('sapsystemsize')][parameters('dbtype')].vmsize]\"}, 'osprofile': {'computername': \"[concat(variables('vmnamedb'), '-', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('images')[parameters('ostype')].publisher]\", 'offer': \"[variables('images')[parameters('ostype')].offer]\", 'sku': \"[variables('images')[parameters('ostype')].sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmnamedb'), '-', copyindex(), '-osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[variables('images')[parameters('ostype')].osdisksize]\", 'manageddisk': {'storageaccounttype': 'premium_lrs'}}, 'datadisks': \"[variables('sizes')[parameters('sapsystemsize')][parameters('dbtype')].disks]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicnamedb'), '-', copyindex()))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmnamedb'), '-', copyindex(), '/', variables('cseextname'))]\", 'apiversion': '2020-12-01', 'copy': {'name': 'dbcseloop', 'count': \"[variables('dbvmcount')]\"}, 'location': \"[parameters('location')]\", 'dependson': ['dbvmloop'], 'properties': {'publisher': \"[variables('cseextpublisher')]\", 'type': \"[variables('cseextname')]\", 'typehandlerversion': \"[variables('cseextversion')]\", 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('csextensionscript')]\"], 'commandtoexecute': \"[concat(variables('csextensionscriptcall'), ' ', variables('sizes')[parameters('sapsystemsize')][parameters('dbtype')].scriptarguments[variables('internalostype')])]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2017-05-10', 'name': \"[variables('nesteddeploymentnamensg')]\", 'type': 'microsoft.resources/deployments', 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'), '/shared/newnsg.json', parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'nsgname': {'value': \"[variables('nsgnamecl')]\"}, 'ostype': {'value': \"[variables('internalostype')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nicnamecl'), '-', copyindex())]\", 'apiversion': '2017-06-01', 'copy': {'name': 'nicclloop', 'count': \"[variables('clvmcount')]\"}, 'dependson': ['piploop', 'nicconfigclloop', \"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamevnet'))]\", \"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamelbcl'))]\"], 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': \"[reference(concat(variables('nesteddeploymentnameniccl'), '-', copyindex())).outputs.selectedconfiguration.value.publicipaddress]\", 'subnet': \"[reference(concat(variables('nesteddeploymentnameniccl'), '-', copyindex())).outputs.selectedconfiguration.value.subnet]\", 'loadbalancerbackendaddresspools': \"[reference(variables('nesteddeploymentnamelbcl')).outputs.nicbackaddresspools.value]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('avsetnameascs')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'condition': \"[equals(length(parameters('availabilityzones')), 0)]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 10}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmnameascs'), '-', copyindex())]\", 'copy': {'name': 'xscsvmloop', 'count': \"[variables('ascsvmcount')]\"}, 'dependson': ['nicascsloop', \"[resourceid('microsoft.compute/availabilitysets', variables('avsetnameascs'))]\"], 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), array(variables('azarray')[mod(copyindex(), variables('azarraylength'))]))]\", 'properties': {'availabilityset': \"[if(equals(variables('azarraylength'), 0), resourceid('microsoft.compute/availabilitysets', variables('avsetnameascs')), json('null'))]\", 'hardwareprofile': {'vmsize': \"[variables('ascsvmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmnameascs'), '-', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('images')[parameters('ostype')].publisher]\", 'offer': \"[variables('images')[parameters('ostype')].offer]\", 'sku': \"[variables('images')[parameters('ostype')].sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmnameascs'), '-', copyindex(), '-osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'premium_lrs'}}, 'datadisks': [{'lun': 0, 'createoption': 'empty', 'disksizegb': 128}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicnameascs'), '-', copyindex()))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('avsetnameascs')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'condition': \"[equals(length(parameters('availabilityzones')), 0)]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 10}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmnameascs'), '-', copyindex())]\", 'copy': {'name': 'xscsvmloop', 'count': \"[variables('ascsvmcount')]\"}, 'dependson': ['nicascsloop', \"[resourceid('microsoft.compute/availabilitysets', variables('avsetnameascs'))]\"], 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), array(variables('azarray')[mod(copyindex(), variables('azarraylength'))]))]\", 'properties': {'availabilityset': \"[if(equals(variables('azarraylength'), 0), resourceid('microsoft.compute/availabilitysets', variables('avsetnameascs')), json('null'))]\", 'hardwareprofile': {'vmsize': \"[variables('ascsvmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmnameascs'), '-', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('images')[parameters('ostype')].publisher]\", 'offer': \"[variables('images')[parameters('ostype')].offer]\", 'sku': \"[variables('images')[parameters('ostype')].sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmnameascs'), '-', copyindex(), '-osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'premium_lrs'}}, 'datadisks': [{'lun': 0, 'createoption': 'empty', 'disksizegb': 128}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicnameascs'), '-', copyindex()))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmnameascs'), '-', copyindex(), '/', variables('csextension')[variables('internalostype')].name)]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': ['xscsvmloop'], 'copy': {'name': 'xscsextvmloop', 'count': \"[variables('ascsvmcount')]\"}, 'properties': {'publisher': \"[variables('csextension')[variables('internalostype')].publisher]\", 'type': \"[variables('csextension')[variables('internalostype')].name]\", 'typehandlerversion': \"[variables('csextension')[variables('internalostype')].version]\", 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('csextension')[variables('internalostype')].script]\"], 'commandtoexecute': \"[concat(variables('csextension')[variables('internalostype')].scriptcall, ' ', variables('scriptargumentsascsdi')[variables('internalostype')])]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[concat(variables('nsgname'))]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'securityrules': \"[variables('selectedsecurityrules')]\"}}{'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"], 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': '10.0.0.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipnamelbascs')]\", 'apiversion': '2020-05-01', 'condition': \"[and(greater(variables('ascsvmcount') , 1), greater(length(parameters('subnetid')), 0))]\", 'sku': {'name': 'standard'}, 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/loadbalancers', 'name': \"[variables('loadbalancernamepubascs')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'condition': \"[and(greater(variables('ascsvmcount') , 1), greater(length(parameters('subnetid')), 0))]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipnamelbascs'))]\"], 'sku': {'name': 'standard'}, 'properties': {'frontendipconfigurations': [{'name': \"[variables('frontendpubascs')]\", 'properties': {'publicipaddress': {'id': \"[variables('pipidascs')]\"}}}], 'outboundrules': [{'name': 'test', 'properties': {'frontendipconfigurations': [{'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancernamepubascs'), variables('frontendpubascs'))]\"}], 'allocatedoutboundports': 1000, 'idletimeoutinminutes': 4, 'enabletcpreset': true, 'protocol': 'all', 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancernamepubascs'), variables('backendpoolpubascs'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('backendpoolpubascs')]\"}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('avsetnamedi')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 20}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmnamedi'), '-', copyindex())]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': ['nicdiloop', \"[resourceid('microsoft.compute/availabilitysets', variables('avsetnamedi'))]\"], 'copy': {'name': 'vmloop', 'count': \"[variables('divmcount')]\"}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('avsetnamedi'))]\"}, 'hardwareprofile': {'vmsize': \"[variables('divmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmnamedi'), '-', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('images')[parameters('ostype')].publisher]\", 'offer': \"[variables('images')[parameters('ostype')].offer]\", 'sku': \"[variables('images')[parameters('ostype')].sku]\", 'version': \"[variables('images')[parameters('ostype')].version]\"}, 'osdisk': {'name': \"[concat(variables('vmnamedi'), '-', copyindex(), '-osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'premium_lrs'}}, 'copy': [{'name': 'datadisks', 'count': 1, 'input': {'lun': 0, 'createoption': 'empty', 'disksizegb': 128}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicnamedi'), '-', copyindex()))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'))]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'zones': \"[variables('selectedzones')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[variables('sizes')[parameters('sapsystemsize')][variables('internalostype')].vmsize]\"}, 'osprofile': {'computername': \"[parameters('computername')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('images')[parameters('ostype')].publisher]\", 'offer': \"[variables('images')[parameters('ostype')].offer]\", 'sku': \"[variables('images')[parameters('ostype')].sku]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'), '-osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[variables('images')[parameters('ostype')].osdisksize]\", 'manageddisk': {'storageaccounttype': 'premium_lrs'}}, 'datadisks': \"[if(parameters('deployemptytarget'), json('[]'), variables('osconfigs')[variables('internalostype')].disks)]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'), '/', variables('cseextname'))]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'condition': \"[not(parameters('deployemptytarget'))]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': \"[variables('cseextpublisher')]\", 'type': \"[variables('cseextname')]\", 'typehandlerversion': \"[variables('cseextversion')]\", 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('csextensionscript')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat(variables('csextensionscriptcall'), ' ', variables('osconfigs')[variables('internalostype')].scriptarguments)]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'apiversion': '2020-06-01', 'name': \"[variables('fsavsetname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 20}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2017-05-10', 'name': \"[variables('nesteddeploymentnamensg')]\", 'type': 'microsoft.resources/deployments', 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('shared/newnsg.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'nsgname': {'value': \"[variables('nsgname')]\"}, 'ostype': {'value': \"[variables('internalostype')]\"}}}}{'apiversion': '2017-05-10', 'name': \"[variables('nesteddeploymentnamevnet')]\", 'type': 'microsoft.resources/deployments', 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'dependson': [\"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamensg'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('shared/newvnetnsg.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'vnetname': {'value': \"[variables('vnetname')]\"}, 'addressprefix': {'value': '10.0.0.0/16'}, 'subnetname': {'value': \"[variables('subnetname')]\"}, 'subnetprefix': {'value': '10.0.0.0/24'}, 'nsgname': {'value': \"[variables('nsgname')]\"}}}}{'apiversion': '2017-05-10', 'name': \"[variables('nesteddeploymentnamenic')]\", 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('shared/nic-config.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'vnetname': {'value': \"[variables('vnetname')]\"}, 'subnetname': {'value': \"[variables('subnetname')]\"}, 'publicipname': {'value': \"[variables('publicipname')]\"}, 'subnetid': {'value': \"[parameters('subnetid')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[concat(variables('nsgnamexscs'))]\", 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'securityrules': \"[variables('selectedsecurityrules')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[concat(variables('nsgname'))]\", 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'securityrules': \"[variables('selectedsecurityrules')]\"}}{'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('nsgname'))]\"], 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': '10.0.0.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipname')]\", 'apiversion': '2020-07-01', 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\"], 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2021-01-01', 'name': \"[variables('nesteddeploymentnamensg')]\", 'type': 'microsoft.resources/deployments', 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('shared/newnsg.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'nsgname': {'value': \"[variables('nsgnamecl')]\"}, 'ostype': {'value': \"[variables('internalostype')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2021-01-01', 'name': \"[variables('nesteddeploymentnamevnet')]\", 'type': 'microsoft.resources/deployments', 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'dependson': [\"[resourceid('microsoft.resources/deployments/', variables('nesteddeploymentnamensg'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('shared/newvnetnsg.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'vnetname': {'value': \"[variables('vnetname')]\"}, 'addressprefix': {'value': \"[variables('addressprefix')]\"}, 'subnetname': {'value': \"[variables('subnetname')]\"}, 'subnetprefix': {'value': \"[variables('subnetprefix')]\"}, 'nsgname': {'value': \"[variables('nsgnamecl')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2021-01-01', 'name': \"[concat(variables('nesteddeploymentnamepip'), '-', copyindex())]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'piploop', 'count': \"[variables('clvmcount')]\"}, 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('shared/newpip.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'publicipname': {'value': \"[concat(variables('publicipnamecl'), '-', copyindex())]\"}, 'publicipaddresstype': {'value': \"[variables('publicipaddresstype')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2021-01-01', 'name': \"[variables('nesteddeploymentnamelbcl')]\", 'type': 'microsoft.resources/deployments', 'dependson': [\"[resourceid('microsoft.resources/deployments/', variables('nesteddeploymentnamevnet'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('shared/loadbalancer.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'loadbalancername': {'value': \"[variables('loadbalancernamecl')]\"}, 'sapsystemcount': {'value': 1}, 'stacktype': {'value': \"[parameters('stacktype')]\"}, 'ostype': {'value': \"[variables('internalostype')]\"}, 'createxscs': {'value': true}, 'createdb': {'value': true}, 'dbtype': {'value': \"[parameters('dbtype')]\"}, 'subnetid': {'value': \"[variables('selectedsubnetid')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2021-01-01', 'name': \"[concat(variables('nesteddeploymentnameniccl'), '-', copyindex())]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'nicconfigclloop', 'count': \"[variables('clvmcount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('shared/nic-config.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'vnetname': {'value': \"[variables('vnetname')]\"}, 'subnetname': {'value': \"[variables('subnetname')]\"}, 'publicipname': {'value': \"[concat(variables('publicipnamecl'), '-', copyindex())]\"}, 'nsgname': {'value': ''}, 'subnetid': {'value': \"[parameters('subnetid')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('avsetnameascs')]\", 'apiversion': '2016-04-30-preview', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 3, 'platformupdatedomaincount': 20}}{'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('avsetnamedb')]\", 'apiversion': '2016-04-30-preview', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 3, 'platformupdatedomaincount': 20}}{'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('avsetnamedi')]\", 'apiversion': '2016-04-30-preview', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 3, 'platformupdatedomaincount': 20}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2017-05-10', 'name': \"[variables('nesteddeploymentnamensg')]\", 'type': 'microsoft.resources/deployments', 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'), '/shared/newnsg.json', parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'nsgname': {'value': \"[variables('nsgname')]\"}, 'ostype': {'value': \"[variables('internalostype')]\"}}}}{'apiversion': '2017-05-10', 'name': \"[variables('nesteddeploymentnamevnet')]\", 'type': 'microsoft.resources/deployments', 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'dependson': [\"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamensg'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'), '/shared/newvnetnsg.json', parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'vnetname': {'value': \"[variables('vnetname')]\"}, 'addressprefix': {'value': '10.0.0.0/16'}, 'subnetname': {'value': \"[variables('subnetname')]\"}, 'subnetprefix': {'value': '10.0.0.0/24'}, 'nsgname': {'value': \"[variables('nsgname')]\"}}}}{'apiversion': '2017-05-10', 'name': \"[concat(variables('nesteddeploymentnamepip'), '-', copyindex())]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'pipascsloop', 'count': \"[variables('ascsvmcount')]\"}, 'condition': \"[equals(length(parameters('subnetid')), 0)]\", 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'), '/shared/newpip.json', parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'publicipname': {'value': \"[concat(variables('publicipnameascs'), '-', copyindex())]\"}, 'publicipaddresstype': {'value': 'dynamic'}}}}{'apiversion': '2017-05-10', 'name': \"[variables('nesteddeploymentnamelbascs')]\", 'type': 'microsoft.resources/deployments', 'dependson': [\"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamevnet'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'), '/shared/loadbalancer.json', parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'loadbalancername': {'value': \"[variables('loadbalancernameascs')]\"}, 'sapsystemcount': {'value': 1}, 'stacktype': {'value': \"[parameters('stacktype')]\"}, 'ostype': {'value': \"[variables('internalostype')]\"}, 'createxscs': {'value': true}, 'createdb': {'value': false}, 'subnetid': {'value': \"[variables('selectedsubnetid')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'apiversion': '2017-05-10', 'name': \"[concat(variables('nesteddeploymentnamenicascs'), '-', copyindex())]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'nicconfigascsloop', 'count': \"[variables('ascsvmcount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'), '/shared/nic-config.json', parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'vnetname': {'value': \"[variables('vnetname')]\"}, 'subnetname': {'value': \"[variables('subnetname')]\"}, 'publicipname': {'value': \"[concat(variables('publicipnameascs'), '-', copyindex())]\"}, 'subnetid': {'value': \"[parameters('subnetid')]\"}}}}{'apiversion': '2017-05-10', 'name': \"[concat(variables('nesteddeploymentnameprof'), '-ascs-', copyindex())]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'osdiskpartsascsloop', 'count': \"[variables('ascsvmcount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'), '/shared/os-disk-parts-md.json', parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'imagesku': {'value': ''}, 'imagepublisher': {'value': ''}, 'imageoffer': {'value': ''}, 'imageversion': {'value': ''}, 'osdisktype': {'value': \"[variables('osdisktype')]\"}, 'ostype': {'value': \"[variables('internalostype')]\"}, 'vmname': {'value': \"[concat(variables('vmnameascs'), '-', copyindex())]\"}, 'storagetype': {'value': 'premium_lrs'}, 'manageddiskid': {'value': \"[parameters('userimageid')]\"}}}}{'apiversion': '2017-05-10', 'name': \"[concat(variables('nesteddeploymentnameascs'), '-', copyindex())]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'serverascsloop', 'count': \"[variables('ascsvmcount')]\"}, 'dependson': ['nicascsloop', \"[concat('microsoft.compute/availabilitysets/', variables('avsetnameascs'))]\", 'osdiskpartsascsloop'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[concat(parameters('_artifactslocation'), '/shared/server-md.json', parameters('_artifactslocationsastoken'))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'imagereference': {'value': \"[reference(concat(variables('nesteddeploymentnameprof'), '-ascs-', copyindex())).outputs.imagereference.value]\"}, 'osdisk': {'value': \"[reference(concat(variables('nesteddeploymentnameprof'), '-ascs-', copyindex())).outputs.osdisk.value]\"}, 'osdisktype': {'value': \"[variables('osdisktype')]\"}, 'vmname': {'value': \"[concat(variables('vmnameascs'), '-', copyindex())]\"}, 'vmsize': {'value': \"[variables('vmsizes')[parameters('sapsystemsize')][parameters('systemavailability')].ascsserversize]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'csextensionscript': {'value': \"[variables('csextension')[variables('internalostype')].script]\"}, 'csextensionscriptcall': {'value': \"[variables('csextension')[variables('internalostype')].scriptcall]\"}, 'csextensionscriptargs': {'value': ''}, 'avsetobj': {'value': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('avsetnameascs'))]\"}}, 'useavset': {'value': true}, 'nicname': {'value': \"[concat(variables('nicnameascs'), '-', copyindex())]\"}, 'datadisksobj': {'value': {'datadisks': [{'lun': 0, 'createoption': 'empty', 'disksizegb': 128}]}}, 'ostype': {'value': \"[variables('internalostype')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nicnameascs'), '-', copyindex())]\", 'apiversion': '2017-06-01', 'copy': {'name': 'nicascsloop', 'count': \"[variables('ascsvmcount')]\"}, 'dependson': ['pipascsloop', 'nicconfigascsloop', \"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamevnet'))]\", \"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamelbascs'))]\"], 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': \"[reference(concat(variables('nesteddeploymentnamenicascs'), '-', copyindex())).outputs.selectedconfiguration.value.publicipaddress]\", 'subnet': \"[reference(concat(variables('nesteddeploymentnamenicascs'), '-', copyindex())).outputs.selectedconfiguration.value.subnet]\", 'loadbalancerbackendaddresspools': \"[reference(variables('nesteddeploymentnamelbascs')).outputs.nicbackaddresspools.value]\"}}]}}{'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nicnamedb'), '-', copyindex())]\", 'apiversion': '2017-06-01', 'copy': {'name': 'nicdbloop', 'count': \"[variables('dbvmcount')]\"}, 'dependson': [\"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamevnet'))]\", \"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamelbdb'))]\", 'nicconfigdbloop'], 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': \"[reference(concat(variables('nesteddeploymentnamenicdb'), '-', copyindex())).outputs.selectedconfiguration.value.subnet]\", 'loadbalancerbackendaddresspools': \"[reference(variables('nesteddeploymentnamelbdb')).outputs.nicbackaddresspools.value]\"}}]}}{'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nicnamedi'), '-', copyindex())]\", 'apiversion': '2017-06-01', 'dependson': [\"[concat('microsoft.resources/deployments/', variables('nesteddeploymentnamevnet'))]\", 'nicconfigdiloop'], 'copy': {'name': 'nicdiloop', 'count': \"[variables('divmcount')]\"}, 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': \"[reference(concat(variables('nesteddeploymentnamenicdi'), '-', copyindex())).outputs.selectedconfiguration.value.subnet]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-12-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nicname')]\", \"[variables('bootstorageaccountname')]\"], 'tags': {'quickstartname': 'wildfly 18 on centos 8 (stand-alone vm)'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorsshkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('bootstorageaccountname'), '2021-02-01').primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs', 'tier': 'standard'}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('longnaminginfix')]\"}}}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-06-01', 'name': \"[variables('loadbalancername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid')]\"}}}], 'backendaddresspools': [{'name': \"[variables('bepoolname')]\"}], 'loadbalancingrules': [{'name': 'lbrule', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'backendaddresspool': {'id': \"[variables('lbpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'probe': {'id': \"[variables('lbprobeid')]\"}}}], 'probes': [{'name': 'tcpprobe', 'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 5, 'numberofprobes': 2}}], 'inboundnatpools': [{'name': \"[variables('natpoolname')]\", 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendportrangestart': \"[variables('natstartport')]\", 'frontendportrangeend': \"[variables('natendport')]\", 'backendport': \"[variables('natbackendport')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-08-01', 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}, {'name': \"[variables('agsubnetname')]\", 'properties': {'addressprefix': \"[variables('agsubnetprefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-08-01', 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('longnaminginfix')]\"}}}{'type': 'microsoft.network/loadbalancers', 'name': \"[variables('loadbalancername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-08-01', 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfrontendname')]\", 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid')]\"}}}], 'backendaddresspools': [{'name': \"[variables('bepoolname')]\"}], 'inboundnatpools': [{'name': \"[variables('natpoolname')]\", 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendportrangestart': \"[variables('natstartport')]\", 'frontendportrangeend': \"[variables('natendport')]\", 'backendport': \"[variables('natbackendport')]\"}}], 'loadbalancingrules': [{'name': 'lbrule', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('bepoolname'))]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('loadbalancername'), variables('lbprobename'))]\"}, 'protocol': 'tcp', 'loaddistribution': 'sourceip', 'frontendport': 80, 'backendport': 80, 'idletimeoutinminutes': 15}}], 'probes': [{'name': \"[variables('lbprobename')]\", 'properties': {'protocol': 'http', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 2, 'requestpath': 'cgi-bin/probe'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-06-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'basic'}, 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[variables('dnsnameforpublicip')]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets',variables('virtualnetworkname'),variables('subnet1name'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'customdata': \"[base64(variables('publicipaddressname'))]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/newuserscript')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/tomcat-setup-redhat.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('sh tomcat-setup-redhat.sh',' ',parameters('adminusername'),' ',parameters('tomcatusername'),' ',parameters('tomcatpassword'),' ',parameters('sshpassphrase'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'name': \"[variables('vmname')]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[variables('vmnicname')]\"], 'tags': {'displayname': 'vm01'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmimagepublisher')]\", 'offer': \"[variables('vmimageoffer')]\", 'sku': \"[parameters('vmvisualstudioversion')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmnicname'))]\"}]}}, 'resources': [{'name': 'setupchocolatey', 'type': 'extensions', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'tags': {'displayname': 'setupchocolatey'}, 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/setupchocolatey.ps1', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('powershell -executionpolicy bypass -file scripts/setupchocolatey.ps1 -chocopackages ',parameters('chocopackages'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-80', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '80', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}, {'name': 'default-allow-3389', 'properties': {'priority': 1001, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'name': \"[variables('names').avs]\", 'type': 'microsoft.compute/availabilitysets', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'tags': {'displayname': 'availabilitysets'}, 'properties': {'platformupdatedomaincount': 5, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'name': \"[variables('names').vm]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2017-12-01', 'dependson': [\"[variables('names').avs]\", \"[variables('names').nic]\"], 'tags': {'displayname': 'virtualmachines'}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('names').avs)]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('names').vm]\", 'adminusername': \"[parameters('vmadminuser')]\", 'adminpassword': \"[parameters('vmadminpassword')]\", 'windowsconfiguration': {'provisionvmagent': true, 'enableautomaticupdates': true}}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('names').nic)]\"}]}}, 'resources': [{'name': 'vstsagent', 'type': 'extensions', 'location': \"[parameters('location')]\", 'apiversion': '2017-12-01', 'dependson': [\"[variables('names').vm]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat(variables('powershell').folder, '/', variables('powershell').script, parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'powershell.exe -executionpolicy unrestricted -command \"& {\\', \\'./\\', variables(\\'powershell\\').script, \\' \\', variables(\\'powershell\\').parameters, \\'}\"\\')]'}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(variables('publicipaddressname'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'publiciploop', 'count': \"[parameters('agentvmcount')]\"}, 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[concat(parameters('dnslabelprefix'), '-', copyindex())]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'customdata': \"[base64(variables('publicipaddressname'))]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[tolower(variables('storagename'))]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storage', 'tags': {'displayname': 'vs labvm storage account'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('networkinterfacename'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}, 'osdisk': {'name': 'tfsbasicmanagedosdisk', 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/createdc')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('vmname'))]\"], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.19', 'autoupgrademinorversion': true, 'settings': {'modulesurl': \"[uri(parameters('_artifactslocation'), concat('dsc/createdc.ps1.zip', parameters('_artifactslocationsastoken')))]\", 'configurationfunction': 'createdc.ps1\\\\createdc', 'properties': {'domainname': \"[parameters('domainname')]\", 'admincreds': {'username': \"[parameters('adminusername')]\", 'password': 'privatesettingsref:adminpassword'}}}, 'protectedsettings': {'items': {'adminpassword': \"[parameters('adminpassword')]\"}}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/configuretfs')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/extensions', parameters('vmname'), 'createdc')]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.7', 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/configuretfsbasic.ps1', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': 'powershell -executionpolicy unrestricted -file scripts/configuretfsbasic.ps1'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[tolower(parameters('storagename'))]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storage', 'tags': {'displayname': 'vs labvm storage account'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'comments': \"simple network security group for subnet [variables('vnet01subnet1name')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2021-02-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[concat('acisite', uniquestring(resourcegroup().id))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('vmdnsname')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deploymentscripts', 'apiversion': '2020-10-01', 'name': \"[format('{0}-{1}', variables('scriptname'), variables('wordpresssharename'))]\", 'location': \"[parameters('location')]\", 'kind': 'azurepowershell', 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\": {}}}, 'properties': {'azpowershellversion': '3.0', 'storageaccountsettings': {'storageaccountname': \"[parameters('storageaccountname')]\", 'storageaccountkey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2021-04-01').keys[0].value]\"}, 'scriptcontent': \"[variables('wpscripttoexecute')]\", 'cleanuppreference': 'onsuccess', 'retentioninterval': 'p1d', 'timeout': 'pt5m'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]}{'type': 'microsoft.resources/deploymentscripts', 'apiversion': '2020-10-01', 'name': \"[format('{0}-{1}', variables('scriptname'), variables('mysqlsharename'))]\", 'location': \"[parameters('location')]\", 'kind': 'azurepowershell', 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\": {}}}, 'properties': {'azpowershellversion': '3.0', 'storageaccountsettings': {'storageaccountname': \"[parameters('storageaccountname')]\", 'storageaccountkey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2021-04-01').keys[0].value]\"}, 'scriptcontent': \"[variables('sqlscripttoexecute')]\", 'cleanuppreference': 'onsuccess', 'retentioninterval': 'p1d', 'timeout': 'pt5m'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'apiversion': '2014-06-01', 'name': \"[variables('appserviceplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('appserviceplanname')]\", 'appservicetier': \"[variables('appservicetier')]\", 'workersize': \"[variables('appserviceworkersize')]\", 'hostingenvironment': '', 'numberofworkers': 1}}{'apiversion': '2015-02-01', 'name': \"[parameters('appname')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'tags': {\"[concat('hidden-related:', resourceid('microsoft.web/serverfarms', variables('appserviceplanname')))]\": 'empty'}, 'dependson': [\"[concat('microsoft.web/serverfarms/', variables('appserviceplanname'))]\"], 'properties': {'name': \"[parameters('appname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'hostingenvironment': ''}, 'resources': [{'apiversion': '2015-04-01', 'name': 'msdeploy', 'type': 'extensions', 'dependson': [\"[concat('microsoft.web/sites/', parameters('appname'))]\", \"[concat('microsoft.sql/servers/', variables('dbservername'), '/databases/', variables('dbname'))]\", \"[concat('microsoft.media/mediaservices/', variables('mediaservicesaccountname'))]\"], 'properties': {'packageuri': 'https://auxmktplceprod.blob.core.windows.net/packages/orchard.web.1.10.x-ams.zip', 'dbtype': 'sql', 'connectionstring': \"[concat('data source=tcp:', reference(concat('microsoft.sql/servers/', variables('dbservername'))).fullyqualifieddomainname, ',1433;initial catalog=', variables('dbname'), ';user id=', parameters('dbadministratorlogin'), '@', variables('dbservername'), ';password=', parameters('dbadministratorloginpassword'), ';')]\", 'setparameters': {'application path': \"[parameters('appname')]\", 'database server': \"[reference(concat('microsoft.sql/servers/', variables('dbservername'))).fullyqualifieddomainname]\", 'database name': \"[variables('dbname')]\", 'database username': \"[parameters('nonadmindatabaseusername')]\", 'database password': \"[parameters('nonadmindatabasepassword')]\", 'database administrator': \"[parameters('dbadministratorlogin')]\", 'database administrator password': \"[parameters('dbadministratorloginpassword')]\"}}}, {'apiversion': '2015-04-01', 'name': 'connectionstrings', 'type': 'config', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('appname'))]\", \"[concat('microsoft.sql/servers/', variables('dbservername'), '/databases/', variables('dbname'))]\", \"[concat('microsoft.web/sites/', parameters('appname'), '/extensions/msdeploy')]\"], 'properties': {'defaultconnection': {'value': \"[concat('data source=tcp:', reference(concat('microsoft.sql/servers/', variables('dbservername'))).fullyqualifieddomainname, ',1433;initial catalog=', variables('dbname'), ';user id=', parameters('dbadministratorlogin'), '@', variables('dbservername'), ';password=', parameters('dbadministratorloginpassword'), ';')]\", 'type': 'sqlazure'}}}, {'apiversion': '2015-04-01', 'name': 'appsettings', 'type': 'config', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('appname'))]\", \"[concat('microsoft.media/mediaservices/', variables('mediaservicesaccountname'))]\", \"[concat('microsoft.web/sites/', parameters('appname'), '/extensions/msdeploy')]\"], 'properties': {'defaultrecipe': 'video portal', 'azure.mediaservices.accountname': \"[variables('mediaservicesaccountname')]\", 'azure.mediaservices.accountkey': \"[listkeys(resourceid('microsoft.media/mediaservices', variables('mediaservicesaccountname')), providers('microsoft.media', 'mediaservices')'2015-10-01'0]).primarykey]\", 'azure.mediaservices.storageaccountkey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2016-01-01').keys[0].value]\"}}, {'apiversion': '2015-04-01', 'name': 'web', 'type': 'config', 'dependson': [\"[concat('microsoft.web/sites/', parameters('appname'))]\", \"[concat('microsoft.web/sites/', parameters('appname'), '/extensions/msdeploy')]\"], 'properties': {'phpversion': 'off', 'netframeworkversion': 'v4.5', 'use32bitworkerprocess': 'true', 'websocketsenabled': false, 'alwayson': 'true', 'httploggingenabled': true, 'logsdirectorysizelimit': 40}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': \"[variables('guid')]\", 'properties': {'mode': 'incremental', 'template': {'$schema': 'https://schema.management.azure.com/schemas/2015-01-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'resources': []}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2017-10-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2017-10-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('frontendnsgname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'custom network security group'}, 'properties': {'securityrules': [{'name': 'default-allow-ssh', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}, {'name': 'default-allow-eap-admin', 'properties': {'description': 'allow eap/admin', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '9990', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1020, 'direction': 'inbound'}}, {'name': 'default-allow-eap', 'properties': {'description': 'allow web/eap', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '8080', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1010, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-02-01', 'name': \"[variables('bootstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'tags': {'quickstartname': 'jboss eap on rhel (clustered, multi-vm)'}}{'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-02-01', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storagereplication')]\"}, 'kind': 'storage', 'tags': {'quickstartname': 'jboss eap on rhel (clustered, multi-vm)'}, 'resources': [{'type': 'blobservices/containers', 'apiversion': '2021-02-01', 'name': \"[concat('default/', variables('containername'))]\", 'dependson': [\"[variables('storageaccountname')]\"]}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-01-01', 'name': \"[variables('bootstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'tags': {'quickstartname': 'jboss eap on rhel (stand-alone vm)'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': \"[variables('imageversion')]\"}, 'datadisks': [{'disksizegb': \"[parameters('sizeofeachdatadiskingb')]\", 'lun': 0, 'name': \"[concat(variables('vmname'),'_datadisk1')]\", 'createoption': 'empty'}], 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/newuserscript')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('install_bitcore.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('sh install_bitcore.sh ', parameters('adminusername'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'), '-boss')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat(variables('nicname'), '-boss'))]\", \"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('bossnodesize')]\"}, 'osprofile': {'computername': \"[concat('jmeter-boss')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('settings').imagereference]\", 'osdisk': {'name': \"[concat(variables('vmname'),'-boss','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicname'), '-boss'))]\"}]}}, 'resources': [{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'), '-boss', '/installjmeter')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat(variables('vmname'), '-boss'))]\"], 'properties': {'publisher': \"[variables('settings').extensionsettings.boss.publisher]\", 'type': \"[variables('settings').extensionsettings.boss.type]\", 'typehandlerversion': \"[variables('settings').extensionsettings.boss.typehandlerversion]\", 'settings': {'fileuris': \"[variables('settings').extensionsettings.boss.settings.fileuris]\", 'commandtoexecute': \"[concat(variables('settings').extensionsettings.boss.settings.commandtoexecute)]\"}}}]}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'), '-sub', copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'subvmloop', 'count': \"[parameters('subnodecount')]\"}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat(variables('nicname'), '-sub', copyindex()))]\", \"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('subnodesize')]\"}, 'osprofile': {'computername': \"[concat('jmeter-sub', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('settings').imagereference]\", 'osdisk': {'name': \"[concat(variables('vmname'), '-sub', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicname'), '-sub', copyindex()))]\"}]}}, 'resources': [{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'), '-sub', copyindex(), '/installjmeter')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat(variables('vmname'), '-sub', copyindex()))]\"], 'properties': {'publisher': \"[variables('settings').extensionsettings.sub.publisher]\", 'type': \"[variables('settings').extensionsettings.sub.type]\", 'typehandlerversion': \"[variables('settings').extensionsettings.sub.typehandlerversion]\", 'settings': {'fileuris': \"[variables('settings').extensionsettings.sub.settings.fileuris]\", 'commandtoexecute': \"[concat(variables('settings').extensionsettings.sub.settings.commandtoexecute)]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'properties': {'platformupdatedomaincount': 1, 'platformfaultdomaincount': 1}, 'sku': {'name': 'aligned'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('nsgname')]\", 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allows inbound ssh traffic', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'elasticsearch', 'properties': {'description': 'allows inbound http traffic from anyone', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '5601', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-11-01', 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-11-01', 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('domainnamelabel')]\"}}}{'type': 'microsoft.network/loadbalancers', 'name': \"[variables('loadbalancername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-11-01', 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid')]\"}}}], 'backendaddresspools': [{'name': \"[variables('backendpoolname')]\"}], 'loadbalancingrules': [{'name': 'lbrule', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'backendaddresspool': {'id': \"[variables('loadbalancerpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 5601, 'backendport': 5601, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'probe': {'id': \"[variables('loadbalancerprobeid')]\"}}}, {'name': 'ssh', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'backendaddresspool': {'id': \"[variables('loadbalancerpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 22, 'backendport': 22, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'probe': {'id': \"[variables('sshprobeid')]\"}}}], 'probes': [{'name': 'tcpprobe', 'properties': {'protocol': 'tcp', 'port': 9200, 'intervalinseconds': 30, 'numberofprobes': 2}}, {'name': 'sshprobe', 'properties': {'protocol': 'tcp', 'port': 22, 'intervalinseconds': 30, 'numberofprobes': 2}}]}}{'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nicname'), copyindex())]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-11-01', 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\"], 'copy': {'name': 'masternodesnicloop', 'count': 3}, 'properties': {'ipconfigurations': [{'name': 'ipconfigmaster', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[concat('10.0.0.1', copyindex())]\", 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[variables('loadbalancerpoolid')]\"}]}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'tier': \"[parameters('serviceplantier')]\", 'name': \"[parameters('serviceplansku')]\"}, 'kind': 'linux', 'properties': {}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('appname')]\", 'location': \"[parameters('location')]\", 'tags': {\"[concat('hidden-related:', resourceid('microsoft.web/serverfarms', variables('appserviceplanname')))]\": 'empty'}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"], 'properties': {'name': \"[parameters('appname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"}, 'resources': [{'type': 'extensions', 'apiversion': '2020-06-01', 'name': 'msdeploy', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('appname'))]\", \"[resourceid('microsoft.web/sites/config', parameters('appname'), 'web')]\", \"[resourceid('microsoft.sql/servers/databases', parameters('dbservername'), parameters('dbname'))]\", \"[variables('storageaccountname')]\"], 'properties': {'packageuri': \"[uri(parameters('_artifactslocation'), concat('umbracocms.webpi.7.4.3.zip', parameters('_artifactslocationsastoken')))]\", 'dbtype': 'sql', 'connectionstring': \"[concat('data source=tcp:', reference(resourceid('microsoft.sql/servers', parameters('dbservername'))).fullyqualifieddomainname, ',1433;initial catalog=', parameters('dbname'), ';user id=', parameters('dbadministratorlogin'), '@', parameters('dbservername'), ';password=', parameters('dbadministratorloginpassword'), ';')]\", 'setparameters': {'application path': \"[parameters('appname')]\", 'database server': \"[reference(resourceid('microsoft.sql/servers', parameters('dbservername'))).fullyqualifieddomainname]\", 'database name': \"[parameters('dbname')]\", 'database username': \"[parameters('nonadmindatabaseusername')]\", 'database password': \"[parameters('nonadmindatabasepassword')]\", 'database administrator': \"[parameters('dbadministratorlogin')]\", 'database administrator password': \"[parameters('dbadministratorloginpassword')]\"}}}, {'type': 'config', 'apiversion': '2020-06-01', 'name': 'connectionstrings', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('appname'))]\", \"[resourceid('microsoft.sql/servers/databases', parameters('dbservername'), parameters('dbname'))]\", \"[resourceid('microsoft.web/sites/extensions', parameters('appname'), 'msdeploy')]\"], 'properties': {'defaultconnection': {'value': \"[concat('data source=tcp:', reference(resourceid('microsoft.sql/servers', parameters('dbservername'))).fullyqualifieddomainname, ',1433;initial catalog=', parameters('dbname'), ';user id=', parameters('dbadministratorlogin'), '@', parameters('dbservername'), ';password=', parameters('dbadministratorloginpassword'), ';')]\", 'type': 'sqlazure'}}}, {'apiversion': '2020-06-01', 'name': 'web', 'type': 'config', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('appname'))]\"], 'properties': {'phpversion': 'off', 'netframeworkversion': 'v4.5', 'use32bitworkerprocess': 'true', 'websocketsenabled': true, 'alwayson': 'true', 'httploggingenabled': true, 'logsdirectorysizelimit': 40}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'name': \"[parameters('actiongroupname')]\", 'type': 'microsoft.insights/actiongroups', 'apiversion': '2019-06-01', 'location': 'global', 'properties': {'groupshortname': \"[parameters('actiongroupshortname')]\", 'enabled': true, 'emailreceivers': [{'name': 'test', 'emailaddress': \"[parameters('emails')[0]]\", 'usecommonalertschema': true}]}}{'apiversion': '2014-04-01', 'name': \"[concat(variables('appserviceplanname'), '-scaleset')]\", 'type': 'microsoft.insights/autoscalesettings', 'location': \"[variables('appinsightsregion')]\", 'tags': {\"[concat('hidden-link:', '/subscriptions/', subscription().subscriptionid,'/resourcegroups/', resourcegroup().name, '/providers/microsoft.web/serverfarms/', variables('appserviceplanname'))]\": 'resource'}, 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('appserviceplanname'))]\"], 'properties': {'profiles': [{'name': 'default', 'capacity': {'minimum': 1, 'maximum': 2, 'default': 1}, 'rules': [{'metrictrigger': {'metricname': 'cpupercentage', 'metricresourceuri': \"[concat(resourcegroup().id, '/providers/microsoft.web/serverfarms/', variables('appserviceplanname'))]\", 'timegrain': 'pt1m', 'statistic': 'average', 'timewindow': 'pt10m', 'timeaggregation': 'average', 'operator': 'greaterthan', 'threshold': 80}, 'scaleaction': {'direction': 'increase', 'type': 'changecount', 'value': 1, 'cooldown': 'pt10m'}}, {'metrictrigger': {'metricname': 'cpupercentage', 'metricresourceuri': \"[concat(resourcegroup().id, '/providers/microsoft.web/serverfarms/', variables('appserviceplanname'))]\", 'timegrain': 'pt1m', 'statistic': 'average', 'timewindow': 'pt1h', 'timeaggregation': 'average', 'operator': 'lessthan', 'threshold': 60}, 'scaleaction': {'direction': 'decrease', 'type': 'changecount', 'value': 1, 'cooldown': 'pt1h'}}]}], 'enabled': false, 'name': \"[concat(variables('appserviceplanname'), '-scaleset')]\", 'targetresourceuri': \"[concat(resourcegroup().id, '/providers/microsoft.web/serverfarms/', variables('appserviceplanname'))]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'pid-738e3eec-68d4-4667-8377-c05c77c21f1b', 'properties': {'mode': 'incremental', 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'resources': []}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'dbtemplate', 'properties': {'mode': 'incremental', 'parameters': {'moodlecommon': {'value': \"[variables('moodlecommon')]\"}, 'location': {'value': \"[parameters('location')]\"}}, 'templatelink': {'uri': \"[concat(variables('moodlecommon').basetemplateurl, parameters('dbservertype'), '.json', parameters('_artifactslocationsastoken'))]\"}}}{'condition': \"[parameters('azurebackupswitch')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'recoverytemplate', 'properties': {'mode': 'incremental', 'parameters': {'moodlecommon': {'value': \"[variables('moodlecommon')]\"}, 'location': {'value': \"[parameters('location')]\"}}, 'templatelink': {'uri': \"[concat(variables('moodlecommon').basetemplateurl,'recoveryservices.json',parameters('_artifactslocationsastoken'))]\"}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'redistemplate', 'dependson': ['microsoft.resources/deployments/networktemplate'], 'properties': {'mode': 'incremental', 'parameters': {'moodlecommon': {'value': \"[variables('moodlecommon')]\"}, 'location': {'value': \"[parameters('location')]\"}}, 'templatelink': {'uri': \"[concat(variables('moodlecommon').basetemplateurl,'redis.json',parameters('_artifactslocationsastoken'))]\"}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '14.04.4-lts', 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite'}}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountvms'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'resources': [{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/installcustomscript')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('vmname') )]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/post_deployment.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('/bin/bash post_deployment.sh ', parameters('vmadminusername'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'comments': 'common', 'name': 'vnetstorage', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('vnetstoragesciptrul')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'storage-api-version': {'value': \"[variables('storage-api-version')]\"}, 'storageaccounttype': {'value': \"[variables('storageaccounttype')]\"}, 'location': {'value': \"[variables('location')]\"}, 'network-api-version': {'value': \"[variables('network-api-version')]\"}, 'virtualnetworkname': {'value': \"[variables('virtualnetworkname')]\"}, 'vnetaddressprefix': {'value': \"[variables('vnetaddressprefix')]\"}, 'subnet1name': {'value': \"[variables('subnet1name')]\"}, 'subnet1prefix': {'value': \"[variables('subnet1prefix')]\"}, 'subnet2name': {'value': \"[variables('subnet2name')]\"}, 'subnet2prefix': {'value': \"[variables('subnet2prefix')]\"}, 'subnet3name': {'value': \"[variables('subnet3name')]\"}, 'subnet3prefix': {'value': \"[variables('subnet3prefix')]\"}, 'subnet4name': {'value': \"[variables('subnet4name')]\"}, 'subnet4prefix': {'value': \"[variables('subnet4prefix')]\"}, 'tagvalues': {'value': \"[variables('tagvalues')]\"}, 'availabilitysetsettings': {'value': \"[variables('availabilitysetsettings')]\"}, 'datameertags': {'value': \"[variables('datameertags')]\"}, 'trendmicrotags': {'value': \"[variables('trendmicrotags')]\"}, 'chefsoftwaretags': {'value': \"[variables('chefsoftwaretags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'trendmicrodsm', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'dependson': ['microsoft.resources/deployments/vnetstorage'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('nested/trendp2p-trenddsm.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'vmstorageaccountcontainername': {'value': \"[variables('vmstorageaccountcontainername')]\"}, 'location': {'value': \"[variables('location')]\"}, 'network-api-version': {'value': \"[variables('network-api-version')]\"}, 'compute-api-version': {'value': \"[variables('compute-api-version')]\"}, 'tagvalues': {'value': \"[variables('tagvalues')]\"}, 'publicipdomainnamelabeltrenddsm': {'value': \"[concat(parameters('publicipdomainnamelabeltrenddsm'),variables('uniquestring'))]\"}, 'publicipaddresstype': {'value': \"[variables('publicipaddresstype')]\"}, 'publicipaddressnametrenddsm': {'value': \"[variables('publicipaddressnametrenddsm')]\"}, 'nicnametrenddsm': {'value': \"[variables('nicnametrenddsm')]\"}, 'virtualnetworkname': {'value': \"[variables('virtualnetworkname')]\"}, 'subnet1ref': {'value': \"[variables('subnet1ref')]\"}, 'securitygroupnametrenddsm': {'value': \"[variables('securitygroupnametrenddsm')]\"}, 'managerporttrenddsm': {'value': \"[parameters('managerporttrenddsm')]\"}, 'heartbeatporttrenddsm': {'value': \"[parameters('heartbeatporttrenddsm')]\"}, 'vmnametrenddsm': {'value': \"[variables('vmnametrenddsm')]\"}, 'publishertrenddsm': {'value': \"[variables('publishertrenddsm')]\"}, 'offerchoosedtrenddsm': {'value': \"[variables('offerchoosedtrenddsm')]\"}, 'vmadminnametrenddsm': {'value': \"[parameters('vmadminnametrenddsm')]\"}, 'vmadminpasswordorpublickeytrenddsm': {'value': \"[parameters('vmadminpasswordorpublickeytrenddsm')]\"}, 'linuxconfigurationchoosentrenddsm': {'value': \"[variables('linuxconfigurationchoosentrenddsm')]\"}, 'deployment-api-version': {'value': \"[variables('deployment-api-version')]\"}, 'baseurl': {'value': \"[parameters('_artifactslocation')]\"}, 'databaseoption': {'value': \"[variables('databaseoption')]\"}, 'newsqlservername': {'value': \"[variables('newsqlservername')]\"}, 'existingsqlservername': {'value': \"[variables('existingsqlservername')]\"}, 'dbadminname': {'value': \"[parameters('dbadminname')]\"}, 'dbadminpassword': {'value': \"[parameters('dbadminpassword')]\"}, 'dbname': {'value': \"[parameters('dbname')]\"}, 'dsmadminname': {'value': \"[parameters('dsmadminname')]\"}, 'dsmadminpassword': {'value': \"[parameters('dsmadminpassword')]\"}, 'datameertags': {'value': \"[variables('datameertags')]\"}, 'trendmicrotags': {'value': \"[variables('trendmicrotags')]\"}, 'chefsoftwaretags': {'value': \"[variables('chefsoftwaretags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}}}}{'name': 'orchestrator', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'dependson': ['microsoft.resources/deployments/vnetstorage'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('nested/trendp2p-orchestrator.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'location': {'value': \"[variables('location')]\"}, 'network-api-version': {'value': \"[variables('network-api-version')]\"}, 'compute-api-version': {'value': \"[variables('compute-api-version')]\"}, 'deployment-api-version2': {'value': \"[variables('deployment-api-version2')]\"}, 'tagvalues': {'value': \"[variables('tagvalues')]\"}, 'publicipdomainnamelabelorchserver': {'value': \"[concat(parameters('publicipdomainnamelabelorchserver'),variables('uniquestring'))]\"}, 'vmnameorchserver': {'value': \"[variables('vmnameorchserver')]\"}, 'networkinterfacenameorchserver': {'value': \"[variables('networkinterfacenameorchserver')]\"}, 'networksecuritygroupnameorchserver': {'value': \"[variables('networksecuritygroupnameorchserver')]\"}, 'vmadminusernameorchserver': {'value': \"[parameters('vmadminusernameorchserver')]\"}, 'vmadminpasswordorpublickeyorchserver': {'value': \"[parameters('vmadminpasswordorpublickeyorchserver')]\"}, 'vmstorageaccountcontainername': {'value': \"[variables('vmstorageaccountcontainername')]\"}, 'imagepublisherlinux': {'value': \"[variables('imagepublisherlinux')]\"}, 'imageofferlinux': {'value': \"[variables('imageofferlinux')]\"}, 'orcserverubuntuosversion': {'value': \"[variables('orcserverubuntuosversion')]\"}, 'vmsizeorcserver': {'value': \"[variables('vmsizeorcserver')]\"}, 'subnet2ref': {'value': \"[variables('subnet2ref')]\"}, 'installorchtemplateurl': {'value': \"[variables('installorchtemplateurl')]\"}, 'datameertags': {'value': \"[variables('datameertags')]\"}, 'trendmicrotags': {'value': \"[variables('trendmicrotags')]\"}, 'chefsoftwaretags': {'value': \"[variables('chefsoftwaretags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}}}}{'name': 'chefserver', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'dependson': ['microsoft.resources/deployments/vnetstorage', 'microsoft.resources/deployments/trendmicrodsm', 'microsoft.resources/deployments/orchestrator'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('nested/trendp2p-chefserver.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'publicipaddressnamechefserver': {'value': \"[variables('publicipaddressnamechefserver')]\"}, 'publicipdomainnamelabelchefserver': {'value': \"[concat(parameters('publicipdomainnamelabelchefserver'),variables('uniquestring'))]\"}, 'networksecuritygroupnamechefserver': {'value': \"[variables('networksecuritygroupnamechefserver')]\"}, 'networkinterfacenamechefserver': {'value': \"[variables('networkinterfacenamechefserver')]\"}, 'vmnamechefserver': {'value': \"[variables('vmnamechefserver')]\"}, 'vmadminusernamechefserver': {'value': \"[parameters('vmadminusernamechefserver')]\"}, 'vmadminpasswordorpublickeychefserver': {'value': \"[parameters('vmadminpasswordorpublickeychefserver')]\"}, 'vmstorageaccountcontainername': {'value': \"[variables('vmstorageaccountcontainername')]\"}, 'location': {'value': \"[variables('location')]\"}, 'network-api-version': {'value': \"[variables('network-api-version')]\"}, 'compute-api-version': {'value': \"[variables('compute-api-version')]\"}, 'tagvalues': {'value': \"[variables('tagvalues')]\"}, 'publisherchefserver': {'value': \"[variables('publisherchefserver')]\"}, 'offerchoosedchefserver': {'value': \"[variables('offerchoosedchefserver')]\"}, 'subnet2ref': {'value': \"[variables('subnet2ref')]\"}, 'publicipaddresstype': {'value': \"[variables('publicipaddresstype')]\"}, 'chefusername': {'value': \"[parameters('chefusername')]\"}, 'chefuserfirstname': {'value': \"[parameters('chefuserfirstname')]\"}, 'chefuserlastname': {'value': \"[parameters('chefuserlastname')]\"}, 'chefuseremail': {'value': \"[parameters('chefuseremail')]\"}, 'chefuserpassword': {'value': \"[parameters('chefuserpassword')]\"}, 'cheforgshortname': {'value': \"[parameters('cheforgshortname')]\"}, 'cheforgfullname': {'value': \"[parameters('cheforgfullname')]\"}, 'chefserverscripturl': {'value': \"[variables('chefserverscripturl')]\"}, 'publicipdomainnamelabelorchserver': {'value': \"[concat(parameters('publicipdomainnamelabelorchserver'),variables('uniquestring'))]\"}, 'datameertags': {'value': \"[variables('datameertags')]\"}, 'trendmicrotags': {'value': \"[variables('trendmicrotags')]\"}, 'chefsoftwaretags': {'value': \"[variables('chefsoftwaretags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2017-03-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(variables('publicipaddressname'),copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'publiciploop', 'count': \"[parameters('numberofinstances')]\"}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(parameters('vmdnsname'),copyindex())]\"}}, 'tags': {'provider': \"[variables('provider')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'name': \"[variables('chefbeavailname')]\", 'type': 'microsoft.compute/availabilitysets', 'location': '[resourcegroup().location]', 'apiversion': '2017-12-01', 'dependson': [], 'tags': {'displayname': 'beavailset', 'provider': \"[variables('tagvalues').provider]\"}, 'sku': {'name': 'aligned'}, 'properties': {'platformupdatedomaincount': 3, 'platformfaultdomaincount': 3}}{'name': \"[variables('cheffeavailname')]\", 'type': 'microsoft.compute/availabilitysets', 'location': '[resourcegroup().location]', 'apiversion': '2017-12-01', 'dependson': [], 'tags': {'displayname': 'feavailset', 'provider': \"[variables('tagvalues').provider]\"}, 'sku': {'name': 'aligned'}, 'properties': {'platformupdatedomaincount': 3, 'platformfaultdomaincount': 3}}{'name': 'be0', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('chefbename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'be0nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('chefbeavailname'))]\"], 'tags': {'displayname': 'be0', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('chefbevmsize')]\"}, 'osprofile': {'computername': 'be0', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('be0','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'be0nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('chefbeavailname'))]\"}}, 'resources': [{'name': 'be0setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'be0')]\"], 'tags': {'displayname': 'be0setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('leadersetupscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'leadersetupscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'be1', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('chefbename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'be1nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('chefbeavailname'))]\"], 'tags': {'displayname': 'be1', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('chefbevmsize')]\"}, 'osprofile': {'computername': 'be1', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('be1','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'be1nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('chefbeavailname'))]\"}}, 'resources': [{'name': 'be1setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'be1')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be0', 'be0setup')]\"], 'tags': {'displayname': 'be1setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('followersetupscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'followersetupscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'be2', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('chefbename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'be2nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('chefbeavailname'))]\"], 'tags': {'displayname': 'be2', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('chefbevmsize')]\"}, 'osprofile': {'computername': 'be2', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('be2','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'be2nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('chefbeavailname'))]\"}}, 'resources': [{'name': 'be2setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'be2')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be0', 'be0setup')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be1', 'be1setup')]\"], 'tags': {'displayname': 'be2setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('followersetupscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'followersetupscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'fe0', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('cheffename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'fe0nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('cheffeavailname'))]\"], 'tags': {'displayname': 'fe0', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('cheffevmsize')]\"}, 'osprofile': {'computername': 'fe0', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('fe0','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'fe0nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('cheffeavailname'))]\"}}, 'resources': [{'name': 'fe0setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'fe0')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be0', 'be0setup')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be1', 'be1setup')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be2', 'be2setup')]\"], 'tags': {'displayname': 'fe0setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('fe0setupscriptscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'fe0setupscriptscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'fe1', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('cheffename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'fe1nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('cheffeavailname'))]\"], 'tags': {'displayname': 'fe1', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('cheffevmsize')]\"}, 'osprofile': {'computername': 'fe1', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('fe1','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'fe1nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('cheffeavailname'))]\"}}, 'resources': [{'name': 'fe1setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'fe1')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'fe0', 'fe0setup')]\"], 'tags': {'displayname': 'fe1setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('fesetupscriptscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'fesetupscriptscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'fe2', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('cheffename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'fe2nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('cheffeavailname'))]\"], 'tags': {'displayname': 'fe2', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('cheffevmsize')]\"}, 'osprofile': {'computername': 'fe2', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('fe2','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'fe2nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('cheffeavailname'))]\"}}, 'resources': [{'name': 'fe2setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'fe2')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'fe0', 'fe0setup')]\"], 'tags': {'displayname': 'fe2setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('fesetupscriptscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'fesetupscriptscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'name': \"[variables('chefbeavailname')]\", 'type': 'microsoft.compute/availabilitysets', 'location': '[resourcegroup().location]', 'apiversion': '2017-12-01', 'dependson': [], 'tags': {'displayname': 'beavailset', 'provider': \"[variables('tagvalues').provider]\"}, 'sku': {'name': 'aligned'}, 'properties': {'platformupdatedomaincount': 3, 'platformfaultdomaincount': 3}}{'name': \"[variables('cheffeavailname')]\", 'type': 'microsoft.compute/availabilitysets', 'location': '[resourcegroup().location]', 'apiversion': '2017-12-01', 'dependson': [], 'tags': {'displayname': 'feavailset', 'provider': \"[variables('tagvalues').provider]\"}, 'sku': {'name': 'aligned'}, 'properties': {'platformupdatedomaincount': 3, 'platformfaultdomaincount': 3}}{'name': 'be0', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('chefbename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'be0nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('chefbeavailname'))]\"], 'tags': {'displayname': 'be0', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('chefbevmsize')]\"}, 'osprofile': {'computername': 'be0', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('be0','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'be0nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('chefbeavailname'))]\"}}, 'resources': [{'name': 'be0setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'be0')]\"], 'tags': {'displayname': 'be0setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('leadersetupscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'leadersetupscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'be1', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('chefbename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'be1nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('chefbeavailname'))]\"], 'tags': {'displayname': 'be1', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('chefbevmsize')]\"}, 'osprofile': {'computername': 'be1', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('be1','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'be1nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('chefbeavailname'))]\"}}, 'resources': [{'name': 'be1setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'be1')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be0', 'be0setup')]\"], 'tags': {'displayname': 'be1setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('followersetupscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'followersetupscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'be2', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('chefbename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'be2nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('chefbeavailname'))]\"], 'tags': {'displayname': 'be2', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('chefbevmsize')]\"}, 'osprofile': {'computername': 'be2', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('be2','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'be2nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('chefbeavailname'))]\"}}, 'resources': [{'name': 'be2setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'be2')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be0', 'be0setup')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be1', 'be1setup')]\"], 'tags': {'displayname': 'be2setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('followersetupscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'followersetupscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'fe0', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('cheffename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'fe0nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('cheffeavailname'))]\"], 'tags': {'displayname': 'fe0', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('cheffevmsize')]\"}, 'osprofile': {'computername': 'fe0', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('fe0','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'fe0nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('cheffeavailname'))]\"}}, 'resources': [{'name': 'fe0setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'fe0')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be0', 'be0setup')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be1', 'be1setup')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'be2', 'be2setup')]\"], 'tags': {'displayname': 'fe0setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('fe0setupscriptscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'fe0setupscriptscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'fe1', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('cheffename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'fe1nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('cheffeavailname'))]\"], 'tags': {'displayname': 'fe1', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('cheffevmsize')]\"}, 'osprofile': {'computername': 'fe1', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('fe1','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'fe1nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('cheffeavailname'))]\"}}, 'resources': [{'name': 'fe1setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'fe1')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'fe0', 'fe0setup')]\"], 'tags': {'displayname': 'fe1setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('fesetupscriptscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'fesetupscriptscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]}{'name': 'fe2', 'type': 'microsoft.compute/virtualmachines', 'location': \"[variables('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[concat('microsoft.storage/storageaccounts/', variables('cheffename'))]\", \"[concat('microsoft.network/networkinterfaces/', 'fe2nic')]\", \"[concat('microsoft.compute/availabilitysets/',variables('cheffeavailname'))]\"], 'tags': {'displayname': 'fe2', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('cheffevmsize')]\"}, 'osprofile': {'computername': 'fe2', 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'keydata': \"[parameters('sshkeydata')]\", 'path': \"[variables('sshkeypath')]\"}]}}}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat('fe2','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'fe2nic')]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('cheffeavailname'))]\"}}, 'resources': [{'name': 'fe2setup', 'type': 'extensions', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'fe2')]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', 'fe0', 'fe0setup')]\"], 'tags': {'displayname': 'fe2setup'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', variables('fesetupscriptscriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': '[concat(\\'sh \\', variables(\\'fesetupscriptscriptfilename\\'), \\' \"\\', parameters(\\'_secretslocation\\'), \\'\" \"\\', parameters(\\'_secretslocationsastoken\\'), \\'\"\\')]'}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'tags': {'displayname': 'chefvirtualnetwork', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'tags': {'displayname': 'fepublicip', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[tolower(parameters('chefdnsname'))]\"}}}{'type': 'microsoft.network/loadbalancers', 'name': \"[variables('loadbalancername')]\", 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'tags': {'displayname': 'feloadbalancer', 'provider': \"[variables('tagvalues').provider]\"}, 'dependson': [\"[concat('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid')]\"}}}], 'backendaddresspools': [{'name': \"[variables('bepoolname')]\"}], 'inboundnatrules': [{'name': 'ssh-fe0', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50000, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh-fe1', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50001, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh-fe2', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50002, 'backendport': 22, 'enablefloatingip': false}}], 'probes': [{'name': 'https', 'properties': {'protocol': 'tcp', 'port': 443}}], 'loadbalancingrules': [{'name': 'https', 'properties': {'protocol': 'tcp', 'backendaddresspool': {'id': \"[concat('/subscriptions/', subscription().subscriptionid, '/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/backendaddresspools/', variables('bepoolname'))]\"}, 'backendport': 443, 'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'frontendport': 443, 'probe': {'id': \"[variables('lbprobeid')]\"}, 'loaddistribution': 'sourceipprotocol'}}, {'name': 'http', 'properties': {'protocol': 'tcp', 'backendaddresspool': {'id': \"[concat('/subscriptions/', subscription().subscriptionid, '/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/backendaddresspools/', variables('bepoolname'))]\"}, 'backendport': 80, 'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'frontendport': 80, 'probe': {'id': \"[variables('lbprobeid')]\"}, 'loaddistribution': 'sourceipprotocol'}}]}}{'name': 'be0nic', 'type': 'microsoft.network/networkinterfaces', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'tags': {'displayname': 'be0nic', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipaddress': '10.0.0.10'}}]}}{'name': 'be1nic', 'type': 'microsoft.network/networkinterfaces', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'tags': {'displayname': 'be1nic', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipaddress': '10.0.0.11'}}]}}{'name': 'be2nic', 'type': 'microsoft.network/networkinterfaces', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'tags': {'displayname': 'be2nic', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipaddress': '10.0.0.12'}}]}}{'name': 'fe0nic', 'type': 'microsoft.network/networkinterfaces', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[concat('microsoft.network/loadbalancers/', variables('loadbalancername'))]\"], 'tags': {'displayname': 'fe0nic', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipaddress': '10.0.0.50', 'loadbalancerbackendaddresspools': [{'id': \"[concat('/subscriptions/', subscription().subscriptionid, '/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/backendaddresspools/', variables('bepoolname'))]\"}], 'loadbalancerinboundnatrules': [{'id': \"[concat('/subscriptions/', subscription().subscriptionid, '/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/inboundnatrules/ssh-fe0')]\"}]}}]}}{'name': 'fe1nic', 'type': 'microsoft.network/networkinterfaces', 'location': \"[variables('location')]\", 'apiversion': '2015-06-15', 'dependson': [\"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[concat('microsoft.network/loadbalancers/', variables('loadbalancername'))]\"], 'tags': {'displayname': 'fe1nic', 'provider': \"[variables('tagvalues').provider]\"}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipaddress': '10.0.0.51', 'loadbalancerbackendaddresspools': [{'id': \"[concat('/subscriptions/', subscription().subscriptionid, '/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/backendaddresspools/', variables('bepoolname'))]\"}], 'loadbalancerinboundnatrules': [{'id': \"[concat('/subscriptions/', subscription().subscriptionid, '/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/inboundnatrules/ssh-fe1')]\"}]}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'comments': 'resource to track chef automate installations using this template', 'type': 'microsoft.resources/deployments', 'name': \"[concat('pid-', variables('tags').provider)]\", 'apiversion': '2017-05-10', 'properties': {'mode': 'incremental', 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'resources': []}}}{'name': 'keyvaultresource', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('keyvaultresourcesurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'keyvaultsettings': {'value': \"[variables('keyvaultsettings')]\"}}}}{'name': 'manageddisksresource', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('manageddisksresourcesurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'computesettings': {'value': \"[variables('computesettings')]\"}}}}{'name': 'diagnosticstorageaccountsresource', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('diagnosticstorageaccountresourcesurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'storagesettings': {'value': \"[variables('storagesettings')]\"}}}}{'name': 'availabilitysetsresource', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('availabilitysetsresourcesurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'computesettings': {'value': \"[variables('computesettings')]\"}}}}{'name': 'publicipaddressesresource', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('publicipaddressesresourcesurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}}}}{'name': 'networksecuritygroupsresource', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('networksecuritygroupsresourcesurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}}}}{'name': 'virtualnetworksresource', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'dependson': ['networksecuritygroupsresource'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('virtualnetworksresourcesurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}}}}{'name': 'fe-loadbalancersresource', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'dependson': ['publicipaddressesresource'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('fe-loadbalancersresourcesurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'felbpublicipaddressid': {'value': \"[variables('felbpublicipaddressid')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('newstorageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": " {'type': 'microsoft.authorization/roledefinitions', 'apiversion': '2018-07-01', 'name': \"[variables('roledefname')]\", 'properties': {'rolename': 'custom role - virtualnetwork read', 'description': 'network vnet read role definition', 'type': 'customrole', 'iscustom': true, 'permissions': [{'actions': \"[variables('networkreadaction')]\"}], 'assignablescopes': ['[resourcegroup().id]']}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'pid-5be41579-bb97-4721-93ac-50df29f8ce66-partnercenter', 'properties': {'mode': 'incremental', 'template': {'$schema': 'https://schema.management.azure.com/schemas/2015-01-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'resources': []}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'bastionvmdeployment', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('diagstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(variables('bastionhostname'), '-nic'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('clusternodedeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'sshkeypath': {'value': \"[variables('sshkeypath')]\"}, 'sshpublickey': {'value': \"[parameters('sshpublickey')]\"}, 'datadisksize': {'value': \"[parameters('datadisksize')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'vmsize': {'value': \"[parameters('bastionvmsize')]\"}, 'hostname': {'value': \"[variables('bastionhostname')]\"}, 'role': {'value': 'bootnode'}, 'vmstoragetype': {'value': 'premium_lrs'}, 'diagstorageaccount': {'value': \"[variables('diagstorageaccountname')]\"}, 'imagereference': {'value': \"[variables('imagereference')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'openshiftdeployment', 'dependson': ['bastionvmdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('openshiftdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'_artifactslocation': {'value': \"[uri(parameters('_artifactslocation'), '.')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'openshiftdeploymentscripturl': {'value': \"[variables('openshiftdeploymentscripturl')]\"}, 'openshiftdeploymentscriptfilename': {'value': \"[variables('openshiftdeploymentscriptfilename')]\"}, 'masterinstancecount': {'value': \"[parameters('masterinstancecount')]\"}, 'workerinstancecount': {'value': \"[parameters('workerinstancecount')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'openshiftusername': {'value': \"[parameters('openshiftusername')]\"}, 'openshiftpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'aadclientid': {'value': \"[parameters('aadclientid')]\"}, 'aadclientsecret': {'value': \"[parameters('aadclientsecret')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'sshpublickey': {'value': \"[parameters('sshpublickey')]\"}, 'pullsecret': {'value': \"[parameters('pullsecret')]\"}, 'virtualnetworkname': {'value': \"[parameters('virtualnetworkname')]\"}, 'virtualnetworkcidr': {'value': \"[parameters('virtualnetworkcidr')[0]]\"}, 'pxspecurl': {'value': \"[parameters('pxspecurl')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'nfsipaddress': {'value': \"[if(equals(parameters('storageoption'), 'nfs'),reference(resourceid('microsoft.network/networkinterfaces', concat(variables('nfshostname'), '-nic'))).ipconfigurations[0].properties.privateipaddress, '')]\"}, 'singlezoneormultizone': {'value': \"[parameters('singlezoneormultizone')]\"}, 'dnszone': {'value': \"[parameters('dnszone')]\"}, 'dnszonerg': {'value': \"[parameters('dnszonerg')]\"}, 'masterinstancetype': {'value': \"[parameters('mastervmsize')]\"}, 'workerinstancetype': {'value': \"[parameters('workervmsize')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'networkresourcegroup': {'value': \"[variables('networkresourcegroup')]\"}, 'mastersubnetname': {'value': \"[parameters('mastersubnetname')]\"}, 'workersubnetname': {'value': \"[parameters('workersubnetname')]\"}, 'enablefips': {'value': \"[parameters('enablefips')]\"}, 'privateorpublic': {'value': \"[if(equals(parameters('privateorpublicendpoints'), 'private'), 'internal', 'external')]\"}, 'enableautoscaler': {'value': \"[parameters('enableautoscaler')]\"}, 'outboundtype': {'value': \"[parameters('outboundtype')]\"}, 'existingresourcegroupname': {'value': \"[parameters('clusterresourcegroupname')]\"}}}}{'condition': \"[equals(parameters('storageoption'), 'ocs')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'ocsdeployment', 'dependson': ['openshiftdeployment', \"[variables('deployopenshiftext')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('installocsdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'installocsimagesscripturl': {'value': \"[variables('installocsdeploymentscripturl')]\"}, 'installocsscriptfilename': {'value': \"[variables('installocsscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'openshiftusername': {'value': \"[parameters('openshiftusername')]\"}, 'openshiftpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'singlezoneormultizone': {'value': \"[parameters('singlezoneormultizone')]\"}, 'resourcegroupname': {'value': '[resourcegroup().name]'}, 'virtualnetworkname': {'value': \"[parameters('virtualnetworkname')]\"}, 'workersubnetname': {'value': \"[parameters('workersubnetname')]\"}}}}{'condition': \"[equals(parameters('storageoption'), 'nfs')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'nfsvmdeployment', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('diagstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nfshostname'), '-nic'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('clusternodedeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'sshkeypath': {'value': \"[variables('sshkeypath')]\"}, 'sshpublickey': {'value': \"[parameters('sshpublickey')]\"}, 'datadisksize': {'value': \"[parameters('datadisksize')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'vmsize': {'value': \"[variables('nfsvmsize')]\"}, 'hostname': {'value': \"[variables('nfshostname')]\"}, 'role': {'value': 'datanode'}, 'vmstoragetype': {'value': 'premium_lrs'}, 'diagstorageaccount': {'value': \"[variables('diagstorageaccountname')]\"}, 'imagereference': {'value': \"[variables('imagereference')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}}}}{'condition': \"[equals(parameters('cloudpaklicenseagreement'), 'accept')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpaklitedeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'lite'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakdeploymentscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakdeploymentscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v2.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), or(equals(parameters('installwatsonstudiolocal'), 'yes'),equals(parameters('installwatsonknowledgecatalog'), 'yes'),equals(parameters('installwatsonmachinelearning'), 'yes'),equals(parameters('installdatavirtualization'), 'yes'),equals(parameters('installcognosdashboard'), 'yes')))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakccsdeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpaklitedeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'lite'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakccsscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakccsscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.0'}, 'version': {'value': '4.0.5'}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'pid-5be41579-bb97-4721-93ac-50df29f8ce66-partnercenter', 'properties': {'mode': 'incremental', 'template': {'$schema': 'https://schema.management.azure.com/schemas/2015-01-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'resources': []}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'bastionvmdeployment', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('diagstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(variables('bastionhostname'), '-nic'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('clusternodedeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'sshkeypath': {'value': \"[variables('sshkeypath')]\"}, 'sshpublickey': {'value': \"[parameters('sshpublickey')]\"}, 'datadisksize': {'value': \"[parameters('datadisksize')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'vmsize': {'value': \"[parameters('bastionvmsize')]\"}, 'hostname': {'value': \"[variables('bastionhostname')]\"}, 'role': {'value': 'bootnode'}, 'vmstoragetype': {'value': 'premium_lrs'}, 'diagstorageaccount': {'value': \"[variables('diagstorageaccountname')]\"}, 'imagereference': {'value': \"[variables('imagereference')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'openshiftdeployment', 'dependson': ['bastionvmdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('openshiftdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'_artifactslocation': {'value': \"[uri(parameters('_artifactslocation'), '.')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'openshiftdeploymentscripturl': {'value': \"[variables('openshiftdeploymentscripturl')]\"}, 'openshiftdeploymentscriptfilename': {'value': \"[variables('openshiftdeploymentscriptfilename')]\"}, 'masterinstancecount': {'value': \"[parameters('masterinstancecount')]\"}, 'workerinstancecount': {'value': \"[parameters('workerinstancecount')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'openshiftusername': {'value': \"[parameters('openshiftusername')]\"}, 'openshiftpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'aadclientid': {'value': \"[parameters('aadclientid')]\"}, 'aadclientsecret': {'value': \"[parameters('aadclientsecret')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'sshpublickey': {'value': \"[parameters('sshpublickey')]\"}, 'pullsecret': {'value': \"[parameters('pullsecret')]\"}, 'virtualnetworkname': {'value': \"[parameters('virtualnetworkname')]\"}, 'virtualnetworkcidr': {'value': \"[parameters('virtualnetworkcidr')[0]]\"}, 'pxspecurl': {'value': \"[parameters('pxspecurl')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'nfsipaddress': {'value': \"[if(equals(parameters('storageoption'), 'nfs'),reference(resourceid('microsoft.network/networkinterfaces', concat(variables('nfshostname'), '-nic'))).ipconfigurations[0].properties.privateipaddress, '')]\"}, 'singlezoneormultizone': {'value': \"[parameters('singlezoneormultizone')]\"}, 'dnszone': {'value': \"[parameters('dnszone')]\"}, 'dnszonerg': {'value': \"[parameters('dnszonerg')]\"}, 'masterinstancetype': {'value': \"[parameters('mastervmsize')]\"}, 'workerinstancetype': {'value': \"[parameters('workervmsize')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'networkresourcegroup': {'value': \"[variables('networkresourcegroup')]\"}, 'mastersubnetname': {'value': \"[parameters('mastersubnetname')]\"}, 'workersubnetname': {'value': \"[parameters('workersubnetname')]\"}, 'enablefips': {'value': \"[parameters('enablefips')]\"}, 'privateorpublic': {'value': \"[if(equals(parameters('privateorpublicendpoints'), 'private'), 'internal', 'external')]\"}, 'enableautoscaler': {'value': \"[parameters('enableautoscaler')]\"}, 'outboundtype': {'value': \"[parameters('outboundtype')]\"}, 'existingresourcegroupname': {'value': \"[parameters('clusterresourcegroupname')]\"}}}}{'condition': \"[equals(parameters('storageoption'), 'ocs')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'ocsdeployment', 'dependson': ['openshiftdeployment', \"[variables('deployopenshiftext')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('installocsdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'installocsimagesscripturl': {'value': \"[variables('installocsdeploymentscripturl')]\"}, 'installocsscriptfilename': {'value': \"[variables('installocsscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'openshiftusername': {'value': \"[parameters('openshiftusername')]\"}, 'openshiftpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'singlezoneormultizone': {'value': \"[parameters('singlezoneormultizone')]\"}, 'resourcegroupname': {'value': '[resourcegroup().name]'}, 'virtualnetworkname': {'value': \"[parameters('virtualnetworkname')]\"}, 'workersubnetname': {'value': \"[parameters('workersubnetname')]\"}}}}{'condition': \"[equals(parameters('storageoption'), 'nfs')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'nfsvmdeployment', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('diagstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nfshostname'), '-nic'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('clusternodedeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'sshkeypath': {'value': \"[variables('sshkeypath')]\"}, 'sshpublickey': {'value': \"[parameters('sshpublickey')]\"}, 'datadisksize': {'value': \"[parameters('datadisksize')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'vmsize': {'value': \"[variables('nfsvmsize')]\"}, 'hostname': {'value': \"[variables('nfshostname')]\"}, 'role': {'value': 'datanode'}, 'vmstoragetype': {'value': 'premium_lrs'}, 'diagstorageaccount': {'value': \"[variables('diagstorageaccountname')]\"}, 'imagereference': {'value': \"[variables('imagereference')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}}}}{'condition': \"[equals(parameters('cloudpaklicenseagreement'), 'accept')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpaklitedeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'lite'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakdeploymentscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakdeploymentscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v2.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), or(equals(parameters('installwatsonstudiolocal'), 'yes'),equals(parameters('installwatsonknowledgecatalog'), 'yes'),equals(parameters('installwatsonmachinelearning'), 'yes'),equals(parameters('installdatavirtualization'), 'yes'),equals(parameters('installcognosdashboard'), 'yes')))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakccsdeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpaklitedeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'lite'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakccsscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakccsscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'),or(equals(parameters('installdatavirtualization'), 'yes'),equals(parameters('installwatsonknowledgecatalog'), 'yes')))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakdb2udeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakccsdeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'lite'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakdb2uscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakdb2uscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'),equals(parameters('installwatsonknowledgecatalog'), 'yes'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakdb2aaservicedeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakdb2udeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'lite'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakdb2aaservicescripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakdb2aaservicescriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), equals(parameters('installdatavirtualization'), 'yes'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakdmcdeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakdb2aaservicedeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'lite'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakdmcscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakdmcscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), equals(parameters('installdatavirtualization'), 'yes'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakdvdeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakdmcdeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'dv'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakdvscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakdvscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.7'}, 'version': {'value': '1.7.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), equals(parameters('installcognosdashboard'), 'yes'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakcdedeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakdvdeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'cde'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakcdescripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakcdescriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), equals(parameters('installwatsonstudiolocal'), 'yes'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakwsldeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakcdedeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'wsl'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakwslscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakwslscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v2.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), equals(parameters('installwatsonmachinelearning'), 'yes'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakwmldeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakwsldeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'wml'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakwmlscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakwmlscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.1'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), equals(parameters('installwatsonknowledgecatalog'), 'yes'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakwkccoredeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakwmldeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'wkc-core'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakwkccorescripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakwkccorescriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), equals(parameters('installwatsonknowledgecatalog'), 'yes'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakwkciisdeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakwkccoredeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'wkc-iis'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakwkciisscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakwkciisscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.0'}, 'version': {'value': '4.0.5'}}}}{'condition': \"[and(equals(parameters('cloudpaklicenseagreement'), 'accept'), equals(parameters('installwatsonknowledgecatalog'), 'yes'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2021-04-01', 'name': 'cloudpakwkcugdeployment', 'dependson': ['nfsvmdeployment', 'openshiftdeployment', \"[variables('deployopenshiftext')]\", 'cloudpakwkciisdeployment', 'ocsdeployment'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('cloudpakdeploymenttemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'assembly': {'value': 'wkc-ug'}, 'cloudpakdeploymentscripturl': {'value': \"[variables('cloudpakwkcugscripturl')]\"}, 'cloudpakdeploymentscriptfilename': {'value': \"[variables('cloudpakwkcugscriptfilename')]\"}, 'redhattags': {'value': \"[variables('redhattags')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'ocuser': {'value': \"[parameters('openshiftusername')]\"}, 'ocpassword': {'value': \"[parameters('openshiftpassword')]\"}, 'storageoption': {'value': \"[parameters('storageoption')]\"}, 'bastionhostname': {'value': \"[variables('bastionhostname')]\"}, 'projectname': {'value': \"[parameters('projectname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'clustername': {'value': \"[parameters('clustername')]\"}, 'domainname': {'value': \"[parameters('dnszone')]\"}, 'apikey': {'value': \"[parameters('apikey')]\"}, 'subscriptionchannel': {'value': 'v1.0'}, 'version': {'value': '4.0.5'}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks/providers/roleassignments', 'apiversion': '2018-09-01-preview', 'name': \"[concat(parameters('virtualnetworkname'), '/microsoft.authorization/', guid(resourcegroup().id, deployment().name, parameters('aadclientid')))]\", 'properties': {'roledefinitionid': \"[resourceid('microsoft.authorization/roledefinitions',variables('roledefname'))]\", 'principalid': \"[parameters('aadclientid')]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]}{'condition': \"[equals(parameters('neworexistingnetwork'), 'new')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-08-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'virtualnetwork', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'addressspace': {'addressprefixes': \"[parameters('virtualnetworkcidr')]\"}, 'subnets': [{'name': \"[parameters('bastionsubnetname')]\", 'properties': {'addressprefix': \"[parameters('bastionsubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups/', variables('bastionsecuritygroupname'))]\"}}}, {'name': \"[parameters('mastersubnetname')]\", 'properties': {'addressprefix': \"[parameters('mastersubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups/', variables('mastersecuritygroupname'))]\"}}}, {'name': \"[parameters('workersubnetname')]\", 'properties': {'addressprefix': \"[parameters('workersubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups/', variables('workersecuritygroupname'))]\"}}}]}, 'dependson': [\"[variables('bastionsecuritygroupname')]\", \"[variables('mastersecuritygroupname')]\", \"[variables('workersecuritygroupname')]\"]}{'condition': \"[equals(parameters('publicbootnodeip'), variables('vtrue'))]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2021-08-01', 'name': \"[variables('bastionpublicipdnslabel')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'tags': {'displayname': 'bastionpublicip', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[variables('bastionpublicipdnslabel')]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2021-08-01', 'name': \"[concat(variables('bastionhostname'), '-nic')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('bastionsecuritygroupname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('bastionpublicipdnslabel'))]\"], 'tags': {'displayname': 'bastionnetworkinterface', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'ipconfigurations': [{'name': \"[concat(variables('bastionhostname'), 'ipconfig')]\", 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid(variables('networkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('bastionsubnetname'))]\"}, 'publicipaddress': \"[if(equals(parameters('publicbootnodeip'), variables('vtrue')), variables('publicipid'), json('null'))]\"}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('bastionsecuritygroupname'))]\"}}}{'condition': \"[equals(parameters('storageoption'), 'nfs')]\", 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2021-08-01', 'name': \"[concat(variables('nfshostname'), '-nic')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('workersecuritygroupname'))]\"], 'tags': {'displayname': 'nfsnetworkinterface', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'ipconfigurations': [{'name': \"[concat(variables('nfshostname'), 'ipconfig')]\", 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid(variables('networkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('workersubnetname'))]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('workersecuritygroupname'))]\"}}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-08-01', 'name': \"[variables('bastionsecuritygroupname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'bastionnsg', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'securityrules': [{'name': 'allowsshin_all', 'properties': {'description': 'allow ssh in from all locations', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-08-01', 'name': \"[variables('mastersecuritygroupname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'masternsg', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'securityrules': [{'name': 'allowhttps_all', 'properties': {'description': 'allow https connections from all locations', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '6443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-08-01', 'name': \"[variables('workersecuritygroupname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'workernsg', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'securityrules': [{'name': 'allowhttps_all', 'properties': {'description': 'allow https connections from all locations', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'allowhttpin_all', 'properties': {'description': 'allow http connections from all locations', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 300, 'direction': 'inbound'}}, {'name': 'allownfs_network', 'properties': {'description': 'allow nfs server connections from within the network only', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '2049', 'sourceaddressprefixes': \"[parameters('virtualnetworkcidr')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 400, 'direction': 'inbound'}}, {'name': 'allowrpc_network', 'properties': {'description': 'allow rpcbind connections from within the network only', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '111', 'sourceaddressprefixes': \"[parameters('virtualnetworkcidr')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 410, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-11-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('dnsnameforpublicip')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'publicipaddress'}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}, {'name': 'default-allow-80', 'properties': {'priority': 1001, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '80', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}, {'name': 'default-allow-443', 'properties': {'priority': 1002, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '443', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2018-02-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'displayname': 'virtualnetwork'}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('boshnetworksecuritygroup')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'bosh-agent', 'properties': {'description': 'allow bosh-agent', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '6868', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 201, 'direction': 'inbound'}}, {'name': 'bosh-director', 'properties': {'description': 'allow bosh-director', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '25555', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 202, 'direction': 'inbound'}}, {'name': 'dns', 'properties': {'description': 'allow dns', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '53', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 203, 'direction': 'inbound'}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('devboxnetworksecuritygroup')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": " {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2018-07-01', 'name': \"[guid(concat(variables('roleassignmentname'), copyindex(1)))]\", 'dependson': ['createvms'], 'copy': {'name': 'createroles', 'count': \"[parameters('instancecount')]\"}, 'properties': {'roledefinitionid': \"[variables('reader')]\", 'principalid': \"[reference(resourceid('microsoft.compute/virtualmachines', concat(variables('vmname'), copyindex(1))), '2019-12-01', 'full').identity.principalid]\", 'scope': '[resourcegroup().id]', 'principaltype': 'serviceprincipal'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2016-04-30-preview', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('existingvnetlocation')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'customdata': \"[variables('cloudconfig')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[variables('sshkeypath')]\", 'keydata': \"[parameters('sshkeydata')]\"}]}}}, 'storageprofile': {'imagereference': {'publisher': 'openlogic', 'offer': 'centos', 'sku': \"[variables('osimagesku')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-01-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('uniquenameprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'type': 'microsoft.compute/availabilitysets', 'name': \"[concat(variables('availabilitysetname'),'db')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'), copyindex())]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[parameters('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/',concat(variables('vmname'),copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmname'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('vmname'),copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('newstorageaccountname'), '2021-01-01').primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': 'publicip', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('publicdnsname')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': 'vmsqlip', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[concat(parameters('publicdnsname'),'db')]\"}}}{'apiversion': '2018-02-01', 'type': 'microsoft.network/virtualnetworks', 'name': 'vnet', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressrange')]\"]}, 'subnets': [{'name': 'subnet', 'properties': {'addressprefix': \"[variables('subnetaddressrange')]\"}}]}}{'apiversion': '2018-02-01', 'name': 'loadbalancer', 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': ['microsoft.network/publicipaddresses/publicip'], 'properties': {'frontendipconfigurations': [{'name': 'lbfe', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses','publicip')]\"}}}], 'backendaddresspools': [{'name': 'lbbap'}], 'inboundnatrules': [{'name': \"[concat('ssh-vm','0')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations','loadbalancer','lbfe')]\"}, 'protocol': 'tcp', 'frontendport': 2200, 'backendport': 22, 'enablefloatingip': false}}, {'name': \"[concat('ssh-vm','1')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations','loadbalancer','lbfe')]\"}, 'protocol': 'tcp', 'frontendport': 2201, 'backendport': 22, 'enablefloatingip': false}}, {'name': \"[concat('ssh-vm','2')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations','loadbalancer','lbfe')]\"}, 'protocol': 'tcp', 'frontendport': 2202, 'backendport': 22, 'enablefloatingip': false}}, {'name': \"[concat('ssh-vm','3')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations','loadbalancer','lbfe')]\"}, 'protocol': 'tcp', 'frontendport': 2203, 'backendport': 22, 'enablefloatingip': false}}, {'name': \"[concat('ssh-vm','4')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations','loadbalancer','lbfe')]\"}, 'protocol': 'tcp', 'frontendport': 2204, 'backendport': 22, 'enablefloatingip': false}}], 'loadbalancingrules': [{'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', 'loadbalancer', 'lbfe')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', 'loadbalancer', 'lbbap')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', 'loadbalancer', 'lbprobe')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'idletimeoutinminutes': 15}, 'name': 'lbrule'}, {'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', 'loadbalancer', 'lbfe')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', 'loadbalancer', 'lbbap')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', 'loadbalancer', 'lbprobe')]\"}, 'protocol': 'tcp', 'frontendport': 8443, 'backendport': 8443, 'idletimeoutinminutes': 15}, 'name': 'lbrule8443'}], 'probes': [{'properties': {'protocol': 'http', 'port': 8080, 'requestpath': '/', 'intervalinseconds': 15, 'numberofprobes': 2}, 'name': 'lbprobe'}]}}{'apiversion': '2018-02-01', 'type': 'microsoft.network/networksecuritygroups', 'name': 'vmsql', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-ssh', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1201, 'direction': 'inbound'}}, {'name': 'port_3306', 'properties': {'description': 'allow 3306', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '3306', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1010, 'direction': 'inbound'}}]}}{'apiversion': '2018-02-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('vmname'),copyindex())]\", 'copy': {'name': 'netintloop', 'count': \"[parameters('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': ['microsoft.network/virtualnetworks/vnet', 'microsoft.network/loadbalancers/loadbalancer'], 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnet-id')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools','loadbalancer','lbbap')]\"}], 'loadbalancerinboundnatrules': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatrules','loadbalancer',concat('ssh-vm', copyindex()))]\"}]}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'),copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/',concat(variables('nicname'),copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/',variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsizefrontend')]\"}, 'osprofile': {'computername': \"[concat(variables('vmname'),copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('osversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicname'),copyindex()))]\"}]}}, 'copy': {'name': 'virtualmachinescopy', 'count': \"[parameters('vmcountfrontend')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('uniquenameprefix')]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', concat(variables('virtualnetworkname'), '-sg'))]\"], 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}, {'name': \"[variables('subnetnamedb')]\", 'properties': {'addressprefix': \"[variables('subnetprefixdb')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', concat(variables('virtualnetworkname'), '-sg'))]\"}}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nicname'),copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/',variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/loadbalancers/',variables('lbname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools',variables('lbname'),'loadbalancerbackend')]\"}], 'loadbalancerinboundnatrules': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatrules',variables('lbname'),concat('ssh-vm',copyindex()))]\"}]}}]}, 'copy': {'name': 'networkinterfacescopy', 'count': \"[parameters('vmcountfrontend')]\"}}{'apiversion': '2015-06-15', 'name': \"[variables('lbname')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/',variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid')]\"}}}], 'backendaddresspools': [{'name': 'loadbalancerbackend'}], 'inboundnatrules': [{'name': 'ssh-vm0', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname'),'loadbalancerfrontend')]\"}, 'protocol': 'tcp', 'frontendport': 2200, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh-vm1', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname'),'loadbalancerfrontend')]\"}, 'protocol': 'tcp', 'frontendport': 2201, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh-vm2', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname'),'loadbalancerfrontend')]\"}, 'protocol': 'tcp', 'frontendport': 2202, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh-vm3', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname'),'loadbalancerfrontend')]\"}, 'protocol': 'tcp', 'frontendport': 2203, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh-vm4', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname'),'loadbalancerfrontend')]\"}, 'protocol': 'tcp', 'frontendport': 2204, 'backendport': 22, 'enablefloatingip': false}}], 'loadbalancingrules': [{'name': 'lbrule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname'),'loadbalancerfrontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools',variables('lbname'),'loadbalancerbackend')]\"}, 'protocol': 'tcp', 'frontendport': 8443, 'backendport': 8443, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'loaddistribution': 'sourceip', 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes',variables('lbname'),'tcpprobe')]\"}}}], 'probes': [{'name': 'tcpprobe', 'properties': {'protocol': 'tcp', 'port': 8443, 'intervalinseconds': '5', 'numberofprobes': '2'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicdbipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(parameters('uniquenameprefix'),'db')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('uniquenameprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('webavailsetname')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'comments': 'this is the availability set for all web vms', 'tags': {'displayname': 'web avail set', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('barracudanetworkstags').provider]\"}, 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}}{'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('bwafavailsetname')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'comments': 'this is the availability set for bwaf vm', 'tags': {'displayname': 'bwaf avail set', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('barracudanetworkstags').provider]\"}, 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('bwafnsgname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': ' nsg for bwaf subnet', 'tags': {'displayname': 'bwaf nsg', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('barracudanetworkstags').provider]\"}, 'properties': {'securityrules': [{'name': 'http-allow', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': \"[parameters('remoteallowedcidr')]\", 'destinationaddressprefix': '10.0.0.0/24', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'https-allow', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': \"[parameters('remoteallowedcidr')]\", 'destinationaddressprefix': '10.0.0.0/24', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}, {'name': 'adminportal-allow', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '8000', 'sourceaddressprefix': \"[parameters('remoteallowedcidr')]\", 'destinationaddressprefix': '10.0.0.0/24', 'access': 'allow', 'priority': 130, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('webnsgname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': ' nsg for web subnet', 'tags': {'displayname': 'web nsg', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('barracudanetworkstags').provider]\"}, 'properties': {'securityrules': [{'name': 'rdp-allow', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': \"[parameters('remoteallowedcidr')]\", 'destinationaddressprefix': '10.0.1.0/24', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('bwafvmipaddressname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': ' public ip used by the bwaf vm', 'tags': {'displayname': 'bwaf public ip', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('barracudanetworkstags').provider]\"}, 'properties': {'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4, 'dnssettings': {'domainnamelabel': \"[variables('bwafvmdnslabel')]\"}}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('lbipaddressname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': 'public ip used by the load balancer for rdp into web servers', 'tags': {'displayname': 'lb public ip', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('barracudanetworkstags').provider]\"}, 'properties': {'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4, 'dnssettings': {'domainnamelabel': \"[variables('lbdnslabel')]\"}}}{'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': 'virtual network for overall solution', 'tags': {'displayname': 'bwaf virtual network', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('barracudanetworkstags').provider]\"}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('webnsgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('bwafnsgname'))]\"], 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[variables('bwafsubnetname')]\", 'properties': {'addressprefix': '10.0.0.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('bwafnsgname'))]\"}}}, {'name': \"[variables('websubnetname')]\", 'properties': {'addressprefix': '10.0.1.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('webnsgname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('newstorageaccountname')]\", 'apiversion': '2021-01-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('primarystorageaccountname')]\", 'apiversion': '2015-06-15', 'location': \"[parameters('primarylocation')]\", 'properties': {'accounttype': \"[variables('storageaccounttype')]\"}}{'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('defaultprimarystorageaccountname')]\", 'apiversion': '2015-06-15', 'location': \"[parameters('primarylocation')]\", 'properties': {'accounttype': \"[variables('defaultstorageaccounttype')]\"}}{'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('secondarystorageaccountname')]\", 'apiversion': '2015-06-15', 'location': \"[parameters('secondarylocation')]\", 'properties': {'accounttype': \"[variables('storageaccounttype')]\"}}{'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('defaultsecondarystorageaccountname')]\", 'apiversion': '2015-06-15', 'location': \"[parameters('secondarylocation')]\", 'properties': {'accounttype': \"[variables('defaultstorageaccounttype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('boshnetworksecuritygroup')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'bosh-agent', 'properties': {'description': 'allow bosh-agent', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '6868', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 201, 'direction': 'inbound'}}, {'name': 'bosh-director', 'properties': {'description': 'allow bosh-director', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '25555', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 202, 'direction': 'inbound'}}, {'name': 'dns', 'properties': {'description': 'allow dns', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '53', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 203, 'direction': 'inbound'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('devboxnetworksecuritygroup')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('primarycfnetworksecuritygroup')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'securityrules': [{'name': 'cf-https', 'properties': {'description': 'allow cf-https', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'cf-log', 'properties': {'description': 'allow cf-log', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '4443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 201, 'direction': 'inbound'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('secondarycfnetworksecuritygroup')]\", 'location': \"[parameters('secondarylocation')]\", 'properties': {'securityrules': [{'name': 'cf-https', 'properties': {'description': 'allow cf-https', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'cf-log', 'properties': {'description': 'allow cf-log', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '4443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 201, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('boshnetworksecuritygroup')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'bosh-agent', 'properties': {'description': 'allow bosh-agent', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '6868', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 201, 'direction': 'inbound'}}, {'name': 'bosh-director', 'properties': {'description': 'allow bosh-director', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '25555', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 202, 'direction': 'inbound'}}, {'name': 'dns', 'properties': {'description': 'allow dns', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '53', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 203, 'direction': 'inbound'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('devboxnetworksecuritygroup')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('primarycfnetworksecuritygroup')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'securityrules': [{'name': 'cf-https', 'properties': {'description': 'allow cf-https', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'cf-log', 'properties': {'description': 'allow cf-log', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '4443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 201, 'direction': 'inbound'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('secondarycfnetworksecuritygroup')]\", 'location': \"[parameters('secondarylocation')]\", 'properties': {'securityrules': [{'name': 'cf-https', 'properties': {'description': 'allow cf-https', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'cf-log', 'properties': {'description': 'allow cf-log', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '4443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 201, 'direction': 'inbound'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(parameters('vmname'),'-devbox')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[concat(tolower(parameters('vmname')), '-', uniquestring(resourcegroup().id))]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(parameters('vmname'),'-bosh')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(parameters('vmname'), '-cf-primary')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(parameters('vmname'), '-cf-secondary')]\", 'location': \"[parameters('secondarylocation')]\", 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('primaryvpngatewaypublicipname')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('secondaryvpngatewaypublicipname')]\", 'location': \"[parameters('secondarylocation')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('primaryvirtualnetworkname')]\", 'location': \"[parameters('primarylocation')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('primaryvirtualnetworkaddressspace')]\"]}, 'subnets': [{'name': \"[variables('subnetnameforbosh')]\", 'properties': {'addressprefix': \"[variables('subnetaddressrangeforbosh')]\"}}, {'name': \"[variables('subnetnameforcloudfoundry')]\", 'properties': {'addressprefix': \"[variables('primarysubnetaddressrangeforcloudfoundry')]\"}}, {'name': \"[variables('subnetnamefordiego')]\", 'properties': {'addressprefix': \"[variables('primarysubnetaddressrangefordiego')]\"}}, {'name': \"[variables('subnetnameforgateway')]\", 'properties': {'addressprefix': \"[variables('primarysubnetaddressrangeforgateway')]\"}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('secondaryvirtualnetworkname')]\", 'location': \"[parameters('secondarylocation')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('secondaryvirtualnetworkaddressspace')]\"]}, 'subnets': [{'name': \"[variables('subnetnameforcloudfoundry')]\", 'properties': {'addressprefix': \"[variables('secondarysubnetaddressrangeforcloudfoundry')]\"}}, {'name': \"[variables('subnetnamefordiego')]\", 'properties': {'addressprefix': \"[variables('secondarysubnetaddressrangefordiego')]\"}}, {'name': \"[variables('subnetnameforgateway')]\", 'properties': {'addressprefix': \"[variables('secondarysubnetaddressrangeforgateway')]\"}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('primarynicname')]\", 'location': \"[parameters('primarylocation')]\", 'dependson': [\"[concat('microsoft.network/publicipaddresses/', concat(parameters('vmname'), '-devbox'))]\", \"[concat('microsoft.network/virtualnetworks/', variables('primaryvirtualnetworkname'))]\", \"[concat('microsoft.network/networksecuritygroups/', variables('devboxnetworksecuritygroup'))]\"], 'properties': {'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('devboxnetworksecuritygroup'))]\"}, 'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[variables('devboxprivateipaddress')]\", 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat(parameters('vmname'), '-devbox'))]\"}, 'subnet': {'id': \"[variables('subnetrefforbosh')]\"}}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[variables('primaryvpngatewayname')]\", 'location': \"[parameters('primarylocation')]\", 'dependson': [\"[concat('microsoft.network/publicipaddresses/', variables('primaryvpngatewaypublicipname'))]\", \"[concat('microsoft.network/virtualnetworks/', variables('primaryvirtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('primarysubnetgatewayref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('primaryvpngatewaypublicipname'))]\"}}, 'name': 'vnetgatewayconfigmain'}], 'sku': {'name': \"[variables('vpngwsku')]\", 'tier': \"[variables('vpngwsku')]\"}, 'gatewaytype': 'vpn', 'vpntype': \"[variables('vpntype')]\", 'enablebgp': 'false'}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'create-storage-account', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(variables('baseuriazurecloud'), concat(variables('storageaccounttemplate'), parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}}}}{'name': 'create-load-balancer', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(variables('baseuriazurecloud'), concat(variables('loadbalancertemplate'), parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'loadbalancername': {'value': \"[variables('loadbalancername')]\"}, 'loadbalancerpublicipaddressname': {'value': \"[variables('cfpublicipaddressname')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'generate-customdata', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': ['microsoft.resources/deployments/create-storage-account', 'microsoft.resources/deployments/create-load-balancer'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(variables('baseuriazurecloud'), concat('nestedtemplates/generate-customdata.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'customdata': {'value': {'location': \"[parameters('location')]\", 'vnet_name': \"[variables('virtualnetworkname')]\", 'subnet_name_for_bosh': \"[variables('subnetnameforbosh')]\", 'subnet_address_range_for_bosh': \"[variables('subnetaddressrangeforbosh')]\", 'subnet_name_for_cloud_foundry': \"[variables('subnetnameforcloudfoundry')]\", 'subnet_address_range_for_cloud_foundry': \"[variables('subnetaddressrangeforcloudfoundry')]\", 'cloud_foundry_public_ip': \"[reference('microsoft.resources/deployments/create-load-balancer').outputs.loadbalancerpublicipaddress.value]\", 'load_balancer_name': \"[variables('loadbalancername')]\", 'nsg_name_for_bosh': \"[variables('boshnetworksecuritygroup')]\", 'nsg_name_for_cloud_foundry': \"[variables('cfnetworksecuritygroup')]\", 'subscription_id': '[subscription().subscriptionid]', 'resource_group_name': '[resourcegroup().name]', 'default_storage_account_name': \"[reference('microsoft.resources/deployments/create-storage-account').outputs.storageaccountname.value]\", 'default_storage_access_key': \"[parameters('storageaccountkey')]\", 'admin_user_name': \"[parameters('adminusername')]\", 'environment': \"[parameters('environment')]\", 'service_host_base': \"[variables('environment').servicehostbase]\", 'bosh_azure_cpi_release_url': \"[variables('environment').boshazurecpireleaseurl]\", 'bosh_azure_cpi_release_sha1': \"[variables('environment').boshazurecpireleasesha1]\", 'stemcell_url': \"[variables('environment').stemcellurl]\", 'stemcell_sha1': \"[variables('environment').stemcellsha1]\", 'bosh_cli_url': \"[variables('environment').boshcliurl]\", 'auto_deploy_bosh': \"[parameters('autodeploybosh')]\", 'log_level_for_bosh': \"[parameters('boshloglevel')]\", 'auto_deploy_cloud_foundry': \"[parameters('autodeploycloudfoundry')]\", 'system_domain': \"[parameters('cloudfoundrysystemdomain')]\", 'bosh_vm_size': \"[parameters('boshvmsize')]\", 'azure_stack_domain': \"[parameters('azurestackdomain')]\", 'azure_stack_resource': \"[parameters('azurestackresource')]\", 'azure_stack_authentication': \"[parameters('azurestackauthentication')]\", 'azure_stack_ca_root_certificate': \"[parameters('azurestackcarootcertificate')]\", 'service_principal_type': \"[parameters('serviceprincipaltype')]\", 'use_availability_zones': \"[parameters('useavailabilityzones')]\"}}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2019-06-01', 'location': \"[parameters('location')]\", 'kind': 'storage', 'sku': {'name': \"[variables('storageaccounttype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2020-08-01-preview', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storage', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('toolvmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('toolstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('toolnicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('toolvmsize')]\"}, 'osprofile': {'computername': \"[parameters('toolvmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('toolnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('toolstorageaccountname'), '2021-04-01').primaryendpoints['blob']]\"}}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('tapvmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('tapstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('tapnicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('tapvmsize')]\"}, 'osprofile': {'computername': \"[parameters('tapvmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('tapnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('tapstorageaccountname')), '2021-04-01').primaryendpoints.blob]\"}}}}{'name': \"[concat(parameters('toolvmname'), '/config')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('toolvmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'skipdos2unix': false, 'timestamp': 123456789}, 'protectedsettings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/setup-suricata.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('./setup-suricata.sh',  ' ', parameters('cloudlensprojectkey'))]\"}}}{'name': \"[concat(parameters('tapvmname'), '/config')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('tapvmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'skipdos2unix': false, 'timestamp': 123456789}, 'protectedsettings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/setup-tap.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('./setup-tap.sh',  ' ', parameters('cloudlensprojectkey'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('toolpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[variables('tooldnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('tappublicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[variables('tapdnslabelprefix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('toolstorageaccountname')]\", 'apiversion': '2021-04-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}}{'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('tapstorageaccountname')]\", 'apiversion': '2021-04-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('toolpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[variables('tooldnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('tappublicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[variables('tapdnslabelprefix')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': \"[parameters('virtualnetworkaddressprefix')]\"}, 'subnets': [{'name': 'default', 'properties': {'addressprefix': \"[parameters('virtualnetworksubnetaddressprefix')]\", 'serviceendpoints': [{'service': 'microsoft.storage'}], 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2018-09-01', 'name': \"[variables('blobprivatednszonename')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\"], 'location': 'global', 'properties': {}, 'resources': [{'name': 'vnet-link', 'type': 'virtualnetworklinks', 'apiversion': '2018-09-01', 'location': 'global', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/privatednszones', variables('blobprivatednszonename'))]\"], 'properties': {'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}, 'registrationenabled': false}}]} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[variables('nsgid')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2016-03-30', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('vmnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allows ssh traffic', 'protocol': 'tcp', 'sourceportrange': '22', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-11-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('vmnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allows ssh traffic', 'protocol': 'tcp', 'sourceportrange': '22', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('vmdnsname')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': \"[variables('platformfaultdomaincount')]\", 'platformupdatedomaincount': \"[variables('platformupdatedomaincount')]\"}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('dnslabelforvmip'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'dependson': [\"[concat('microsoft.network/networkinterfaces/', concat(parameters('vmandloadbalancerexposure'),variables('nicname'), copyindex()))]\", \"[concat('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[if(equals(copyindex(), variables('monitornodeindex')), parameters('monitornodevmsize'), parameters('messageroutingnodevmsize'))]\"}, 'osprofile': {'computername': \"[concat(parameters('dnslabelforvmip'), copyindex())]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('centosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('dnslabelforvmip'), copyindex(), '_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': \"[variables('datadiskschoices')[if(or(equals(parameters('datadisksize'), '0'), equals(copyindex(), variables('monitornodeindex'))), '2', string(copyindex()))]]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('vmandloadbalancerexposure'),variables('nicname'), copyindex()))]\"}]}}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('dnslabelforvmip'), copyindex(), '/dockerextension')]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'dockerloop', 'count': \"[variables('numberofinstances')]\"}, 'dependson': [\"[concat('microsoft.compute/virtualmachines/', parameters('dnslabelforvmip'), copyindex())]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'dockerextension', 'typehandlerversion': '1.0', 'autoupgrademinorversion': true, 'settings': {}}}{'condition': \"[not(empty(parameters('workspacename')))]\", 'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('dnslabelforvmip'), copyindex(), '/omsagentextension')]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'omsagentloop', 'count': \"[variables('numberofinstances')]\"}, 'dependson': [\"[concat('microsoft.compute/virtualmachines/', parameters('dnslabelforvmip'), copyindex(), '/extensions/dockerextension')]\", \"[concat('microsoft.resources/deployments/', variables('solaceworkspacename'))]\"], 'properties': {'publisher': 'microsoft.enterprisecloud.monitoring', 'type': 'omsagentforlinux', 'typehandlerversion': '1.4', 'settings': {'workspaceid': \"[if(empty(parameters('workspacename')),  '', reference(variables('solaceworkspacename')).outputs.workspaceid.value)]\"}, 'protectedsettings': {'workspacekey': \"[if(empty(parameters('workspacename')),  '', reference(variables('solaceworkspacename')).outputs.workspacekey.value)]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-12-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('storageaccountname')]\", \"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')[parameters('os')]]\", 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid(parameters('storageaccountresourcegroupname'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2019-06-01').primaryendpoints.blob]\"}}}, 'resources': [{'type': 'extensions', 'apiversion': '2019-12-01', 'name': 'installscript', 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('vmname')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/', variables('scriptfile')[parameters('os')].scriptfilename, parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('bash ', variables('scriptfile')[parameters('os')].scriptfilename, ' ', parameters('javapackagename'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-12-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('storageaccountname')]\", \"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')[parameters('windowsversion')]]\", 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid(parameters('storageaccountresourcegroupname'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2019-06-01').primaryendpoints.blob]\"}}}, 'resources': [{'type': 'extensions', 'apiversion': '2019-12-01', 'name': 'installscript', 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('vmname')]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.8', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat(variables('scriptfilename'), parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('powershell -executionpolicy unrestricted -file ', variables('scriptfilename'), ' ', parameters('javapackagename'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[parameters('vm_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', parameters('nic_name'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmimagepublisher')]\", 'offer': \"[variables('vmimageoffer')]\", 'sku': \"[variables('sku')]\", 'version': 'latest'}, 'osdisk': {'ostype': 'windows', 'name': \"[concat(parameters('vm_name'), '_osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite'}}, 'osprofile': {'computername': \"[parameters('vm_name')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('nic_name'))]\"}]}}}{'name': \"[concat(parameters('vm_name'),'/gpudrivers')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'location': \"[parameters('location')]\", 'apiversion': '2019-07-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('vm_name'))]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', parameters('vm_name'), 'setupchocolatey')]\"], 'tags': {'displayname': 'gpu-nvidia-drivers'}, 'properties': {'publisher': 'microsoft.hpccompute', 'type': 'nvidiagpudriverwindows', 'typehandlerversion': '1.2', 'autoupgrademinorversion': true}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2019-07-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('configsecondarynode', copyindex(1))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2019-07-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'secondaryconfigcopy', 'count': 2, 'mode': 'serial', 'batchsize': 1}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('configtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mongoadminusername': {'value': \"[parameters('mongoadminusername')]\"}, 'mongoadminpassword': {'value': \"[parameters('mongoadminpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('configsecondary', copyindex(1))]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.dse]\"}, 'vmsize': {'value': \"[parameters('confignodevmsize')]\"}, 'sizeofdatadiskingb': {'value': \"[parameters('sizeofdatadiskingb')]\"}, 'numdatadisks': {'value': \"[parameters('numdatadisks')]\"}, 'staticip': {'value': \"[variables('networksettings').statics[concat('configsecondaryip', copyindex(1))]]\"}, 'ossettings': {'value': \"[variables('configsecondaryossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'routerdnsnameprefix': {'value': \"[parameters('dnsnameprefix')]\"}, 'roletype': {'value': 'secondary'}, 'mongosslcertpassword': {'value': \"[parameters('mongosslcertpassword')]\"}}}}{'name': 'configprimarynode', 'type': 'microsoft.resources/deployments', 'apiversion': '2019-07-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", 'secondaryconfigcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('configtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mongoadminusername': {'value': \"[parameters('mongoadminusername')]\"}, 'mongoadminpassword': {'value': \"[parameters('mongoadminpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'configprimary'}, 'sizeofdatadiskingb': {'value': \"[parameters('sizeofdatadiskingb')]\"}, 'numdatadisks': {'value': \"[parameters('numdatadisks')]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.dse]\"}, 'staticip': {'value': \"[variables('networksettings').statics.configprimaryip]\"}, 'vmsize': {'value': \"[parameters('confignodevmsize')]\"}, 'ossettings': {'value': \"[variables('configprimaryossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'routerdnsnameprefix': {'value': \"[parameters('dnsnameprefix')]\"}, 'roletype': {'value': 'primary'}, 'mongosslcertpassword': {'value': \"[parameters('mongosslcertpassword')]\"}}}}{'name': \"[concat('replicasecondarynode', copyindex(1))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2019-07-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'secondaryreplicacopy', 'count': 3, 'mode': 'serial', 'batchsize': 1}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('replicatemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mongoadminusername': {'value': \"[parameters('mongoadminusername')]\"}, 'mongoadminpassword': {'value': \"[parameters('mongoadminpassword')]\"}, 'replsetname': {'value': 'repset1'}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('replicasecondary', copyindex(1))]\"}, 'sizeofdatadiskingb': {'value': \"[parameters('sizeofdatadiskingb')]\"}, 'numdatadisks': {'value': \"[parameters('numdatadisks')]\"}, 'staticip': {'value': \"[variables('networksettings').statics.replicaprimaryip]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.dse]\"}, 'vmsize': {'value': \"[parameters('replicanodevmsize')]\"}, 'ossettings': {'value': \"[variables('replicasecondaryossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'routerdnsnameprefix': {'value': \"[parameters('dnsnameprefix')]\"}, 'roletype': {'value': 'secondary'}, 'mongosslcertpassword': {'value': \"[parameters('mongosslcertpassword')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/newuserscript')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/',variables('installscriptname'), parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': \"[variables('installcommand')]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'),copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/',concat(variables('nicname'),copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/',variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmname'),copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicname'),copyindex()))]\"}]}}, 'copy': {'name': 'virtualmachinescopy', 'count': \"[parameters('webvmcount')]\"}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(concat(variables('vmname'),copyindex()),'/newuserscript')]\", 'apiversion': '2015-06-15', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/',concat(variables('vmname'),copyindex()))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat(variables('installfrontendscriptname'), parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': \"[variables('installfrontendcommand')]\"}}, 'copy': {'name': 'extensionscopy', 'count': \"[parameters('webvmcount')]\"}}{'type': 'microsoft.compute/availabilitysets', 'name': \"[concat(variables('availabilitysetname'),'db')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'),'db')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/',concat(variables('nicname'),'db'))]\", \"[resourceid('microsoft.compute/availabilitysets/',concat(variables('availabilitysetname'),'db'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',concat(variables('availabilitysetname'),'db'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsizedb')]\"}, 'osprofile': {'computername': \"[concat(variables('vmname'),'db')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'db','_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicname'),'db'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('nameprefix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a Backup Policy for Recovery Services Vault to protect Azure IaasVMs\n\n===\n\n", "truth": " {'condition': \"[equals(parameters('enablenfsbackup'), 'true')]\", 'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2019-05-13', 'location': \"[parameters('location')]\", 'name': \"[variables('vaultname')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'condition': \"[equals(parameters('enablenfsbackup'), 'true')]\", 'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems', 'apiversion': '2016-12-01', 'name': \"[concat(variables('vaultname'), '/', variables('backupfabric'), '/', variables('protectioncontainer'), '/', variables('protecteditem'))]\", 'dependson': ['nfsvmdeployment', \"[resourceid('microsoft.recoveryservices/vaults', variables('vaultname'))]\"], 'properties': {'protecteditemtype': 'microsoft.compute/virtualmachines', 'policyid': \"[resourceid('microsoft.recoveryservices/vaults/backuppolicies', variables('vaultname'), variables('backuppolicyname'))]\", 'sourceresourceid': \"[resourceid('microsoft.compute/virtualmachines', variables('nfshostname'))]\"}} END", "openai_output": "\n\n===\n\n {'condition': \"[equals(parameters('enablenfsbackup'), 'true')]\", 'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2021-01-01', 'name': \"[variables('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'condition': \"[equals(parameters('enablenfsbackup'), 'true')]\", 'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems', 'apiversion': '2021-01-01', 'name': \"[concat(variables('vaultname'), '/', variables('backupfabric'), '/', variables('protectioncontainer'), '/', variables('protecteditem'))]\", 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', variables('vaultname'))]\"], 'properties': {'protecteditemtype': 'microsoft.compute/virtualmachines', 'policyid': \"[resourceid('microsoft.recoveryservices/vaults/backuppolicies', variables('vaultname'), variables('backuppolicyname'))]\"}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'condition': \"[equals(parameters('neworexistingnetwork'), 'new')]\", 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'virtualnetwork', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'apiversion': '2019-09-01', 'properties': {'addressspace': {'addressprefixes': \"[parameters('virtualnetworkcidr')]\"}, 'subnets': [{'name': \"[parameters('bastionsubnetname')]\", 'properties': {'addressprefix': \"[parameters('bastionsubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups/', variables('bastionsecuritygroupname'))]\"}}}, {'name': \"[parameters('mastersubnetname')]\", 'properties': {'addressprefix': \"[parameters('mastersubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups/', variables('mastersecuritygroupname'))]\"}}}, {'name': \"[parameters('workersubnetname')]\", 'properties': {'addressprefix': \"[parameters('workersubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups/', variables('workersecuritygroupname'))]\"}}}]}, 'dependson': [\"[variables('bastionsecuritygroupname')]\", \"[variables('mastersecuritygroupname')]\", \"[variables('workersecuritygroupname')]\"]}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('bastionpublicipdnslabel')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'apiversion': '2019-09-01', 'tags': {'displayname': 'bastionpublicip', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[variables('bastionpublicipdnslabel')]\"}}}{'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('bastionhostname'), '-nic')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-09-01', 'tags': {'displayname': 'bastionnetworkinterface', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('bastionsecuritygroupname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('bastionpublicipdnslabel'))]\"], 'properties': {'ipconfigurations': [{'name': \"[concat(variables('bastionhostname'), 'ipconfig')]\", 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid(variables('networkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('bastionsubnetname'))]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipdnslabel'))]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('bastionsecuritygroupname'))]\"}}}{'condition': \"[equals(parameters('storageoption'), 'nfs')]\", 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nfshostname'), '-nic')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-09-01', 'tags': {'displayname': 'nfsnetworkinterface', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('workersecuritygroupname'))]\"], 'properties': {'ipconfigurations': [{'name': \"[concat(variables('nfshostname'), 'ipconfig')]\", 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid(variables('networkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('workersubnetname'))]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('workersecuritygroupname'))]\"}}}{'apiversion': '2019-09-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('bastionsecuritygroupname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'bastionnsg', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'securityrules': [{'name': 'allowsshin_all', 'properties': {'description': 'allow ssh in from all locations', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'apiversion': '2019-09-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('mastersecuritygroupname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'masternsg', 'app': \"[variables('redhattags').app]\", 'version': \"[variables('redhattags').version]\", 'platform': \"[variables('redhattags').platform]\"}, 'properties': {'securityrules': [{'name': 'allowhttps_all', 'properties': {'description': 'allow https connections from all locations', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '6443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('nsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'name': \"[concat('publicip', copyindex())]\", 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'copy': {'count': \"[variables('numberofinstances')]\", 'name': 'iploop'}, 'type': 'microsoft.network/publicipaddresses', 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'storagesettings': {'value': \"[variables('tshirtsize').storage]\"}, 'location': {'value': \"[parameters('location')]\"}, 'networksettings': {'value': \"[variables('networksettings')]\"}, 'availabilitysetsettings': {'value': \"[variables('availabilitysetsettings')]\"}}}}{'name': 'zookeeper-node', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('vmtemplatezookeeper')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'ossettings': {'value': \"[variables('ossettings')]\"}, 'subnet': {'value': \"[variables('networksettings').subnets.zookeeper]\"}, 'location': {'value': \"[parameters('location')]\"}, 'commonsettings': {'value': {'adminusername': \"[parameters('adminusername')]\", 'namespace': 'zk'}}, 'machinesettings': {'value': {'vmsize': \"[variables('tshirtsize').vmsize]\", 'disksize': \"[variables('tshirtsize').disksize]\", 'vmcount': \"[variables('tshirtsize').zookeepercount]\", 'availabilityset': \"[variables('availabilitysetsettings').name]\", 'addprefix': \"[variables('networksettings').subnets.zookeeper.addprefix]\"}}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat('zookprvm', copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualzookeepermachineloop', 'count': \"[variables('numberofzookeeperinstances')]\"}, 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared-resources')]\", \"[concat('microsoft.network/networkinterfaces/', 'niczoo', copyindex())]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', 'kafkacluseras')]\"}, 'hardwareprofile': {'vmsize': \"[variables('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('computernameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': {'disablepasswordauthentication': false}}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat('zookprvm', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat('niczoo', copyindex()))]\"}]}}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat('brokervm', copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofkafkainstances')]\"}, 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared-resources')]\", \"[concat('microsoft.network/networkinterfaces/', 'nic', copyindex())]\", 'virtualzookeepermachineloop'], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', 'kafkacluseras')]\"}, 'hardwareprofile': {'vmsize': \"[variables('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('computernameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': {'disablepasswordauthentication': false}}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat('brokervm', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat('nic', copyindex()))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat('zookprvm', copyindex(), '/installzoo')]\", 'apiversion': '2015-05-01-preview', 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineextensionsloop', 'count': \"[variables('numberofzookeeperinstances')]\"}, 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'zookprvm', copyindex())]\", \"[concat('microsoft.network/networkinterfaces/', 'niczoo', copyindex())]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('kafka-cluster-install.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('bash kafka-cluster-install.sh -z ',' 1 ',' -c ', variables('numberofzookeeperinstances'),' -i ', parameters('kafkazoonodeipaddressprefix'))]\"}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat('brokervm', copyindex(), '/installkafka')]\", 'apiversion': '2015-05-01-preview', 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineextensionsloop', 'count': \"[variables('numberofkafkainstances')]\"}, 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'brokervm', copyindex())]\", \"[concat('microsoft.network/networkinterfaces/', 'nic', copyindex())]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('kafka-cluster-install.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('bash kafka-cluster-install.sh -b ',copyindex(),' -k ',parameters('kafkaversion'),' -c ', variables('numberofzookeeperinstances'),' -i ', parameters('kafkazoonodeipaddressprefix'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/proximityplacementgroups', 'name': \"[variables('ppg_name')]\", 'location': \"[parameters('location')]\"}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('ansible_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('ansible_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\", \"[resourceid('microsoft.keyvault/vaults',variables('key_vault_name'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('ansiblevmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('ansible_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': 64}, 'datadisks': [{'name': \"[concat(variables('ansible_vm_name'),'-playbook')]\", 'disksizegb': 50, 'lun': 0, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('ansible_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('ansible_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('rdp_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('rdp_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('windowsrdpvmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[variables('rdp_os_version')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'osprofile': {'computername': \"[variables('rdp_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'adminpassword': \"[parameters('sasexternalpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('rdp_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('meta_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('meta_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'tags': \"[variables('sas94vm_tags')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('sasmetavmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('meta_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': \"[variables('sas_osdisk_size')]\"}, 'datadisks': [{'name': \"[concat(variables('meta_vm_name'),'-opt-sas')]\", 'disksizegb': \"[variables('sas_opt_sas_disk_size')]\", 'lun': 0, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('meta_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('meta_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('compute_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('compute_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'tags': \"[variables('sas94vm_tags')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('sascomputevmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('compute_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': \"[variables('sas_osdisk_size')]\"}, 'datadisks': [{'name': \"[concat(variables('compute_vm_name'),'-opt-sas')]\", 'disksizegb': \"[variables('sas_opt_sas_disk_size')]\", 'lun': 0, 'createoption': 'empty'}, {'name': \"[concat(variables('compute_vm_name'),'-sasdata')]\", 'disksizegb': \"[parameters('sasdatastorage')]\", 'lun': 1, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('compute_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'customdata': \"[base64(variables('custom_data_sas'))]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('compute_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('mid_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('mid_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'tags': \"[variables('sas94vm_tags')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('sasmidvmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('mid_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': \"[variables('sas_osdisk_size')]\"}, 'datadisks': [{'name': \"[concat(variables('mid_vm_name'),'-opt-sas')]\", 'disksizegb': \"[variables('sas_opt_sas_disk_size')]\", 'lun': 0, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('mid_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('mid_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/proximityplacementgroups', 'name': \"[variables('ppg_name')]\", 'location': \"[parameters('location')]\"} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreates and optionally secures a Key Vault with logging linked to a storage account.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[variables('key_vault_name')]\", 'location': \"[parameters('location')]\", 'properties': {'enabledfordeployment': true, 'enabledfordiskencryption': false, 'enabledfortemplatedeployment': true, 'enablesoftdelete': false, 'tenantid': \"[variables('tenantid')]\", 'accesspolicies': [{'objectid': \"[parameters('keyvaultownerid')]\", 'tenantid': \"[variables('tenantid')]\", 'permissions': {'keys': \"[variables('keyspermissions')]\", 'secrets': \"[variables('secretspermissions')]\"}}], 'sku': {'name': \"[variables('skuname')]\", 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-ansiblesslcopy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase4-viyainstallpart2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runphase2ansiblesslcopy.log;')]\"}, 'filepath': {'value': 'scripts/ansible_ssl.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-viyainstallpart1', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-microservicesviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-spreviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-cascontrollerviyaark')]\", 'casworkerviyaarkcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runphase3_viyainstallpart1.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase4-viyainstallpart2', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase3-viyainstallpart1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runphase4_viyainstallpart2.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-ansiblesslcopy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase4-viyainstallpart2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runphase2ansiblesslcopy.log;')]\"}, 'filepath': {'value': 'scripts/ansible_ssl.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-viyainstallpart1', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-microservicesviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-spreviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-cascontrollerviyaark')]\", 'casworkerviyaarkcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runphase3_viyainstallpart1.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase4-viyainstallpart2', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase3-viyainstallpart1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runphase4_viyainstallpart2.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase5-viyainstallpart3', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '3',' ','2>&1 | tee /var/log/sas/install/runphase5_viyainstallpart3.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase6-viyapostinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase5-viyainstallpart3')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '4',' ','2>&1 | tee /var/log/sas/install/runphase6_viyapostinstall.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'rdpcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('rdp_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': 'powershell.exe expand-archive -literalpath client_install.zip -destination c:\\\\windowsazure\\\\client_install'}, 'filepath': {'value': 'client_install.zip'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sasclientinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'rdpcontentfiledownload')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('powershell -executionpolicy unrestricted -file sas_client_install.ps1 ','-stg_acc_name ',parameters('storageaccountname'),' -stg_key ',parameters('storageaccountkey'),' -file_share_name ',parameters('filesharename'),' -depot_folder_name ',parameters('sasdepotfolder'),' -clients_sid ',parameters('sasserverlicensefile'),' -app_name ',parameters('sasapplicationname'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactslocation'),' -storageuri ',variables('storage_account_uri'))]\"}, 'filepath': {'value': 'sas_client_install.ps1'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-metahostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','meta',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metacontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-metahostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-metainstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metacontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_install.sh 2>&1 | tee /var/log/sas/install/meta_install.log')]\"}, 'filepath': {'value': 'scripts/meta_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-metaconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_config.sh 2>&1 | tee /var/log/sas/install/meta_config.log')]\"}, 'filepath': {'value': 'scripts/meta_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-ansiblesslcopy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase4-viyainstallpart2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runphase2ansiblesslcopy.log;')]\"}, 'filepath': {'value': 'scripts/ansible_ssl.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-viyainstallpart1', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-microservicesviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-spreviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-cascontrollerviyaark')]\", 'casworkerviyaarkcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runphase3_viyainstallpart1.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase4-viyainstallpart2', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase3-viyainstallpart1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runphase4_viyainstallpart2.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase5-viyainstallpart3', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '3',' ','2>&1 | tee /var/log/sas/install/runphase5_viyainstallpart3.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase6-viyapostinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase5-viyainstallpart3')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '4',' ','2>&1 | tee /var/log/sas/install/runphase6_viyapostinstall.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'rdpcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('rdp_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': 'powershell.exe expand-archive -literalpath client_install.zip -destination c:\\\\windowsazure\\\\client_install'}, 'filepath': {'value': 'client_install.zip'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sasclientinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'rdpcontentfiledownload')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('powershell -executionpolicy unrestricted -file sas_client_install.ps1 ','-stg_acc_name ',parameters('storageaccountname'),' -stg_key ',parameters('storageaccountkey'),' -file_share_name ',parameters('filesharename'),' -depot_folder_name ',parameters('sasdepotfolder'),' -clients_sid ',parameters('sasserverlicensefile'),' -app_name ',parameters('sasapplicationname'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactslocation'),' -storageuri ',variables('storage_account_uri'))]\"}, 'filepath': {'value': 'sas_client_install.ps1'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-metahostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','meta',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metacontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-metahostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-metainstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metacontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_install.sh 2>&1 | tee /var/log/sas/install/meta_install.log')]\"}, 'filepath': {'value': 'scripts/meta_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-metaconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_config.sh 2>&1 | tee /var/log/sas/install/meta_config.log')]\"}, 'filepath': {'value': 'scripts/meta_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-computehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','compute',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computecontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-computehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-computeinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computecontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_install.sh 2>&1 | tee /var/log/sas/install/compute_install.log')]\"}, 'filepath': {'value': 'scripts/compute_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-computeconfig', 'dependson': [\"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-metaconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_config.sh 2>&1 | tee /var/log/sas/install/compute_config.log')]\"}, 'filepath': {'value': 'scripts/compute_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-midhostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','midaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','mid',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-midhostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-ansiblesslcopy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase4-viyainstallpart2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runphase2ansiblesslcopy.log;')]\"}, 'filepath': {'value': 'scripts/ansible_ssl.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-viyainstallpart1', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-microservicesviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-spreviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-cascontrollerviyaark')]\", 'casworkerviyaarkcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runphase3_viyainstallpart1.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase4-viyainstallpart2', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase3-viyainstallpart1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runphase4_viyainstallpart2.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase5-viyainstallpart3', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '3',' ','2>&1 | tee /var/log/sas/install/runphase5_viyainstallpart3.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase6-viyapostinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase5-viyainstallpart3')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '4',' ','2>&1 | tee /var/log/sas/install/runphase6_viyapostinstall.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'rdpcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('rdp_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': 'powershell.exe expand-archive -literalpath client_install.zip -destination c:\\\\windowsazure\\\\client_install'}, 'filepath': {'value': 'client_install.zip'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sasclientinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'rdpcontentfiledownload')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('powershell -executionpolicy unrestricted -file sas_client_install.ps1 ','-stg_acc_name ',parameters('storageaccountname'),' -stg_key ',parameters('storageaccountkey'),' -file_share_name ',parameters('filesharename'),' -depot_folder_name ',parameters('sasdepotfolder'),' -clients_sid ',parameters('sasserverlicensefile'),' -app_name ',parameters('sasapplicationname'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactslocation'),' -storageuri ',variables('storage_account_uri'))]\"}, 'filepath': {'value': 'sas_client_install.ps1'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-metahostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','meta',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metacontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-metahostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-metainstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metacontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_install.sh 2>&1 | tee /var/log/sas/install/meta_install.log')]\"}, 'filepath': {'value': 'scripts/meta_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-metaconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_config.sh 2>&1 | tee /var/log/sas/install/meta_config.log')]\"}, 'filepath': {'value': 'scripts/meta_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-computehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','compute',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computecontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-computehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-computeinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computecontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_install.sh 2>&1 | tee /var/log/sas/install/compute_install.log')]\"}, 'filepath': {'value': 'scripts/compute_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-computeconfig', 'dependson': [\"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-metaconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_config.sh 2>&1 | tee /var/log/sas/install/compute_config.log')]\"}, 'filepath': {'value': 'scripts/compute_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-midhostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','midaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','mid',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-midhostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-midinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','midcontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./mid_install.sh 2>&1 | tee /var/log/sas/install/mid-install.log')]\"}, 'filepath': {'value': 'scripts/mid_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-midconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-computeconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./mid_config.sh 2>&1 | tee /var/log/sas/install/mid_config.log')]\"}, 'filepath': {'value': 'scripts/mid_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicesroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicesaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','midaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-microserviceshostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','microservicesaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicescontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-microserviceshostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': 'cp viya-ark.tar.gz /tmp'}, 'filepath': {'value': 'properties/viya-ark.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-microservicesviyaark', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'microservicescontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runphase2_viyaark.log')]\"}, 'filepath': {'value': 'scripts/viya_ark.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'spreroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('spre_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('spre_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('spre_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'spreaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('spre_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','cascontrolleraccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('spre_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sprehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',  variables('spre_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','spreaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('spre_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('filesharename'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-ansiblesslcopy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase4-viyainstallpart2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runphase2ansiblesslcopy.log;')]\"}, 'filepath': {'value': 'scripts/ansible_ssl.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-viyainstallpart1', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-microservicesviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-spreviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-cascontrollerviyaark')]\", 'casworkerviyaarkcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runphase3_viyainstallpart1.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase4-viyainstallpart2', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase3-viyainstallpart1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runphase4_viyainstallpart2.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase5-viyainstallpart3', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '3',' ','2>&1 | tee /var/log/sas/install/runphase5_viyainstallpart3.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase6-viyapostinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase5-viyainstallpart3')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '4',' ','2>&1 | tee /var/log/sas/install/runphase6_viyapostinstall.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'rdpcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('rdp_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': 'powershell.exe expand-archive -literalpath client_install.zip -destination c:\\\\windowsazure\\\\client_install'}, 'filepath': {'value': 'client_install.zip'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sasclientinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'rdpcontentfiledownload')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('powershell -executionpolicy unrestricted -file sas_client_install.ps1 ','-stg_acc_name ',parameters('storageaccountname'),' -stg_key ',parameters('storageaccountkey'),' -file_share_name ',parameters('filesharename'),' -depot_folder_name ',parameters('sasdepotfolder'),' -clients_sid ',parameters('sasserverlicensefile'),' -app_name ',parameters('sasapplicationname'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactslocation'),' -storageuri ',variables('storage_account_uri'))]\"}, 'filepath': {'value': 'sas_client_install.ps1'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-metahostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','meta',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metacontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-metahostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-metainstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metacontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_install.sh 2>&1 | tee /var/log/sas/install/meta_install.log')]\"}, 'filepath': {'value': 'scripts/meta_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-metaconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_config.sh 2>&1 | tee /var/log/sas/install/meta_config.log')]\"}, 'filepath': {'value': 'scripts/meta_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-computehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','compute',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computecontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-computehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-computeinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computecontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_install.sh 2>&1 | tee /var/log/sas/install/compute_install.log')]\"}, 'filepath': {'value': 'scripts/compute_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-computeconfig', 'dependson': [\"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-metaconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_config.sh 2>&1 | tee /var/log/sas/install/compute_config.log')]\"}, 'filepath': {'value': 'scripts/compute_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-midhostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','midaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','mid',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-midhostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-midinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','midcontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./mid_install.sh 2>&1 | tee /var/log/sas/install/mid-install.log')]\"}, 'filepath': {'value': 'scripts/mid_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-midconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-computeconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./mid_config.sh 2>&1 | tee /var/log/sas/install/mid_config.log')]\"}, 'filepath': {'value': 'scripts/mid_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicesroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicesaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','midaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-microserviceshostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','microservicesaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicescontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-microserviceshostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': 'cp viya-ark.tar.gz /tmp'}, 'filepath': {'value': 'properties/viya-ark.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-microservicesviyaark', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'microservicescontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runphase2_viyaark.log')]\"}, 'filepath': {'value': 'scripts/viya_ark.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'spreroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('spre_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('spre_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('spre_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'spreaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('spre_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','cascontrolleraccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('spre_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sprehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',  variables('spre_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','spreaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('spre_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('filesharename'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'sprecontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('spre_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-sprehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('spre_vm_name')]\"}, 'commandtoexecute': {'value': 'cp viya-ark.tar.gz /tmp'}, 'filepath': {'value': 'properties/viya-ark.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-spreviyaark', 'dependson': [\"[resourceid('microsoft.resources/deployments','sprecontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('spre_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runphase2_viyaark.log')]\"}, 'filepath': {'value': 'scripts/viya_ark.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'cascontrollerroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('cascontroller_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('cascontroller_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('cascontroller_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'cascontrolleraccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('cascontroller_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','microservicesaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('cascontroller_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-cascontrollerhostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',  variables('cascontroller_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','cascontrolleraccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('cascontroller_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('filesharename'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'cascontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('cascontroller_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-cascontrollerhostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('cascontroller_vm_name')]\"}, 'commandtoexecute': {'value': 'cp viya-ark.tar.gz /tmp'}, 'filepath': {'value': 'properties/viya-ark.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-cascontrollerviyaark', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'cascontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('cascontroller_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runphase2_viyaark.log')]\"}, 'filepath': {'value': 'scripts/viya_ark.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': \"[concat(variables('casworker_vm_name'), copyindex(),'roleassignment')]\", 'copy': {'name': 'casworkerrolecopy', 'count': \"[parameters('numberofviyacasnodes')]\"}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', concat(variables('casworker_vm_name'), copyindex()))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', concat(variables('casworker_vm_name'), copyindex())), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',concat(variables('casworker_vm_name'), copyindex())),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': \"[concat(variables('casworker_vm_name'), copyindex(),'accesspolicy')]\", 'copy': {'name': 'casworkerpolicycopy', 'count': \"[parameters('numberofviyacasnodes')]\", 'mode': 'serial', 'batchsize': 1}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', concat(variables('casworker_vm_name'), copyindex()))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','spreaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',concat(variables('casworker_vm_name'), copyindex())),'2019-07-01','full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': \"[concat('phase1-',variables('casworker_vm_name'), copyindex(),'hostsetup')]\", 'copy': {'name': 'casworkerextensioncopy', 'count': \"[parameters('numberofviyacasnodes')]\"}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', concat(variables('casworker_vm_name'), copyindex()))]\", 'casworkerpolicycopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[concat(variables('casworker_vm_name'), copyindex())]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('filesharename'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2019-06-01', 'name': \"[variables('vnet_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups',variables('pub_sub_nw_sg'))]\", \"[resourceid('microsoft.network/networksecuritygroups',variables('pvt_sub_nw_sg'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddresscidr')]\"]}, 'subnets': [{'name': \"[variables('vnet_pvt_subnt')]\", 'properties': {'addressprefix': \"[parameters('sasprivatesubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pvt_sub_nw_sg'))]\"}}}, {'name': \"[variables('vnet_viya_pvt_subnt')]\", 'properties': {'addressprefix': \"[parameters('viyaprivatesubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pvt_sub_nw_sg'))]\"}}}, {'name': \"[variables('vnet_pub_subnt')]\", 'properties': {'addressprefix': \"[parameters('ansiblebastionpublicsubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pub_sub_nw_sg'))]\"}}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('pub_sub_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('adminingresslocation')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}], 'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('pvt_sub_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('ansible_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('adminingresslocation')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}], 'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('meta_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('mid_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('compute_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('rdp_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2019-06-01', 'name': \"[variables('vnet_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups',variables('pub_sub_nw_sg'))]\", \"[resourceid('microsoft.network/networksecuritygroups',variables('pvt_sub_nw_sg'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddresscidr')]\"]}, 'subnets': [{'name': \"[variables('vnet_pvt_subnt')]\", 'properties': {'addressprefix': \"[parameters('sasprivatesubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pvt_sub_nw_sg'))]\"}}}, {'name': \"[variables('vnet_viya_pvt_subnt')]\", 'properties': {'addressprefix': \"[parameters('viyaprivatesubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pvt_sub_nw_sg'))]\"}}}, {'name': \"[variables('vnet_pub_subnt')]\", 'properties': {'addressprefix': \"[parameters('ansiblebastionpublicsubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pub_sub_nw_sg'))]\"}}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('pub_sub_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('adminingresslocation')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}], 'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('pvt_sub_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('ansible_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('adminingresslocation')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}], 'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('meta_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('mid_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('compute_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('rdp_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('microservices_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('spre_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('cascontroller_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('casworker_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-09-01', 'name': \"[variables('ansible_pub_nw_interface')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'basic', 'tier': 'regional'}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2019-09-01', 'name': \"[variables('ansible_nw_interface')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('ansible_pub_nw_interface'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('ansible_nw_sg'))]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet_name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('ansible_pub_nw_interface'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet_name'), variables('vnet_pub_subnt'))]\"}, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': true, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('ansible_nw_sg'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2019-09-01', 'name': \"[variables('rdp_nw_interface')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('rdp_nw_sg'))]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet_name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet_name'), variables('vnet_pvt_subnt'))]\"}, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': true, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('rdp_nw_sg'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2019-09-01', 'name': \"[variables('meta_nw_interface')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('meta_nw_sg'))]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet_name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet_name'), variables('vnet_pvt_subnt'))]\"}, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': true, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('meta_nw_sg'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2019-09-01', 'name': \"[variables('compute_nw_interface')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('compute_nw_sg'))]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet_name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet_name'), variables('vnet_pvt_subnt'))]\"}, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': true, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('compute_nw_sg'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2019-09-01', 'name': \"[variables('mid_nw_interface')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('mid_nw_sg'))]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet_name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet_name'), variables('vnet_pvt_subnt'))]\"}, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': true, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('mid_nw_sg'))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'name': \"[variables('vmname1')]\", 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2017-03-30', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('nicname1'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname1')]\", 'adminusername': \"[parameters('username')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname1'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(variables('vmname1'),'_datadisk1')]\", 'disksizegb': '1000', 'lun': 0, 'createoption': 'empty'}, {'name': \"[concat(variables('vmname1'),'_datadisk2')]\", 'disksizegb': '1000', 'lun': 1, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[variables('nicid1')]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[variables('vmextensionname1')]\", 'apiversion': '2015-06-15', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname1'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('azurepxc.sh', parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat(variables('customscriptcommandcommon'), variables('customscriptparamvm1'))]\"}}}{'name': \"[variables('vmname2')]\", 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2017-03-30', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('nicname2'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname2')]\", 'adminusername': \"[parameters('username')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname2'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(variables('vmname2'),'_datadisk1')]\", 'disksizegb': '1000', 'lun': 0, 'createoption': 'empty'}, {'name': \"[concat(variables('vmname2'),'_datadisk2')]\", 'disksizegb': '1000', 'lun': 1, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[variables('nicid2')]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname2'),'/', variables('vmextensionname'))]\", 'apiversion': '2015-06-15', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname2'))]\", \"[resourceid('microsoft.compute/virtualmachines/extensions',variables('vmname1'), variables('vmextensionname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('azurepxc.sh', parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat(variables('customscriptcommandcommon'), variables('customscriptparamvm2'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2021-02-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('lbpublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[parameters('dnsname')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/availabilitysets', 'location': \"[parameters('location')]\", 'name': \"[variables('availabilitysetname')]\", 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'name': \"[concat(parameters('dnsname'), copyindex())]\", 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'copy': {'name': 'vmloop', 'count': \"[variables('nodecount')]\"}, 'dependson': [\"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicname'), copyindex()))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('dnsname'), copyindex())]\", 'adminusername': \"[parameters('vmusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('vmimagereference')[parameters('vmimage')]]\", 'osdisk': {'name': \"[concat(parameters('dnsname'), copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('disktype')]\"}}, 'datadisks': [{'name': \"[concat(parameters('dnsname'), copyindex(),'_datadisk1')]\", 'disksizegb': 1024, 'lun': 0, 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': \"[parameters('disktype')]\"}, 'createoption': 'empty'}, {'name': \"[concat(parameters('dnsname'), copyindex(),'_datadisk2')]\", 'disksizegb': 1024, 'lun': 1, 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': \"[parameters('disktype')]\"}, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicname'), copyindex()))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('dbsubnetname')]\", 'properties': {'addressprefix': \"[parameters('dbsubnetaddressprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'publicipaddressdeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('publicipaddressurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'networkapiversion': {'value': \"[variables('networkapiversion')]\"}, 'publicipaddressname': {'value': \"[variables('pubicipaddressname')]\"}, 'publicipdnsprefix': {'value': \"[variables('publicipdns')]\"}, 'tag': {'value': {'key1': 'public ip address', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'storageaccountdeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('storageaccounturl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'storageapiversion': {'value': \"[variables('storageapiversion')]\"}, 'storageaccounttype': {'value': \"[variables('storageaccounttype')]\"}, 'storageaccountname': {'value': \"[variables('storageaccname')]\"}, 'tag': {'value': {'key1': 'storage account', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'adfstorageaccountdeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('storageaccounturl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'storageapiversion': {'value': \"[variables('storageapiversion')]\"}, 'storageaccounttype': {'value': \"[variables('storageaccounttype')]\"}, 'storageaccountname': {'value': \"[variables('adfstorageaccname')]\"}, 'tag': {'value': {'key1': 'storage account', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'publicipaddressdeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('publicipaddressurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'networkapiversion': {'value': \"[variables('networkapiversion')]\"}, 'publicipaddressname': {'value': \"[variables('pubicipaddressname')]\"}, 'publicipdnsprefix': {'value': \"[variables('publicipdns')]\"}, 'tag': {'value': {'key1': 'public ip address', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'storageaccountdeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('storageaccounturl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'storageapiversion': {'value': \"[variables('storageapiversion')]\"}, 'storageaccounttype': {'value': \"[variables('storageaccounttype')]\"}, 'storageaccountname': {'value': \"[variables('storageaccname')]\"}, 'tag': {'value': {'key1': 'storage account', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'adfstorageaccountdeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('storageaccounturl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'storageapiversion': {'value': \"[variables('storageapiversion')]\"}, 'storageaccounttype': {'value': \"[variables('storageaccounttype')]\"}, 'storageaccountname': {'value': \"[variables('adfstorageaccname')]\"}, 'tag': {'value': {'key1': 'storage account', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'virtualnetworkdeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('virtualnetworkurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'networkapiversion': {'value': \"[variables('networkapiversion')]\"}, 'vnetname': {'value': \"[variables('vnetname')]\"}, 'subnet1name': {'value': \"[variables('subnet1name')]\"}, 'vnetaddressprefix': {'value': \"[variables('vnetaddressprefix')]\"}, 'subnet1prefix': {'value': \"[variables('subnet1prefix')]\"}, 'tag': {'value': {'key1': 'virtual network', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'networkinterfacedeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'dependson': ['virtualnetworkdeploy', 'networksecuritygroupdeploy', 'publicipaddressdeploy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('networkinterfaceurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'networkapiversion': {'value': \"[variables('networkapiversion')]\"}, 'networkinterfacename': {'value': \"[variables('networkinterfacename')]\"}, 'networksecuritygroupname': {'value': \"[variables('networksecuritygroupsname')]\"}, 'publicipaddressname': {'value': \"[variables('pubicipaddressname')]\"}, 'subnetref': {'value': \"[variables('subnetref')]\"}, 'tag': {'value': {'key1': 'network interface', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'networksecuritygroupdeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('networksecuritygroupurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'networkapiversion': {'value': \"[variables('networkapiversion')]\"}, 'networksecuritygroupsname': {'value': \"[variables('networksecuritygroupsname')]\"}, 'tag': {'value': {'key1': 'network security group', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'virtualmachinedeploy', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'dependson': ['storageaccountdeploy', 'networkinterfacedeploy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('virtualmachineurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'computeapiversion': {'value': \"[variables('computeapiversion')]\"}, 'vmname': {'value': \"[variables('vmname')]\"}, 'storageaccountname': {'value': \"[variables('storageaccname')]\"}, 'vmstorageaccountcontainername': {'value': \"[variables('storagecontainer')]\"}, 'vmsize': {'value': \"[variables('vmsize')]\"}, 'imagepublisher': {'value': \"[variables('imagepublisher')]\"}, 'imageoffer': {'value': \"[variables('imageoffer')]\"}, 'imageversion': {'value': \"[variables('imageversion')]\"}, 'imagesku': {'value': \"[variables('imagesku')]\"}, 'adminusername': {'value': \"[parameters('adminusernameinformaticavm')]\"}, 'adminpassword': {'value': \"[parameters('adminpasswordinformaticavm')]\"}, 'networkinterfacename': {'value': \"[variables('networkinterfacename')]\"}, 'tag': {'value': {'key1': 'virtual machine', 'value1': \"[parameters('tag').value1]\"}}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'virtualmachineextdeploy', 'dependson': ['virtualmachinedeploy', 'informaticacredentialsautomationsetup'], 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('virtualmachineexturl')]\"}, 'parameters': {'vmname': {'value': \"[variables('vmname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'fileuris': {'value': \"[variables('fileuris')]\"}, 'arguments': {'value': \"[variables('arguments')]\"}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'informaticacredentialsautomationsetup', 'apiversion': '2015-01-01', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('credentialsautomationsetupurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'jobidsignup': {'value': \"[parameters('jobidsignup')]\"}, 'automationaccountname': {'value': \"[variables('automationaccname')]\"}, 'credential1name': {'value': \"[variables('credential1name')]\"}, 'cred1username': {'value': \"[variables('azurermusername')]\"}, 'cred1password': {'value': \"[variables('azurermpassword')]\"}, 'runbookname': {'value': \"[variables('credsetuprunbookname')]\"}, 'location': {'value': \"[variables('automationlocation')]\"}, 'runbookurl': {'value': \"[variables('credsrunbookurl')]\"}, 'sku': {'value': \"[variables('sku')]\"}, 'ip': {'value': \"[variables('ip')]\"}, 'sysgain_ms_email': {'value': \"[variables('sysgainmsemail')]\"}, 'sysgain_ms_password': {'value': \"[variables('sysgainmspassword')]\"}, 'user_email': {'value': \"[parameters('useremail')]\"}, 'informatica_user_name': {'value': \"[parameters('informaticausername')]\"}, 'informatica_user_password': {'value': \"[parameters('informaticauserpassword')]\"}, 'user_firstname': {'value': \"[parameters('userfirstname')]\"}, 'user_lastname': {'value': \"[parameters('userlastname')]\"}, 'user_title': {'value': \"[parameters('usertitle')]\"}, 'user_phone': {'value': \"[parameters('userphone')]\"}, 'org_name': {'value': \"[parameters('orgname')]\"}, 'org_address': {'value': \"[parameters('orgaddress')]\"}, 'org_city': {'value': \"[parameters('orgcity')]\"}, 'org_state': {'value': \"[parameters('orgstate')]\"}, 'org_zipcode': {'value': \"[parameters('orgzipcode')]\"}, 'org_country': {'value': \"[parameters('orgcountry')]\"}, 'org_employees': {'value': \"[parameters('orgemployees')]\"}, 'client_id': {'value': \"[variables('clientid')]\"}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'workflowautomationsetup', 'apiversion': '2015-01-01', 'type': 'microsoft.resources/deployments', 'dependson': ['informaticacredentialsautomationsetup', 'virtualmachineextdeploy', 'sqldatawarehouesetup', 'adfstorageaccountdeploy', 'createcontainerautomationsetup'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('workflowautomationsetupurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'jobidworkflow': {'value': \"[parameters('jobidworkflow')]\"}, 'automationaccountname': {'value': \"[variables('wfaatomationaccountname')]\"}, 'credential1name': {'value': \"[variables('credential1name')]\"}, 'cred1username': {'value': \"[variables('azurermusername')]\"}, 'cred1password': {'value': \"[variables('azurermpassword')]\"}, 'runbookname': {'value': \"[variables('wfrunbookname')]\"}, 'location': {'value': \"[variables('automationlocation')]\"}, 'runbookurl': {'value': \"[variables('wfrunbookurl')]\"}, 'sku': {'value': \"[variables('sku')]\"}, 'ip': {'value': \"[variables('ip')]\"}, 'sysgain_ms_email': {'value': \"[variables('sysgainmsemail')]\"}, 'sysgain_ms_password': {'value': \"[variables('sysgainmspassword')]\"}, 'informatica_user_name': {'value': \"[parameters('informaticausername')]\"}, 'informatica_user_password': {'value': \"[parameters('informaticauserpassword')]\"}, 'informatica_csa_vmname': {'value': \"[variables('vmname')]\"}, 'client_id': {'value': \"[variables('clientid')]\"}, 'adfstorageaccname': {'value': \"[variables('adfstorageaccname')]\"}, 'adfstorageacckey': {'value': \"[reference('adfstorageaccountdeploy').outputs.primarykey.value]\"}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'sqldatawarehouesetup', 'apiversion': '2015-01-01', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sqldatawarehousesetupurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[variables('sqldwlocation')]\"}, 'sqldwservername': {'value': \"[variables('sqldwservername')]\"}, 'sqldwdbadminname': {'value': \"[parameters('sqldwdbadminname')]\"}, 'sqldwadminpassword': {'value': \"[parameters('sqldwadminpassword')]\"}, 'sqldwdbname': {'value': \"[variables('sqldwdbname')]\"}, 'servicelevelobjective': {'value': \"[variables('servicelevelobjective')]\"}, 'startipaddress': {'value': \"[variables('startipaddress')]\"}, 'endipaddress': {'value': \"[variables('endipaddress')]\"}, 'sql-api-version': {'value': \"[variables('sqlapiversion')]\"}, 'sqldb-api-version': {'value': \"[variables('sqldbapiversion')]\"}, 'sqlfirewallrules-api-version': {'value': \"[variables('sqlfirewallrulesapiversion')]\"}, 'collation': {'value': \"[variables('collation')]\"}, 'maxsizebytes': {'value': \"[variables('maxsizebytes')]\"}, 'version': {'value': \"[variables('sqlversion')]\"}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'createtableautomationsetup', 'apiversion': '2015-01-01', 'type': 'microsoft.resources/deployments', 'dependson': ['sqldatawarehouesetup'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('createtableautomationsetupurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'sqldwservername': {'value': \"[variables('sqldwservername')]\"}, 'sqldwdbadminname': {'value': \"[parameters('sqldwdbadminname')]\"}, 'sqldwadminpassword': {'value': \"[parameters('sqldwadminpassword')]\"}, 'sqldwdbname': {'value': \"[variables('sqldwdbname')]\"}, 'jobid': {'value': \"[parameters('jobid')]\"}, 'accountname': {'value': \"[variables('accountname')]\"}, 'credentialname': {'value': \"[variables('credentialname')]\"}, 'runbookname': {'value': \"[variables('runbookname')]\"}, 'location': {'value': \"[variables('automationlocation')]\"}, 'scripturi': {'value': \"[variables('automationscripturi')]\"}, 'runbookdescription': {'value': \"[variables('runbookdescription')]\"}, 'sku': {'value': \"[variables('sku')]\"}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}}{'name': 'createcontainerautomationsetup', 'apiversion': '2015-01-01', 'type': 'microsoft.resources/deployments', 'dependson': ['adfstorageaccountdeploy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('createcontainerautomationsetupurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adfstorageaccname': {'value': \"[variables('adfstorageaccname')]\"}, 'adfstorageacckey': {'value': \"[reference('adfstorageaccountdeploy').outputs.primarykey.value]\"}, 'jobidcont': {'value': \"[parameters('jobidcont')]\"}, 'automationaccountname': {'value': \"[variables('wfaatomationaccountname')]\"}, 'credential1name': {'value': \"[variables('credential1name')]\"}, 'cred1username': {'value': \"[variables('azurermusername')]\"}, 'cred1password': {'value': \"[variables('azurermpassword')]\"}, 'runbookname': {'value': \"[variables('ccrunbookname')]\"}, 'location': {'value': \"[variables('automationlocation')]\"}, 'scripturi': {'value': \"[variables('containerpsuri')]\"}, 'sku': {'value': \"[variables('sku')]\"}, 'informaticatags': {'value': \"[variables('informaticatags')]\"}, 'quickstarttags': {'value': \"[variables('quickstarttags')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('adminusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[variables('vmpublickey')]\"}]}}}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '16.04.0-lts', 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'), '_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('vmname'), '_datadisk')]\", 'disksizegb': 512, 'lun': 0, 'caching': 'readonly', 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}, 'resources': [{'type': 'extensions', 'name': \"[concat(parameters('vmname'),'-install')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('install.sh', parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('bash install.sh ', parameters('coscalekey'), ' ', parameters('coscaleemail'), ' ', parameters('coscalepassword'), ' ', reference(variables('publicipaddressname')).dnssettings.fqdn)]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'name': \"[variables('generalsettings').vmdcname]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('vmdc').vmnicname)]\"], 'tags': {'displayname': \"[variables('generalsettings').vmdcname]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmdc').vmvmsize]\"}, 'osprofile': {'computername': \"[variables('generalsettings').vmdcname]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'timezone': \"[parameters('vmstimezone')]\", 'enableautomaticupdates': \"[parameters('enableautomaticupdates')]\", 'provisionvmagent': true, 'patchsettings': {'patchmode': \"[if(parameters('enableautomaticupdates'), 'automaticbyos', 'manual')]\", 'assessmentmode': 'imagedefault'}}}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmdc').vmimagepublisher]\", 'offer': \"[variables('vmdc').vmimageoffer]\", 'sku': \"[variables('vmdc').vmimagesku]\", 'version': 'latest'}, 'osdisk': {'name': \"[variables('vmdc').vmosdiskname]\", 'caching': 'readwrite', 'ostype': 'windows', 'createoption': 'fromimage', 'disksizegb': 32, 'manageddisk': {'storageaccounttype': \"[parameters('vmdcstorageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmdc').vmnicname)]\"}]}, 'licensetype': \"[if(parameters('enablehybridbenefitserverlicenses'), 'windows_server', json('null'))]\"}, 'resources': [{'name': 'configuredcvm', 'type': 'extensions', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('generalsettings').vmdcname)]\"], 'tags': {'displayname': 'configuredcvm'}, 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.9', 'autoupgrademinorversion': true, 'forceupdatetag': \"[variables('dscconfiguredcvm').forceupdatetag]\", 'settings': {'wmfversion': 'latest', 'configuration': {'url': \"[variables('dscconfiguredcvm').scriptfileuri]\", 'script': \"[variables('dscconfiguredcvm').script]\", 'function': \"[variables('dscconfiguredcvm').function]\"}, 'configurationarguments': {'domainfqdn': \"[parameters('domainfqdn')]\", 'privateip': \"[variables('networksettings').dcprivateipaddress]\"}, 'privacy': {'datacollection': 'enable'}}, 'protectedsettings': {'configurationarguments': {'admincreds': {'username': \"[parameters('adminusername')]\", 'password': \"[parameters('adminpassword')]\"}, 'adfssvccreds': {'username': \"[variables('generalsettings').adfssvcusername]\", 'password': \"[variables('generalsettings').adfssvcpassword]\"}}}}}]}{'name': \"[variables('generalsettings').vmsqlname]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('vmsql').vmnicname)]\"], 'tags': {'displayname': \"[variables('generalsettings').vmsqlname]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmsql').vmvmsize]\"}, 'osprofile': {'computername': \"[variables('generalsettings').vmsqlname]\", 'adminusername': \"[variables('generalsettings').localadminusername]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'timezone': \"[parameters('vmstimezone')]\", 'enableautomaticupdates': \"[parameters('enableautomaticupdates')]\", 'provisionvmagent': true, 'patchsettings': {'patchmode': \"[if(parameters('enableautomaticupdates'), 'automaticbyos', 'manual')]\", 'assessmentmode': 'imagedefault'}}}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmsql').vmimagepublisher]\", 'offer': \"[variables('vmsql').vmimageoffer]\", 'sku': \"[variables('vmsql').vmimagesku]\", 'version': 'latest'}, 'osdisk': {'name': \"[variables('vmsql').vmosdiskname]\", 'caching': 'readwrite', 'ostype': 'windows', 'createoption': 'fromimage', 'disksizegb': 128, 'manageddisk': {'storageaccounttype': \"[parameters('vmsqlstorageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmsql').vmnicname)]\"}]}, 'licensetype': \"[if(parameters('enablehybridbenefitserverlicenses'), 'windows_server', json('null'))]\"}, 'resources': []}{'name': \"[variables('generalsettings').vmspname]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('vmsp').vmnicname)]\"], 'tags': {'displayname': \"[variables('generalsettings').vmspname]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmsp').vmvmsize]\"}, 'osprofile': {'computername': \"[variables('generalsettings').vmspname]\", 'adminusername': \"[variables('generalsettings').localadminusername]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'timezone': \"[parameters('vmstimezone')]\", 'enableautomaticupdates': \"[parameters('enableautomaticupdates')]\", 'provisionvmagent': true, 'patchsettings': {'patchmode': \"[if(parameters('enableautomaticupdates'), 'automaticbyos', 'manual')]\", 'assessmentmode': 'imagedefault'}}}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmsp').vmimagepublisher]\", 'offer': \"[variables('vmsp').vmimageoffer]\", 'sku': \"[variables('vmsp').vmimagesku]\", 'version': 'latest'}, 'osdisk': {'name': \"[variables('vmsp').vmosdiskname]\", 'caching': 'readwrite', 'ostype': 'windows', 'createoption': 'fromimage', 'disksizegb': 128, 'manageddisk': {'storageaccounttype': \"[parameters('vmspstorageaccounttype')]\"}}, 'datadisks': \"[if(equals(parameters('sharepointdatadisksize'), 0), json('null'), variables('vmspdatadisk'))]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmsp').vmnicname)]\"}]}, 'licensetype': \"[if(parameters('enablehybridbenefitserverlicenses'), 'windows_server', json('null'))]\"}, 'resources': []}{'name': \"[concat(variables('generalsettings').vmsqlname,'/configuresqlvm')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('generalsettings').vmsqlname)]\"], 'tags': {'displayname': \"[concat(variables('generalsettings').vmsqlname,'/configuresqlvm')]\"}, 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.9', 'autoupgrademinorversion': true, 'forceupdatetag': \"[variables('dscconfiguresqlvm').forceupdatetag]\", 'settings': {'wmfversion': 'latest', 'configuration': {'url': \"[variables('dscconfiguresqlvm').scriptfileuri]\", 'script': \"[variables('dscconfiguresqlvm').script]\", 'function': \"[variables('dscconfiguresqlvm').function]\"}, 'configurationarguments': {'dnsserver': \"[variables('networksettings').dcprivateipaddress]\", 'domainfqdn': \"[parameters('domainfqdn')]\"}, 'privacy': {'datacollection': 'enable'}}, 'protectedsettings': {'configurationarguments': {'domainadmincreds': {'username': \"[parameters('adminusername')]\", 'password': \"[parameters('adminpassword')]\"}, 'sqlsvccreds': {'username': \"[variables('generalsettings').sqlsvcusername]\", 'password': \"[variables('generalsettings').sqlsvcpassword]\"}, 'spsetupcreds': {'username': \"[variables('generalsettings').spsetupusername]\", 'password': \"[variables('generalsettings').spsetuppassword]\"}}}}}{'name': \"[concat(variables('generalsettings').vmspname,'/configurespvm')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('generalsettings').vmspname)]\"], 'tags': {'displayname': \"[concat(variables('generalsettings').vmspname,'/configurespvm')]\"}, 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.9', 'autoupgrademinorversion': true, 'forceupdatetag': \"[variables('dscconfigurespvm').forceupdatetag]\", 'settings': {'wmfversion': 'latest', 'configuration': {'url': \"[variables('dscconfigurespvm').scriptfileuri]\", 'script': \"[variables('dscconfigurespvm').script]\", 'function': \"[variables('dscconfigurespvm').function]\"}, 'configurationarguments': {'dnsserver': \"[variables('networksettings').dcprivateipaddress]\", 'domainfqdn': \"[parameters('domainfqdn')]\", 'dcname': \"[variables('generalsettings').vmdcname]\", 'sqlname': \"[variables('generalsettings').vmsqlname]\", 'sqlalias': \"[variables('generalsettings').sqlalias]\", 'sharepointversion': \"[parameters('sharepointversion')]\", 'enableanalysis': \"[variables('generalsettings').enableanalysis]\"}, 'privacy': {'datacollection': 'enable'}}, 'protectedsettings': {'configurationarguments': {'domainadmincreds': {'username': \"[parameters('adminusername')]\", 'password': \"[parameters('adminpassword')]\"}, 'spsetupcreds': {'username': \"[variables('generalsettings').spsetupusername]\", 'password': \"[variables('generalsettings').spsetuppassword]\"}, 'spfarmcreds': {'username': \"[variables('generalsettings').spfarmusername]\", 'password': \"[variables('generalsettings').spfarmpassword]\"}, 'spsvccreds': {'username': \"[variables('generalsettings').spsvcusername]\", 'password': \"[variables('generalsettings').spsvcpassword]\"}, 'spapppoolcreds': {'username': \"[variables('generalsettings').spapppoolusername]\", 'password': \"[variables('generalsettings').spapppoolpassword]\"}, 'sppassphrasecreds': {'username': 'passphrase', 'password': \"[variables('generalsettings').sppassphrase]\"}, 'spsuperusercreds': {'username': \"[variables('generalsettings').spsuperusername]\", 'password': \"[parameters('serviceaccountspassword')]\"}, 'spsuperreadercreds': {'username': \"[variables('generalsettings').spsuperreadername]\", 'password': \"[parameters('serviceaccountspassword')]\"}}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'name': \"[variables('generalsettings').vmdcname]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('vmdc').vmnicname)]\"], 'tags': {'displayname': \"[variables('generalsettings').vmdcname]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmdc').vmvmsize]\"}, 'osprofile': {'computername': \"[variables('generalsettings').vmdcname]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'timezone': \"[parameters('vmstimezone')]\", 'enableautomaticupdates': \"[parameters('enableautomaticupdates')]\", 'provisionvmagent': true, 'patchsettings': {'patchmode': \"[if(parameters('enableautomaticupdates'), 'automaticbyos', 'manual')]\", 'assessmentmode': 'imagedefault'}}}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmdc').vmimagepublisher]\", 'offer': \"[variables('vmdc').vmimageoffer]\", 'sku': \"[variables('vmdc').vmimagesku]\", 'version': 'latest'}, 'osdisk': {'name': \"[variables('vmdc').vmosdiskname]\", 'caching': 'readwrite', 'ostype': 'windows', 'createoption': 'fromimage', 'disksizegb': 32, 'manageddisk': {'storageaccounttype': \"[parameters('vmdcstorageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmdc').vmnicname)]\"}]}, 'licensetype': \"[if(parameters('enablehybridbenefitserverlicenses'), 'windows_server', json('null'))]\"}, 'resources': [{'name': 'configuredcvm', 'type': 'extensions', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('generalsettings').vmdcname)]\"], 'tags': {'displayname': 'configuredcvm'}, 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.9', 'autoupgrademinorversion': true, 'forceupdatetag': \"[variables('dscconfiguredcvm').forceupdatetag]\", 'settings': {'wmfversion': 'latest', 'configuration': {'url': \"[variables('dscconfiguredcvm').scriptfileuri]\", 'script': \"[variables('dscconfiguredcvm').script]\", 'function': \"[variables('dscconfiguredcvm').function]\"}, 'configurationarguments': {'domainfqdn': \"[parameters('domainfqdn')]\", 'privateip': \"[variables('networksettings').dcprivateipaddress]\"}, 'privacy': {'datacollection': 'enable'}}, 'protectedsettings': {'configurationarguments': {'admincreds': {'username': \"[parameters('adminusername')]\", 'password': \"[parameters('adminpassword')]\"}, 'adfssvccreds': {'username': \"[variables('generalsettings').adfssvcusername]\", 'password': \"[variables('generalsettings').adfssvcpassword]\"}}}}}]}{'name': \"[variables('generalsettings').vmsqlname]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('vmsql').vmnicname)]\"], 'tags': {'displayname': \"[variables('generalsettings').vmsqlname]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmsql').vmvmsize]\"}, 'osprofile': {'computername': \"[variables('generalsettings').vmsqlname]\", 'adminusername': \"[variables('generalsettings').localadminusername]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'timezone': \"[parameters('vmstimezone')]\", 'enableautomaticupdates': \"[parameters('enableautomaticupdates')]\", 'provisionvmagent': true, 'patchsettings': {'patchmode': \"[if(parameters('enableautomaticupdates'), 'automaticbyos', 'manual')]\", 'assessmentmode': 'imagedefault'}}}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmsql').vmimagepublisher]\", 'offer': \"[variables('vmsql').vmimageoffer]\", 'sku': \"[variables('vmsql').vmimagesku]\", 'version': 'latest'}, 'osdisk': {'name': \"[variables('vmsql').vmosdiskname]\", 'caching': 'readwrite', 'ostype': 'windows', 'createoption': 'fromimage', 'disksizegb': 128, 'manageddisk': {'storageaccounttype': \"[parameters('vmsqlstorageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmsql').vmnicname)]\"}]}, 'licensetype': \"[if(parameters('enablehybridbenefitserverlicenses'), 'windows_server', json('null'))]\"}, 'resources': []}{'name': \"[variables('generalsettings').vmspname]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('vmsp').vmnicname)]\"], 'tags': {'displayname': \"[variables('generalsettings').vmspname]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmsp').vmvmsize]\"}, 'osprofile': {'computername': \"[variables('generalsettings').vmspname]\", 'adminusername': \"[variables('generalsettings').localadminusername]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'timezone': \"[parameters('vmstimezone')]\", 'enableautomaticupdates': \"[parameters('enableautomaticupdates')]\", 'provisionvmagent': true, 'patchsettings': {'patchmode': \"[if(parameters('enableautomaticupdates'), 'automaticbyos', 'manual')]\", 'assessmentmode': 'imagedefault'}}}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmsp').vmimagepublisher]\", 'offer': \"[variables('vmsp').vmimageoffer]\", 'sku': \"[variables('vmsp').vmimagesku]\", 'version': 'latest'}, 'osdisk': {'name': \"[variables('vmsp').vmosdiskname]\", 'caching': 'readwrite', 'ostype': 'windows', 'createoption': 'fromimage', 'disksizegb': 128, 'manageddisk': {'storageaccounttype': \"[parameters('vmspstorageaccounttype')]\"}}, 'datadisks': \"[if(equals(parameters('sharepointdatadisksize'), 0), json('null'), variables('vmspdatadisk'))]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmsp').vmnicname)]\"}]}, 'licensetype': \"[if(parameters('enablehybridbenefitserverlicenses'), 'windows_server', json('null'))]\"}, 'resources': []}{'name': \"[concat(variables('generalsettings').vmsqlname,'/configuresqlvm')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('generalsettings').vmsqlname)]\"], 'tags': {'displayname': \"[concat(variables('generalsettings').vmsqlname,'/configuresqlvm')]\"}, 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.9', 'autoupgrademinorversion': true, 'forceupdatetag': \"[variables('dscconfiguresqlvm').forceupdatetag]\", 'settings': {'wmfversion': 'latest', 'configuration': {'url': \"[variables('dscconfiguresqlvm').scriptfileuri]\", 'script': \"[variables('dscconfiguresqlvm').script]\", 'function': \"[variables('dscconfiguresqlvm').function]\"}, 'configurationarguments': {'dnsserver': \"[variables('networksettings').dcprivateipaddress]\", 'domainfqdn': \"[parameters('domainfqdn')]\"}, 'privacy': {'datacollection': 'enable'}}, 'protectedsettings': {'configurationarguments': {'domainadmincreds': {'username': \"[parameters('adminusername')]\", 'password': \"[parameters('adminpassword')]\"}, 'sqlsvccreds': {'username': \"[variables('generalsettings').sqlsvcusername]\", 'password': \"[variables('generalsettings').sqlsvcpassword]\"}, 'spsetupcreds': {'username': \"[variables('generalsettings').spsetupusername]\", 'password': \"[variables('generalsettings').spsetuppassword]\"}}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2021-02-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('networksettings').nsgsubnetdcname]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[variables('networksettings').nsgsubnetdcname]\"}, 'properties': {'securityrules': \"[if(equals(tolower(parameters('rdptrafficallowed')), 'no'), json('null'), variables('networksettings').nsgruleallowincomingtraffic)]\"}}{'apiversion': '2021-02-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('networksettings').nsgsubnetsqlname]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[variables('networksettings').nsgsubnetsqlname]\"}, 'properties': {'securityrules': \"[if(equals(tolower(parameters('rdptrafficallowed')), 'no'), json('null'), variables('networksettings').nsgruleallowincomingtraffic)]\"}}{'apiversion': '2021-02-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('networksettings').nsgsubnetspname]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[variables('networksettings').nsgsubnetspname]\"}, 'properties': {'securityrules': \"[if(equals(tolower(parameters('rdptrafficallowed')), 'no'), json('null'), variables('networksettings').nsgruleallowincomingtraffic)]\"}}{'name': \"[variables('networksettings').vnetprivatename]\", 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'apiversion': '2021-02-01', 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksettings').nsgsubnetdcname)]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksettings').nsgsubnetsqlname)]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksettings').nsgsubnetspname)]\"], 'tags': {'displayname': \"[variables('networksettings').vnetprivatename]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('networksettings').vnetprivateprefix]\"]}, 'subnets': [{'name': \"[variables('networksettings').subnetdcname]\", 'properties': {'addressprefix': \"[variables('networksettings').subnetdcprefix]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksettings').nsgsubnetdcname)]\"}}}, {'name': \"[variables('networksettings').subnetsqlname]\", 'properties': {'addressprefix': \"[variables('networksettings').subnetsqlprefix]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksettings').nsgsubnetsqlname)]\"}}}, {'name': \"[variables('networksettings').subnetspname]\", 'properties': {'addressprefix': \"[variables('networksettings').subnetspprefix]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksettings').nsgsubnetspname)]\"}}}]}}{'condition': \"[equals(parameters('addpublicipaddresstoeachvm'), true())]\", 'name': \"[variables('vmdc').vmpublicipname]\", 'type': 'microsoft.network/publicipaddresses', 'location': \"[parameters('location')]\", 'apiversion': '2021-02-01', 'tags': {'displayname': \"[variables('vmdc').vmpublicipname]\"}, 'sku': {'name': 'basic', 'tier': 'regional'}, 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('vmdc').vmpublicipdnsname]\"}}}{'name': \"[variables('vmdc').vmnicname]\", 'type': 'microsoft.network/networkinterfaces', 'location': \"[parameters('location')]\", 'apiversion': '2021-02-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('networksettings').vnetprivatename)]\", \"[resourceid('microsoft.network/publicipaddresses', variables('vmdc').vmpublicipname)]\"], 'tags': {'displayname': \"[variables('vmdc').vmnicname]\"}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[variables('networksettings').dcprivateipaddress]\", 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('networksettings').vnetprivatename, variables('networksettings').subnetdcname)]\"}, 'publicipaddress': \"[if(parameters('addpublicipaddresstoeachvm'), variables('networksettings').vmdcpublicipnicassociation, json('null'))]\"}}]}}{'condition': \"[equals(parameters('addpublicipaddresstoeachvm'), true())]\", 'name': \"[variables('vmsql').vmpublicipname]\", 'type': 'microsoft.network/publicipaddresses', 'location': \"[parameters('location')]\", 'apiversion': '2021-02-01', 'tags': {'displayname': \"[variables('vmsql').vmpublicipname]\"}, 'sku': {'name': 'basic', 'tier': 'regional'}, 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('vmsql').vmpublicipdnsname]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), '2021-01-01').primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('clustername'), '-dev')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', concat(variables('clustername'), '-dev', '-vmnic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('infravmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': \"[variables('standardstorageaccounttype')]\"}}}, 'osprofile': {'computername': \"[concat(variables('clustername'), '-dev')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('clustername'), '-dev', '-vmnic'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'sku': {'name': 'basic'}, 'name': \"[concat(variables('clustername'), '-dev', '-publicip')]\", 'apiversion': '2018-02-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[tolower(concat(variables('clustername'), '-dev'))]\"}}}{'type': 'microsoft.network/publicipaddresses', 'sku': {'name': 'basic'}, 'name': \"[concat(variables('clustername'), '-infra0', copyindex(1), '-publicip')]\", 'apiversion': '2018-02-01', 'location': \"[parameters('location')]\", 'copy': {'name': 'infravmpubliciploop', 'count': \"[parameters('numberofinfravm')]\"}, 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[tolower(concat(variables('clustername'), '-infra0', copyindex(1)))]\"}}}{'type': 'microsoft.network/publicipaddresses', 'sku': {'name': 'basic'}, 'name': \"[concat(variables('clustername'), '-worker0', copyindex(1), '-publicip')]\", 'apiversion': '2018-02-01', 'location': \"[parameters('location')]\", 'copy': {'name': 'workervmpubliciploop', 'count': \"[parameters('numberofworkervm')]\"}, 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[tolower(concat(variables('clustername'), '-worker0', copyindex(1)))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'apiversion': '2019-03-01', 'location': \"[parameters('location')]\", 'name': \"[parameters('availabilitysetname')]\", 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-03-01', 'name': \"[parameters('virtualmachinename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('networkinterfacename')]\", \"[parameters('availabilitysetname')]\", \"[parameters('loadbalancername')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', parameters('availabilitysetname'))]\"}, 'osprofile': {'computername': \"[parameters('virtualmachinename')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('virtualmachinename'),'_osdisk')]\", 'caching': 'readonly', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}, 'datadisks': [{'name': \"[concat(parameters('virtualmachinename'), '_datadisk')]\", 'caching': 'readwrite', 'createoption': 'empty', 'disksizegb': 20, 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}, 'lun': 0}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('networkinterfacename'))]\"}]}}, 'resources': [{'type': 'extensions', 'apiversion': '2019-03-01', 'name': 'createadforest', 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('virtualmachinename')]\"], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.19', 'autoupgrademinorversion': true, 'settings': {'modulesurl': \"[uri(parameters('_artifactslocation'), concat('dsc/createadpdc.zip', parameters('_artifactslocationsastoken')))]\", 'configurationfunction': 'createadpdc.ps1\\\\createadpdc', 'properties': {'domainname': \"[parameters('domainname')]\", 'admincreds': {'username': \"[parameters('adminusername')]\", 'password': 'privatesettingsref:adminpassword'}}}, 'protectedsettings': {'items': {'adminpassword': \"[parameters('adminpassword')]\"}}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'createvnet', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('vnettemplateuri')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'virtualnetworkname': {'value': \"[parameters('virtualnetworkname')]\"}, 'virtualnetworkaddressrange': {'value': \"[parameters('virtualnetworkaddressrange')]\"}, 'subnetname': {'value': \"[parameters('adsubnetname')]\"}, 'subnetrange': {'value': \"[parameters('adsubnet')]\"}, 'location': {'value': \"[parameters('location')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('adnsgname')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow_any_rdp', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}, 'dependson': ['microsoft.resources/deployments/createvnet']} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'vnet', 'type': 'microsoft.resources/deployments', 'apiversion': '2019-09-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('vnettemplateuri')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'virtualnetworkname': {'value': \"[variables('virtualnetworkname')]\"}, 'virtualnetworkaddressrange': {'value': \"[variables('virtualnetworkaddressrange')]\"}, 'subnetname': {'value': \"[variables('adsubnetname')]\"}, 'subnetrange': {'value': \"[variables('adsubnet')]\"}}}}{'name': 'updatevnetdns1', 'type': 'microsoft.resources/deployments', 'apiversion': '2019-09-01', 'dependson': ['createadforest'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('vnetwithdnstemplateuri')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'virtualnetworkname': {'value': \"[variables('virtualnetworkname')]\"}, 'virtualnetworkaddressrange': {'value': \"[variables('virtualnetworkaddressrange')]\"}, 'subnetname': {'value': \"[variables('adsubnetname')]\"}, 'subnetrange': {'value': \"[variables('adsubnet')]\"}, 'dnsserveraddress': {'value': [\"[variables('adpdcnicipaddress')]\"]}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-12-01', 'name': \"[variables('vmname')[copyindex()]]\", 'location': \"[parameters('location')]\", 'zones': ['[copyindex(1)]'], 'dependson': ['nicloop'], 'copy': {'name': 'vmloop', 'count': 2}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')[copyindex()]]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readonly', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}, 'datadisks': [{'disksizegb': 64, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname')[copyindex()])]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-12-01', 'name': \"[concat(variables('vmname')[0], '/createadforest')]\", 'location': \"[parameters('location')]\", 'dependson': ['vmloop'], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.24', 'autoupgrademinorversion': true, 'settings': {'configuration': {'url': \"[uri(parameters('_artifactslocation'), 'dsc/createadpdc.ps1.zip')]\", 'script': 'createadpdc.ps1', 'function': 'createadpdc'}, 'configurationarguments': {'domainname': \"[parameters('domainname')]\"}}, 'protectedsettings': {'configurationurlsastoken': \"[parameters('_artifactslocationsastoken')]\", 'configurationarguments': {'admincreds': {'username': \"[parameters('adminusername')]\", 'password': \"[parameters('adminpassword')]\"}}}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-12-01', 'name': \"[concat(variables('vmname')[1], '/peparebdc')]\", 'location': \"[parameters('location')]\", 'dependson': ['vmloop'], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.24', 'autoupgrademinorversion': true, 'settings': {'configuration': {'url': \"[uri(parameters('_artifactslocation'), 'dsc/prepareadbdc.ps1.zip')]\", 'script': 'prepareadbdc.ps1', 'function': 'prepareadbdc'}, 'configurationarguments': {'dnsserver': \"[variables('ipaddress')[0]]\"}}, 'protectedsettings': {'configurationurlsastoken': \"[parameters('_artifactslocationsastoken')]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-11-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('publicipsku')]\"}, 'zones': ['1'], 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsprefix')]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-11-01', 'name': \"[variables('nicname')[copyindex()]]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'nicloop', 'count': 2}, 'dependson': ['createvnet', \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[variables('ipaddress')[copyindex()]]\", 'publicipaddress': \"[if(equals(copyindex(), 0), variables('publicipaddressid'), json('null'))]\", 'subnet': {'id': \"[variables('adsubnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'),copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('nicname'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/',variables('availabilitysetname'))]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', concat(variables('vmname'),'db'),'newuserscript')]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmname'),copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicname'),copyindex()))]\"}]}}, 'copy': {'name': 'virtualmachinescopy', 'count': \"[parameters('webvmcount')]\"}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),copyindex(),'/newuserscript')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat(variables('vmname'), copyindex()))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('installfrontendscripturi')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat(variables('installfrontendcommand'), ' ',listkeys(resourceid('microsoft.storage/storageaccounts', variables('newstorageaccountname')), '2016-01-01').keys[0].value, ' ',reference(resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname')),'2015-06-15').dnssettings.fqdn, ' ',reference(resourceid('microsoft.network/publicipaddresses',variables('publicdbipaddressname')),'2015-06-15').dnssettings.fqdn, ' ',parameters('fullnameofsite'), ' ',parameters('shortnameofsite'), ' ',parameters('iomadadminusername'), ' ',parameters('iomadadminpassword'), ' ',parameters('iomadadminemail'))]\"}}, 'copy': {'name': 'extensionscopy', 'count': \"[parameters('webvmcount')]\"}}{'type': 'microsoft.compute/availabilitysets', 'name': \"[concat(variables('availabilitysetname'),'db')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'shared-resources', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'commonsettings': {'value': \"[variables('commonsettings')]\"}, 'storagesettings': {'value': \"[variables('storagesettings')]\"}, 'networksettings': {'value': \"[variables('networksettings')]\"}, 'location': {'value': \"[parameters('location')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'configsecondarynode1', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('configsecondarytemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('configsecondary', '1')]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.dse]\"}, 'vmsize': {'value': \"[parameters('confignodevmsize')]\"}, 'staticip': {'value': \"[variables('networksettings').statics.configsecondaryip1]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('configsecondaryossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'configsecondarynode2', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'configsecondarynode1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('configsecondarytemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('configsecondary', '2')]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.dse]\"}, 'vmsize': {'value': \"[parameters('confignodevmsize')]\"}, 'staticip': {'value': \"[variables('networksettings').statics.configsecondaryip2]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('configsecondaryossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'configprimarynode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'configsecondarynode2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('configprimarytemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mongoadminusername': {'value': \"[parameters('mongoadminusername')]\"}, 'mongoadminpassword': {'value': \"[parameters('mongoadminpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'configprimary'}, 'subnet': {'value': \"[variables('networksettings').subnet.dse]\"}, 'staticip': {'value': \"[variables('networksettings').statics.configprimaryip]\"}, 'vmsize': {'value': \"[parameters('confignodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('configprimaryossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('areplicasecondarynode', '0')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('replicasecondarytemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'replsetname': {'value': 'repset1'}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('areplicasecondary', '0')]\"}, 'sizeofdatadiskingb': {'value': \"[parameters('sizeofdatadiskingb')]\"}, 'numdatadisks': {'value': \"[parameters('numdatadisks')]\"}, 'templatebaseurl': {'value': \"[variables('templatebaseurl')]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.dse]\"}, 'vmsize': {'value': \"[parameters('replicanodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('replicasecondaryossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, '_artifactslocationsastoken': {'value': \"[variables('environment').artifactslocationsastoken]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('areplicasecondarynode', '1')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'areplicasecondarynode0')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('replicasecondarytemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'replsetname': {'value': 'repset1'}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('areplicasecondary', '1')]\"}, 'sizeofdatadiskingb': {'value': \"[parameters('sizeofdatadiskingb')]\"}, 'numdatadisks': {'value': \"[parameters('numdatadisks')]\"}, 'templatebaseurl': {'value': \"[variables('templatebaseurl')]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.dse]\"}, 'vmsize': {'value': \"[parameters('replicanodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('replicasecondaryossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, '_artifactslocationsastoken': {'value': \"[variables('environment').artifactslocationsastoken]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'areplicaprimarynode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'areplicasecondarynode1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('replicaprimarytemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mongoadminusername': {'value': \"[parameters('mongoadminusername')]\"}, 'mongoadminpassword': {'value': \"[parameters('mongoadminpassword')]\"}, 'replsetname': {'value': 'repset1'}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'areplicaprimary'}, 'subnet': {'value': \"[variables('networksettings').subnet.dse]\"}, 'vmsize': {'value': \"[parameters('replicanodevmsize')]\"}, 'sizeofdatadiskingb': {'value': \"[parameters('sizeofdatadiskingb')]\"}, 'numdatadisks': {'value': \"[parameters('numdatadisks')]\"}, 'templatebaseurl': {'value': \"[variables('templatebaseurl')]\"}, 'staticip': {'value': \"[variables('networksettings').statics.replicaprimaryip1]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('replicaprimaryossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, '_artifactslocationsastoken': {'value': \"[variables('environment').artifactslocationsastoken]\"}, 'location': {'value': \"[parameters('location')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'shared-resources', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'commonsettings': {'value': \"[variables('commonsettings')]\"}, 'networksettings': {'value': \"[variables('networksettings')]\"}}}}{'name': 'jumpbox-resources', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'dependson': [\"[concat('microsoft.resources/deployments/', 'shared-resources')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('jumpboxtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'commonsettings': {'value': \"[variables('commonsettings')]\"}, 'networksettings': {'value': \"[variables('networksettings')]\"}, 'machinesettings': {'value': \"[variables('machinesettings')]\"}}}}{'type': 'microsoft.resources/deployments', 'name': \"[concat('member-resources', copyindex())]\", 'apiversion': '2015-01-01', 'dependson': [\"[concat('microsoft.resources/deployments/', 'shared-resources')]\"], 'copy': {'name': 'membernodesloop', 'count': \"[variables('clusterspec').numberofmembers]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('clusterspec').vmtemplate]\", 'contentversion': '1.0.0.0'}, 'parameters': {'commonsettings': {'value': \"[variables('commonsettings')]\"}, 'networksettings': {'value': \"[variables('networksettings')]\"}, 'machinesettings': {'value': {'adminusername': \"[variables('machinesettings').adminusername]\", 'adminpassword': \"[variables('machinesettings').adminpassword]\", 'machinenameprefix': \"[variables('machinesettings').machinenameprefix]\", 'osimagereference': \"[variables('machinesettings').osimagereference]\", 'vmsize': \"[variables('clusterspec').vmsizemember]\", 'datadisksize': \"[variables('clusterspec').datadisksize]\", 'machineindex': '[copyindex()]', 'vmscripts': \"[variables('vmscripts').scriptstodownload]\", 'commandtoexecute': \"[variables('vmscripts').regularnodeinstallcommand]\"}}}}}{'type': 'microsoft.resources/deployments', 'name': 'lastmember-resources', 'apiversion': '2015-01-01', 'dependson': ['membernodesloop'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('clusterspec').vmtemplate]\", 'contentversion': '1.0.0.0'}, 'parameters': {'commonsettings': {'value': \"[variables('commonsettings')]\"}, 'networksettings': {'value': \"[variables('networksettings')]\"}, 'machinesettings': {'value': {'adminusername': \"[variables('machinesettings').adminusername]\", 'adminpassword': \"[variables('machinesettings').adminpassword]\", 'machinenameprefix': \"[variables('machinesettings').machinenameprefix]\", 'osimagereference': \"[variables('machinesettings').osimagereference]\", 'vmsize': \"[variables('clusterspec').vmsizemember]\", 'datadisksize': \"[variables('clusterspec').datadisksize]\", 'machineindex': \"[variables('clusterspec').numberofmembers]\", 'vmscripts': \"[variables('vmscripts').scriptstodownload]\", 'commandtoexecute': \"[variables('vmscripts').lastnodeinstallcommand]\"}}}}}{'name': 'arbiter-resources', 'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'dependson': [\"[concat('microsoft.resources/deployments/', 'lastmember-resources')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('arbitertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'commonsettings': {'value': \"[variables('commonsettings')]\"}, 'networksettings': {'value': \"[variables('networksettings')]\"}, 'machinesettings': {'value': {'adminusername': \"[variables('machinesettings').adminusername]\", 'adminpassword': \"[variables('machinesettings').adminpassword]\", 'machinenameprefix': \"[variables('machinesettings').machinenameprefix]\", 'osimagereference': \"[variables('machinesettings').osimagereference]\", 'vmsize': \"[variables('clusterspec').vmsizearbiter]\", 'vmscripts': \"[variables('vmscripts').scriptstodownload]\", 'commandtoexecute': \"[concat(variables('vmscripts').arbiternodeinstallcommand)]\"}}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\"}}, {'name': \"[variables('subnet2name')]\", 'properties': {'addressprefix': \"[variables('subnet2prefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'apiversion': '2021-02-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storage', 'tags': {'env': 'trial', 'vendor': 'octopus deploy'}, 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('mastervmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('mastervmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('osversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('mastervmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('mastervmname'), '/installation')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('mastervmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('azuredeploy.sh', parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': \"[variables('installationcli')]\"}}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('workervmname'), copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('nicname'), 'worker', copyindex()))]\"], 'copy': {'name': 'foo', 'count': \"[parameters('scalenumber')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('workervmname'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('osversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('workervmname'), copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicname'), 'worker', copyindex()))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'name': 'jenkins-master', 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', 'master-networkinterface')]\"], 'tags': {'displayname': 'jenkins master'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('master-vmsize')]\"}, 'osprofile': {'computername': 'jenkins-master', 'adminusername': \"[parameters('master-username')]\", 'adminpassword': \"[parameters('master-password')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}, 'osdisk': {'name': 'master-osdisk', 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'master-networkinterface')]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', tolower(parameters('storagename')))).primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'name': 'jenkins-master', 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', 'master-networkinterface')]\"], 'tags': {'displayname': 'jenkins master'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('master-vmsize')]\"}, 'osprofile': {'computername': 'jenkins-master', 'adminusername': \"[parameters('master-username')]\", 'adminpassword': \"[parameters('master-password')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}, 'osdisk': {'name': 'master-osdisk', 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'master-networkinterface')]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', tolower(parameters('storagename')))).primaryendpoints.blob]\"}}}}{'name': 'node-1', 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', 'node-1-networkinterface')]\"], 'tags': {'displayname': 'node-1'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('linux-worker-vmsize')]\"}, 'osprofile': {'computername': 'node-1', 'adminusername': \"[parameters('node-username')]\", 'adminpassword': \"[parameters('node-password')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}, 'osdisk': {'name': 'node-1-osdisk', 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'node-1-networkinterface')]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', tolower(parameters('storagename')))).primaryendpoints.blob]\"}}}}{'name': 'node-2', 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', tolower(parameters('storagename')))]\", \"[resourceid('microsoft.network/networkinterfaces', 'node-2-networkinterface')]\"], 'tags': {'displayname': 'node-2'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('win-worker-vmsize')]\"}, 'osprofile': {'computername': 'node-2', 'adminusername': \"[parameters('node-username')]\", 'adminpassword': \"[parameters('node-password')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter-with-containers', 'version': 'latest'}, 'osdisk': {'name': 'node-2osdisk', 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'node-2-networkinterface')]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', tolower(parameters('storagename')))).primaryendpoints.blob]\"}}}}{'name': 'jenkins-master/installjenkins', 'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2019-03-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'jenkins-master-script'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', 'jenkins-master')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturlmaster')]\"]}, 'protectedsettings': {'commandtoexecute': 'sh install-jenkins.sh'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'name': 'master-publicip', 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'publicipaddress'}, 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('jenkins-dns')]\"}}}{'name': 'master-nsg', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'nsgrule1', 'properties': {'description': 'ssh access to master', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'nsgrule2', 'properties': {'description': 'http access to master', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '8080', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}}{'name': 'jenkins-cluster-virtualnetwork', 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', 'master-nsg')]\"], 'tags': {'displayname': 'jenkins-virtualnetwork'}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('netiprange')]\"]}, 'subnets': [{'name': 'jenkins-virtualnetwork-subnet', 'properties': {'addressprefix': \"[variables('subnetrange')]\"}}]}}{'name': 'master-networkinterface', 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', 'master-publicip')]\", \"[resourceid('microsoft.network/virtualnetworks', 'jenkins-cluster-virtualnetwork')]\", \"[resourceid('microsoft.network/networksecuritygroups','master-nsg')]\"], 'tags': {'displayname': 'jenkins-master-networkinterface'}, 'properties': {'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups','master-nsg')]\"}, 'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': '10.0.1.10', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', 'master-publicip')]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', 'jenkins-cluster-virtualnetwork', 'jenkins-virtualnetwork-subnet')]\"}}}]}}{'name': 'node-1-publicip', 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'publicipaddress'}, 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[concat('node-1-',parameters('jenkins-dns'))]\"}}}{'name': 'node-1-nsg', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'nsgrule1', 'properties': {'description': 'ssh allow', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'name': 'node-1-networkinterface', 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', 'node-1-publicip')]\", \"[resourceid('microsoft.network/virtualnetworks', 'jenkins-cluster-virtualnetwork')]\", \"[resourceid('microsoft.network/networksecuritygroups','node-1-nsg')]\"], 'tags': {'displayname': 'node-1-networkinterface'}, 'properties': {'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups','node-1-nsg')]\"}, 'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': '10.0.1.11', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', 'node-1-publicip')]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', 'jenkins-cluster-virtualnetwork', 'jenkins-virtualnetwork-subnet')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2017-05-10', 'name': 'jenkinsdeployment', 'type': 'microsoft.resources/deployments', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('nested/jenkins.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('jenkinsvmadminusername')]\"}, 'dnsprefix': {'value': \"[parameters('jenkinsdnsprefix')]\"}, 'jenkinsreleasetype': {'value': \"[parameters('jenkinsreleasetype')]\"}, 'repositoryurl': {'value': \"[parameters('repositoryurl')]\"}, 'clientid': {'value': \"[parameters('clientid')]\"}, 'clientsecret': {'value': \"[parameters('clientsecret')]\"}, 'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'storageaccountkey': {'value': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2016-01-01').keys[0].value]\"}, 'webappname': {'value': \"[variables('webappname')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[concat('labvm-',copyindex(1))]\", 'location': \"[parameters('location')]\", 'copy': {'count': \"[parameters('vmcount')]\", 'name': 'vmcopy'}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('strname'))]\", 'vmpipcopy', 'niccopy'], 'tags': {'displayname': 'labvm'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat('labvm-',copyindex(1))]\", 'adminusername': \"[parameters('adminuser')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat('labvm',copyindex(1),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat('labvm-nic-',copyindex(1)))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('strname'))).primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[concat(variables('availsetname'), copyindex(1))]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'comments': 'these are the availability sets for web vms, app vms and database vms', 'tags': {'displayname': 'availability sets', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'copy': {'name': 'availsetloop', 'count': 3}, 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[concat(variables('availsetname'), copyindex(1))]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'comments': 'these are the availability sets for web vms, app vms and database vms', 'tags': {'displayname': 'availability sets', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'copy': {'name': 'availsetloop', 'count': 3}, 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('webtiervmname'),'-', copyindex(1))]\", 'apiversion': '2017-03-30', 'location': \"[parameters('location')]\", 'comments': ' web tier vms', 'tags': {'displayname': 'web tier vms', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', concat(variables('vmstorageaccountname'),'1'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('webtiervmnicname'), copyindex(1)))]\", \"[resourceid('microsoft.compute/availabilitysets/', concat(variables('availsetname'),'1'))]\"], 'copy': {'name': 'webtiervmloop', 'count': \"[parameters('webtiervmcount')]\"}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',concat(variables('availsetname'),'1'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat('webserver',copyindex(1))]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('publisher')]\", 'offer': \"[variables('offer')]\", 'sku': \"[variables('redhatsku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('webtiervmname'),'-', copyindex(1),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('webtiervmnicname'), copyindex(1)))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('diagstorageaccountname'))).primaryendpoints.blob]\"}}}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('apptiervmname'),'-', copyindex(1))]\", 'apiversion': '2017-03-30', 'location': \"[parameters('location')]\", 'comments': ' app tier vms', 'tags': {'displayname': 'app tier vms', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', concat(variables('vmstorageaccountname'),'2'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('apptiervmnicname'), copyindex(1)))]\", \"[resourceid('microsoft.compute/availabilitysets/',concat(variables('availsetname'),'2'))]\"], 'copy': {'name': 'apptiervmloop', 'count': \"[parameters('apptiervmcount')]\"}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',concat(variables('availsetname'),'2'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat('appserver',copyindex(1))]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('publisher')]\", 'offer': \"[variables('offer')]\", 'sku': \"[variables('redhatsku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('apptiervmname'),'-', copyindex(1),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('apptiervmnicname'), copyindex(1)))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('diagstorageaccountname'))).primaryendpoints.blob]\"}}}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('databasetiervmname'),'-', copyindex(1))]\", 'apiversion': '2017-03-30', 'location': \"[parameters('location')]\", 'comments': 'database tier vms', 'tags': {'displayname': 'database tier vms', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', concat(variables('vmstorageaccountname'),'3'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('databasetiervmnicname'), copyindex(1)))]\", \"[resourceid('microsoft.compute/availabilitysets/', concat(variables('availsetname'),'3'))]\"], 'copy': {'name': 'databasetiervmloop', 'count': \"[parameters('databasetiervmcount')]\"}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',concat(variables('availsetname'),'3'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat('databaseserver',copyindex(1))]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('publisher')]\", 'offer': \"[variables('offer')]\", 'sku': \"[variables('redhatsku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('databasetiervmname'),'-', copyindex(1),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('databasetiervmnicname'), copyindex(1)))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('diagstorageaccountname'))).primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('webnsgname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': 'nsg for web subnet. rules for allowing http and https requests from internet are created', 'tags': {'displayname': 'web nsg', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'properties': {'securityrules': [{'name': 'http-allow', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': \"[parameters('remoteallowedcidr')]\", 'destinationaddressprefix': '10.0.1.0/24', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'https-allow', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': \"[parameters('remoteallowedcidr')]\", 'destinationaddressprefix': '10.0.1.0/24', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('appnsgname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': 'nsg for app subnet. by default, intra vnet traffic is allowed and requests from internet are denied', 'tags': {'displayname': 'app nsg', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'properties': {}}{'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('databasensgname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': 'nsg for database subnet. by default, intra vnet traffic is allowed and requests from internet are denied', 'tags': {'displayname': 'database nsg', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'properties': {}}{'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('jumpnsgname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': 'nsg for jump subnet. rules for allowing ssh from internet are created', 'tags': {'displayname': 'jump nsg', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'properties': {'securityrules': [{'name': 'ssh-allow', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('remoteallowedcidr')]\", 'destinationaddressprefix': '10.0.0.128/25', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('jumpipaddressname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': ' public ip used by the jump vm', 'tags': {'displayname': 'jump vm public ip', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[variables('jumpdnslabel')]\"}, 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('weblbipaddressname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': 'public ip used by the web server load balancer', 'tags': {'displayname': 'web lb public ip', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'properties': {'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4, 'dnssettings': {'domainnamelabel': \"[variables('weblbdnslabel')]\"}}}{'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': 'virtual network for overall solution', 'tags': {'displayname': 'virtual network', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('redhattags').provider]\"}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('webnsgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('appnsgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('databasensgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('jumpnsgname'))]\"], 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[variables('webtiersubnetname')]\", 'properties': {'addressprefix': '10.0.1.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('webnsgname'))]\"}}}, {'name': \"[variables('apptiersubnetname')]\", 'properties': {'addressprefix': '10.0.2.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('appnsgname'))]\"}}}, {'name': \"[variables('databasetiersubnetname')]\", 'properties': {'addressprefix': '10.0.3.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('databasensgname'))]\"}}}, {'name': \"[variables('jumpsubnetname')]\", 'properties': {'addressprefix': '10.0.0.128/25', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpnsgname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'name': 'sqvnet', 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'apiversion': '2020-05-01', 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', 'sqnsgapp')]\"], 'tags': {'displayname': 'sqvnet'}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('sqvnetprefix')]\"]}, 'subnets': [{'name': \"[variables('sqvnetexternalsubnetname')]\", 'properties': {'addressprefix': \"[variables('sqvnetexternalsubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', 'sqnsgapp')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'),copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/',concat(variables('nicname'),copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/',variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmname'),copyindex())]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicname'),copyindex()))]\"}]}}, 'copy': {'name': 'virtualmachinescopy', 'count': \"[parameters('vmcount')]\"}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(concat(variables('vmname'),copyindex()),'/newuserscript')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/',concat(variables('vmname'),copyindex()))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/',variables('installscriptname'), parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'forcetls.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'settlsconfig.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'config_1_loadsyncprovmodule.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'config_2_setserverid.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'config_3_setconfigpw.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'config_3a_addolcrootdn.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'config_4_addconfigreplication.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'config_5_addsyncprov.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'config_6_addsyncrepl.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'config_7_testconfigreplication.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'hdb_1_addsyncprovtohdb.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'hdb_2_addolcsuffix.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'hdb_3_addolcrootdn.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'hdb_4_addolcrootpw.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'hdb_5_addolcsyncrepl.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'hdb_6_addolcmirrormode.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('ldif/', 'hdb_7_addindexhdb.ldif', parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat(variables('installcommand'), ' ', copyindex())]\"}}, 'copy': {'name': 'extensionscopy', 'count': \"[parameters('vmcount')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/newuserscript')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat(variables('installscriptname'), parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('forcetls.ldif', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('settlsconfig.ldif', parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': \"[variables('installcommand')]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-01-01', 'location': \"[variables('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/newuserscript')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('install_minecraft.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('bash install_minecraft.sh ', parameters('minecraftuser'), ' ', parameters('difficulty'), ' ', parameters('level-name'), ' ', parameters('gamemode'), ' ', parameters('white-list'), ' ', parameters('enable-command-block'), ' ', parameters('spawn-monsters'), ' ', parameters('generate-structures'), ' ', parameters('level-seed'), ' ', parameters('minecraftlauncherlocation'))]\"}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('virtualmachinesize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': 100}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('username')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2017-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'comments': 'the availability set ensures at least one kemp loadmaster will be available during either a planned or unplanned maintenance event.', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmnameprefix'), copyindex())]\", 'comments': 'this will create two kemp loadmasters.', 'plan': \"[variables('imageplan')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('networkinterfacename'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[variables('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmnameprefix'), copyindex())]\", 'adminusername': 'bal', 'adminpassword': \"[parameters('balpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': \"[variables('imageversion')]\"}, 'osdisk': {'name': \"[concat(variables('vmnameprefix'), copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('networkinterfacename'),copyindex()))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'comments': 'this the virtual network that all resources will be deployed to.', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': '10.0.2.0/24'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'comments': 'this is the public ip address that will be assigned to the azure load balancer.', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[variables('dnsnameforlbip')]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('networksecurityname')]\", 'comments': 'this network security group (nsg) will limit the tcp ports open to the kemp loadmasters.', 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[variables('networksecurityname')]\"}, 'properties': {'securityrules': [{'name': 'wui-rule', 'properties': {'description': 'allow wui', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '8443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'ssh-rule', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}, {'name': 'ssl-rule', 'properties': {'description': 'allow ssl', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 103, 'direction': 'inbound'}}, {'name': 'web-rule', 'properties': {'description': 'allow web', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 104, 'direction': 'inbound'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('networkinterfacename'), copyindex())]\", 'comments': 'a network interface will be created for each of the kemp loadmasters.', 'location': \"[parameters('location')]\", 'copy': {'name': 'nicloop', 'count': \"[variables('numberofinstances')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/loadbalancers/inboundnatrules', variables('loadbalancername'), concat('vlm-mgmt', copyindex()))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('networksecurityname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups/', variables('networksecurityname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools',variables('loadbalancername'), 'backendpool1')]\"}], 'loadbalancerinboundnatrules': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatrules',variables('loadbalancername'),concat('vlm-mgmt', copyindex()))]\"}]}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/loadbalancers', 'name': \"[variables('loadbalancername')]\", 'comments': 'this azure load balancer will be used to direct traffic to the active kemp loadmaster in the ha pair.', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks',variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'backendaddresspools': [{'name': 'backendpool1'}], 'loadbalancingrules': [{'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancername'), 'loadbalancerfrontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), 'backendpool1')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('loadbalancername'), 'vlm-health-probe')]\"}, 'protocol': 'tcp', 'frontendport': 8444, 'backendport': 8444, 'idletimeoutinminutes': 15}, 'name': 'healthcheck'}], 'probes': [{'properties': {'protocol': 'http', 'port': 8444, 'requestpath': '/', 'intervalinseconds': 5, 'numberofprobes': 2}, 'name': 'vlm-health-probe'}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/loadbalancers/inboundnatrules', 'name': \"[concat(variables('loadbalancername'), '/', 'vlm-mgmt', copyindex())]\", 'comments': 'this will create inbound rules to access the kemp loadmaster web user interface (wui).', 'location': \"[parameters('location')]\", 'copy': {'name': 'lbnatloop', 'count': \"[variables('numberofinstances')]\"}, 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\"], 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('loadbalancername'),'loadbalancerfrontend')]\"}, 'protocol': 'tcp', 'frontendport': '[copyindex(8441)]', 'backendport': 8443, 'enablefloatingip': false}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[concat(variables('virtualmachinename'),'-', parameters('cpu-gpu'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('networkinterfacename'))]\", \"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmsize')[parameters('cpu-gpu')]]\"}, 'storageprofile': {'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}}, 'imagereference': {'publisher': 'microsoft-dsvm', 'offer': 'ubuntu-1804', 'sku': '1804-gen2', 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}, 'osprofile': {'computername': \"[variables('virtualmachinename')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/availabilitysets', 'location': \"[parameters('location')]\", 'name': 'gw-availabilityset', 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/availabilitysets', 'location': \"[parameters('location')]\", 'name': 'cb-availabilityset', 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/availabilitysets', 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('rdshnamingprefix'), 'availabilityset')]\", 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/availabilitysets', 'location': \"[parameters('location')]\", 'name': 'gw-availabilityset', 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/availabilitysets', 'location': \"[parameters('location')]\", 'name': 'cb-availabilityset', 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/availabilitysets', 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('rdshnamingprefix'), 'availabilityset')]\", 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': 'gw-vm', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/availabilitysets', 'gw-availabilityset')]\", \"[resourceid('microsoft.network/networkinterfaces', 'gw-nic')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('rdshvmsize')]\"}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', 'gw-availabilityset')]\"}, 'osprofile': {'computername': 'gateway', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': 'gw_osdisk', 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces','gw-nic')]\"}]}}, 'resources': [{'apiversion': '2020-06-01', 'type': 'extensions', 'name': 'gateway', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', 'gw-vm')]\"], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.11', 'autoupgrademinorversion': true, 'settings': {'modulesurl': \"[uri(parameters('_artifactslocation'),concat('dsc/configuration.zip', parameters('_artifactslocationsastoken')))]\", 'configurationfunction': 'configuration.ps1\\\\gateway', 'properties': {'domainname': \"[parameters('addomainname')]\", 'admincreds': {'username': \"[parameters('adminusername')]\", 'password': 'privatesettingsref:adminpassword'}}}, 'protectedsettings': {'items': {'adminpassword': \"[parameters('adminpassword')]\"}}}}]}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('rdshnamingprefix'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'rdsh-vm-loop', 'count': \"[parameters('numberofrdshinstances')]\"}, 'dependson': [\"[resourceid('microsoft.compute/availabilitysets', concat(parameters('rdshnamingprefix'), 'availabilityset'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('rdshnamingprefix'), copyindex(), '-nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('rdshvmsize')]\"}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', concat(parameters('rdshnamingprefix'), 'availabilityset'))]\"}, 'osprofile': {'computername': \"[concat(parameters('rdshnamingprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('rdshnamingprefix'), copyindex(),'-osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('rdshnamingprefix'), copyindex(), '-nic'))]\"}]}}, 'resources': [{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('rdshnamingprefix'), copyindex(),'/sessionhost')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', concat(parameters('rdshnamingprefix'), copyindex()))]\"], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.11', 'autoupgrademinorversion': true, 'settings': {'modulesurl': \"[uri(parameters('_artifactslocation'),concat('dsc/configuration.zip', parameters('_artifactslocationsastoken')))]\", 'configurationfunction': 'configuration.ps1\\\\sessionhost', 'properties': {'domainname': \"[parameters('addomainname')]\", 'admincreds': {'username': \"[parameters('adminusername')]\", 'password': 'privatesettingsref:adminpassword'}}}, 'protectedsettings': {'items': {'adminpassword': \"[parameters('adminpassword')]\"}}}}]}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': 'cb-vm', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/availabilitysets', 'cb-availabilityset')]\", \"[resourceid('microsoft.network/networkinterfaces', 'cb-nic')]\", 'rdsh-vm-loop'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('rdshvmsize')]\"}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', 'cb-availabilityset')]\"}, 'osprofile': {'computername': 'broker', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': 'cb_osdisk', 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces','cb-nic')]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': 'gw-availabilityset', 'location': \"[parameters('location')]\"}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': 'cb-availabilityset', 'location': \"[parameters('location')]\"} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': 'gw-availabilityset', 'location': \"[parameters('location')]\"}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': 'cb-availabilityset', 'location': \"[parameters('location')]\"}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': 'rdsh-availabilityset', 'location': \"[parameters('location')]\"}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': 'gw-vm', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('deployprimaryadid')]\", \"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/','gw-nic')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', 'gw-availabilityset')]\"}, 'osprofile': {'computername': 'gateway', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': 'osdisk', 'vhd': {'uri': \"[concat(reference(resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname')),'2021-02-01').primaryendpoints.blob,variables('uniquestorageaccountcontainername'),'/','gw-vm-os-disk.vhd')]\"}, 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces','gw-nic')]\"}]}}, 'resources': [{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': 'gw-vm/gateway', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', 'gw-vm')]\"], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.11', 'autoupgrademinorversion': true, 'settings': {'modulesurl': \"[uri(parameters('_artifactslocation'), concat('configuration.zip', parameters('_artifactslocationsastoken')))]\", 'configurationfunction': 'configuration.ps1\\\\gateway', 'properties': {'domainname': \"[parameters('addomainname')]\", 'admincreds': {'username': \"[parameters('adminusername')]\", 'password': 'privatesettingsref:adminpassword'}}}, 'protectedsettings': {'items': {'adminpassword': \"[parameters('adminpassword')]\"}}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'name': \"[variables('nsgname')]\", 'type': 'microsoft.network/networksecuritygroups', 'location': \"[parameters('location')]\", 'apiversion': '2020-08-01', 'properties': {'securityrules': [{'name': 'rule1', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}]}}{'name': \"[variables('advnetname')]\", 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'apiversion': '2020-08-01', 'dependson': [\"[variables('nsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressrange')]\"]}, 'subnets': [{'name': \"[variables('adsubnetname')]\", 'properties': {'addressprefix': \"[variables('subnetaddressrange')]\", 'networksecuritygroup': {'id': \"[variables('nsgid')]\"}}}]}}{'name': \"[variables('publicipaddressname')]\", 'type': 'microsoft.network/publicipaddresses', 'location': \"[parameters('location')]\", 'apiversion': '2020-08-01', 'dependson': [\"[variables('advnetname')]\"], 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('dnslabelprefix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/availabilitysets', 'location': \"[parameters('location')]\", 'name': \"[parameters('gw-availabilityset')]\", 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'name': \"[concat('gw-vm-',copyindex())]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'copy': {'name': 'gw-vm-loop', 'count': \"[parameters('numberofwebgwinstances')]\"}, 'dependson': [\"[resourceid('microsoft.compute/availabilitysets', 'gw-availabilityset')]\", \"[concat('microsoft.network/networkinterfaces/gw-',copyindex(),'-nic')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', 'gw-availabilityset')]\"}, 'osprofile': {'computername': \"[concat('gateway',copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat('gw-vm-',copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat('gw-',copyindex(),'-nic'))]\"}]}}, 'resources': [{'name': \"[concat('gw-vm-',copyindex(),'/gateway')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'location': \"[parameters('location')]\", 'apiversion': '2017-12-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', concat('gw-vm-',copyindex()))]\"], 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.76', 'autoupgrademinorversion': true, 'settings': {'modulesurl': \"[concat(variables('assetlocation'),'/configuration.zip')]\", 'configurationfunction': 'configuration.ps1\\\\gateway', 'properties': {'domainname': \"[parameters('addomainname')]\", 'admincreds': {'username': \"[parameters('adminusername')]\", 'password': 'privatesettingsref:adminpassword'}}}, 'protectedsettings': {'items': {'adminpassword': \"[parameters('adminpassword')]\"}}}}, {'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat('gw-vm-',copyindex(),'/webandgwfarmadd_postconfig1.1')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', concat('gw-vm-',copyindex()))]\", \"[concat('microsoft.compute/virtualmachines/gw-vm-',copyindex(),'/extensions/','gateway')]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'settings': {'fileuris': ['https://raw.githubusercontent.com/azure/azure-quickstart-templates/master/application-workloads/rds/rds-deployment-ha-gateway/scripts/webandgwfarmadd_postconfig1.1.ps1']}, 'protectedsettings': {'items': {'adminpassword': \"[parameters('adminpassword')]\"}, 'commandtoexecute': '[concat(\\'powershell.exe -executionpolicy unrestricted -file\\', \\' \\', \\'webandgwfarmadd_postconfig1.1.ps1\\',\\' \\',\\'-username \"\\',parameters(\\'adminusername\\'),\\'\" \\', \\'-password \"\\',parameters(\\'adminpassword\\'),\\'\" \\',\\'-brokerserver \"\\',parameters(\\'brokerserver\\'),\\'\" \\',\\'-weburl \"\\',parameters(\\'weburl\\'),\\'\" \\',\\'-domainname \"\\',parameters(\\'addomainname\\'),\\'\" \\',\\'-domainnetbios \"\\',parameters(\\'domainnetbios\\'),\\'\" \\',\\'-numberofwebservers \\',parameters(\\'numberofwebgwinstances\\'))]'}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-06-01', 'name': \"[parameters('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'http', 'properties': {'priority': 300, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '80'}}, {'name': 'https', 'properties': {'priority': 310, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '443'}}, {'name': 'ssh', 'properties': {'priority': 340, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '22'}}, {'name': 'azurenotebooks', 'properties': {'priority': 360, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '8000'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('dnsnameforpublicip')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'publicipaddress'}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'virtualnetwork'}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('frontendnsgname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'nsg - web server'}, 'properties': {'securityrules': [{'name': 'ssh-rule', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'web-rule', 'properties': {'description': 'allow web', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat('publicip', copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'foo', 'count': \"[parameters('scalenumber')]\"}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nicname'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'foo', 'count': \"[parameters('scalenumber')]\"}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', concat('publicip', copyindex()))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[concat('10.0.0.', copyindex(4))]\", 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat('publicip', copyindex()))]\"}, 'subnet': {'id': \"[variables('subnet1ref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}, {'name': 'default-allow-80', 'properties': {'priority': 1001, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '80', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-07-01', 'name': 'dockerhost', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storagename'))]\", \"[resourceid('microsoft.network/networkinterfaces', 'nic')]\"], 'tags': {'displayname': 'docker host with portainer and traefik'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': 'dockerhost', 'adminusername': \"[parameters('adminuser')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2022-datacenter-core-smalldisk-g2', 'version': 'latest'}, 'osdisk': {'name': 'osdisk', 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': \"[parameters('disksizegb')]\", 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'nic')]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', parameters('storagename'))).primaryendpoints.blob]\"}}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2021-07-01', 'name': 'dockerhost/setupscript', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'setup script for portainer and traefik'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', 'dockerhost')]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.10', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('setupscripturl')]\", \"[variables('initscripturl')]\", \"[variables('installdockerscripturl')]\", \"[variables('sshdconfigurl')]\", \"[variables('templateurl')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('powershell -executionpolicy bypass -file initialize.ps1 -mail ', parameters('email'), ' -publicdnsname ',reference(resourceid('microsoft.network/publicipaddresses','publicip')).dnssettings.fqdn, ' -adminpwd ', parameters('adminpassword'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat(variables('vmname'), '-nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('osimagepublisher')]\", 'offer': \"[variables('osimageoffer')]\", 'sku': \"[variables('osimagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'-osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('vmname'), '-nic'))]\"}]}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'), '/installscript')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scriptdownloaduri')]\"], 'commandtoexecute': \"[variables('installcommand')]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2021-07-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('vmname'), '-nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('osimagepublisher')]\", 'offer': \"[variables('osimageoffer')]\", 'sku': \"[variables('osimagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('vmname'), '-nic'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('vmname'), '-nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('osimagepublisher')]\", 'offer': \"[variables('osimageoffer')]\", 'sku': \"[variables('osimagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('vmname'), '-nic'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('appvmname'),copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('appvmname'), copyindex(), '-nic'))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('appvmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('appvmname'),copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('osimagepublisher')]\", 'offer': \"[variables('osimageoffer')]\", 'sku': \"[variables('osimagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('appvmname'),copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('appvmname'), copyindex(), '-nic'))]\"}]}}, 'copy': {'name': 'appvmcopy', 'count': \"[parameters('appvmcount')]\"}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('mysqlvmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('mysqlvmname'), '-nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('mysqlvmsize')]\"}, 'osprofile': {'computername': \"[variables('mysqlvmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('osimagepublisher')]\", 'offer': \"[variables('osimageoffer')]\", 'sku': \"[variables('osimagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('mysqlvmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('mysqlvmname'), '-nic'))]\"}]}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('mongovmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('mongovmname'), '-nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('mongovmsize')]\"}, 'osprofile': {'computername': \"[variables('mongovmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('osimagepublisher')]\", 'offer': \"[variables('osimageoffer')]\", 'sku': \"[variables('osimagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('mongovmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('mongovmname'), '-nic'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('apppublicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('mysqlpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nDeploy an HDInsight cluster (running Linux) on an existing Hive metastore and virtual network. The SSH authentication method for the cluster is username / password.\n\n===\n\n", "truth": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('clusterstorageaccountname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('clustervnetname'))]\"], 'properties': {'clusterversion': '3.6', 'ostype': 'linux', 'clusterdefinition': {'kind': \"[variables('clustertype')]\", 'componentversion': {'spark': '2.3'}, 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('loginusername')]\", 'restauthcredential.password': \"[parameters('loginpassword')]\"}, 'hive-site': {'hive.metastore.client.connect.retry.delay': '5', 'hive.execution.engine': 'mr', 'hive.security.authorization.manager': 'org.apache.hadoop.hive.ql.security.authorization.defaulthiveauthorizationprovider'}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('clusterstorageaccountname'))).primaryendpoints.blob, 'https://', ''), '/', '')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('clusterstorageaccountname')), '2019-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('clusternodesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('loginusername')]\", 'password': \"[parameters('loginpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('clustervnetname'))]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('clustervnetname'), variables('clustervnetsubnetname'))]\"}, 'scriptactions': [{'name': 'apache spark 1.4.1', 'uri': \"[uri(parameters('_artifactslocation'), concat('spark141-installer-v04.sh', parameters('_artifactslocationsastoken')))]\"}]}, {'name': 'workernode', 'targetinstancecount': \"[parameters('clusterworkernodecount')]\", 'hardwareprofile': {'vmsize': \"[parameters('clusternodesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('loginusername')]\", 'password': \"[parameters('loginpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('clustervnetname'))]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('clustervnetname'), variables('clustervnetsubnetname'))]\"}}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('clusternodesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('loginusername')]\", 'password': \"[parameters('loginpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('clustervnetname'))]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('clustervnetname'), variables('clustervnetsubnetname'))]\"}}]}}} END", "openai_output": "\n\n===\n\n {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('sparkmasternetworkinterfacename')]\", 'apiversion': '2020-08-01', 'location': \"[variables('resourcegrouplocation')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', 'sparkmasterpublicip' )]\", \"[resourceid('microsoft.network/virtualnetworks', variables('sparkvirtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('sparknetworksecuritygroupname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipaddress': \"[variables('sparkmasterinternalip')]\", 'privateipallocationmethod': 'static', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('sparkmasterpublicipname'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('sparkvirtualnetworkname'),'default')]\"}}}], 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('sparknetworksecuritygroupname'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('sparkslavenetworkinterfacename'), copyindex() )]\", 'apiversion': '2020-08-01', 'location': \"[variables('resourcegrouplocation')]\", 'copy': {'name': 'nicslavesloop', 'count': \"[parameters('numberofslaves')]\"}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('sparkmasternetworkinterfacename'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('sparkvirtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('sparknetworksecuritygroupname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('sparkvirtualnetworkname'),'default')]\"}}}], 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('sparknetworksecuritygroupname'))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat('mastervm', copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineloopmaster', 'count': \"[variables('numberofmasterinstances')]\"}, 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared-resources')]\", \"[resourceid('microsoft.network/networkinterfaces/', concat('nic', copyindex()))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', 'sparkcluseras')]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('computernameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': {'disablepasswordauthentication': false}}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat('mastervm', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat('nic', copyindex()))]\"}]}}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat('slavevm', copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofslavesinstances')]\"}, 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared-resources')]\", \"[resourceid('microsoft.network/networkinterfaces/', concat('nicsl', copyindex()))]\", 'virtualmachineloopmaster'], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', 'sparkcluseras')]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('computernameprefix'),'sl', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': {'disablepasswordauthentication': false}}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat('slavevm', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat('nicsl', copyindex()))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat('mastervm', copyindex(), '/installsparkmaster')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineextensionsloopmaster', 'count': \"[variables('numberofmasterinstances')]\"}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat('mastervm', copyindex()))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat('nic', copyindex()))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('spark-cluster-install.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('bash spark-cluster-install.sh -k ',parameters('sparkversion'),' -d ', reference('nic0').ipconfigurations[0].properties.privateipaddress,' -s ',variables('numberofslavesinstances'),' -m ', ' 1 ')]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': \"[variables('imageversion')]\"}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': \"[variables('imageversion')]\"}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/newuserscript')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('configure-geth.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('sh configure-geth.sh ', parameters('adminusername'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('install.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': 'sh install.sh'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2016-06-01', 'type': 'microsoft.network/networksecuritygroups', 'name': 'networksecuritygroups', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'erlangportmapper', 'properties': {'description': 'erlang port mapper ( epmd )', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '4369', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}, {'name': 'syncgateway', 'properties': {'description': 'sync gateway', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '4984-4985', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 102, 'direction': 'inbound'}}, {'name': 'server', 'properties': {'description': 'server', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '8091-8094', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 103, 'direction': 'inbound'}}, {'name': 'index', 'properties': {'description': 'index', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '9100-9105', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 104, 'direction': 'inbound'}}, {'name': 'internal', 'properties': {'description': 'internal', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '9998-9999', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 105, 'direction': 'inbound'}}, {'name': 'xdcr', 'properties': {'description': 'xdcr', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '11207-11215', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 106, 'direction': 'inbound'}}, {'name': 'ssl', 'properties': {'description': 'ssl', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '18091-18093', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 107, 'direction': 'inbound'}}, {'name': 'nodedataexchange', 'properties': {'description': 'node data exchange', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '21100-21299', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 108, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-07-01', 'name': \"[parameters('publicdnsname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('publicdnsname')]\"}}}{'comments': \"simple network security group for subnet [parameters('subnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('vhdstoragenamers')]\", 'apiversion': '2021-01-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storage', 'tags': {'displayname': 'datastorageaccountrs'}, 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'storageaccountvirtualnetworkpublicip', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'comments': 'this resource will create storage accounts for active directory, sql server, file share witness and diagnostics. it will also create the virtual network and public ip addresses', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('configuration').storageaccountvirtualnetworkpublicip]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'sqlstorageaccountname': {'value': \"[parameters('sqlstorageaccountname')]\"}, 'dcstorageaccountname': {'value': \"[parameters('dcstorageaccountname')]\"}, 'sqlstorageaccounttype': {'value': \"[parameters('sqlstorageaccounttype')]\"}, 'dcstorageaccounttype': {'value': \"[parameters('dcstorageaccounttype')]\"}, 'primarydcipaddressnamewithsuffix': {'value': \"[variables('primarydcipaddressnamewithsuffix')]\"}, 'backupdcipaddressnamewithsuffix': {'value': \"[variables('backupdcipaddressnamewithsuffix')]\"}, 'sql1addressnamewithsuffix': {'value': \"[variables('sql1addressnamewithsuffix')]\"}, 'sql0addressnamewithsuffix': {'value': \"[variables('sql0addressnamewithsuffix')]\"}, 'virtualnetworkname': {'value': \"[variables('virtualnetworknamewithsuffix')]\"}, 'virtualnetworkaddressrange': {'value': \"[parameters('virtualnetworkaddressrange')]\"}, 'subnets': {'value': \"[variables('subnets')]\"}}}}{'name': 'loadbalancers', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'comments': 'create load balancers for sql and dc', 'dependson': ['microsoft.resources/deployments/storageaccountvirtualnetworkpublicip'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('configuration').setuplbsurl]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'sqllbname': {'value': \"[variables('lbsettings').sqllbname]\"}, 'sqllbfe': {'value': \"[variables('lbsettings').sqllbfe]\"}, 'sqllbipaddress': {'value': \"[parameters('sqllbipaddress')]\"}, 'staticsubnetref': {'value': \"[variables('sqlsubnetref')]\"}, 'sqllbbe': {'value': \"[variables('lbsettings').sqllbbe]\"}, 'sqllbbeid': {'value': \"[variables('derivedids').sqlbeaddresspoolid]\"}, 'sqllbfeconfigid': {'value': \"[variables('derivedids').sqllbfeconfigid]\"}, 'sqllbprobeid': {'value': \"[variables('derivedids').sqllbprobeid]\"}, 'sqlaoprobe': {'value': \"[variables('sqlaoprobe')]\"}}}}{'name': 'creatingnetworkinterfaces', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': ['microsoft.resources/deployments/loadbalancers'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('configuration').creatingnicsurl]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'adpdcnicname': {'value': \"[variables('adpdcnicname')]\"}, 'adpdcnicipaddress': {'value': \"[parameters('adpdcnicipaddress')]\"}, 'staticsubnetref': {'value': \"[variables('staticsubnetref')]\"}, 'adbeaddresspoolid': {'value': \"[variables('derivedids').adbeaddresspoolid]\"}, 'adrdpnatruleid': {'value': \"[variables('derivedids').adrdpnatruleid]\"}, 'adbdcnicname': {'value': \"[variables('adbdcnicname')]\"}, 'adbdcnicipaddress': {'value': \"[parameters('adbdcnicipaddress')]\"}, 'sqlvmname': {'value': \"[variables('vmsettings').sqlvmname]\"}, 'sqlsubnetref': {'value': \"[variables('sqlsubnetref')]\"}, 'sqlbeaddresspoolid': {'value': \"[variables('derivedids').sqlbeaddresspoolid]\"}, 'sqlwnicname': {'value': \"[variables('sqlwnicname')]\"}, 'primarydcipaddressnamewithsuffix': {'value': \"[variables('primarydcipaddressnamewithsuffix')]\"}, 'backupdcipaddressnamewithsuffix': {'value': \"[variables('backupdcipaddressnamewithsuffix')]\"}, 'sql1addressnamewithsuffix': {'value': \"[variables('sql1addressnamewithsuffix')]\"}, 'sql0addressnamewithsuffix': {'value': \"[variables('sql0addressnamewithsuffix')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': \"[variables('deploysqlcluster')]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('deploysqlclustertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'nameprefix': {'value': \"[parameters('nameprefix')]\"}, 'domainname': {'value': \"[parameters('existingdomainname')]\"}, 'disktype': {'value': \"[parameters('disktype')]\"}, 'dnsservername': {'value': \"[parameters('existingadpdcvmname')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'sqlserverserviceaccountusername': {'value': \"[parameters('sqlserverserviceaccountusername')]\"}, 'sqlserverserviceaccountpassword': {'value': \"[parameters('sqlserverserviceaccountpassword')]\"}, 'nicsubneturi': {'value': \"[variables('sqlsubnetref')]\"}, 'lbsubneturi': {'value': \"[variables('sqlsubnetref')]\"}, 'sqllbipaddress': {'value': \"[parameters('sqllbipaddress')]\"}, 'sqlvmsize': {'value': \"[parameters('sqlvmsize')]\"}, 'sqlwitnessvmsize': {'value': \"[parameters('sqlwitnessvmsize')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'name': \"[parameters('storageaccountname')]\", 'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccountskuname')]\"}, 'kind': \"[parameters('storageaccountkind')]\"} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'name': \"[parameters('virtualnetworkname')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'name': \"[parameters('networkinterfacename')]\", 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', parameters('publicipaddressname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', parameters('networksecuritygroupname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipaddressname'))]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', parameters('networksecuritygroupname'))]\"}}}{'name': \"[parameters('publicipaddressname')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\"}}{'name': \"[parameters('networksecuritygroupname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-rdp', 'properties': {'priority': 1000, 'sourceaddressprefix': '*', 'protocol': 'tcp', 'destinationportrange': '3389', 'access': 'allow', 'direction': 'inbound', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}, {'name': 'default-allow-sql', 'properties': {'priority': 1500, 'sourceaddressprefix': '*', 'protocol': 'tcp', 'destinationportrange': '1433', 'access': 'allow', 'direction': 'inbound', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": " {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-08-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[subscriptionresourceid('microsoft.authorization/roledefinitions', parameters('roledefinitionid'))]\", 'principalid': \"[parameters('principalid')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'name': \"[variables('availabilitysetname')]\", 'properties': {'platformupdatedomaincount': 20, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreates and optionally secures a Key Vault with logging linked to a storage account.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults/keys', 'apiversion': '2019-09-01', 'name': \"[concat(parameters('vaultname'), '/', parameters('keyname'))]\", 'tags': \"[parameters('tags')]\", 'properties': {'attributes': \"[parameters('attributes')]\", 'crv': \"[parameters('crv')]\", 'kty': \"[parameters('kty')]\", 'key_ops': \"[parameters('key_ops')]\", 'key_size': \"[parameters('key_size')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.storage/storageaccounts', 'name': \"[tolower(variables('uniquestorageaccountname'))]\", 'location': \"[variables('location')]\", 'properties': {'accounttype': \"[variables('storageaccounttype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'name': \"[concat(parameters('envprefixname'), 'sqlsrv14')]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('sqlsrvdbnicname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('sqlpublicip'))]\"], 'tags': {'displayname': 'sql-svr-db'}, 'properties': {'hardwareprofile': {'vmsize': \"[variables('sqlvmsize')]\"}, 'osprofile': {'computername': \"[variables('sqlsrvdbname')]\", 'adminusername': \"[parameters('username')]\", 'adminpassword': \"[parameters('password')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('sqlimagepublisher')]\", 'offer': \"[variables('sqlimageoffer')]\", 'sku': \"[variables('sqlimagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('sqlsrvdbname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('disktype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('sqlsrvdbnicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('fensgname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'frontendnsg'}, 'properties': {'securityrules': [{'name': 'rdp_rule', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'web_rule', 'properties': {'description': 'allow web', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('dbnsgname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'backendnsg'}, 'properties': {'securityrules': [{'name': 'allow_fe', 'properties': {'description': 'allow fe subnet', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '1433', 'sourceaddressprefix': '10.0.0.0/24', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'rdp_rule', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'block_fe', 'properties': {'description': 'block app subnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '10.0.0.0/24', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 121, 'direction': 'inbound'}}, {'name': 'block_internet', 'properties': {'description': 'block internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'deny', 'priority': 200, 'direction': 'outbound'}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('fensgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('dbnsgname'))]\"], 'tags': {'displayname': 'virtualnetwork'}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': 'fesubnetname', 'properties': {'addressprefix': \"[variables('fesubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('fensgname'))]\"}}}, {'name': 'dbsubnetname', 'properties': {'addressprefix': \"[variables('dbsubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('dbnsgname'))]\"}}}]}}{'name': \"[variables('sqlpublicip')]\", 'type': 'microsoft.network/publicipaddresses', 'location': \"[parameters('location')]\", 'apiversion': '2020-07-01', 'tags': {'displayname': 'sqlpip'}, 'properties': {'publicipallocationmethod': 'dynamic', 'idletimeoutinminutes': 4}}{'name': \"[variables('sqlsrvdbnicname')]\", 'type': 'microsoft.network/networkinterfaces', 'location': \"[parameters('location')]\", 'apiversion': '2020-07-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'tags': {'displayname': 'sqlsrvdbnic'}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets',variables('virtualnetworkname'),'dbsubnetname')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',concat(parameters('envprefixname'),'sqlpip'))]\"}}}]}}{'name': \"[variables('websrvpublicip')]\", 'type': 'microsoft.network/publicipaddresses', 'location': \"[parameters('location')]\", 'apiversion': '2020-07-01', 'tags': {'displayname': 'websrvpip for lb'}, 'properties': {'publicipallocationmethod': 'dynamic', 'idletimeoutinminutes': 4, 'dnssettings': {'domainnamelabel': \"[variables('websrvdnsnameforlbip')]\"}}}{'apiversion': '2020-07-01', 'name': \"[variables('weblbname')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'web lb'}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('websrvpublicip'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat(parameters('envprefixname'),'websrvpip'))]\"}}}], 'backendaddresspools': [{'name': 'backendpool1'}], 'inboundnatrules': [{'name': 'rdp-vm0', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('weblbname'),'loadbalancerfrontend')]\"}, 'protocol': 'tcp', 'frontendport': 50001, 'backendport': 3389, 'enablefloatingip': false}}, {'name': 'rdp-vm1', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('weblbname'),'loadbalancerfrontend')]\"}, 'protocol': 'tcp', 'frontendport': 50002, 'backendport': 3389, 'enablefloatingip': false}}], 'loadbalancingrules': [{'name': 'lbrule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('weblbname'),'loadbalancerfrontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools',variables('weblbname'),'backendpool1')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes',variables('weblbname'),'tcpprobe')]\"}}}], 'probes': [{'name': 'tcpprobe', 'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 5, 'numberofprobes': 2}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'apiversion': '2019-06-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('newstorageaccountname')]\", 'location': \"[parameters('location')]\", 'kind': 'storagev2', 'sku': {'name': 'standard_lrs'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-03-01', 'type': 'microsoft.network/publicipaddresses', 'name': 'publicip', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('publicdnsname')]\"}}}{'apiversion': '2020-03-01', 'type': 'microsoft.network/publicipaddresses', 'name': 'vmsqlip', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'simple network security group for subnet [subnet]', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'apiversion': '2020-03-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressrange')]\"]}, 'subnets': [{'name': 'subnet', 'properties': {'addressprefix': \"[variables('subnetaddressrange')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2020-03-01', 'name': 'loadbalancer', 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': ['microsoft.network/publicipaddresses/publicip'], 'properties': {'frontendipconfigurations': [{'name': 'lbfe', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses','publicip')]\"}}}], 'backendaddresspools': [{'name': 'lbbap'}], 'inboundnatrules': [{'name': \"[concat('rdp','0')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', 'loadbalancer', 'lbfe')]\"}, 'protocol': 'tcp', 'frontendport': 6001, 'backendport': 3389, 'enablefloatingip': false}}, {'name': \"[concat('rdp','1')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations','loadbalancer','lbfe')]\"}, 'protocol': 'tcp', 'frontendport': 6002, 'backendport': 3389, 'enablefloatingip': false}}], 'loadbalancingrules': [{'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', 'loadbalancer', 'lbfe')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', 'loadbalancer', 'lbbap')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', 'loadbalancer', 'lbprobe')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'idletimeoutinminutes': 15}, 'name': 'lbrule'}], 'probes': [{'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 2}, 'name': 'lbprobe'}]}}{'apiversion': '2020-03-01', 'type': 'microsoft.network/networksecuritygroups', 'name': 'vmsql', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-rdp', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\"}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2016-04-30-preview', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('storageaccountname')]\", \"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('osversion')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': \"[take(variables('diskarray'),parameters('disksinraid'))]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[concat(reference(variables('storageaccountname'), '2021-01-01').primaryendpoints.blob)]\"}}}, 'resources': [{'type': 'extensions', 'name': 'customscriptextension', 'apiversion': '2015-06-15', 'dependson': [\"[variables('vmname')]\"], 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.ostcextensions', 'type': 'customscriptforlinux', 'typehandlerversion': '1.5', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat(variables('scriptfolder'), '/', variables('testscriptfilename'), parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('sudo bash ', variables('testscriptfilename'), ' ', parameters('testsize'), ' ', parameters('testtype'), ' ', parameters('secondstoruntest'), ' ', parameters('threadstoruntest'), ' ', parameters('testblocksize'), ' ', parameters('disksinraid'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'name': 'pid-00000000-0000-0000-0000-000000000000', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'resources': []}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'name': \"[variables('vmname')]\", 'type': 'microsoft.compute/virtualmachines', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': ['storageaccountcopy', \"[resourceid('microsoft.network/networkinterfaces', variables('vmnicname'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmimagepublisher')]\", 'offer': \"[variables('vm1imageoffer')]\", 'sku': \"[variables('vmwindowsosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(variables('vmname'),'_datadisk1')]\", 'lun': 0, 'disksizegb': 100, 'caching': 'none', 'createoption': 'empty'}, {'name': \"[concat(variables('vmname'),'_datadisk2')]\", 'lun': 1, 'disksizegb': 100, 'caching': 'readonly', 'createoption': 'empty'}, {'name': \"[concat(variables('vmname'),'_datadisk3')]\", 'lun': 2, 'disksizegb': 100, 'caching': 'readwrite', 'createoption': 'empty'}, {'name': \"[concat(variables('vmname'),'_datadisk4')]\", 'lun': 3, 'disksizegb': 1023, 'caching': 'none', 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmnicname'))]\"}]}}, 'resources': [{'name': 'dsc', 'type': 'extensions', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'tags': {'displayname': \"[concat(variables('vmname'),'/','dsc')]\"}, 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.9', 'autoupgrademinorversion': true, 'settings': {'configuration': {'configuration': {'url': \"[variables('dscconfigurevm').scriptfileuri]\", 'script': \"[variables('dscconfigurevm').script]\", 'function': \"[variables('dscconfigurevm').function]\"}, 'configurationarguments': {'nodename': \"[variables('vmname')]\"}}}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[concat(variables('virtualmachines_myvm_name'), copyindex(1))]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'vm-loop', 'count': 2}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', concat(variables('net_interface'), copyindex(1)))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}, 'osdisk': {'ostype': 'windows', 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}, 'disksizegb': 127}}, 'osprofile': {'computername': \"[concat(variables('virtualmachines_myvm_name'), copyindex(1))]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'provisionvmagent': true, 'enableautomaticupdates': true}, 'allowextensionoperations': true}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('net_interface'), copyindex(1)))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('virtualmachines_myvm_name'), copyindex(1),'/iis')]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'ext-loop', 'count': 2}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', concat(variables('virtualmachines_myvm_name'), copyindex(1)))]\"], 'properties': {'autoupgrademinorversion': true, 'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.4', 'settings': {'commandtoexecute': 'powershell add-windowsfeature web-server; powershell add-content -path \"c:\\\\inetpub\\\\wwwroot\\\\default.htm\" -value $($env:computername)'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'premium_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('securitygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allows ssh traffic', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix')]\"}}]}}{'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': 'publicip', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('dnsname')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'comments': 'an nsg to prevent inbound traffic other than ssh, set sourceaddressprefix to restrict access further or block all together (or remove the public ip) and ssh in from another vm', 'name': \"[variables('nsgname')]\", 'apiversion': '2020-05-01', 'location': \"[variables('location')]\", 'properties': {'securityrules': [{'name': 'allow_ssh_in', 'properties': {'description': 'the only thing allowed is ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'dhcpoptions': {'dnsservers': ['cafe:43::', 'cafe:45::']}, 'addressspace': {'addressprefixes': [\"[variables('vnetv4addressrange')]\", \"[variables('vnetv6addressrange')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefixes': [\"[variables('subnetv4addressrange')]\", \"[variables('subnetv6addressrange')]\"]}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': 'pipv4', 'location': \"[parameters('location')]\", 'apiversion': '2020-07-01', 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module allows you to create a user-assigned managed identity and a role assignment scoped to the resource group.\n\n===\n\n", "truth": " {'type': 'microsoft.managedidentity/userassignedidentities', 'name': \"[variables('aksclusteruserdefinedmanagedidentityname')]\", 'apiversion': '2018-11-30', 'location': \"[parameters('location')]\"}{'comments': 'user-defined managed identity used by an aad pod identity. used to access azure key vault.', 'type': 'microsoft.managedidentity/userassignedidentities', 'apiversion': '2018-11-30', 'name': \"[variables('aadpodidentityuserdefinedmanagedidentityname')]\", 'location': \"[parameters('location')]\"} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.managedidentity/userassignedidentities', 'apiversion': '2018-11-30', 'name': \"[parameters('managedidentityname')]\", 'location': \"[parameters('location')]\"} END"}
{"prompt": "\n\n###\n\nEnable Azure Sentinel\n\n===\n\n", "truth": " {'type': 'microsoft.operationsmanagement/solutions', 'apiversion': '2015-11-01-preview', 'name': \"[variables('containerinsightssolutionname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', parameters('loganalyticsworkspacename'))]\"], 'plan': {'name': \"[variables('containerinsightssolutionname')]\", 'promotioncode': '', 'product': 'omsgallery/containerinsights', 'publisher': 'microsoft'}, 'properties': {'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('loganalyticsworkspacename'))]\"}} END", "openai_output": "\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\nEst END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('bastionpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('bastionsubnetnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowhttpsinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'internet', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'allowgatewaymanagerinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'gatewaymanager', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'allowloadbalancerinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'azureloadbalancer', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}, {'name': 'allowbastionhostcommunicationinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationportranges': ['8080', '5701'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 130, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportrange': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 1000, 'direction': 'inbound'}}, {'name': 'allowsshrdpoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportranges': ['22', '3389'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 100, 'direction': 'outbound'}}, {'name': 'allowazurecloudcommunicationoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportrange': '443', 'destinationaddressprefix': 'azurecloud', 'access': 'allow', 'priority': 110, 'direction': 'outbound'}}, {'name': 'allowbastionhostcommunicationoutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationportranges': ['8080', '5701'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 120, 'direction': 'outbound'}}, {'name': 'allowgetsessioninformationoutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'destinationportranges': ['80', '443'], 'access': 'allow', 'priority': 130, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 1000, 'direction': 'outbound'}}]}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionsubnetnsgid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'networksecuritygroupevent', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}, {'category': 'networksecuritygrouprulecounter', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}}]}{'apiversion': '2020-05-01', 'type': 'microsoft.network/bastionhosts', 'name': \"[parameters('bastionhostname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionpublicipaddressid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'subnet': {'id': \"[variables('bastionsubnetid')]\"}, 'publicipaddress': {'id': \"[variables('bastionpublicipaddressid')]\"}}}]}}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('vmnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('vmsubnetid')]\"}}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('vmsubnetnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowsshinbound', 'properties': {'priority': 100, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmsubnetnsgid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'networksecuritygroupevent', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}, {'category': 'networksecuritygrouprulecounter', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}}]}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionsubnetnsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('virtualnetworkaddressprefixes')]\"]}, 'subnets': [{'name': \"[parameters('akssubnetname')]\", 'properties': {'addressprefix': \"[parameters('akssubnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': \"[parameters('podsubnetname')]\", 'properties': {'addressprefix': \"[parameters('podsubnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': \"[parameters('vmsubnetname')]\", 'properties': {'addressprefix': \"[parameters('vmsubnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[variables('vmsubnetnsgid')]\"}, 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': \"[variables('bastionsubnetname')]\", 'properties': {'addressprefix': \"[parameters('bastionsubnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[variables('bastionsubnetnsgid')]\"}}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('blobprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'condition': \"[equals(parameters('acrsku'), 'premium')]\", 'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('acrprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('keyvaultprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-11-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2015-01-01', 'name': \"[variables('deploys2dcluster')]\", 'dependson': [], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('deploys2dclustertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'nameprefix': {'value': \"[parameters('nameprefix')]\"}, 'domainname': {'value': \"[parameters('existingdomainname')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'nicsubneturi': {'value': \"[variables('subnetref')]\"}, 'vmsize': {'value': \"[parameters('vmsize')]\"}, 'vmcount': {'value': \"[parameters('vmcount')]\"}, 'vmdisksize': {'value': \"[parameters('vmdisksize')]\"}, 'vmdiskcount': {'value': \"[parameters('vmdiskcount')]\"}, 'sofsname': {'value': \"[parameters('sofsname')]\"}, 'sharename': {'value': \"[parameters('sharename')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-11-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(variables('publicipaddressname'), copyindex(1))]\", 'location': \"[variables('vmsettings')[copyindex()].location]\", 'copy': {'name': 'publicipcopy', 'count': 2}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}}{'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[concat(variables('virtualnetworkname'), copyindex(1))]\", 'location': \"[variables('vmsettings')[copyindex()].location]\", 'copy': {'name': 'vnetcopy', 'count': 2}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2019-11-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('frontendnsgname')]\", 'location': \"[variables('vmsettings')[1].location]\", 'tags': {'displayname': 'nsg - test web server from probe'}, 'dependson': ['publicipcopy'], 'properties': {'securityrules': [{'name': 'web-rule', 'properties': {'description': 'allow web', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': \"[reference(resourceid('microsoft.network/publicipaddresses', concat(variables('publicipaddressname'), '1'))).ipaddress]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}]}}{'apiversion': '2019-11-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nicname'), copyindex(1))]\", 'location': \"[variables('vmsettings')[copyindex()].location]\", 'copy': {'name': 'niccopy', 'count': 2}, 'dependson': ['publicipcopy', 'vnetcopy', \"[resourceid('microsoft.network/networksecuritygroups', variables('frontendnsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',concat(variables('publicipaddressname'), copyindex(1)))]\"}, 'subnet': {'id': \"[variables('vmsettings')[copyindex()].subnetref]\"}}}], 'networksecuritygroup': \"[if(equals(copyindex(),1), variables('nsgid'), json('null'))]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'name': \"[parameters('tests')[0].name]\", 'type': 'microsoft.insights/webtests', 'apiversion': '2015-05-01', 'location': \"[parameters('location')]\", 'tags': {\"[concat('hidden-link:', parameters('appinsightsresource'))]\": 'resource'}, 'properties': {'name': \"[parameters('tests')[0].name]\", 'description': \"[parameters('tests')[0].description]\", 'enabled': true, 'frequency': \"[parameters('tests')[0].frequency_secs]\", 'timeout': \"[parameters('tests')[0].timeout_secs]\", 'kind': 'ping', 'locations': \"[parameters('tests')[0].locations]\", 'configuration': {'webtest': '[concat(\\'<webtest   name=\"\\', parameters(\\'tests\\')[0].name, \\'\"   enabled=\"true\"         cssprojectstructure=\"\"    cssiteration=\"\"  timeout=\"120\"  workitemids=\"\"         xmlns=\"http://microsoft.com/schemas/visualstudio/teamtest/2010\"         description=\"\"  credentialusername=\"\"  credentialpassword=\"\"         preauthenticate=\"true\"  proxy=\"default\"  stoponerror=\"false\"         recordedresultfile=\"\"  resultslocale=\"\">  <items>  <request method=\"get\"    version=\"1.1\"  url=\"\\', parameters(\\'tests\\')[0].url,   \\'\" thinktime=\"0\"  timeout=\"300\" parsedependentrequests=\"true\"         followredirects=\"true\" recordresult=\"true\" cache=\"false\"         responsetimegoal=\"0\"  encoding=\"utf-8\"  expectedhttpstatuscode=\"\\', parameters(\\'tests\\')[0].expected, \\'\"         expectedresponseurl=\"\" reportingname=\"\" ignorehttpstatuscode=\"false\" />        </items>  <validationrules> <validationrule  classname=\"microsoft.visualstudio.testtools.webtesting.rules.validationrulefindtext, microsoft.visualstudio.qualitytools.webtestframework, version=10.0.0.0, culture=neutral, publickeytoken=b03f5f7f11d50a3a\" displayname=\"find text\"         description=\"verifies the existence of the specified text in the response.\"         level=\"high\"  executionorder=\"beforedependents\">  <ruleparameters>        <ruleparameter name=\"findtext\" value=\"\\',   parameters(\\'pingtext\\'), \\'\" />  <ruleparameter name=\"ignorecase\" value=\"false\" />  <ruleparameter name=\"useregularexpression\" value=\"false\" />  <ruleparameter name=\"passiftextfound\" value=\"true\" />  </ruleparameters> </validationrule>  </validationrules>  </webtest>\\')]'}, 'syntheticmonitorid': \"[parameters('tests')[0].name]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('primaryvmnameprefix'), copyindex())]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat(variables('primarynicnameprefix'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'tags': {'role': 'web'}, 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('primaryvmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('primarynicnameprefix'),copyindex()))]\"}]}}, 'resources': [{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('primaryvmnameprefix'), copyindex(),'/winrmcustomscriptextension')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.compute/virtualmachines/',parameters('primaryvmnameprefix'),copyindex())]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.4', 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('configurewinrm.ps1', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('makecert.exe', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('winrmconf.cmd', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('powershell -executionpolicy unrestricted -file configurewinrm.ps1 ',variables('hostdnsnamescriptargument'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('vmnicname'))]\"], 'tags': {'displayname': 'vm'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('vmimagepublisher')]\", 'offer': \"[variables('vmimageoffer')]\", 'sku': \"[parameters('vmubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': 'vmosdisk', 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmnicname'))]\"}]}}, 'resources': [{'apiversion': '2020-06-01', 'type': 'extensions', 'name': 'config-app', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('vmname'))]\"], 'tags': {'displayname': 'config-app'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('setupscripturi')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('sudo sh setup.sh', parameters('workspaceid'), ' ', parameters('primarykey'), ' ', parameters('_artifactslocation'), ' ', reference(resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))).dnssettings.fqdn, ' ', parameters('_artifactslocationsastoken'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-08-01', 'name': \"[variables('networkinterfacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-08-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[parameters('vmsssubnetname')]\", 'properties': {'addressprefix': '10.0.0.0/24'}}, {'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': '10.0.1.0/24'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-08-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'publicipaddressversion': 'ipv4', 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}, 'idletimeoutinminutes': 10}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}, {'name': 'default-allow-80', 'properties': {'priority': 1001, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '80', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}, 'sku': {'name': 'aligned'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'secrets': [{'sourcevault': {'id': \"[parameters('vaultresourceid')]\"}, 'vaultcertificates': [{'certificateurl': \"[parameters('certificateurl')]\", 'certificatestore': 'my'}]}], 'windowsconfiguration': {'provisionvmagent': true, 'winrm': {'listeners': [{'protocol': 'http'}, {'protocol': 'https', 'certificateurl': \"[parameters('certificateurl')]\"}]}, 'enableautomaticupdates': true}}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsname')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'comments': 'this deployment links to the vnets.json nested arm template', 'name': \"[concat('linkedtemplate-vnet', '-', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'copy': {'name': 'vnetcopy', 'count': \"[length(parameters('vnets'))]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'contentversion': '1.0.0.0', 'uri': \"[variables('vnetnestedtemplateuri')]\"}, 'parameters': {'suffix': {'value': \"[variables('suffix')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'vnets': {'value': \"[parameters('vnets')[copyindex()]]\"}}}}{'comments': 'this deployment links to the vnet_peering.json nested arm template', 'name': 'linkedtemplate-peerings', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'dependson': ['vnetcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'contentversion': '1.0.0.0', 'uri': \"[variables('vnetpeeringnestedtemplateuri')]\"}, 'parameters': {'suffix': {'value': \"[variables('suffix')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'vnets': {'value': \"[parameters('vnets')]\"}}}}{'comments': 'this deployment links to the app_svc_plan.json nested arm template', 'name': 'linkedtemplate-app-svc-plan', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'dependson': ['vnetcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'contentversion': '1.0.0.0', 'uri': \"[variables('appserviceplannestedtemplateuri')]\"}, 'parameters': {'suffix': {'value': \"[variables('suffix')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'serverfarmsku': {'value': {'tier': 'standard', 'name': 's1'}}}}}{'comments': 'this deployment links to the app.json nested arm template', 'name': 'linkedtemplate-app', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'dependson': ['linkedtemplate-app-svc-plan'], 'properties': {'mode': 'incremental', 'templatelink': {'contentversion': '1.0.0.0', 'uri': \"[variables('appnestedtemplateuri')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'hostingplanname': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'linkedtemplate-app-svc-plan')).outputs.serverfarmname.value]\"}, 'subnet': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'linkedtemplate-vnet-1')).outputs.subnetresourceids.value[0].id]\"}, 'appname': {'value': \"[variables('appname')]\"}, 'ipaddressrestriction': {'value': ['0.0.0.0/32']}}}}{'comments': 'this deployment links to the sqldb.json nested arm template', 'name': 'linkedtemplate-sqldb', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'dependson': ['vnetcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'contentversion': '1.0.0.0', 'uri': \"[variables('sqlnestedtemplateuri')]\"}, 'parameters': {'suffix': {'value': \"[variables('suffix')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'sqladministratorlogin': {'value': \"[parameters('sqladministratorloginname')]\"}, 'sqladministratorloginpassword': {'value': \"[parameters('sqladministratorloginpassword')]\"}, 'databasename': {'value': \"[variables('sqldatabasename')]\"}}}}{'comments': 'this deployment links to the private_link.json nested arm template', 'name': 'linkedtemplate-sqldb-private-link', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'dependson': ['linkedtemplate-sqldb'], 'properties': {'mode': 'incremental', 'templatelink': {'contentversion': '1.0.0.0', 'uri': \"[variables('privatelinknestedtemplateuri')]\"}, 'parameters': {'suffix': {'value': \"[variables('suffix')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'resourcetype': {'value': 'microsoft.sql/servers'}, 'resourcename': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'linkedtemplate-sqldb')).outputs.sqlservername.value]\"}, 'grouptype': {'value': \"[variables('sqlgrouptype')]\"}, 'subnet': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'linkedtemplate-vnet-0')).outputs.subnetresourceids.value[0].id]\"}}}}{'comments': 'this deployment links to the storage.json nested arm template', 'name': 'linkedtemplate-storage', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'dependson': ['vnetcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'contentversion': '1.0.0.0', 'uri': \"[variables('storagenestedtemplateuri')]\"}, 'parameters': {'suffix': {'value': \"[variables('suffix')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'containername': {'value': \"[variables('storagecontainername')]\"}, 'defaultnetworkaccessaction': {'value': 'deny'}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': 'appnetworksecuritygroup', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'webrule', 'properties': {'description': 'this rule allows traffic in on port 80', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '10.0.0.0/24', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'httpsrule', 'properties': {'description': 'this rule allows traffic in on port 443', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '10.0.0.0/24', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'rdprule', 'properties': {'description': 'this rule allows traffic on port 3389 from the web', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '10.0.0.0/24', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-03-01', 'name': \"[parameters('hostvirtualmachinename')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('hostvirtualmachinesize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[format('{0}osdisk', parameters('hostvirtualmachinename'))]\", 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'caching': 'readwrite'}, 'datadisks': [{'lun': 0, 'name': \"[format('{0}datadisk1', parameters('hostvirtualmachinename'))]\", 'createoption': 'empty', 'disksizegb': 1024, 'caching': 'readonly', 'manageddisk': {'storageaccounttype': 'premium_lrs'}}]}, 'osprofile': {'computername': \"[parameters('hostvirtualmachinename')]\", 'adminusername': \"[parameters('hostadminusername')]\", 'adminpassword': \"[parameters('hostadminpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[reference(resourceid('microsoft.resources/deployments', 'createnic1'), '2019-10-01').outputs.nicid.value]\", 'properties': {'primary': true}}, {'id': \"[reference(resourceid('microsoft.resources/deployments', 'createnic2'), '2019-10-01').outputs.nicid.value]\", 'properties': {'primary': false}}]}}, 'dependson': [\"[resourceid('microsoft.resources/deployments', 'createnic1')]\", \"[resourceid('microsoft.resources/deployments', 'createnic2')]\"]}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2021-03-01', 'name': \"[format('{0}/{1}', parameters('hostvirtualmachinename'), 'installwindowsfeatures')]\", 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.77', 'autoupgrademinorversion': true, 'settings': {'wmfversion': 'latest', 'configuration': {'url': \"[variables('dscinstallwindowsfeaturesuri')]\", 'script': 'dscinstallwindowsfeatures.ps1', 'function': 'installwindowsfeatures'}}}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('hostvirtualmachinename'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'createnic1', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'nicname': {'value': \"[parameters('hostnetworkinterface1name')]\"}, 'subnetid': {'value': \"[format('{0}/subnets/{1}', resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname')), parameters('natsubnetname'))]\"}, 'pipid': {'value': \"[resourceid('microsoft.network/publicipaddresses', parameters('hostpublicipaddressname'))]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.412.5873', 'templatehash': '15585594711656125126'}}, 'parameters': {'nicname': {'type': 'string'}, 'location': {'type': 'string'}, 'subnetid': {'type': 'string'}, 'pipid': {'type': 'string', 'defaultvalue': ''}, 'ipallocationmethod': {'type': 'string', 'defaultvalue': 'dynamic', 'allowedvalues': ['dynamic', 'static']}, 'staticipaddress': {'type': 'string', 'defaultvalue': ''}, 'enableipforwarding': {'type': 'bool', 'defaultvalue': false}}, 'functions': [], 'resources': [{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[parameters('nicname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'primary': true, 'privateipallocationmethod': \"[parameters('ipallocationmethod')]\", 'privateipaddress': \"[parameters('staticipaddress')]\", 'subnet': {'id': \"[parameters('subnetid')]\"}, 'publicipaddress': \"[if(equals(parameters('pipid'), ''), null(), createobject('id', parameters('pipid')))]\"}}], 'enableipforwarding': \"[parameters('enableipforwarding')]\"}}], 'outputs': {'nicid': {'type': 'string', 'value': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}, 'assignedip': {'type': 'string', 'value': \"[reference(resourceid('microsoft.network/networkinterfaces', parameters('nicname'))).ipconfigurations[0].properties.privateipaddress]\"}}}}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', parameters('hostpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'createnic2', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'nicname': {'value': \"[parameters('hostnetworkinterface2name')]\"}, 'enableipforwarding': {'value': true}, 'subnetid': {'value': \"[format('{0}/subnets/{1}', resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname')), parameters('hypervsubnetname'))]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.412.5873', 'templatehash': '15585594711656125126'}}, 'parameters': {'nicname': {'type': 'string'}, 'location': {'type': 'string'}, 'subnetid': {'type': 'string'}, 'pipid': {'type': 'string', 'defaultvalue': ''}, 'ipallocationmethod': {'type': 'string', 'defaultvalue': 'dynamic', 'allowedvalues': ['dynamic', 'static']}, 'staticipaddress': {'type': 'string', 'defaultvalue': ''}, 'enableipforwarding': {'type': 'bool', 'defaultvalue': false}}, 'functions': [], 'resources': [{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[parameters('nicname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'primary': true, 'privateipallocationmethod': \"[parameters('ipallocationmethod')]\", 'privateipaddress': \"[parameters('staticipaddress')]\", 'subnet': {'id': \"[parameters('subnetid')]\"}, 'publicipaddress': \"[if(equals(parameters('pipid'), ''), null(), createobject('id', parameters('pipid')))]\"}}], 'enableipforwarding': \"[parameters('enableipforwarding')]\"}}], 'outputs': {'nicid': {'type': 'string', 'value': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}, 'assignedip': {'type': 'string', 'value': \"[reference(resourceid('microsoft.network/networkinterfaces', parameters('nicname'))).ipconfigurations[0].properties.privateipaddress]\"}}}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'updatenic1', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'ipallocationmethod': {'value': 'static'}, 'staticipaddress': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'createnic1'), '2019-10-01').outputs.assignedip.value]\"}, 'nicname': {'value': \"[parameters('hostnetworkinterface1name')]\"}, 'subnetid': {'value': \"[format('{0}/subnets/{1}', resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname')), parameters('natsubnetname'))]\"}, 'pipid': {'value': \"[resourceid('microsoft.network/publicipaddresses', parameters('hostpublicipaddressname'))]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.412.5873', 'templatehash': '15585594711656125126'}}, 'parameters': {'nicname': {'type': 'string'}, 'location': {'type': 'string'}, 'subnetid': {'type': 'string'}, 'pipid': {'type': 'string', 'defaultvalue': ''}, 'ipallocationmethod': {'type': 'string', 'defaultvalue': 'dynamic', 'allowedvalues': ['dynamic', 'static']}, 'staticipaddress': {'type': 'string', 'defaultvalue': ''}, 'enableipforwarding': {'type': 'bool', 'defaultvalue': false}}, 'functions': [], 'resources': [{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[parameters('nicname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'primary': true, 'privateipallocationmethod': \"[parameters('ipallocationmethod')]\", 'privateipaddress': \"[parameters('staticipaddress')]\", 'subnet': {'id': \"[parameters('subnetid')]\"}, 'publicipaddress': \"[if(equals(parameters('pipid'), ''), null(), createobject('id', parameters('pipid')))]\"}}], 'enableipforwarding': \"[parameters('enableipforwarding')]\"}}], 'outputs': {'nicid': {'type': 'string', 'value': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}, 'assignedip': {'type': 'string', 'value': \"[reference(resourceid('microsoft.network/networkinterfaces', parameters('nicname'))).ipconfigurations[0].properties.privateipaddress]\"}}}}, 'dependson': [\"[resourceid('microsoft.resources/deployments', 'createnic1')]\", \"[resourceid('microsoft.network/publicipaddresses', parameters('hostpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'updatenic2', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'ipallocationmethod': {'value': 'static'}, 'staticipaddress': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'createnic2'), '2019-10-01').outputs.assignedip.value]\"}, 'nicname': {'value': \"[parameters('hostnetworkinterface2name')]\"}, 'enableipforwarding': {'value': true}, 'subnetid': {'value': \"[format('{0}/subnets/{1}', resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname')), parameters('hypervsubnetname'))]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.412.5873', 'templatehash': '15585594711656125126'}}, 'parameters': {'nicname': {'type': 'string'}, 'location': {'type': 'string'}, 'subnetid': {'type': 'string'}, 'pipid': {'type': 'string', 'defaultvalue': ''}, 'ipallocationmethod': {'type': 'string', 'defaultvalue': 'dynamic', 'allowedvalues': ['dynamic', 'static']}, 'staticipaddress': {'type': 'string', 'defaultvalue': ''}, 'enableipforwarding': {'type': 'bool', 'defaultvalue': false}}, 'functions': [], 'resources': [{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[parameters('nicname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'primary': true, 'privateipallocationmethod': \"[parameters('ipallocationmethod')]\", 'privateipaddress': \"[parameters('staticipaddress')]\", 'subnet': {'id': \"[parameters('subnetid')]\"}, 'publicipaddress': \"[if(equals(parameters('pipid'), ''), null(), createobject('id', parameters('pipid')))]\"}}], 'enableipforwarding': \"[parameters('enableipforwarding')]\"}}], 'outputs': {'nicid': {'type': 'string', 'value': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}, 'assignedip': {'type': 'string', 'value': \"[reference(resourceid('microsoft.network/networkinterfaces', parameters('nicname'))).ipconfigurations[0].properties.privateipaddress]\"}}}}, 'dependson': [\"[resourceid('microsoft.resources/deployments', 'createnic2')]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'udrdeploy', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'udrname': {'value': \"[variables('azurevmssubnetudrname')]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.412.5873', 'templatehash': '7650487793556412399'}}, 'parameters': {'udrname': {'type': 'string'}, 'location': {'type': 'string'}, 'addressprefix': {'type': 'string', 'defaultvalue': ''}, 'nexthopaddress': {'type': 'string', 'defaultvalue': ''}}, 'functions': [], 'resources': [{'type': 'microsoft.network/routetables', 'apiversion': '2020-06-01', 'name': \"[parameters('udrname')]\", 'location': \"[parameters('location')]\", 'properties': {'routes': \"[if(equals(parameters('addressprefix'), ''), null(), createarray(createobject('name', 'nested-vms', 'properties', createobject('addressprefix', parameters('addressprefix'), 'nexthoptype', 'virtualappliance', 'nexthopipaddress', parameters('nexthopaddress')))))]\"}}], 'outputs': {'udrid': {'type': 'string', 'value': \"[resourceid('microsoft.network/routetables', parameters('udrname'))]\"}}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'udrupdate', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'udrname': {'value': \"[variables('azurevmssubnetudrname')]\"}, 'addressprefix': {'value': \"[parameters('ghostedsubnetprefix')]\"}, 'nexthopaddress': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'createnic2'), '2019-10-01').outputs.assignedip.value]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.412.5873', 'templatehash': '7650487793556412399'}}, 'parameters': {'udrname': {'type': 'string'}, 'location': {'type': 'string'}, 'addressprefix': {'type': 'string', 'defaultvalue': ''}, 'nexthopaddress': {'type': 'string', 'defaultvalue': ''}}, 'functions': [], 'resources': [{'type': 'microsoft.network/routetables', 'apiversion': '2020-06-01', 'name': \"[parameters('udrname')]\", 'location': \"[parameters('location')]\", 'properties': {'routes': \"[if(equals(parameters('addressprefix'), ''), null(), createarray(createobject('name', 'nested-vms', 'properties', createobject('addressprefix', parameters('addressprefix'), 'nexthoptype', 'virtualappliance', 'nexthopipaddress', parameters('nexthopaddress')))))]\"}}], 'outputs': {'udrid': {'type': 'string', 'value': \"[resourceid('microsoft.network/routetables', parameters('udrname'))]\"}}}}, 'dependson': [\"[resourceid('microsoft.resources/deployments', 'createnic2')]\"]} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('haproxyavailabilitysetname')]\", 'location': \"[parameters('location')]\", 'properties': {'platformupdatedomaincount': 3, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('appavailabilitysetname')]\", 'location': \"[parameters('location')]\", 'properties': {'platformupdatedomaincount': 3, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('haproxyavailabilitysetname')]\", 'location': \"[parameters('location')]\", 'properties': {'platformupdatedomaincount': 3, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('appavailabilitysetname')]\", 'location': \"[parameters('location')]\", 'properties': {'platformupdatedomaincount': 3, 'platformfaultdomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('haproxyvmnameprefix'), copyindex())]\", 'copy': {'name': 'haproxyvmloop', 'count': \"[variables('numberofhaproxyinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(parameters('haproxyvmnameprefix'), variables('nicnameprefix'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('haproxyavailabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('haproxyavailabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('haproxyvmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[variables('sshkeypath')]\", 'keydata': \"[parameters('sshkeydata')]\"}]}}}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('haproxyvmnameprefix'), 'osdisk-', copyindex())]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('storageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('haproxyvmnameprefix'), variables('nicnameprefix'),copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[concat(reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-01-01').primaryendpoints.blob)]\"}}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('appvmnameprefix'), copyindex())]\", 'copy': {'name': 'appvmloop', 'count': \"[variables('numberofappinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(parameters('appvmnameprefix'), variables('nicnameprefix'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('appavailabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('appavailabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('appvmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[variables('sshkeypath')]\", 'keydata': \"[parameters('sshkeydata')]\"}]}}}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('appvmnameprefix'), 'osdisk-', copyindex())]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('storageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('appvmnameprefix'), variables('nicnameprefix'),copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[concat(reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-01-01').primaryendpoints.blob)]\"}}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('appvmnameprefix'), copyindex(), '/configureappvm')]\", 'copy': {'name': 'appvmextensionsloop', 'count': \"[variables('numberofappinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat(parameters('appvmnameprefix'), copyindex()))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': \"[variables('appvmscripts').fileuris]\"}, 'protectedsettings': {'commandtoexecute': \"[variables('appvmscripts').commandtoexecute]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': 'myavlset', 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'), copyindex())]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountnamediag'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(variables('vmname'),copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsizefe')]\"}, 'osprofile': {'computername': \"[concat(variables('vmname'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('vmname'),copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountnamediag'), '2019-06-01').primaryendpoints.blob]\"}}}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': 'vmsql', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountnamediag'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('nicsql'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsizesql')]\"}, 'osprofile': {'computername': \"[concat(variables('vmname'), 'sql')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('sqlimagepublisher')]\", 'offer': \"[variables('sqlimageoffer')]\", 'sku': \"[variables('sqlimagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': \"[parameters('sizeofdiskingb')]\", 'lun': 0, 'caching': 'readonly', 'createoption': 'empty'}, {'disksizegb': \"[parameters('sizeofdiskingb')]\", 'lun': 1, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicsql'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountnamediag'), '2019-06-01').primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': 'publicip', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('publicdnsname')]\"}}}{'apiversion': '2019-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': 'vmsqlip', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'simple network security group for subnet [subnet]', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'apiversion': '2019-08-01', 'type': 'microsoft.network/virtualnetworks', 'name': 'vnet', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressrange')]\"]}, 'subnets': [{'name': 'subnet', 'properties': {'addressprefix': \"[variables('subnetaddressrange')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2018-10-01', 'name': 'loadbalancer', 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': ['publicip'], 'properties': {'frontendipconfigurations': [{'name': 'lbfe', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses','publicip')]\"}}}], 'backendaddresspools': [{'name': 'lbbap'}], 'inboundnatrules': [{'name': \"[concat('rdp','0')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations','loadbalancer','lbfe')]\"}, 'protocol': 'tcp', 'frontendport': 6001, 'backendport': 22, 'enablefloatingip': false}}, {'name': \"[concat('rdp','1')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations','loadbalancer', 'lbfe')]\"}, 'protocol': 'tcp', 'frontendport': 6002, 'backendport': 22, 'enablefloatingip': false}}], 'loadbalancingrules': [{'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', 'loadbalancer', 'lbfe')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', 'loadbalancer', 'lbbap')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', 'loadbalancer', 'lbprobe')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'idletimeoutinminutes': 15}, 'name': 'lbrule'}], 'probes': [{'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 2}, 'name': 'lbprobe'}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('appavailabilitysetname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('appvmnameprefix'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'foo', 'count': \"[variables('appscalecount')]\"}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat(variables('appnicname'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('appavailabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('appavailabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('appvmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('appnicname'), copyindex()))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('appgatewaypubipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\"}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(parameters('appserverspublicipprefix'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'foo', 'count': \"[variables('appscalecount')]\"}, 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\"}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('fensgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('appnsgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('bensgname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('fesubnetname')]\", 'properties': {'addressprefix': \"[variables('frontendprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('fensgname'))]\"}}}, {'name': \"[variables('appsubnetname')]\", 'properties': {'addressprefix': \"[variables('appprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('appnsgname'))]\"}}}, {'name': \"[variables('besubnetname')]\", 'properties': {'addressprefix': \"[variables('backendprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('bensgname'))]\"}}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('fensgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'rdp_rule', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'web_rule', 'properties': {'description': 'allow website', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'app_subnet_rule', 'properties': {'description': 'outbound to app', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': \"[variables('appprefix')]\", 'access': 'allow', 'priority': 1000, 'direction': 'outbound'}}, {'name': 'block_internal_network', 'properties': {'description': 'outbound to internal network', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'deny', 'priority': 2000, 'direction': 'outbound'}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('appnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'fe_rule', 'properties': {'description': 'allow frontend', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': \"[variables('frontendprefix')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'rdp_rule', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'vnet_rule', 'properties': {'description': 'block internal network', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 300, 'direction': 'inbound'}}, {'name': 'db_outbound_rule', 'properties': {'description': 'allow outbound db', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': \"[variables('backendprefix')]\", 'access': 'allow', 'priority': 1000, 'direction': 'outbound'}}, {'name': 'deny_internet', 'properties': {'description': 'deny_internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'deny', 'priority': 2000, 'direction': 'outbound'}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('bensgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'app_rule', 'properties': {'description': 'allow app servers', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': \"[variables('appprefix')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'vnet_rule', 'properties': {'description': 'block internal network', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 200, 'direction': 'inbound'}}, {'name': 'deny_internet', 'properties': {'description': 'deny_internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'deny', 'priority': 1000, 'direction': 'outbound'}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('appgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('appgatewaypubipname'))]\"], 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard', 'capacity': \"[parameters('appgatewaycapacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('vnetname'), variables('fesubnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('appgatewaypubipname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[variables('appserverip1')]\"}, {'ipaddress': \"[variables('appserverip2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'enabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations/',variables('appgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports/',variables('appgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners/',variables('appgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools/',variables('appgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection/',variables('appgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'name': 'deploy-sql-injection-attack-oms-resource', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('omstemplateuri')]\"}, 'parameters': {'omsworkspacename': {'value': \"[variables('omsworkspacename')]\"}, 'omssolutionsname': {'value': \"[variables('omssolutions')]\"}, 'sku': {'value': \"[parameters('omssku')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vnetname'),'-resource')]\", 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('vnettemplateuri')]\"}, 'parameters': {'vnetname': {'value': \"[variables('vnetname')]\"}, 'addressprefix': {'value': \"[variables('vnetaddressspace')]\"}, 'subnets': {'value': \"[variables('subnets')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'name': \"[concat(variables('applicationgateways')[copyindex()].name,'-pip','-resource')]\", 'copy': {'name': 'copy-appgateway-pip', 'count': 2}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('piptemplateuri')]\"}, 'parameters': {'publicipaddressname': {'value': \"[concat(variables('applicationgateways')[copyindex()].name,'-pip')]\"}, 'publicipaddresstype': {'value': \"[parameters('pipaddresstype')]\"}, 'dnsnameforpublicip': {'value': \"[concat(variables('applicationgateways')[copyindex()].name,'-',uniquestring(resourcegroup().id, 'pip'),'-pip')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-06-01', 'name': \"[concat('deploy-',variables('applicationgateways')[copyindex()].name,'-applicationgateway')]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'copy-appgateway', 'count': 2}, 'dependson': ['copy-appgateway-pip', \"[resourceid('microsoft.resources/deployments',concat(variables('vnetname'),'-resource'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('appgwtemplateuri')]\"}, 'parameters': {'applicationgatewayname': {'value': \"[variables('applicationgateways')[copyindex()].name]\"}, 'publicipref': {'value': \"[reference(resourceid('microsoft.resources/deployments', concat(variables('applicationgateways')[copyindex()].name,'-pip','-resource'))).outputs.publicipref.value]\"}, 'location': {'value': \"[parameters('location')]\"}, 'frontendports': {'value': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}]}, 'gatewayipconfigurations': {'value': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets',variables('vnetname'),variables('subnets')[0].name)]\"}}}]}, 'backendaddresspools': {'value': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'fqdn': \"[reference(resourceid('microsoft.resources/deployments', concat(variables('webappname'),'-resource'))).outputs.endpoint.value]\"}]}}]}, 'backendhttpsettingscollection': {'value': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'pickhostnamefrombackendaddress': 'true', 'probe': {'id': \"[resourceid('microsoft.network/applicationgateways/probes',variables('applicationgateways')[copyindex()].name,variables('httpprobename'))]\"}}}]}, 'httplisteners': {'value': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgateways')[copyindex()].name, 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgateways')[copyindex()].name, 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}]}, 'requestroutingrules': {'value': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgateways')[copyindex()].name, 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgateways')[copyindex()].name, 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgateways')[copyindex()].name, 'appgatewaybackendhttpsettings')]\"}}}]}, 'probes': {'value': [{'name': \"[variables('httpprobename')]\", 'properties': {'protocol': 'http', 'host': \"[reference(resourceid('microsoft.resources/deployments', concat(variables('webappname'),'-resource'))).outputs.endpoint.value]\", 'path': '/', 'interval': 30, 'timeout': 30, 'unhealthythreshold': 8}}, {'name': \"[variables('httpsprobename')]\", 'properties': {'protocol': 'https', 'host': \"[reference(resourceid('microsoft.resources/deployments', concat(variables('webappname'),'-resource'))).outputs.endpoint.value]\", 'path': '/', 'interval': 30, 'timeout': 30, 'unhealthythreshold': 8}}]}, 'wafmode': {'value': \"[variables('applicationgateways')[copyindex()].wafmode]\"}, 'omsworkspaceresourceid': {'value': \"[reference('deploy-sql-injection-attack-oms-resource').outputs.workspaceid.value]\"}}}}{'apiversion': '2020-06-01', 'name': \"[concat(variables('diagstorageaccname'),'-resource')]\", 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('storagetemplateuri')]\"}, 'parameters': {'storageaccountname': {'value': \"[variables('diagstorageaccname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-06-01', 'name': \"[concat(variables('aspname'),'-resource')]\", 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('asptemplateuri')]\"}, 'parameters': {'name': {'value': \"[variables('aspname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-06-01', 'name': \"[concat(variables('webappname'),'-resource')]\", 'type': 'microsoft.resources/deployments', 'dependson': [\"[resourceid('microsoft.resources/deployments',concat(variables('aspname'),'-resource'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webapptemplateuri')]\"}, 'parameters': {'name': {'value': \"[variables('webappname')]\"}, 'hostingplanname': {'value': \"[variables('aspname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vhdstorageaccountname')]\", \"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('osversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}}, 'resources': [{'type': 'extensions', 'name': 'customscriptextension', 'apiversion': '2020-12-01', 'dependson': [\"[variables('vmname')]\"], 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.ostcextensions', 'type': 'customscriptforlinux', 'typehandlerversion': '1.5', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/cputest.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('sudo bash cputest.sh', ' ', parameters('threadstoruntest'), ' ', parameters('maxprimenumberfortest'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'comments': 'windows jump-hosts', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('winjmphostname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('winvmnicname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('winvmstoragename'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('winvmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': 20, 'lun': 0, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('winjmphostname')]\", 'adminusername': \"[parameters('winvmuser')]\", 'adminpassword': \"[parameters('winvmpassword')]\", 'windowsconfiguration': {'provisionvmagent': true}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('winvmnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('winvmstoragename'), '2019-06-01').primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'comments': 'hub virtual network (vnet)', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('hubvnetname')]\", 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('hubvnetprefix')]\"]}, 'enableddosprotection': false, 'enablevmprotection': false}}{'comments': 'management subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('hubvnetname'), '/', variables('mgmtsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\"], 'properties': {'addressprefix': \"[variables('mgmtsubnetprefix')]\"}}{'comments': 'shared subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('hubvnetname'), '/', variables('sharedsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\"], 'properties': {'addressprefix': \"[variables('sharedsubnetprefix')]\"}}{'comments': 'dmz subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('hubvnetname'), '/', variables('dmzsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\"], 'properties': {'addressprefix': \"[variables('dmzsubnetprefix')]\"}}{'condition': \"[equals(parameters('deployvpngateway'), 'yes')]\", 'comments': 'gateway subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('hubvnetname'), '/', variables('gatewaysubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\"], 'properties': {'addressprefix': \"[variables('gatewaysubnetprefix')]\"}}{'comments': 'development spoke virtual network (vnet)', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('devspokevnetname')]\", 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('devspokevnetprefix')]\"]}, 'enableddosprotection': false, 'enablevmprotection': false}}{'comments': 'development workload subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('devspokevnetname'), '/', variables('spokeworkloadsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('devspokevnetname'))]\"], 'properties': {'addressprefix': \"[variables('devspokeworkloadsubnetprefix')]\"}}{'comments': 'production spoke virtual network (vnet)', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('prodspokevnetname')]\", 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('prodspokevnetprefix')]\"]}, 'enableddosprotection': false, 'enablevmprotection': false}}{'comments': 'production workload subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('prodspokevnetname'), '/', variables('spokeworkloadsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('prodspokevnetname'))]\"], 'properties': {'addressprefix': \"[variables('prodspokeworkloadsubnetprefix')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'comments': 'hub virtual network (vnet)', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('hubvnetname')]\", 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('hubvnetprefix')]\"]}, 'enableddosprotection': false, 'enablevmprotection': false}}{'comments': 'management subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('hubvnetname'), '/', variables('mgmtsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\"], 'properties': {'addressprefix': \"[variables('mgmtsubnetprefix')]\"}}{'comments': 'shared subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('hubvnetname'), '/', variables('sharedsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\"], 'properties': {'addressprefix': \"[variables('sharedsubnetprefix')]\"}}{'comments': 'dmz subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('hubvnetname'), '/', variables('dmzsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\"], 'properties': {'addressprefix': \"[variables('dmzsubnetprefix')]\"}}{'condition': \"[equals(parameters('deployvpngateway'), 'yes')]\", 'comments': 'gateway subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('hubvnetname'), '/', variables('gatewaysubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\"], 'properties': {'addressprefix': \"[variables('gatewaysubnetprefix')]\"}}{'comments': 'development spoke virtual network (vnet)', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('devspokevnetname')]\", 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('devspokevnetprefix')]\"]}, 'enableddosprotection': false, 'enablevmprotection': false}}{'comments': 'development workload subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('devspokevnetname'), '/', variables('spokeworkloadsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('devspokevnetname'))]\"], 'properties': {'addressprefix': \"[variables('devspokeworkloadsubnetprefix')]\"}}{'comments': 'production spoke virtual network (vnet)', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('prodspokevnetname')]\", 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('prodspokevnetprefix')]\"]}, 'enableddosprotection': false, 'enablevmprotection': false}}{'comments': 'production workload subnet', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('prodspokevnetname'), '/', variables('spokeworkloadsubnetname'))]\", 'apiversion': '2019-11-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('prodspokevnetname'))]\"], 'properties': {'addressprefix': \"[variables('prodspokeworkloadsubnetprefix')]\"}}{'condition': \"[equals(parameters('deployvpngateway'), 'yes')]\", 'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(variables('hubvnetname'), '/gwpeering_', variables('hubvnetname'), '_', variables('devspokevnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('gatewaysubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('devspokevnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('devspokevnetname'), variables('spokeworkloadsubnetname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': true, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[variables('devspokeid')]\"}}}{'condition': \"[equals(parameters('deployvpngateway'), 'no')]\", 'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(variables('hubvnetname'), '/peering_', variables('hubvnetname'), '_', variables('devspokevnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('devspokevnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('devspokevnetname'), variables('spokeworkloadsubnetname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[variables('devspokeid')]\"}}}{'condition': \"[equals(parameters('deployvpngateway'), 'yes')]\", 'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(variables('hubvnetname'), '/gwpeering_', variables('hubvnetname'), '_', variables('prodspokevnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('gatewaysubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('prodspokevnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('prodspokevnetname'), variables('spokeworkloadsubnetname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': true, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[variables('prodspokeid')]\"}}}{'condition': \"[equals(parameters('deployvpngateway'), 'no')]\", 'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(variables('hubvnetname'), '/peering_', variables('hubvnetname'), '_', variables('prodspokevnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('prodspokevnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('prodspokevnetname'), variables('spokeworkloadsubnetname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[variables('prodspokeid')]\"}}}{'condition': \"[equals(parameters('deployvpngateway'), 'yes')]\", 'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(variables('devspokevnetname'), '/gwpeering_', variables('devspokevnetname'), '_', variables('hubvnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('gatewaysubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('devspokevnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('devspokevnetname'), variables('spokeworkloadsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworkgateways', variables('gatewayname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': false, 'useremotegateways': true, 'remotevirtualnetwork': {'id': \"[variables('hubid')]\"}}}{'condition': \"[equals(parameters('deployvpngateway'), 'no')]\", 'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(variables('devspokevnetname'), '/peering_', variables('devspokevnetname'), '_', variables('hubvnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('devspokevnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('devspokevnetname'), variables('spokeworkloadsubnetname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[variables('hubid')]\"}}}{'condition': \"[equals(parameters('deployvpngateway'), 'yes')]\", 'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(variables('prodspokevnetname'), '/gwpeering_', variables('prodspokevnetname'), '_', variables('hubvnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('gatewaysubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('prodspokevnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('prodspokevnetname'), variables('spokeworkloadsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworkgateways', variables('gatewayname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': false, 'useremotegateways': true, 'remotevirtualnetwork': {'id': \"[variables('hubid')]\"}}}{'condition': \"[equals(parameters('deployvpngateway'), 'no')]\", 'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(variables('prodspokevnetname'), '/peering_', variables('prodspokevnetname'), '_', variables('hubvnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('hubvnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('sharedsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('dmzsubnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('prodspokevnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('prodspokevnetname'), variables('spokeworkloadsubnetname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[variables('hubid')]\"}}}{'comments': 'network interface card (nic) for win jump-host', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('winvmnicname')]\", 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('winjmphostpublicipname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('winnsgname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'winjmphostipconfig', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('winjmphostpublicipname'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('hubvnetname'), variables('mgmtsubnetname'))]\"}, 'primary': true, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': false, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('winnsgname'))]\"}, 'primary': true}}{'comments': 'nsg for windows jump host', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('winnsgname')]\", 'apiversion': '2019-11-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'nsg_rule_inbound_rdp', 'properties': {'description': 'allow inbound rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}], 'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'allowazureloadbalancerinbound', 'properties': {'description': 'allow inbound traffic from azure load balancer', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'azureloadbalancer', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 65001, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[concat(variables('nsg_name'), copyindex(1))]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'nsg-loop', 'count': 2}, 'properties': {'securityrules': [{'name': 'rdp', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 300, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[concat(variables('publicipaddress'), copyindex())]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicip-loop', 'count': 3}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('virtualnetworks_myvnet_name')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet_prefix')]\"]}, 'subnets': [{'name': 'myagsubnet', 'properties': {'addressprefix': \"[variables('ag_subnet_prefix')]\", 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': 'mybackendsubnet', 'properties': {'addressprefix': \"[variables('backend_subnet_prefix')]\", 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}], 'enableddosprotection': false, 'enablevmprotection': false}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-07-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'privateendpointnetworkpolicies': 'disabled'}}, {'name': \"[variables('subnetappservicename')]\", 'properties': {'addressprefix': \"[variables('subnetappserviceprefix')]\", 'delegations': [{'name': 'delegation', 'properties': {'servicename': 'microsoft.web/serverfarms'}}]}}]}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[variables('privateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetname')]\", \"[variables('sqlservername')]\"], 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnet1name'))]\"}, 'privatelinkserviceconnections': [{'name': \"[variables('privateendpointname')]\", 'properties': {'privatelinkserviceid': \"[resourceid('microsoft.sql/servers',variables('sqlservername'))]\", 'groupids': ['sqlserver']}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[parameters('privatednszonename')]\", 'location': 'global', 'dependson': [\"[variables('vnetname')]\"]} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('gatewaypublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('gatewaysubnetprefix')]\"}}, {'name': \"[variables('appsubnetname')]\", 'properties': {'addressprefix': \"[variables('appsubnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('projectname'),'nsg')]\", 'properties': {'securityrules': [{'name': 'allow_rdp', 'properties': {'access': 'allow', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '3389', 'protocol': '*', 'direction': 'inbound', 'priority': 1000}}, {'name': 'allow_http', 'properties': {'access': 'allow', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '80', 'protocol': 'tcp', 'direction': 'inbound', 'priority': 1001}}, {'name': 'allow_https', 'properties': {'access': 'allow', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '443', 'protocol': 'tcp', 'direction': 'inbound', 'priority': 1002}}, {'name': 'allow_udp_3391', 'properties': {'access': 'allow', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '3391', 'protocol': 'udp', 'direction': 'inbound', 'priority': 1003}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('projectname'),'vnet')]\", 'dependson': [\"[variables('nsgref')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressspace')]\"]}, 'subnets': [{'name': \"[concat(parameters('projectname'),'main')]\", 'properties': {'addressprefix': \"[parameters('vnetsubnetaddress')]\", 'networksecuritygroup': {'id': \"[variables('nsgref')]\"}}}]}}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('projectname'),'intlb')]\", 'sku': {'name': 'standard'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks',concat(parameters('projectname'),'vnet'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'rds-brokers-frontend', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[concat(parameters('vnetprefix'),'.0.4')]\", 'privateipaddressversion': 'ipv4', 'subnet': {'id': \"[variables('subnetref')]\"}}}, {'name': 'rds-webgateways-frontend', 'properties': {'privateipallocationmethod': 'dynamic', 'privateipaddressversion': 'ipv4', 'subnet': {'id': \"[variables('subnetref')]\"}}}], 'backendaddresspools': [{'name': 'rds-brokers-int-pool', 'properties': {}}, {'name': 'rds-webgateways-int-pool', 'properties': {}}], 'probes': [{'name': 'rds-broker-probe', 'properties': {'intervalinseconds': 5, 'numberofprobes': 2, 'protocol': 'tcp', 'port': 3389}}, {'name': 'rds-webgateway-probe', 'properties': {'intervalinseconds': 5, 'numberofprobes': 2, 'protocol': 'tcp', 'port': 443}}], 'loadbalancingrules': [{'name': 'rds-brokers-tcp-rule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',concat(parameters('projectname'),'intlb'),'rds-brokers-frontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools',concat(parameters('projectname'),'intlb'),'rds-brokers-int-pool')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes',concat(parameters('projectname'),'intlb'),'rds-broker-probe')]\"}, 'protocol': 'tcp', 'frontendport': 3389, 'backendport': 3389, 'idletimeoutinminutes': 4}}, {'name': 'rds-brokers-udp-rule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',concat(parameters('projectname'),'intlb'),'rds-brokers-frontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools',concat(parameters('projectname'),'intlb'),'rds-brokers-int-pool')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes',concat(parameters('projectname'),'intlb'),'rds-broker-probe')]\"}, 'protocol': 'udp', 'frontendport': 3389, 'backendport': 3389, 'idletimeoutinminutes': 4}}, {'name': 'rds-webgateway-http-rule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',concat(parameters('projectname'),'intlb'),'rds-webgateways-frontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools',concat(parameters('projectname'),'intlb'),'rds-webgateways-int-pool')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes',concat(parameters('projectname'),'intlb'),'rds-webgateway-probe')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'idletimeoutinminutes': 4}}, {'name': 'rds-webgateway-https-rule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',concat(parameters('projectname'),'intlb'),'rds-webgateways-frontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools',concat(parameters('projectname'),'intlb'),'rds-webgateways-int-pool')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes',concat(parameters('projectname'),'intlb'),'rds-webgateway-probe')]\"}, 'protocol': 'tcp', 'frontendport': 443, 'backendport': 443, 'idletimeoutinminutes': 4}}, {'name': 'rds-webgateway-udp-rule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',concat(parameters('projectname'),'intlb'),'rds-webgateways-frontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools',concat(parameters('projectname'),'intlb'),'rds-webgateways-int-pool')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes',concat(parameters('projectname'),'intlb'),'rds-webgateway-probe')]\"}, 'protocol': 'udp', 'frontendport': 3391, 'backendport': 3391, 'idletimeoutinminutes': 4}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(variables('publicipname'), copyindex())]\", 'copy': {'name': 'publiciploop', 'count': \"[variables('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': 'lbpublicip', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccountsku')]\"}, 'kind': \"[parameters('storageaccountkind')]\", 'properties': {'accesstier': 'hot', 'supportshttpstrafficonly': true}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2020-06-01', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"], 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'automatic'}, 'singleplacementgroup': \"[parameters('singleplacementgroup')]\", 'platformfaultdomaincount': \"[parameters('platformfaultdomaincount')]\", 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[variables('lbpoolid')]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('loadbalancername'),  variables('natpoolname'))]\"}]}}]}}]}, 'extensionprofile': {'extensions': [{'name': 'microsoft.powershell.dsc', 'properties': {'publisher': 'microsoft.powershell', 'type': 'dsc', 'typehandlerversion': '2.9', 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('powershelldscupdatetagversion')]\", 'settings': {'configuration': {'url': \"[variables('powershelldsczipfullpath')]\", 'script': 'installiis.ps1', 'function': 'installiis'}, 'configurationarguments': {'nodename': 'localhost', 'webdeploypackagepath': \"[variables('webdeploypackagefullpath')]\"}}}}]}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/galleries', 'apiversion': '2020-09-30', 'name': \"[parameters('imagegalleryname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'type': 'microsoft.compute/galleries/images', 'apiversion': '2020-09-30', 'name': \"[format('{0}/{1}', parameters('imagegalleryname'), parameters('imagedefinitionproperties').name)]\", 'location': \"[parameters('location')]\", 'properties': {'ostype': 'windows', 'osstate': 'generalized', 'identifier': {'publisher': \"[parameters('imagedefinitionproperties').publisher]\", 'offer': \"[parameters('imagedefinitionproperties').offer]\", 'sku': \"[parameters('imagedefinitionproperties').sku]\"}, 'recommended': {'vcpus': {'min': 2, 'max': 8}, 'memory': {'min': 16, 'max': 48}}, 'hypervgeneration': 'v1'}, 'dependson': [\"[resourceid('microsoft.compute/galleries', parameters('imagegalleryname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('newstorageaccountname')]\", 'apiversion': '2021-01-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'storage account', 'quickstartname': \"[variables('quickstarttags').name]\", 'provider': \"[variables('todoapptags').provider]\"}, 'kind': 'storage', 'sku': {'name': 'standard_lrs'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('jumpboxname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('jumpboxsaname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('jumpboxnicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsku')]\"}, 'osprofile': {'computername': \"[variables('jumpboxname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat(variables('jumpboxosdiskname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('jumpboxnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('jumpboxsaname')), '2021-02-01').primaryendpoints['blob']]\"}}}}{'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}]}}]}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure SQL Server with Auditing enabled to write audit logs to a blob storage\n\n===\n\n", "truth": " {'type': 'microsoft.sql/managedinstances', 'apiversion': '2019-06-01-preview', 'name': \"[parameters('sqlmanagedinstancename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sqlmanagedinstance-skuname')]\", 'tier': \"[parameters('sqlmanagedinstance-skuedition')]\"}, 'identity': {'type': 'systemassigned'}, 'tags': \"[parameters('tags')]\", 'dependson': ['microsoft.resources/deployments/buildminetworking'], 'properties': {'administratorlogin': \"[parameters('sqlmanagedinstanceadminlogin')]\", 'administratorloginpassword': \"[parameters('sqlmanagedinstancepassword')]\", 'subnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets',parameters('vnetresourcename'),parameters('managedinstancesubnetname'))]\", 'storagesizeingb': \"[parameters('sqlmanagedinstance-storagesizeingb')]\", 'vcores': \"[parameters('sqlmanagedinstance-vcores')]\", 'licensetype': \"[parameters('sqlmanagedinstance-licensetype')]\", 'hardwarefamily': \"[parameters('sqlmanagedinstance-hardwarefamily')]\", 'collation': \"[parameters('sqlmanagedinstance-collation')]\", 'publicdataendpointenabled': 'false'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('sqlservername')]\", 'properties': {'administratorlogin': \"[parameters('sqlserveradministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqlserveradministratorloginpassword')]\", 'version': '12.0'}, 'tags': {'displayname': \"[parameters('sqlservername')]\"}, 'resources': [{'type': 'databases', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('sqlservername')]\"], 'name': 'master', 'properties': {}}, {'type': 'databases/providers/diagnosticsettings', 'name': \"[concat('master/microsoft.insights/',variables('diagnosticsettingsname'))]\", 'dependson': [\"[parameters('sqlservername')]\", \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\", \"[resourceid('microsoft.sql/servers/databases', parameters('sqlservername'), 'master')]\"], 'apiversion': '2017-05-01-preview', 'properties': {'name': \"[variables('diagnosticsettingsname')]\", 'workspaceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\", 'logs': [{'category': 'sqlsecurityauditevents', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}, {'condition': \"[parameters('ismsdevopsauditenabled')]\", 'category': 'devopsoperationsaudit', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}]}}, {'apiversion': '2017-03-01-preview', 'type': 'auditingsettings', 'name': 'defaultauditingsettings', 'dependson': [\"[parameters('sqlservername')]\", \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\"], 'properties': {'state': 'enabled', 'isazuremonitortargetenabled': true}}, {'condition': \"[parameters('ismsdevopsauditenabled')]\", 'type': 'devopsauditingsettings', 'apiversion': '2020-02-02-preview', 'name': 'default', 'dependson': [\"[parameters('sqlservername')]\", \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\"], 'properties': {'state': 'enabled', 'isazuremonitortargetenabled': true}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/actiongroups', 'apiversion': '2019-06-01', 'name': \"[parameters('actiongroupname')]\", 'location': 'global', 'properties': {'groupshortname': \"[parameters('actiongroupshortname')]\", 'enabled': true, 'emailreceivers': [{'name': 'emailreceiver', 'emailaddress': \"[parameters('emailaddress')]\"}]}}{'type': 'microsoft.insights/activitylogalerts', 'apiversion': '2017-04-01', 'name': \"[parameters('activitylogalertname')]\", 'location': 'global', 'dependson': [\"[parameters('actiongroupname')]\"], 'properties': {'enabled': true, 'scopes': ['[subscription().id]'], 'condition': {'allof': [{'field': 'category', 'equals': 'servicehealth'}]}, 'actions': {'actiongroups': [{'actiongroupid': \"[resourceid('microsoft.insights/actiongroups', parameters('actiongroupname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'name': \"[parameters('webappname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'tags': {'displayname': 'app service plan'}, 'sku': {'name': \"[parameters('webappsku')]\"}, 'properties': {'name': \"[parameters('webappname')]\", 'workersize': \"[parameters('workersize')]\", 'numberofworkers': 1}}{'name': \"[parameters('webappname')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.web/serverfarms', parameters('webappname'))]\"], 'tags': {\"[concat('hidden-related:', resourcegroup().id, '/providers/microsoft.web/serverfarms/', parameters('webappname'))]\": 'resource', 'displayname': 'web app'}, 'properties': {'name': \"[parameters('webappname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms/', parameters('webappname'))]\"}, 'resources': []} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-03-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2019-07-01', 'type': 'microsoft.compute/proximityplacementgroups', 'name': \"[parameters('proximityplacementgroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'condition': \"[greater(parameters('backendvmcount'),1)]\", 'type': 'microsoft.compute/availabilitysets', 'apiversion': '2019-07-01', 'name': \"[concat(parameters('backendvmnamebase'),'-as')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'dependson': [\"[resourceid('microsoft.compute/proximityplacementgroups', parameters('proximityplacementgroupname'))]\"], 'properties': {'platformfaultdomaincount': \"[variables('maxfaultdomainsforlocation')]\", 'platformupdatedomaincount': 6, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',parameters('proximityplacementgroupname'))]\"}}}{'condition': \"[greater(parameters('midtiervmcount'),1)]\", 'type': 'microsoft.compute/availabilitysets', 'apiversion': '2019-07-01', 'name': \"[concat(parameters('midtiervmnamebase'),'-as')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'dependson': [\"[resourceid('microsoft.compute/proximityplacementgroups', parameters('proximityplacementgroupname'))]\"], 'properties': {'platformfaultdomaincount': \"[variables('maxfaultdomainsforlocation')]\", 'platformupdatedomaincount': 6, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',parameters('proximityplacementgroupname'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-12-01', 'name': \"[parameters('backendnetworksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/proximityplacementgroups', parameters('proximityplacementgroupname'))]\"], 'properties': {}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-12-01', 'name': \"[parameters('midtiernetworksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/proximityplacementgroups', parameters('proximityplacementgroupname'))]\"], 'properties': {}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-12-01', 'name': \"[parameters('frontendnetworksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/proximityplacementgroups', parameters('proximityplacementgroupname'))]\"], 'properties': {'securityrules': [{'name': 'allow_http_from_ip_or_range_forwebhttp', 'type': 'microsoft.network/networksecuritygroups/securityrules', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': \"[parameters('allowfrontendconnectionfromiporcidrblock')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 500, 'direction': 'inbound'}}, {'name': 'allow_ssh_from_ip_or_range_for_jumpboxssh', 'type': 'microsoft.network/networksecuritygroups/securityrules', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('allowfrontendconnectionfromiporcidrblock')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 510, 'direction': 'inbound'}}, {'name': 'allow_https_from_ip_or_range_for_bastion', 'type': 'microsoft.network/networksecuritygroups/securityrules', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': \"[parameters('allowfrontendconnectionfromiporcidrblock')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 520, 'direction': 'inbound'}}, {'name': 'allow_ssh_to_vnet_for_bastion', 'type': 'microsoft.network/networksecuritygroups/securityrules', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 530, 'direction': 'outbound'}}, {'name': 'allow_rdp_to_vnet_for_bastion', 'type': 'microsoft.network/networksecuritygroups/securityrules', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 540, 'direction': 'outbound'}}, {'name': 'allow_https_to_azurecloud_for_bastion', 'type': 'microsoft.network/networksecuritygroups/securityrules', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'azurecloud', 'access': 'allow', 'priority': 550, 'direction': 'outbound'}}, {'name': 'allow_management_from_gateway_manager_for_appgateway', 'type': 'microsoft.network/networksecuritygroups/securityrules', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '65200-65535', 'sourceaddressprefix': 'gatewaymanager', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 560, 'direction': 'inbound'}}, {'name': 'allow_https_from_gateway_manager_for_appgateway', 'type': 'microsoft.network/networksecuritygroups/securityrules', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'gatewaymanager', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 570, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('newstorageaccountname')]\", 'apiversion': '2019-06-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storagev2'} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'comments': 'this uses one of the other templates to deploy a pair of ad controllers', 'name': 'addeployment', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': 'https://raw.githubusercontent.com/azure/azure-quickstart-templates/master/modules/active-directory-new-domain/0.9/azuredeploy.json', 'contentversion': '1.0.0.0'}, 'parameters': {'domainname': {'value': \"[parameters('dnszonename')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'virtualmachinename': {'value': \"[parameters('virtualmachinename')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameprefix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('twilioconnectionname')]\", 'properties': {'api': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'twilio')]\"}, 'displayname': 'twilio', 'parametervalues': {'sid': \"[parameters('twiliosid')]\", 'token': \"[parameters('twiliotoken')]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2020-10-01', 'name': 'sbn0', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('labsubnet.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.1.0.0'}, 'parameters': {'labvnetprefix': {'value': \"[variables('labvnetprefix')]\"}, 'subnets': {'value': []}, 'addedsubnetname': {'value': 'sbn-central'}, 'addedsubnetprefix': {'value': '172.16.0.0/24'}, 'vnetname': {'value': \"[variables('vnetname')]\"}, 'dnslabel': {'value': \"[parameters('dnslabelprefix')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2020-10-01', 'name': \"[concat('sbn', copyindex(1))]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'iter', 'count': \"[add(parameters('numberofsubnets'),-1)]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('labsubnet.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.1.0.0'}, 'parameters': {'labvnetprefix': {'value': \"[variables('labvnetprefix')]\"}, 'subnets': {'value': \"[reference(resourceid('microsoft.resources/deployments', concat('sbn', copyindex()))).outputs.vnetsubnets.value]\"}, 'vnetname': {'value': \"[variables('vnetname')]\"}, 'dnslabel': {'value': \"[parameters('dnslabelprefix')]\"}, 'addedsubnetname': {'value': \"[concat('sbn-',copyindex(1))]\"}, 'addedsubnetprefix': {'value': \"[concat('172.16.',copyindex(1),'.0/24')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2020-10-01', 'name': 'labstorage', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('storage.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.1.0.0'}, 'parameters': {'storageaccountsuffix': {'value': \"[variables('storageaccountsuffix')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2020-10-01', 'name': 'step0', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('avset.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.1'}, 'parameters': {'availabilitysetname': {'value': 'avsetdc'}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2020-10-01', 'name': 'confdc0', 'type': 'microsoft.resources/deployments', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'sbn0')]\", 'microsoft.resources/deployments/labstorage', 'microsoft.resources/deployments/dc0'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('configdc.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.1.0.0'}, 'parameters': {'indx': {'value': 0}, 'vmnameprefix': {'value': ''}, 'computername': {'value': 'dc'}, 'domainname': {'value': \"[parameters('domainname')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2020-10-01', 'name': 'step1', 'type': 'microsoft.resources/deployments', 'dependson': ['microsoft.resources/deployments/dc0'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('setvnetdns.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.1'}, 'parameters': {'dnsserveraddresses': {'value': [\"[reference('dc0').outputs.vmipaddress.value]\"]}, 'virtualnetworkname': {'value': \"[variables('vnetname')]\"}, 'virtualnetworksubnets': {'value': \"[reference(resourceid('microsoft.resources/deployments', concat('sbn', add(parameters('numberofsubnets'),-1)))).outputs.vnetsubnets.value]\"}, 'virtualnetworkaddressranges': {'value': [\"[variables('labvnetprefix')]\"]}, 'location': {'value': \"[parameters('location')]\"}}}}{'apiversion': '2020-10-01', 'name': 'dc0', 'type': 'microsoft.resources/deployments', 'dependson': ['microsoft.resources/deployments/step0'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('winserv.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.2.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'indx': {'value': 0}, 'bootdiagnostics': {'value': \"[equals(parameters('storagecategory'), 'standard')]\"}, 'vmsize': {'value': \"[parameters('vmsize')]\"}, 'lbname': {'value': \"[reference('sbn0').outputs.lbname.value]\"}, 'computername': {'value': 'dc'}, 'publicstartrdpport': {'value': 5000}, 'subnets': {'value': \"[reference('sbn0').outputs.vnetsubnets.value]\"}, 'storageaccountname': {'value': \"[reference('labstorage').outputs.storageaccountname.value]\"}, 'availabilitysetname': {'value': 'avsetdc'}, 'vmnameprefix': {'value': ''}, 'nicnameprefix': {'value': 'nic'}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'ddisks': {'value': [{'name': \"[concat('dc0','datadisk', '0')]\", 'caching': 'none', 'createoption': 'empty', 'disksizegb': \"[variables('addatadisksize')]\", 'lun': 0}]}}}}{'apiversion': '2020-10-01', 'name': \"[concat('dc', copyindex(1))]\", 'type': 'microsoft.resources/deployments', 'dependson': ['microsoft.resources/deployments/step1', 'microsoft.resources/deployments/dc0'], 'copy': {'name': 'otherdcs', 'count': \"[add(parameters('numberofsubnets'),-1)]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('winserv.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.2.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'indx': {'value': '[copyindex(1)]'}, 'bootdiagnostics': {'value': \"[equals(parameters('storagecategory'), 'standard')]\"}, 'vmsize': {'value': \"[parameters('vmsize')]\"}, 'lbname': {'value': \"[reference('sbn0').outputs.lbname.value]\"}, 'computername': {'value': 'dc'}, 'publicstartrdpport': {'value': 5000}, 'subnets': {'value': \"[reference(resourceid('microsoft.resources/deployments', concat('sbn', add(parameters('numberofsubnets'),-1)))).outputs.vnetsubnets.value]\"}, 'storageaccountname': {'value': \"[reference('labstorage').outputs.storageaccountname.value]\"}, 'availabilitysetname': {'value': 'avsetdc'}, 'vmnameprefix': {'value': ''}, 'nicnameprefix': {'value': 'nic'}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'ddisks': {'value': [{'name': \"[concat('addatadisk', copyindex(1))]\", 'caching': 'none', 'createoption': 'empty', 'disksizegb': \"[variables('addatadisksize')]\", 'lun': 0}]}}}}{'apiversion': '2020-10-01', 'name': \"[concat('members', copyindex())]\", 'type': 'microsoft.resources/deployments', 'dependson': ['microsoft.resources/deployments/step1', 'microsoft.resources/deployments/dc0'], 'copy': {'name': 'members', 'count': \"[mul(parameters('numberofsubnets'),parameters('memberserverspersubnet'))]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('winserv.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.2.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'indx': {'value': '[copyindex()]'}, 'bootdiagnostics': {'value': \"[equals(parameters('storagecategory'), 'standard')]\"}, 'vmsize': {'value': \"[parameters('vmsize')]\"}, 'lbname': {'value': \"[reference('sbn0').outputs.lbname.value]\"}, 'computername': {'value': 'srvmbmr'}, 'publicstartrdpport': {'value': 6000}, 'subnets': {'value': \"[reference(resourceid('microsoft.resources/deployments', concat('sbn', add(parameters('numberofsubnets'),-1)))).outputs.vnetsubnets.value]\"}, 'storageaccountname': {'value': \"[reference('labstorage').outputs.storageaccountname.value]\"}, 'availabilitysetname': {'value': 'avsetdc'}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'ddisks': {'value': [{'name': \"[concat('datadisk', copyindex())]\", 'caching': 'none', 'createoption': 'empty', 'disksizegb': \"[variables('mbrdatadisksize')]\", 'lun': 0}]}}}}{'apiversion': '2020-10-01', 'name': \"[concat('confdc', copyindex(1))]\", 'type': 'microsoft.resources/deployments', 'dependson': ['microsoft.resources/deployments/confdc0', \"[resourceid('microsoft.resources/deployments', concat('dc', copyindex(1)))]\"], 'copy': {'name': 'otherdcconfs', 'count': \"[add(parameters('numberofsubnets'),-1)]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('configdc.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.1.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'indx': {'value': '[copyindex(1)]'}, 'computername': {'value': 'dc'}, 'vmnameprefix': {'value': ''}, 'domainname': {'value': \"[parameters('domainname')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\"}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2017-05-10', 'name': 'omsworkspace', 'dependson': [], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').omsworkspace]\", 'contentversion': '1.0.0.0'}, 'parameters': {'omsworkspacename': {'value': \"[variables('resourcenames').omsworkspace]\"}, 'omsworkspaceregion': {'value': \"[variables('azmgmtlocation')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2017-05-10', 'name': 'omsrecoveryservices', 'dependson': [], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').omsrecoveryservices]\", 'contentversion': '1.0.0.0'}, 'parameters': {'omsrecoveryvaultname': {'value': \"[variables('resourcenames').azurerecoveryservices]\"}, 'omsrecoveryvaultregion': {'value': \"[variables('azmgmtlocation')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2017-05-10', 'name': 'omsautomation', 'dependson': [\"[concat('microsoft.resources/deployments/', 'omsrecoveryservices')]\", \"[concat('microsoft.resources/deployments/', 'omsworkspace')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').omsautomation]\", 'contentversion': '1.0.0.0'}, 'parameters': {'omsautomationaccountname': {'value': \"[variables('resourcenames').azureautomation]\"}, 'omsautomationregion': {'value': \"[variables('azautolocation')]\"}, 'omsrecoveryvaultname': {'value': \"[variables('resourcenames').azurerecoveryservices]\"}, 'omsworkspacename': {'value': \"[variables('resourcenames').omsworkspace]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2017-05-10', 'name': 'asrrunbooks', 'dependson': ['omsautomation'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').asrrunbooks]\", 'contentversion': '1.0.0.0'}, 'parameters': {'automationaccountname': {'value': \"[variables('resourcenames').azureautomation]\"}, 'automationregion': {'value': \"[variables('azautolocation')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2017-05-10', 'name': 'dscconfigs', 'dependson': ['omsautomation'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').dscconfigs]\", 'contentversion': '1.0.0.0'}, 'parameters': {'omsautomationaccountname': {'value': \"[variables('resourcenames').azureautomation]\"}, 'omsautomationregion': {'value': \"[variables('azautolocation')]\"}, 'omsworkspacename': {'value': \"[variables('resourcenames').omsworkspace]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('domainname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', 'nicapache')]\", \"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('apachevmsize')]\"}, 'osprofile': {'computername': \"[parameters('domainname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat(parameters('domainname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces','nicapache')]\"}]}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('memcachedmachinenameprefix'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'memcachedvmloop', 'count': \"[parameters('numberofmemcachedinstances')]\"}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat('nicmemcached', copyindex()))]\", \"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('memcachedvmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('memcachedmachinenameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': 'osdisk', 'vhd': {'uri': \"[concat('http://', parameters('newstorageaccountname'), '.blob.', environment().suffixes.storage, '/vhds/', variables('memcachedmachinenameprefix'), copyindex(), '-osdisk.vhd')]\"}, 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat('nicmemcached', copyindex()))]\"}]}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('memcachedmachinenameprefix'), copyindex(), '/install_memcached')]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'extensionloop', 'count': \"[parameters('numberofmemcachedinstances')]\"}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat(variables('memcachedmachinenameprefix'), copyindex()))]\", \"[resourceid('microsoft.compute/virtualmachines/', parameters('domainname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('install_memcached.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('sh install_memcached.sh ', ' ', concat(reference(resourceid('microsoft.network/networkinterfaces/', concat('nicmemcached', copyindex()))).ipconfigurations[0].properties.privateipaddress, ' ', reference('nicapache').ipconfigurations[0].properties.privateipaddress))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'apiversion': '2019-08-01', 'type': 'microsoft.web/serverfarms', 'name': \"[variables('aspname')]\", 'location': \"[variables('location')]\", 'kind': 'app', 'properties': {'name': \"[variables('aspname')]\", 'workersize': '0', 'workersizeid': '0', 'numberofworkers': '1', 'reserved': false, 'hostingenvironment': \"[parameters('existingasename')]\"}, 'sku': {'tier': 'isolated', 'name': 'i1'}}{'apiversion': '2019-08-01', 'type': 'microsoft.web/sites', 'name': \"[variables('contentappname')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('aspname'))]\"], 'properties': {'name': \"[variables('contentappname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms/', variables('aspname'))]\", 'hostingenvironment': \"[parameters('existingasename')]\", 'siteconfig': {'alwayson': true, 'appsettings': [{'name': 'project', 'value': 'src/web/wwwroot'}]}}, 'resources': [{'apiversion': '2019-08-01', 'name': 'web', 'type': 'sourcecontrols', 'dependson': [\"[resourceid('microsoft.web/sites/', variables('contentappname'))]\"], 'properties': {'repourl': \"[variables('sourcecoderepositoryurl')]\", 'branch': 'master', 'ismanualintegration': true}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-11-01', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('vnetname'), '/', variables('rediscachesubnetname'))]\", 'properties': {'addressprefix': \"[variables('rediscachesubnetaddressprefix')]\"}}{'apiversion': '2020-11-01', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(variables('vnetname'), '/', variables('agsubnetname'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('vnetname'), variables('rediscachesubnetname'))]\"], 'properties': {'addressprefix': \"[variables('asesubnetaddressprefix')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs', 'tier': 'standard'}, 'kind': 'storagev2', 'properties': {'networkacls': {'bypass': 'none', 'virtualnetworkrules': [{'id': \"[variables('containersubnetref')]\", 'action': 'allow'}, {'id': \"[variables('storagesubnetref')]\", 'action': 'allow'}], 'defaultaction': 'deny'}, 'supportshttpstrafficonly': true, 'encryption': {'services': {'file': {'keytype': 'account', 'enabled': true}, 'blob': {'keytype': 'account', 'enabled': true}}, 'keysource': 'microsoft.storage'}, 'accesstier': 'cool'}}{'type': 'microsoft.storage/storageaccounts/blobservices', 'apiversion': '2019-06-01', 'name': \"[concat(parameters('storageaccountname'), '/default')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"], 'sku': {'name': 'standard_lrs', 'tier': 'standard'}, 'properties': {'deleteretentionpolicy': {'enabled': false}}}{'type': 'microsoft.storage/storageaccounts/fileservices', 'apiversion': '2019-06-01', 'name': \"[concat(parameters('storageaccountname'), '/default')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"], 'sku': {'name': 'standard_lrs', 'tier': 'standard'}}{'type': 'microsoft.storage/storageaccounts/fileservices/shares', 'apiversion': '2019-06-01', 'name': \"[concat(parameters('storageaccountname'), '/default/', parameters('filesharename'))]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/fileservices', parameters('storageaccountname'), 'default')]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"], 'properties': {'sharequota': 6}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis module allows you to create a user-assigned managed identity and a role assignment scoped to the resource group.\n\n===\n\n", "truth": " {'comments': 'user-defined managed identity defined for the aks cluster. used to access the virtual network and other resources.', 'type': 'microsoft.managedidentity/userassignedidentities', 'apiversion': '2018-11-30', 'name': \"[variables('aksclusteruserdefinedmanagedidentityname')]\", 'location': \"[parameters('location')]\"} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.managedidentity/userassignedidentities', 'apiversion': '2018-11-30', 'name': \"[parameters('managedidentityname')]\", 'location': \"[parameters('location')]\"} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": " {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('akscontributorroleassignmentname')]\", 'dependson': [\"[variables('aksclusteruserdefinedmanagedidentityid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'roledefinitionid': \"[variables('contributorroleid')]\", 'description': 'assign the cluster user-defined managed identity contributor role on the resource group.', 'principalid': \"[reference(variables('aksclusteruserdefinedmanagedidentityname')).principalid]\", 'principaltype': 'serviceprincipal', 'scope': '[resourcegroup().id]'}}{'comments': 'grant the aks cluster ingress controller pod managed identity with reader role permissions over key vault; paired with the access policy, this allows our ingress controller to pull certificates.', 'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('aksreaderroleassignmentname')]\", 'dependson': [\"[variables('keyvaultid')]\", \"[variables('aadpodidentityuserdefinedmanagedidentityid')]\"], 'properties': {'roledefinitionid': \"[variables('readerroleid')]\", 'principalid': \"[reference(variables('aadpodidentityuserdefinedmanagedidentityid')).principalid]\", 'principaltype': 'serviceprincipal', 'scope': '[resourcegroup().id]'}}{'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('acrpullroleassignmentname')]\", 'dependson': [\"[variables('aksclusterid')]\", \"[variables('acrid')]\"], 'properties': {'roledefinitionid': \"[variables('acrpullroleid')]\", 'principalid': \"[reference(variables('aksclusterid'), '2020-12-01', 'full').properties.identityprofile.kubeletidentity.objectid]\", 'principaltype': 'serviceprincipal', 'scope': '[resourcegroup().id]'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipprefixes', 'apiversion': '2021-03-01', 'name': \"[parameters('publicipprefixname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'regional'}, 'properties': {'prefixlength': \"[parameters('publicipprefixlength')]\", 'publicipaddressversion': 'ipv4'}}{'type': 'microsoft.network/natgateways', 'apiversion': '2020-06-01', 'name': \"[parameters('natgatewayname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'dependson': [\"[variables('publicipprefixid')]\"], 'properties': {'idletimeoutinminutes': 4, 'publicipprefixes': [{'id': \"[variables('publicipprefixid')]\"}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('bastionpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/bastionhosts', 'name': \"[parameters('bastionhostname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionpublicipaddressid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'subnet': {'id': \"[variables('bastionsubnetid')]\"}, 'publicipaddress': {'id': \"[variables('bastionpublicipaddressid')]\"}}}]}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionhostid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'bastionauditlogs', 'enabled': true}]}}]}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('vmnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('vmsubnetid')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipprefixes', 'apiversion': '2021-03-01', 'name': \"[parameters('publicipprefixname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'regional'}, 'properties': {'prefixlength': \"[parameters('publicipprefixlength')]\", 'publicipaddressversion': 'ipv4'}}{'type': 'microsoft.network/natgateways', 'apiversion': '2020-06-01', 'name': \"[parameters('natgatewayname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'dependson': [\"[variables('publicipprefixid')]\"], 'properties': {'idletimeoutinminutes': 4, 'publicipprefixes': [{'id': \"[variables('publicipprefixid')]\"}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('bastionpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/bastionhosts', 'name': \"[parameters('bastionhostname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionpublicipaddressid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'subnet': {'id': \"[variables('bastionsubnetid')]\"}, 'publicipaddress': {'id': \"[variables('bastionpublicipaddressid')]\"}}}]}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionhostid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'bastionauditlogs', 'enabled': true}]}}]}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('vmnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('vmsubnetid')]\"}}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('vmsubnetnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowsshinbound', 'properties': {'priority': 100, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmsubnetnsgid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'networksecuritygroupevent', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}, {'category': 'networksecuritygrouprulecounter', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}}]}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmsubnetnsgid')]\", \"[variables('publicipprefixid')]\", \"[variables('natgatewayid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('virtualnetworkaddressprefixes')]\"]}, 'subnets': [{'name': \"[parameters('akssubnetname')]\", 'properties': {'addressprefix': \"[parameters('akssubnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled', 'natgateway': {'id': \"[variables('natgatewayid')]\"}}}, {'name': \"[parameters('podsubnetname')]\", 'properties': {'addressprefix': \"[parameters('podsubnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled', 'natgateway': {'id': \"[variables('natgatewayid')]\"}}}, {'name': \"[parameters('vmsubnetname')]\", 'properties': {'addressprefix': \"[parameters('vmsubnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[variables('vmsubnetnsgid')]\"}, 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled', 'natgateway': {'id': \"[variables('natgatewayid')]\"}}}, {'name': \"[parameters('applicationgatewaysubnetname')]\", 'properties': {'addressprefix': \"[parameters('applicationgatewaysubnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': \"[variables('bastionsubnetname')]\", 'properties': {'addressprefix': \"[parameters('bastionsubnetaddressprefix')]\"}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('blobprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('keyvaultprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'condition': \"[equals(parameters('acrsku'), 'premium')]\", 'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('acrprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat(variables('blobprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('blobprivatednszoneid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('virtualnetworkid')]\"}}}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2018-09-01', 'name': \"[concat(variables('keyvaultprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('keyvaultprivatednszoneid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('virtualnetworkid')]\"}}}{'condition': \"[equals(parameters('acrsku'), 'premium')]\", 'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat(variables('acrprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('acrprivatednszoneid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('virtualnetworkid')]\"}}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('blobstorageaccountprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkid')]\", \"[variables('blobstorageaccountid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('blobstorageaccountprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('blobstorageaccountid')]\", 'groupids': [\"[variables('blobstorageaccountprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('vmsubnetid')]\"}}, 'resources': [{'type': 'privatednszonegroups', 'apiversion': '2020-07-01', 'name': \"[variables('blobprivatednszonegroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('blobstorageaccountprivateendpointid')]\", \"[variables('blobprivatednszoneid')]\", \"[variables('blobstorageaccountprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('blobprivatednszoneid')]\"}}]}}]}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('keyvaultprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkid')]\", \"[variables('keyvaultid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('keyvaultprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('keyvaultid')]\", 'groupids': [\"[variables('keyvaultprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('vmsubnetid')]\"}}, 'resources': [{'type': 'privatednszonegroups', 'apiversion': '2020-07-01', 'name': \"[variables('keyvaultprivatednszonegroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('keyvaultid')]\", \"[variables('keyvaultprivatednszoneid')]\", \"[variables('keyvaultprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('keyvaultprivatednszoneid')]\"}}]}}]} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'apiversion': '2021-01-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('newstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'name': \"[concat(variables('hostingplanname'), '-', resourcegroup().name)]\", 'type': 'microsoft.insights/autoscalesettings', 'location': \"[parameters('location')]\", 'apiversion': '2015-04-01', 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"], 'tags': {\"[concat('hidden-link:', resourcegroup().id, '/providers/microsoft.web/serverfarms/', variables('hostingplanname'))]\": 'resource', 'displayname': \"[concat(variables('insightsname'), ' autoscale')]\", 'quickstartname': \"[variables('quickstarttags').name]\"}, 'properties': {'name': \"[concat(variables('hostingplanname'), '-', resourcegroup().name)]\", 'profiles': [{'name': 'default', 'capacity': {'minimum': '1', 'maximum': '2', 'default': '1'}, 'rules': [{'metrictrigger': {'metricname': 'cpupercentage', 'metricresourceuri': \"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\", 'timegrain': 'pt1m', 'statistic': 'average', 'timewindow': 'pt10m', 'timeaggregation': 'average', 'operator': 'greaterthan', 'threshold': 80}, 'scaleaction': {'direction': 'increase', 'type': 'changecount', 'value': '1', 'cooldown': 'pt10m'}}, {'metrictrigger': {'metricname': 'cpupercentage', 'metricresourceuri': \"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\", 'timegrain': 'pt1m', 'statistic': 'average', 'timewindow': 'pt1h', 'timeaggregation': 'average', 'operator': 'lessthan', 'threshold': 60}, 'scaleaction': {'direction': 'decrease', 'type': 'changecount', 'value': '1', 'cooldown': 'pt1h'}}]}], 'enabled': false, 'targetresourceuri': \"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"}}{'name': \"[parameters('actiongroupname')]\", 'type': 'microsoft.insights/actiongroups', 'apiversion': '2019-06-01', 'location': 'global', 'properties': {'groupshortname': \"[parameters('actiongroupshortname')]\", 'enabled': true, 'emailreceivers': [{'name': 'test', 'emailaddress': \"[parameters('emails')[0]]\", 'usecommonalertschema': true}]}}{'name': \"[concat('the average cpu is high across all the instances of ', variables('hostingplanname'))]\", 'type': 'microsoft.insights/metricalerts', 'apiversion': '2018-03-01', 'location': 'global', 'tags': {\"[concat('hidden-link:', '/subscriptions/', subscription().subscriptionid,'/resourcegroups/', resourcegroup().name, '/providers/microsoft.web/serverfarms/', variables('hostingplanname'))]\": 'resource'}, 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"], 'properties': {'severity': 1, 'enabled': true, 'scopes': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"], 'targetresourcetype': 'microsoft.web/serverfarms', 'targetresourceregion': \"[parameters('location')]\", 'evaluationfrequency': 'pt1m', 'windowsize': 'pt15m', 'criteria': {'odata.type': 'microsoft.azure.monitor.singleresourcemultiplemetriccriteria', 'allof': [{'name': \"[concat('microsoft.web/serverfarms/', variables('hostingplanname'), '-cpupercentage')]\", 'metricname': 'cpupercentage', 'operator': 'greaterthan', 'threshold': 90, 'timeaggregation': 'average', 'criteriontype': 'staticthresholdcriterion'}], 'componentid': \"[resourceid('microsoft.insights/components',variables('insightsname'))]\", 'metricname': \"[concat('the average cpu is high across all the instances of ', variables('hostingplanname'))]\"}, 'actions': [{'actiongroupid': \"[resourceid('microsoft.insights/actiongroups',parameters('actiongroupname'))]\"}]}}{'name': \"[concat('longhttpqueue ', variables('hostingplanname'))]\", 'type': 'microsoft.insights/metricalerts', 'apiversion': '2018-03-01', 'location': 'global', 'tags': {\"[concat('hidden-link:', '/subscriptions/', subscription().subscriptionid,'/resourcegroups/', resourcegroup().name, '/providers/microsoft.web/serverfarms/', variables('hostingplanname'))]\": 'resource'}, 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"], 'properties': {'severity': 1, 'enabled': true, 'scopes': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"], 'targetresourcetype': 'microsoft.web/serverfarms', 'targetresourceregion': \"[parameters('location')]\", 'evaluationfrequency': 'pt1m', 'windowsize': 'pt5m', 'criteria': {'odata.type': 'microsoft.azure.monitor.singleresourcemultiplemetriccriteria', 'allof': [{'name': \"[concat('microsoft.web/serverfarms/', variables('hostingplanname'), '-httpqueuelegth')]\", 'metricname': 'httpqueuelength', 'operator': 'greaterthan', 'threshold': 100, 'timeaggregation': 'average', 'criteriontype': 'staticthresholdcriterion'}], 'componentid': \"[resourceid('microsoft.insights/components',variables('insightsname'))]\", 'metricname': \"[concat('the http queue for the instances of ', variables('hostingplanname'), ' has a large number of pending requests.')]\"}, 'actions': [{'actiongroupid': \"[resourceid('microsoft.insights/actiongroups',parameters('actiongroupname'))]\"}]}}{'name': \"[concat('servererrors ', variables('websitename'))]\", 'type': 'microsoft.insights/metricalerts', 'apiversion': '2018-03-01', 'location': 'global', 'dependson': [\"[resourceid('microsoft.web/sites/', variables('websitename'))]\"], 'tags': {\"[concat('hidden-link:', resourcegroup().id, '/providers/microsoft.web/sites/', variables('websitename'))]\": 'resource'}, 'properties': {'severity': 1, 'enabled': true, 'scopes': [\"[resourceid('microsoft.web/sites/', variables('websitename'))]\"], 'targetresourcetype': 'microsoft.web/sites', 'targetresourceregion': \"[parameters('location')]\", 'evaluationfrequency': 'pt1m', 'windowsize': 'pt5m', 'criteria': {'odata.type': 'microsoft.azure.monitor.singleresourcemultiplemetriccriteria', 'allof': [{'name': \"[concat('microsoft.web/sites', variables('websitename'), '-5xx-errors')]\", 'metricname': 'http5xx', 'operator': 'greaterthan', 'threshold': 0, 'timeaggregation': 'average', 'criteriontype': 'staticthresholdcriterion'}, {'name': \"[concat('microsoft.web/sites', variables('websitename'), '-403-errors')]\", 'metricname': 'http403', 'operator': 'greaterthan', 'threshold': 0, 'timeaggregation': 'average', 'criteriontype': 'staticthresholdcriterion'}], 'componentid': \"[resourceid('microsoft.insights/components',variables('insightsname'))]\", 'metricname': \"[concat(variables('websitename'), 'server errors')]\"}, 'actions': [{'actiongroupid': \"[resourceid('microsoft.insights/actiongroups',parameters('actiongroupname'))]\"}]}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('vmnames')[copyindex()]]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'vmloop', 'count': 3}, 'dependson': ['nicloop'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmnames')[copyindex()]]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('freebsdosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicconfig')[mul(copyindex(),2)].name)]\", 'properties': {'primary': true}}, {'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicconfig')[add(mul(copyindex(),2),1)].name)]\", 'properties': {'primary': false}}]}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('vmnamesql')]\", 'location': \"[parameters('location')]\", 'dependson': ['nicloop'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('postgresqlvmsize')]\"}, 'osprofile': {'computername': \"[variables('vmnamesql')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('freebsdosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numberofdatadisks')]\", 'input': {'disksizegb': \"[parameters('sizeofdatadisksingb')]\", 'lun': \"[copyindex('datadisks')]\", 'caching': \"[parameters('diskcaching')]\", 'createoption': 'empty'}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmnamesql'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus Namespace and Topic.\n\n===\n\n", "truth": " {'type': 'microsoft.servicebus/namespaces', 'apiversion': '2018-01-01-preview', 'name': \"[variables('servicebusnamespacename')]\", 'location': \"[parameters('location')]\", 'kind': 'messaging', 'sku': {'name': 'standard', 'capacity': 1, 'tier': 'standard'}}{'type': 'microsoft.servicebus/namespaces/topics', 'apiversion': '2015-08-01', 'name': \"[concat(variables('servicebusnamespacename'), '/', parameters('incomingdeliveryrequeststopicname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', variables('servicebusnamespacename'))]\"], 'properties': {'defaultmessagetimetolive': '14.00:00:00', 'enablebatchedoperations': false, 'enableexpress': false, 'enablepartitioning': true, 'enablesubscriptionpartitioning': false, 'filteringmessagesbeforepublishing': false, 'isanonymousaccessible': false, 'isexpress': false, 'maxsizeinmegabytes': 1024, 'requiresduplicatedetection': false, 'sizeinbytes': 0, 'supportordering': false}}{'type': 'microsoft.servicebus/namespaces/topics/subscriptions', 'apiversion': '2015-08-01', 'name': \"[concat(variables('servicebusnamespacename'), '/', parameters('incomingdeliveryrequeststopicname'), '/highpriority')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', variables('servicebusnamespacename'))]\", \"[resourceid('microsoft.servicebus/namespaces/topics', variables('servicebusnamespacename'), parameters('incomingdeliveryrequeststopicname'))]\"], 'properties': {'deadletteringonfilterevaluationexceptions': false, 'deadletteringonmessageexpiration': true, 'defaultmessagetimetolive': '14.00:00:00', 'enablebatchedoperations': false, 'lockduration': '00:00:30', 'maxdeliverycount': 10, 'requiressession': false}, 'resources': [{'type': 'rules', 'apiversion': '2015-08-01', 'name': 'highpriority', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/topics/subscriptions', variables('servicebusnamespacename'), parameters('incomingdeliveryrequeststopicname'), 'highpriority')]\"], 'properties': {'filter': {'sqlexpression': \"priority='high'\"}}}]}{'type': 'microsoft.servicebus/namespaces/topics/subscriptions', 'apiversion': '2015-08-01', 'name': \"[concat(variables('servicebusnamespacename'), '/', parameters('incomingdeliveryrequeststopicname'), '/log')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', variables('servicebusnamespacename'))]\", \"[resourceid('microsoft.servicebus/namespaces/topics', variables('servicebusnamespacename'), parameters('incomingdeliveryrequeststopicname'))]\"], 'properties': {'deadletteringonfilterevaluationexceptions': false, 'deadletteringonmessageexpiration': true, 'defaultmessagetimetolive': '14.00:00:00', 'enablebatchedoperations': false, 'lockduration': '00:00:30', 'maxdeliverycount': 10, 'requiressession': false}, 'resources': [{'type': 'rules', 'apiversion': '2015-08-01', 'name': 'logall', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/topics/subscriptions', variables('servicebusnamespacename'), parameters('incomingdeliveryrequeststopicname'), 'log')]\"], 'properties': {'filter': {'sqlexpression': '1=1'}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.servicebus/namespaces', 'sku': {'name': 'standard', 'tier': 'standard'}, 'name': \"[parameters('servicebusnamespace')]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'properties': {'metricid': \"[concat(subscription().subscriptionid, ':router', parameters('servicebusnamespace'))]\", 'createdat': '2018-04-07t12:06:43.41z', 'updatedat': '2018-04-07t12:07:09.597z', 'servicebusendpoint': \"[concat('https://', parameters('servicebusnamespace'),'.servicebus.windows.net:443/')]\", 'status': 'active'}}{'type': 'microsoft.servicebus/namespaces/authorizationrules', 'name': \"[concat(parameters('servicebusnamespace'), '/', 'rootmanagesharedaccesskey')]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\"], 'properties': {'rights': ['listen', 'manage', 'send']}}{'type': 'microsoft.servicebus/namespaces/topics', 'name': \"[concat(parameters('servicebusnamespace'), '/', parameters('messageroutingtopic'))]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\"], 'properties': {'defaultmessagetimetolive': 'p14d', 'maxsizeinmegabytes': 1024, 'requiresduplicatedetection': false, 'duplicatedetectionhistorytimewindow': 'pt10m', 'enablebatchedoperations': true, 'status': 'active', 'supportordering': false, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': true, 'enableexpress': false}}{'type': 'microsoft.servicebus/namespaces/topics/subscriptions', 'name': \"[concat(parameters('servicebusnamespace'), '/', parameters('messageroutingtopic'), '/', parameters('backendlogicappsubscription'))]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\", \"[resourceid('microsoft.servicebus/namespaces/topics', parameters('servicebusnamespace'), parameters('messageroutingtopic'))]\"], 'properties': {'lockduration': 'pt30s', 'requiressession': true, 'defaultmessagetimetolive': 'p14d', 'deadletteringonmessageexpiration': false, 'deadletteringonfilterevaluationexceptions': false, 'maxdeliverycount': 10, 'status': 'active', 'enablebatchedoperations': false, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s'}}{'type': 'microsoft.servicebus/namespaces/topics/subscriptions', 'name': \"[concat(parameters('servicebusnamespace'), '/', parameters('messageroutingtopic'), '/', parameters('clientlogicappsubscription'))]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\", \"[resourceid('microsoft.servicebus/namespaces/topics', parameters('servicebusnamespace'), parameters('messageroutingtopic'))]\"], 'properties': {'lockduration': 'pt30s', 'requiressession': true, 'defaultmessagetimetolive': 'p14d', 'deadletteringonmessageexpiration': false, 'deadletteringonfilterevaluationexceptions': false, 'maxdeliverycount': 10, 'status': 'active', 'enablebatchedoperations': false, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s'}}{'type': 'microsoft.servicebus/namespaces/topics/ END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'name': 'deploy-xss-attack-oms-resource', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('omstemplateuri')]\"}, 'parameters': {'omsworkspacename': {'value': \"[variables('omsworkspacename')]\"}, 'omssolutionsname': {'value': \"[variables('omssolutions')]\"}, 'sku': {'value': \"[parameters('omssku')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-08-01', 'name': \"[concat(variables('vnetname'),'-resource')]\", 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('vnettemplateuri')]\"}, 'parameters': {'vnetname': {'value': \"[variables('vnetname')]\"}, 'addressprefix': {'value': \"[variables('vnetaddressspace')]\"}, 'subnets': {'value': \"[variables('subnets')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-08-01', 'name': \"[concat(variables('applicationgateways')[copyindex()].name,'-pip','-resource')]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'copy-appgateway-pip', 'count': 2}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('piptemplateuri')]\"}, 'parameters': {'publicipaddressname': {'value': \"[concat(variables('applicationgateways')[copyindex()].name,'-pip')]\"}, 'publicipaddresstype': {'value': \"[parameters('pipaddresstype')]\"}, 'dnsnameforpublicip': {'value': \"[concat(variables('applicationgateways')[copyindex()].name,'-',uniquestring(resourcegroup().id, 'pip'), '-pip')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-08-01', 'name': \"[concat('deploy-',variables('applicationgateways')[copyindex()].name,'-applicationgateway','-resource')]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'copy-appgateway', 'count': 2}, 'dependson': ['copy-appgateway-pip', \"[resourceid('microsoft.resources/deployments',concat(variables('vnetname'),'-resource'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('appgwtemplateuri')]\"}, 'parameters': {'applicationgatewayname': {'value': \"[variables('applicationgateways')[copyindex()].name]\"}, 'location': {'value': \"[parameters('location')]\"}, 'publicipref': {'value': \"[reference(resourceid('microsoft.resources/deployments',concat(variables('applicationgateways')[copyindex()].name,'-pip','-resource'))).outputs.publicipref.value]\"}, 'frontendports': {'value': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}]}, 'gatewayipconfigurations': {'value': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets',variables('vnetname'),variables('subnets')[0].name)]\"}}}]}, 'backendaddresspools': {'value': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'fqdn': \"[reference(resourceid('microsoft.resources/deployments',concat(variables('webappname'),'-resource'))).outputs.endpoint.value]\"}]}}]}, 'backendhttpsettingscollection': {'value': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'pickhostnamefrombackendaddress': 'true', 'probe': {'id': \"[resourceid('microsoft.network/applicationgateways/probes',variables('applicationgateways')[copyindex()].name,variables('httpprobename'))]\"}}}]}, 'httplisteners': {'value': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgateways')[copyindex()].name, 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgateways')[copyindex()].name, 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}]}, 'requestroutingrules': {'value': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgateways')[copyindex()].name, 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgateways')[copyindex()].name, 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgateways')[copyindex()].name, 'appgatewaybackendhttpsettings')]\"}}}]}, 'probes': {'value': [{'name': \"[variables('httpprobename')]\", 'properties': {'protocol': 'http', 'host': \"[reference(resourceid('microsoft.resources/deployments',concat(variables('webappname'),'-resource'))).outputs.endpoint.value]\", 'path': '/', 'interval': 30, 'timeout': 30, 'unhealthythreshold': 8}}, {'name': \"[variables('httpsprobename')]\", 'properties': {'protocol': 'https', 'host': \"[reference(resourceid('microsoft.resources/deployments',concat(variables('webappname'),'-resource'))).outputs.endpoint.value]\", 'path': '/', 'interval': 30, 'timeout': 30, 'unhealthythreshold': 8}}]}, 'wafmode': {'value': \"[variables('applicationgateways')[copyindex()].wafmode]\"}, 'omsworkspaceresourceid': {'value': \"[reference('deploy-xss-attack-oms-resource').outputs.workspaceid.value]\"}}}}{'apiversion': '2020-08-01', 'name': \"[concat(variables('diagstorageaccname'),'-resource')]\", 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('storagetemplateuri')]\"}, 'parameters': {'storageaccountname': {'value': \"[variables('diagstorageaccname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-08-01', 'name': \"[concat(variables('aspname'),'-resource')]\", 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('asptemplateuri')]\"}, 'parameters': {'name': {'value': \"[variables('aspname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-08-01', 'name': \"[concat(variables('webappname'),'-resource')]\", 'type': 'microsoft.resources/deployments', 'dependson': [\"[resourceid('microsoft.resources/deployments',concat(variables('aspname'),'-resource'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webapptemplateuri')]\"}, 'parameters': {'name': {'value': \"[variables('webappname')]\"}, 'hostingplanname': {'value': \"[variables('aspname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-08-01', 'name': \"[concat(variables('webappname'),'-connectionstrings','-resource')]\", 'type': 'microsoft.resources/deployments', 'dependson': [\"[resourceid('microsoft.resources/deployments',concat(variables('webappname'),'-resource'))]\", \"[resourceid('microsoft.resources/deployments',concat(variables('databases')[0].name,'-database','-resource'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webappconnectionstringtemplateuri')]\"}, 'parameters': {'webappname': {'value': \"[variables('webappname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'connectiontype': {'value': \"[variables('appserviceconnectiontype')]\"}, 'connectionstring': {'value': \"[concat(reference(resourceid('microsoft.resources/deployments',concat(variables('databases')[0].name,'-database','-resource'))).outputs.dbconnetcionstring.value,';user id=', parameters('sqladministratorname'), ';password=', parameters('sqlserverpassword'), ';connection timeout=300;')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('jumpboxsaname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2021-02-01', 'sku': {'name': 'standard_lrs'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')[copyindex(0)]]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'vmcopy', 'count': 2}, 'dependson': [\"[concat(variables('vhdstorageaccountname'), copyindex(1))]\", 'niccopy'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')[copyindex(0)]]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('osversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname')[copyindex(0)],'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicname'), copyindex(1)))]\"}]}}, 'resources': [{'type': 'extensions', 'name': \"[concat('customscriptextension', copyindex(1))]\", 'apiversion': '2015-06-15', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmname')[copyindex(0)]]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.8', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/tptest.ps1', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('powershell -executionpolicy unrestricted -file scripts/tptest.ps1 -receiverip ', reference(variables('nicname2')).ipconfigurations[0].properties.privateipaddress, ' -mode ', variables('testmode')[copyindex(0)], ' -buffersize ', variables('testbuffersize')[copyindex(0)], ' -overlappedbuffers ', variables('testoverlappedbuffers')[copyindex(0)], ' -datatransfermode ', parameters('testdatatransfermode'), ' -threadnumber ', variables('testthreadnumber')[copyindex(0)], ' -duration ', parameters('testdurationseconds'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat('myvm', copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[parameters('numberofinstances')]\"}, 'dependson': [\"[concat('microsoft.network/networkinterfaces/', 'nic1', copyindex())]\", \"[concat('microsoft.network/networkinterfaces/', 'nic2', copyindex())]\", \"[concat('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[concat('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat('vm', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat('myvm', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'properties': {'primary': true}, 'id': \"[resourceid('microsoft.network/networkinterfaces',concat('nic1', copyindex()))]\"}, {'properties': {'primary': false}, 'id': \"[resourceid('microsoft.network/networkinterfaces',concat('nic2', copyindex()))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat('myvm', copyindex(), '/extension')]\", 'apiversion': '2015-05-01-preview', 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[parameters('numberofinstances')]\"}, 'dependson': [\"[concat('microsoft.compute/virtualmachines/', 'myvm', copyindex())]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('customscriptfilepath')]\"], 'commandtoexecute': \"[concat(variables('customscriptcommandtoexecute'), ' ', copyindex(), ' ', parameters('numberofinstances'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\"}}, {'name': \"[variables('subnet2name')]\", 'properties': {'addressprefix': \"[variables('subnet2prefix')]\"}}]}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforlbip')]\"}}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat('nic1', copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'nicloop', 'count': \"[parameters('numberofinstances')]\"}, 'dependson': [\"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[concat('microsoft.network/loadbalancers/', variables('lbname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnet1ref')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[concat(variables('lbid'), '/backendaddresspools/backendpool1')]\"}], 'loadbalancerinboundnatrules': [{'id': \"[concat(variables('lbid'),'/inboundnatrules/ssh', copyindex())]\"}]}}]}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat('nic2', copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'nicloop', 'count': \"[parameters('numberofinstances')]\"}, 'dependson': [\"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig2', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnet2ref')]\"}}}]}}{'apiversion': '2015-05-01-preview', 'name': \"[variables('lbname')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid')]\"}}}], 'backendaddresspools': [{'name': 'backendpool1'}], 'inboundnatrules': [{'name': 'ssh0', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50000, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh1', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50001, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh2', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50002, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh3', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50003, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh4', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50004, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh5', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50005, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh6', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50006, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh7', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50007, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh8', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50008, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh9', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50009, 'backendport': 22, 'enablefloatingip': false}}, {'name': 'ssh10', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 50010, 'backendport': 22, 'enablefloatingip': false}}], 'loadbalancingrules': [{'name': 'lbrule', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'backendaddresspool': {'id': \"[variables('lbpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 10, 'probe': {'id': \"[variables('lbprobeid')]\"}}}], 'probes': [{'name': 'tcpprobe', 'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': '5', 'numberofprobes': '2'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2018-05-01', 'name': 'deploy-ddos-attack-oms-resource', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('omstemplateuri')]\"}, 'parameters': {'omsworkspacename': {'value': \"[variables('omsworkspacename')]\"}, 'omssolutionsname': {'value': \"[variables('omssolutions')]\"}, 'sku': {'value': \"[parameters('omssku')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2021-02-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-04-01', 'name': \"[format('{0}/{1}', parameters('existingvnetname'), parameters('containersubnetname'))]\", 'properties': {'addressprefix': \"[parameters('containersubnetaddressprefix')]\", 'serviceendpoints': [{'service': 'microsoft.storage', 'locations': [\"[parameters('location')]\"]}], 'delegations': [{'name': 'cloudshelldelegation', 'properties': {'servicename': 'microsoft.containerinstance/containergroups'}}]}}{'type': 'microsoft.network/networkprofiles', 'apiversion': '2019-11-01', 'name': \"[variables('networkprofilename')]\", 'location': \"[parameters('location')]\", 'properties': {'containernetworkinterfaceconfigurations': [{'name': \"[format('eth-{0}', parameters('containersubnetname'))]\", 'properties': {'ipconfigurations': [{'name': \"[format('ipconfig-{0}', parameters('containersubnetname'))]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('existingvnetname'), parameters('containersubnetname'))]\"}}}]}}]}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('existingvnetname'), parameters('containersubnetname'))]\"]}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-04-01', 'name': \"[format('{0}/{1}', parameters('existingvnetname'), parameters('relaysubnetname'))]\", 'properties': {'addressprefix': \"[parameters('relaysubnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('existingvnetname'), parameters('containersubnetname'))]\"]}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-04-01', 'name': \"[parameters('privateendpointname')]\", 'location': \"[parameters('location')]\", 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('privateendpointname')]\", 'properties': {'privatelinkserviceid': \"[resourceid('microsoft.relay/namespaces', parameters('relaynamespacename'))]\", 'groupids': ['namespace']}}], 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('existingvnetname'), parameters('relaysubnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.relay/namespaces', parameters('relaynamespacename'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('existingvnetname'), parameters('relaysubnetname'))]\"]}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-04-01', 'name': \"[format('{0}/{1}', parameters('existingvnetname'), parameters('storagesubnetname'))]\", 'properties': {'addressprefix': \"[parameters('storagesubnetaddressprefix')]\", 'serviceendpoints': [{'service': 'microsoft.storage', 'locations': [\"[parameters('location')]\"]}]}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('existingvnetname'), parameters('relaysubnetname'))]\"]} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2020-10-01', 'name': 'backup_jobs_non_log', 'type': 'microsoft.resources/deployments', 'resourcegroup': '[resourcegroup().name]', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').backup_jobs_non_log]\", 'contentversion': '1.0.0.0'}, 'parameters': {'workspacename': {'value': \"[parameters('workspacename')]\"}}}}{'apiversion': '2020-10-01', 'name': 'backup_jobs_log', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').backup_jobs_log]\", 'contentversion': '1.0.0.0'}, 'parameters': {'workspacename': {'value': \"[parameters('workspacename')]\"}}}}{'apiversion': '2020-10-01', 'name': 'restore_jobs', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').restore_jobs]\", 'contentversion': '1.0.0.0'}, 'parameters': {'workspacename': {'value': \"[parameters('workspacename')]\"}}}}{'apiversion': '2020-10-01', 'name': 'azure_alerts', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').azure_alerts]\", 'contentversion': '1.0.0.0'}, 'parameters': {'workspacename': {'value': \"[parameters('workspacename')]\"}}}}{'apiversion': '2020-10-01', 'name': 'on_prem_alerts', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').on_prem_alerts]\", 'contentversion': '1.0.0.0'}, 'parameters': {'workspacename': {'value': \"[parameters('workspacename')]\"}}}}{'apiversion': '2020-10-01', 'name': 'backup_items', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').backup_items]\", 'contentversion': '1.0.0.0'}, 'parameters': {'workspacename': {'value': \"[parameters('workspacename')]\"}}}}{'apiversion': '2020-10-01', 'name': 'cloud_storage', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nestedtemplates').cloud_storage]\", 'contentversion': '1.0.0.0'}, 'parameters': {'workspacename': {'value': \"[parameters('workspacename')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nwhich shows how we can correlate messages over Logic Apps using Azure Service Bus\n\n===\n\n", "truth": " {'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'tags': \"[parameters('resourcetags')]\", 'dependson': [\"[resourceid('microsoft.web/connections', variables('office365connectionname'))]\", \"[resourceid('microsoft.web/connections', variables('azuremonitorlogsconnectionname'))]\"], 'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}, 'datatoexport': {'defaultvalue': 'usage', 'type': 'string'}, 'aggregationtype': {'defaultvalue': '[concat(\\'\"\\',parameters(\\'aggregationtype\\'),\\'\"\\')]', 'type': 'string'}, 'backupsolutionlistfilter': {'defaultvalue': '[concat(\\'\"\\',parameters(\\'backupsolutionlistfilter\\'),\\'\"\\')]', 'type': 'string'}, 'excludelegacyevent': {'defaultvalue': \"[parameters('excludelegacyevent')]\", 'type': 'bool'}, 'enddate': {'defaultvalue': \"[parameters('enddate')]\", 'type': 'string'}, 'startdate': {'defaultvalue': \"[parameters('startdate')]\", 'type': 'string'}, 'vaultlistfilter': {'defaultvalue': '[concat(\\'\"\\',parameters(\\'vaultlistfilter\\'),\\'\"\\')]', 'type': 'string'}, 'vaultlocationlistfilter': {'defaultvalue': '[concat(\\'\"\\',parameters(\\'vaultlocationlistfilter\\'),\\'\"\\')]', 'type': 'string'}, 'vaultsubscriptionlistfilter': {'defaultvalue': '[concat(\\'\"\\',parameters(\\'vaultsubscriptionlistfilter\\'),\\'\"\\')]', 'type': 'string'}, 'workspacestoquery': {'defaultvalue': \"[parameters('workspacestoquery')]\", 'type': 'array'}}, 'triggers': {'recurrence': {'recurrence': {'frequency': \"[parameters('emailfrequency')]\", 'interval': 1}, 'type': 'recurrence'}}, 'actions': {'for_each': {'foreach': \"@parameters('workspacestoquery')\", 'actions': {'append_to_string_variable': {'type': 'appendtostringvariable', 'inputs': {'name': 'azurediagnostics_incomplete', 'value': \" workspace('@{items('for_each')}').azurediagnostics,\"}}, 'append_to_string_variable_2': {'runafter': {'append_to_string_variable': ['succeeded']}, 'type': 'appendtostringvariable', 'inputs': {'name': 'coreazurebackup_incomplete', 'value': \" workspace('@{items('for_each')}').coreazurebackup,\"}}, 'append_to_string_variable_3': {'runafter': {'append_to_string_variable_2': ['succeeded']}, 'type': 'appendtostringvariable', 'inputs': {'name': 'addonazurebackupjobs_incomplete', 'value': \" workspace('@{items('for_each')}').addonazurebackupjobs,\"}}, 'append_to_string_variable_4': {'runafter': {'append_to_string_variable_3': ['succeeded']}, 'type': 'appendtostringvariable', 'inputs': {'name': 'addonazurebackuppolicy_incomplete', 'value': \" workspace('@{items('for_each')}').addonazurebackuppolicy,\"}}, 'append_to_string_variable_5': {'runafter': {'append_to_string_variable_4': ['succeeded']}, 'type': 'appendtostringvariable', 'inputs': {'name': 'addonazurebackupprotectedinstance_incomplete', 'value': \" workspace('@{items('for_each')}').addonazurebackupprotectedinstance,\"}}, 'append_to_string_variable_6': {'runafter': {'append_to_string_variable_5': ['succeeded']}, 'type': 'appendtostringvariable', 'inputs': {'name': 'addonazurebackupstorage_incomplete', 'value': \" workspace('@{items('for_each')}').addonazurebackupstorage,\"}}}, 'runafter': {'initialize_variable-addonazurebackupstorage': ['succeeded']}, 'type': 'foreach'}, 'if_scope_failed': {'actions': {'send_an_email_(v2)-failurerun': {'type': 'apiconnection', 'inputs': {'body': {'body': \"<p>the logic app run did not execute to completion. <br>\\n<br>status: @{result('scope')[0]['status']}<br><br> <a href='https://aka.ms/azurebackupreportemail'>learn more</a> about how to troubleshoot the error</p>\", 'subject': \"[parameters('emailsubject')]\", 'to': \"[parameters('recipientemailid')]\"}, 'host': {'connection': {'name': \"@parameters('$connections')['office365']['connectionid']\"}}, 'method': 'post', 'path': '/v2/mail'}}}, 'runafter': {'scope': ['succeeded', 'failed', 'skipped', 'timedout']}, 'else': {'actions': {'send_an_email_(v2)-successfulrun': {'type': 'apiconnection', 'inputs': {'body': {'attachments': [{'contentbytes': \"@{body('run_query_and_visualize_results-billinggrouptrend')?['attachmentcontent']}\", 'name': \"@body('run_query_and_visualize_results-billinggrouptrend')?['attachmentname']\"}, {'contentbytes': \"@{body('run_query_and_visualize_results-cloudstoragetrend')?['attachmentcontent']}\", 'name': \"@body('run_query_and_visualize_results-cloudstoragetrend')?['attachmentname']\"}, {'contentbytes': \"@{base64(body('create_csv_table-billinggrouplist'))}\", 'name': 'billinggrouplist.csv'}], 'body': \"<p><u><strong><br>\\nusage report<br>\\n</strong></u><u><strong><br>\\nemail contents<br>\\n</strong></u><br>\\n1. <b>inline</b> <br>a. trend of protected instance count over time <br>b. trend of backup cloud storage (gb) consumed over time<br>2. <b>attachments </b> <br>a. list of all billin groups with details on protected instance count, total cloud storage consumed (gb), storage replication type etc. <br><br> <a href='https://aka.ms/azurebackupreportdocs'>learn more</a> about backup reports<br>\\n<br>\\n<u><strong>@{variables('visual')}</strong></u><u><strong><br>\\n<br>\\n<br>\\n</strong></u><br>\\n<br>\\n</p>\", 'subject': \"[parameters('emailsubject')]\", 'to': \"[parameters('recipientemailid')]\"}, 'host': {'connection': {'name': \"@parameters('$connections')['office365']['connectionid']\"}}, 'method': 'post', 'path': '/v2/mail'}}}}, 'expression': {'or': [{'equals': [\"@result('scope')[0]['status']\", 'failed']}, {'equals': [\"@result('scope')[0]['status']\", 'aborted']}, {'equals': [\"@result('scope')[0]['status']\", 'skipped']}, {'equals': [\"@result('scope')[0]['status']\", 'timedout']}]}, 'type': 'if'}, 'initialize_variable-nodatamessage': {'inputs': {'variables': [{'name': 'nodatamessage', 'type': 'array', 'value': [{'message': 'no records found'}]}]}, 'runafter': {'initialize_variable-emailbodyforsuccessfulrun': ['succeeded']}, 'type': 'initializevariable'}, 'initialize_variable-addonazurebackupjobs': {'runafter': {'initialize_variable-coreazurebackup': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'addonazurebackupjobs_incomplete', 'type': 'string', 'value': 'let addonazurebackupjobs = ()\\n{\\nunion'}]}}, 'initialize_variable-addonazurebackuppolicy': {'runafter': {'initialize_variable-addonazurebackupjobs': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'addonazurebackuppolicy_incomplete', 'type': 'string', 'value': 'let addonazurebackuppolicy = ()\\n{\\nunion'}]}}, 'initialize_variable-addonazurebackupprotectedinstance': {'runafter': {'initialize_variable-addonazurebackuppolicy': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'addonazurebackupprotectedinstance_incomplete', 'type': 'string', 'value': 'let addonazurebackupprotectedinstance = ()\\n{\\nunion'}]}}, 'initialize_variable-addonazurebackupstorage': {'runafter': {'initialize_variable-addonazurebackupprotectedinstance': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'addonazurebackupstorage_incomplete', 'type': 'string', 'value': 'let addonazurebackupstorage = ()\\n{\\nunion'}]}}, 'initialize_variable-azurediagnostics': {'type': 'initializevariable', 'inputs': {'variables': [{'name': 'azurediagnostics_incomplete', 'type': 'string', 'value': 'let azurediagnostics = ()\\n{\\nunion'}]}}, 'initialize_variable-billinggroupfunction': {'runafter': {'initialize_variable-reportfilterforlatestdata': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'billinggroupfunction', 'type': 'string', 'value': '@{variables(\\'workspacestoquery_custom\\')}\\n@{variables(\\'reportfilter_latest\\')}\\nlet _billinggroupname = \"*\";\\n//other vars\\nlet asonday =  _rangeend-1d;\\nlet azurestoragecutoffdate = datetime(6/01/2020, 12:00:00.000 am);\\nlet azurestorageprotectedinstancecountcutoffdate = datetime(2/01/2021, 12:00:00.000 am);\\n// helperfunctions\\nlet extend_backupsolution = (t:(backupmanagementtype:string, backupitemtype:string))\\n{\\nt | extend backupsolution = iff(backupmanagementtype == \"iaasvm\", \"azure virtual machine backup\", \\niff(backupmanagementtype == \"mab\", \"azure backup agent\", \\niff(backupmanagementtype == \"dpm\", \"dpm\", \\niff(backupmanagementtype == \"azurebackupserver\", \"azure backup server\", \\niff(backupmanagementtype == \"azurestorage\", \"azure storage (azure files) backup\", \\niff(backupmanagementtype == \"azureworkload\" and backupitemtype == \"sqldatabase\", \"sql in azure vm backup\", \\niff(backupmanagementtype == \"azureworkload\" and backupitemtype == \"saphanadatabase\", \"sap hana in azure vm backup\", \"\")))))))\\n};\\n// source tables\\nlet vaultunderazurediagnostics = ()\\n{\\nazurediagnostics\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where category == \"azurebackupreport\" and operationname == \"vault\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\"\\n| project vaultname = columnifexists(\"vaultname_s\", \"\"), vaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), vaulttags = columnifexists(\"vaulttags_s\", \"\"), azuredatacenter =  columnifexists(\"azuredatacenter_s\", \"\"), resourcegroupname =  columnifexists(\"resourcegroupname_s\", \"\"), subscriptionid = toupper(subscriptionid), storagereplicationtype = columnifexists(\"storagereplicationtype_s\", \"\"), resourceid, timegenerated \\n| where subscriptionid in~ (_vaultsubscriptionlist) or \\'*\\' in (_vaultsubscriptionlist)\\n| where azuredatacenter in~ (_vaultlocationlist) or \\'*\\' in (_vaultlocationlist)\\n| where vaultname in~  (_vaultlist) or \\'*\\' in (_vaultlist)\\n| summarize arg_max(timegenerated, *) by resourceid\\n| project storagereplicationtype, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, resourceid, timegenerated\\n};\\nlet vaultunderresourcespecific = ()\\n{\\ncoreazurebackup\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where operationname == \"vault\" \\n| project storagereplicationtype, vaultuniqueid, vaultname, vaulttags, subscriptionid = toupper(subscriptionid), resourcegroupname, azuredatacenter, resourceid, timegenerated \\n| where subscriptionid in~ (_vaultsubscriptionlist) or \\'*\\' in (_vaultsubscriptionlist)\\n| where azuredatacenter in~ (_vaultlocationlist) or \\'*\\' in (_vaultlocationlist)\\n| where vaultname in~  (_vaultlist) or \\'*\\' in (_vaultlist)\\n| summarize arg_max(timegenerated, *) by resourceid\\n};\\nlet resourceidlistunderazurediagnostics = materialize(vaultunderazurediagnostics | distinct resourceid);\\nlet resourceidlistunderresourcespecific = materialize(vaultunderresourcespecific | distinct resourceid);\\nlet backupitemunderazurediagnostics = ()\\n{\\nlet sourcebackupitemtable = azurediagnostics\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where category == \"azurebackupreport\" and operationname == \"backupitem\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupitemprotectionstate = columnifexists(\"backupitemprotectionstate_s\", \"\"), backupitemappversion = columnifexists(\"backupitemappversion_s\", \"\"),secondarybackupprotectionstate = columnifexists(\"secondarybackupprotectionstate_s\", \"\"), backupitemname = columnifexists(\"backupitemname_s\", \"\"), backupitemfriendlyname = columnifexists(\"backupitemfriendlyname_s\", \"\"),\\nbackupitemtype = columnifexists(\"backupitemtype_s\", \"\"),  protectiongroupname = columnifexists(\"protectiongroupname_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid\\n//handle mab system state\\n// excluding secondarybackupprotectionstate, backupitemappversion, protectiongroupname\\n|  project backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupitemname = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), \"system state\", backupitemname), backupitemprotectionstate, backupitemappversion, secondarybackupprotectionstate, protectiongroupname, backupitemfriendlyname, backupitemtype, backupmanagementtype, timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\");\\nlet backupitemtable = extend_backupsolution(sourcebackupitemtable)\\n| where backupsolution in~ (_backupsolutionlist) or \\'*\\' in (_backupsolutionlist)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nvaultunderazurediagnostics | join   (\\n   backupitemtable \\n) on resourceid\\n| project-away resourceid1, timegenerated1;\\n};\\nlet backupitemunderresourcespecific = ()\\n{\\nlet sourcebackupitemtable = coreazurebackup\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where operationname == \"backupitem\" and state != \"deleted\"\\n//handle mab system state\\n// excluding secondarybackupprotectionstate, backupitemappversion, protectiongroupname\\n|  project backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupitemname = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), \"system state\", backupitemname), backupitemprotectionstate, backupitemappversion, secondarybackupprotectionstate, protectiongroupname, backupitemfriendlyname, backupitemtype, backupmanagementtype, timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\");\\nlet backupitemtable = extend_backupsolution(sourcebackupitemtable)\\n| where backupsolution in~ (_backupsolutionlist) or \\'*\\' in (_backupsolutionlist)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nvaultunderresourcespecific | join   (\\n   backupitemtable \\n) on resourceid\\n| project-away resourceid1, timegenerated1;\\n};\\nlet backupitemassociationunderazurediagnostics = ()\\n{\\n let backupitemassociationtable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"backupitemassociation\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"), protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"), \\nvaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), policyuniqueidguid = columnifexists(\"policyuniqueid_g\", \"\") , policyuniqueidstr = columnifexists(\"policyuniqueid_s\", \"\"),\\ntimegenerated, resourceid  \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// handle mab systemstate\\n// policyuniqueid can be either guid or string due to azurediagnostics behaviour\\n| project policyuniqueid = iff(policyuniqueidguid == \"\", policyuniqueidstr, policyuniqueidguid), backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupmanagementserveruniqueid, protectedcontaineruniqueid, vaultuniqueid, backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nbackupitemassociationtable\\n};\\nlet backupitemassociationunderresourcespecific = ()\\n{\\nlet backupitemassociationtable = coreazurebackup \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"backupitemassociation\" and state != \"deleted\"\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// handle mab systemstate\\n| project policyuniqueid, backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupmanagementserveruniqueid, protectedcontaineruniqueid, vaultuniqueid, backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nbackupitemassociationtable\\n};\\nlet backupitemassociationhistoryunderazurediagnostics = ()\\n{\\n let backupitemassociationtable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"backupitemassociation\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"), protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"), \\nvaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), policyuniqueidguid = columnifexists(\"policyuniqueid_g\", \"\"), policyuniqueidstr = columnifexists(\"policyuniqueid_s\", \"\"),\\ntimegenerated, resourceid  \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// handle mab systemstate\\n// policyuniqueid can be either guid or string due to azurediagnostics behaviour\\n| project policyuniqueid = iff(policyuniqueidguid == \"\", policyuniqueidstr, policyuniqueidguid), backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupmanagementserveruniqueid, protectedcontaineruniqueid, vaultuniqueid, backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nbackupitemassociationtable\\n};\\nlet backupitemassociationhistoryunderresourcespecific = ()\\n{\\nlet backupitemassociationtable = coreazurebackup \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"backupitemassociation\" and state != \"deleted\"\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// handle mab systemstate\\n| project policyuniqueid, backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupmanagementserveruniqueid, protectedcontaineruniqueid, vaultuniqueid, backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nbackupitemassociationtable\\n};\\nlet backupitemfrontendsizehistoryunderazurediagnostics = ()\\n{\\n let backupitemfrontendsizetable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"backupitemfrontendsizeconsumption\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemfrontendsize = todouble(columnifexists(\"backupitemfrontendsize_s\", \"\")), backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nbackupitemfrontendsizetable\\n};\\nlet backupitemfrontendsizehistoryunderresourcespecific = ()\\n{\\nlet backupitemfrontendsizetable = coreazurebackup \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"backupitemfrontendsizeconsumption\" and state != \"deleted\"\\n| project backupitemfrontendsize, backupitemuniqueid, backupmanagementtype, timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nbackupitemfrontendsizetable\\n};\\nlet backupitemfrontendsizeunderazurediagnostics = ()\\n{\\n let backupitemfrontendsizetable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"backupitemfrontendsizeconsumption\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemfrontendsize = todouble(columnifexists(\"backupitemfrontendsize_s\", \"\")), backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nbackupitemfrontendsizetable\\n};\\nlet backupitemfrontendsizeunderresourcespecific = ()\\n{\\nlet backupitemfrontendsizetable = coreazurebackup \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"backupitemfrontendsizeconsumption\" and state != \"deleted\"\\n| project backupitemfrontendsize, backupitemuniqueid, backupmanagementtype, timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nbackupitemfrontendsizetable\\n};\\nlet storageassociationhistoryunderazurediagnostics = ()\\n{\\n let storageassociationtable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"storageassociation\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n// not projecting protectedcontaineruniqueid - dpm/azurebackupserver protectedcontainer (incase of cluster) is node ps and not cluster ps\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), vaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), storageuniqueid = columnifexists(\"storageuniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"), storageconsumedinmbs = todouble(columnifexists(\"storageconsumedinmbs_s\", \"\")), \\nstorageallocatedinmbs = todouble(columnifexists(\"storageallocatedinmbs_s\", \"\")), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// providers like dpm, azurebackupserver has disk storage. filtering out cloud storage only.\\n| where split(storageuniqueid, \";\")[2] has \"cloud\"\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nstorageassociationtable\\n};\\nlet storageassociationhistoryunderresourcespecific = ()\\n{\\nlet storageassociationtable = addonazurebackupstorage \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now()) \\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"storageassociation\" and state != \"deleted\"\\n// not projecting protectedcontaineruniqueid - dpm/azurebackupserver protectedcontainer (incase of cluster) is node ps and not cluster ps\\n| project backupitemuniqueid, vaultuniqueid, backupmanagementserveruniqueid, storageuniqueid, storageconsumedinmbs, storageallocatedinmbs, backupmanagementtype, timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\") \\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// providers like dpm, azurebackupserver has disk storage. filtering out cloud storage only.\\n| where split(storageuniqueid, \";\")[2] has \"cloud\"\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nstorageassociationtable\\n};\\nlet storageassociationunderazurediagnostics = ()\\n{\\n let storageassociationtable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"storageassociation\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n// not projecting protectedcontaineruniqueid - dpm/azurebackupserver protectedcontainer (incase of cluster) is node ps and not cluster ps\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), vaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), storageuniqueid = columnifexists(\"storageuniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"), storageconsumedinmbs = todouble(columnifexists(\"storageconsumedinmbs_s\", \"\")), \\nstorageallocatedinmbs = todouble(columnifexists(\"storageallocatedinmbs_s\", \"\")), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// providers like dpm, azurebackupserver has disk storage. filtering out cloud storage only.\\n| where split(storageuniqueid, \";\")[2] has \"cloud\"\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nstorageassociationtable\\n};\\nlet storageassociationunderresourcespecific = ()\\n{\\nlet storageassociationtable = addonazurebackupstorage \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"storageassociation\" and state != \"deleted\"\\n// not projecting protectedcontaineruniqueid - dpm/azurebackupserver protectedcontainer (incase of cluster) is node ps and not cluster ps\\n| project backupitemuniqueid, vaultuniqueid, backupmanagementserveruniqueid, storageuniqueid, storageconsumedinmbs, storageallocatedinmbs, backupmanagementtype, timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// providers like dpm, azurebackupserver has disk storage. filtering out cloud storage only.\\n| where split(storageuniqueid, \";\")[2] has \"cloud\"\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nstorageassociationtable\\n};\\nlet protectedcontainerunderazurediagnostics = ()\\n{\\nlet protectedcontainertable = azurediagnostics\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where category == \"azurebackupreport\" and operationname == \"protectedcontainer\"  and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"),  protectedcontainerfriendlyname = columnifexists(\"protectedcontainerfriendlyname_s\", \"\"), agentversion = columnifexists(\"agentversion_s\", \"\"),\\nprotectedcontainerostype = columnifexists(\"protectedcontainerostype_s\", \"\"), protectedcontainerosversion = columnifexists(\"protectedcontainerosversion_s\", \"\"), protectedcontainerworkloadtype = columnifexists(\"protectedcontainerworkloadtype_s\", \"\"),  protectedcontainername = columnifexists(\"protectedcontainername_s\", \"\"), protectedcontainerprotectionstate = columnifexists(\"protectedcontainerprotectionstate_s\", \"\"), protectedcontainerlocation = columnifexists(\"protectedcontainerlocation_s\", \"\"), protectedcontainertype = columnifexists(\"protectedcontainertype_s\", \"\"),\\nbackupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by protectedcontaineruniqueid;\\nvaultunderazurediagnostics | join   (\\n   protectedcontainertable \\n) on resourceid\\n| project-away resourceid1, timegenerated1;\\n};\\nlet protectedcontainerunderresourcespecific = ()\\n{\\nlet protectedcontainertable = coreazurebackup\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where operationname == \"protectedcontainer\" and state != \"deleted\"\\n| project protectedcontaineruniqueid,  protectedcontainerfriendlyname, agentversion,\\nprotectedcontainerostype, protectedcontainerosversion, protectedcontainerworkloadtype,  protectedcontainername, protectedcontainerprotectionstate, protectedcontainerlocation, protectedcontainertype,\\nbackupmanagementtype, timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by protectedcontaineruniqueid;\\nvaultunderresourcespecific | join   (\\n   protectedcontainertable \\n) on resourceid\\n| project-away resourceid1, timegenerated1;\\n};\\nlet protectedinstanceunderazurediagnostics = (isprotectedcontainerbillingtype:bool)\\n{\\n let protectedinstancetable = azurediagnostics \\n| where category == \"azurebackupreport\" and operationname == \"protectedinstance\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"),\\n protectedinstancecount = toint(columnifexists(\"protectedinstancecount_s\", \"\")), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where (backupitemuniqueid == \"\" and isprotectedcontainerbillingtype) or (protectedcontaineruniqueid == \"\" and not(isprotectedcontainerbillingtype))\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid,\\n protectedinstancecount = iff((backupmanagementtype == \"azurestorage\" and timegenerated <= azurestorageprotectedinstancecountcutoffdate), 0, protectedinstancecount), backupmanagementtype, timegenerated, resourceid\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid;\\nprotectedinstancetable\\n};\\nlet protectedinstanceunderresourcespecific = (isprotectedcontainerbillingtype:bool)\\n{\\nlet protectedinstancetable = addonazurebackupprotectedinstance \\n| where operationname == \"protectedinstance\" and state != \"deleted\"\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where (backupitemuniqueid == \"\" and isprotectedcontainerbillingtype) or (protectedcontaineruniqueid == \"\" and not(isprotectedcontainerbillingtype))\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid,\\n protectedinstancecount = iff((backupmanagementtype == \"azurestorage\" and timegenerated <= azurestorageprotectedinstancecountcutoffdate), 0, protectedinstancecount), backupmanagementtype, timegenerated, resourceid\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid;\\nprotectedinstancetable\\n};\\nlet protectedinstancehistoryunderazurediagnostics = (isprotectedcontainerbillingtype:bool)\\n{\\n let protectedinstancetable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"protectedinstance\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"),\\n protectedinstancecount = toint(columnifexists(\"protectedinstancecount_s\", \"\")), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\") \\n| where (backupitemuniqueid == \"\" and isprotectedcontainerbillingtype) or (protectedcontaineruniqueid == \"\" and not(isprotectedcontainerbillingtype))\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid,\\n protectedinstancecount = iff((backupmanagementtype == \"azurestorage\" and timegenerated <= azurestorageprotectedinstancecountcutoffdate), 0, protectedinstancecount), backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid, timerangeendday = startofday(timegenerated);\\nprotectedinstancetable\\n};\\nlet protectedinstancehistoryunderresourcespecific = (isprotectedcontainerbillingtype:bool)\\n{\\nlet protectedinstancetable = addonazurebackupprotectedinstance \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"protectedinstance\" and state != \"deleted\"\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| where (backupitemuniqueid == \"\" and isprotectedcontainerbillingtype) or (protectedcontaineruniqueid == \"\" and not(isprotectedcontainerbillingtype))\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid,\\n protectedinstancecount = iff((backupmanagementtype == \"azurestorage\" and timegenerated <= azurestorageprotectedinstancecountcutoffdate), 0, protectedinstancecount), backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid, timerangeendday = startofday(timegenerated)\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid, backupmanagementtype, resourceid, timegenerated, protectedinstancecount, timerangeendday;\\nprotectedinstancetable\\n};\\n// businesslogic\\nlet latestbackupitemdimensiontable = () {union isfuzzy = true \\n(backupitemunderazurediagnostics()),\\n(backupitemunderresourcespecific())\\n| where backupitemuniqueid != \"\"\\n// to show as per as on \\'asonday\\'\\n| where startofday(timegenerated) == asonday\\n| summarize arg_max(timegenerated, *)  by backupitemuniqueid\\n| where isempty(_billinggroupname) or _billinggroupname == \"*\" or  backupitemfriendlyname contains (_billinggroupname)\\n| extend backupitemprotectionstate = iff(backupitemprotectionstate in (\"protected\", \"activelyprotected\",\"protectionerror\"), \"protected\", iff(backupitemprotectionstate in (\"irpending\"), \"initialbackuppending\", iff(isnotempty(backupitemprotectionstate),\"protectionstopped\",backupitemprotectionstate)))\\n//| where backupitemprotectionstate in~ (_protectioninfolist) or \\'*\\' in (_protectioninfolist)\\n| project backupitemuniqueid,  backupitemname, backupitemfriendlyname, backupmanagementtype, backupitemtype, backupsolution, backupitemprotectionstate,\\nstoragereplicationtype, resourceid, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter};\\nlet totalbackupitemdimensiontable = () {union isfuzzy = true \\n(backupitemunderazurediagnostics()),\\n(backupitemunderresourcespecific())\\n| summarize arg_max(timegenerated, *)   by backupitemuniqueid\\n| where isempty(_billinggroupname) or _billinggroupname == \"*\" or  backupitemfriendlyname contains (_billinggroupname)\\n| extend backupitemprotectionstate = iff(backupitemprotectionstate in (\"protected\", \"activelyprotected\",\"protectionerror\"), \"protected\", iff(backupitemprotectionstate in (\"irpending\"), \"initialbackuppending\", iff(isnotempty(backupitemprotectionstate),\"protectionstopped\",backupitemprotectionstate)))\\n//| where backupitemprotectionstate in~ (_protectioninfolist) or \\'*\\' in (_protectioninfolist)\\n| project backupitemuniqueid,  backupitemname, backupitemfriendlyname, backupmanagementtype, backupitemtype, backupsolution, backupitemprotectionstate,\\nstoragereplicationtype, resourceid, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter};\\nlet bi_combinationunderazurediagnostics = ()\\n{\\nlet base = () {protectedcontainerunderazurediagnostics | distinct protectedcontainername, protectedcontainerfriendlyname, protectedcontaineruniqueid \\n| join kind= rightouter  (\\n    backupitemassociationunderazurediagnostics \\n\\t// to show as per as on \\'asonday\\'\\n\\t| where startofday(timegenerated) == asonday\\n\\t| project protectedcontaineruniqueid, backupitemuniqueid, backupmanagementserveruniqueid, policyuniqueid, timegenerated, resourceid\\n) on protectedcontaineruniqueid \\n| project backupitemuniqueid, protectedcontaineruniqueid = protectedcontaineruniqueid1, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, timegenerated, resourceid\\n};\\nlet base_size = ()\\n{\\nbase\\n| join kind= leftouter (\\n   backupitemfrontendsizeunderazurediagnostics | where startofday(timegenerated) == asonday | project backupitemfrontendsize, backupitemuniqueid, timegenerated \\n) on backupitemuniqueid\\n// using leftouter due to azurestorage - storageconsumption table is not emitted. inner join will exclude azurestorage backupitems.\\n| join kind= leftouter (\\n   storageassociationunderazurediagnostics | where startofday(timegenerated) == asonday | project storageconsumedinmbs, backupitemuniqueid, timegenerated\\n) on backupitemuniqueid\\n| project backupitemuniqueid, protectedcontaineruniqueid, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, backupitemfrontendsize,\\n storageconsumedinmbs, timegenerated, resourceid\\n};\\nbase_size\\n};\\nlet bi_combinationunderresourcespecific = ()\\n{\\nlet base = () {protectedcontainerunderresourcespecific | distinct protectedcontainername, protectedcontainerfriendlyname, protectedcontaineruniqueid \\n| join kind= rightouter  (\\n    backupitemassociationunderresourcespecific \\n\\t// to show as per as on \\'asonday\\'\\n\\t| where startofday(timegenerated) == asonday\\n\\t| project protectedcontaineruniqueid, backupitemuniqueid, backupmanagementserveruniqueid, policyuniqueid, timegenerated, resourceid\\n) on protectedcontaineruniqueid \\n| project backupitemuniqueid, protectedcontaineruniqueid = protectedcontaineruniqueid1, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, timegenerated, resourceid\\n};\\nlet base_size = ()\\n{\\nbase\\n| join kind= leftouter (\\n   backupitemfrontendsizeunderresourcespecific | where startofday(timegenerated) == asonday | project backupitemfrontendsize, backupitemuniqueid, timegenerated \\n) on backupitemuniqueid\\n// using leftouter due to azurestorage - storageconsumption table is not emitted. inner join will exclude azurestorage backupitems.\\n| join kind= leftouter (\\n   storageassociationunderresourcespecific | where startofday(timegenerated) == asonday | project storageconsumedinmbs, backupitemuniqueid, timegenerated\\n) on backupitemuniqueid\\n| project backupitemuniqueid, protectedcontaineruniqueid, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, backupitemfrontendsize,\\n storageconsumedinmbs, timegenerated, resourceid\\n};\\nbase_size\\n};\\nlet bi_historycombinationunderazurediagnostics = ()\\n{\\t\\n\\tlet base = ()\\n\\t{\\n\\tprotectedcontainerunderazurediagnostics | distinct protectedcontainername, protectedcontainerfriendlyname, protectedcontaineruniqueid \\n\\t| join  kind= rightouter  (\\n\\t\\tbackupitemassociationhistoryunderazurediagnostics |  project protectedcontaineruniqueid, backupitemuniqueid, backupmanagementserveruniqueid, policyuniqueid, timegenerated, timerangeendday, resourceid\\n\\t) on protectedcontaineruniqueid\\n\\t| project backupitemuniqueid, protectedcontaineruniqueid = protectedcontaineruniqueid1, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, timegenerated, timerangeendday, resourceid\\n\\t};\\n\\tlet base_size = ()\\n\\t{\\n\\tbase\\n\\t| join kind= leftouter (\\n\\t   backupitemfrontendsizehistoryunderazurediagnostics | project backupitemfrontendsize, backupitemuniqueid, timegenerated, timerangeendday \\n\\t) on backupitemuniqueid, timerangeendday\\n\\t// using leftouter due to azurestorage - storageconsumption table is not emitted. inner join will exclude azurestorage backupitems.\\n\\t| join kind= leftouter (\\n\\t   storageassociationhistoryunderazurediagnostics | project storageconsumedinmbs, backupitemuniqueid, timegenerated, timerangeendday\\n\\t) on backupitemuniqueid, timerangeendday\\n\\t| project backupitemuniqueid, protectedcontaineruniqueid, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, backupitemfrontendsize,\\n\\t storageconsumedinmbs, timegenerated, timerangeendday, resourceid\\n\\t};\\nbase_size\\n};\\nlet bi_historycombinationunderresourcespecific = ()\\n{\\n\\tlet base = ()\\n\\t{\\n\\tprotectedcontainerunderresourcespecific | distinct protectedcontainername, protectedcontainerfriendlyname, protectedcontaineruniqueid \\n\\t| join  kind= rightouter  (\\n\\t\\tbackupitemassociationhistoryunderresourcespecific |  project protectedcontaineruniqueid, backupitemuniqueid, backupmanagementserveruniqueid, policyuniqueid, timegenerated, timerangeendday, resourceid\\n\\t) on protectedcontaineruniqueid\\n\\t| project backupitemuniqueid, protectedcontaineruniqueid = protectedcontaineruniqueid1, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, timegenerated, timerangeendday, resourceid\\n\\t};\\n\\tlet base_size = ()\\n\\t{\\n\\tbase\\n\\t| join kind= leftouter (\\n\\t   backupitemfrontendsizehistoryunderresourcespecific | project backupitemfrontendsize, backupitemuniqueid, timegenerated, timerangeendday \\n\\t) on backupitemuniqueid, timerangeendday\\n\\t// using leftouter due to azurestorage - storageconsumption table is not emitted. inner join will exclude azurestorage backupitems.\\n\\t| join kind= leftouter (\\n\\t   storageassociationhistoryunderresourcespecific | project storageconsumedinmbs, backupitemuniqueid, timegenerated, timerangeendday\\n\\t) on backupitemuniqueid, timerangeendday\\n\\t| project backupitemuniqueid, protectedcontaineruniqueid, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, backupitemfrontendsize,\\n\\t storageconsumedinmbs, timegenerated, timerangeendday, resourceid\\n\\t};\\n\\tbase_size\\n};\\nlet latestbackupitemassociationandstorageconsumptiontable = ()\\n{\\nlatestbackupitemdimensiontable | join \\n(union isfuzzy = true  \\n(bi_combinationunderazurediagnostics() | where _excludelegacyevent == false),\\n(bi_combinationunderresourcespecific())\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid\\n)on backupitemuniqueid\\n| where isempty(_billinggroupname) or _billinggroupname == \"*\" or protectedcontainerfriendlyname contains (_billinggroupname)\\n| project backupitemuniqueid, backupitemname, backupitemfriendlyname, backupmanagementtype, backupitemtype, backupsolution, backupitemprotectionstate,\\nvaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, timegenerated,  resourceid,  protectedcontaineruniqueid, protectedcontainername, protectedcontainerfriendlyname, policyuniqueid, backupitemfrontendsize, storageconsumedinmbs, backupmanagementserveruniqueid, storagereplicationtype, timerangeendday = startofday(timegenerated)\\n};\\nlet latestbackupitemassociationandstorageconsumptionhistorytable = () \\n{\\ntotalbackupitemdimensiontable | join  \\n(union isfuzzy = true  \\n(bi_historycombinationunderazurediagnostics() | where _excludelegacyevent == false),\\n(bi_historycombinationunderresourcespecific())\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday)\\n  on backupitemuniqueid\\n| where isempty(_billinggroupname) or _billinggroupname == \"*\" or protectedcontainerfriendlyname contains (_billinggroupname)\\n| project backupitemuniqueid, backupitemname, backupitemfriendlyname, backupmanagementtype, backupitemtype, backupsolution, backupitemprotectionstate,\\nvaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, timegenerated,  resourceid,  protectedcontaineruniqueid, protectedcontainername, protectedcontainerfriendlyname, policyuniqueid, backupitemfrontendsize, storageconsumedinmbs, backupmanagementserveruniqueid, storagereplicationtype, timerangeendday\\n};\\nlet latestprotectedcontainerhistoryinfotableexcludingdpmvms = (){\\nlatestbackupitemassociationandstorageconsumptionhistorytable \\n| where not((backupmanagementtype has \"dpm\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"dpm\" and backupitemtype has \"hypervvm\") \\nor (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"hypervvm\"))\\n| summarize storageconsumedinmbs = sum(storageconsumedinmbs), backupitemfrontendsize = sum(backupitemfrontendsize), protectedcontainername = any(protectedcontainername), protectedcontainerfriendlyname = any(protectedcontainerfriendlyname), custombackupmanagementtype = iff((any(backupmanagementtype) has \"azureworkload\"), any(strcat(backupmanagementtype, \"/\", backupitemtype)), any(backupmanagementtype)), backupmanagementtype = any(backupmanagementtype), backupsolution = any(backupsolution),  vaultuniqueid = any(vaultuniqueid), vaultname = any(vaultname), vaulttags = any(vaulttags), subscriptionid = any(subscriptionid), resourcegroupname = any(resourcegroupname), azuredatacenter = any(azuredatacenter), storagereplicationtype = any(storagereplicationtype), resourceid = any(resourceid), timegenerated = any(timegenerated) by  protectedcontaineruniqueid,  timerangeendday\\n};\\nlet latestprotectedcontainerinfotableexcludingdpmvms = (){\\n// projecting timerangeday to distill the report for rangeendday\\nlatestbackupitemassociationandstorageconsumptiontable\\n| where not((backupmanagementtype has \"dpm\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"dpm\" and backupitemtype has \"hypervvm\") \\nor (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"hypervvm\"))\\n// custombackupmanagementtype needed to distinguish \\'azureworkload\\' \\n| summarize storageconsumedinmbs = sum(storageconsumedinmbs), backupitemfrontendsize = sum(backupitemfrontendsize), protectedcontainername = any(protectedcontainername), protectedcontainerfriendlyname= any(protectedcontainerfriendlyname), custombackupmanagementtype = iff((any(backupmanagementtype) has \"azureworkload\"), any(strcat(backupmanagementtype, \"/\", backupitemtype)), any(backupmanagementtype)),\\nbackupmanagementtype = any(backupmanagementtype), backupsolution = any(backupsolution), vaultuniqueid = any(vaultuniqueid), vaultname = any(vaultname), vaulttags = any(vaulttags), subscriptionid = any(subscriptionid), resourcegroupname = any(resourcegroupname), azuredatacenter = any(azuredatacenter), storagereplicationtype = any(storagereplicationtype), resourceid = any(resourceid), timegenerated = any(timegenerated), timerangeendday = startofday(any(timegenerated)) by  protectedcontaineruniqueid\\n};\\nlet totalprotectedinstancehistorytable = (isprotectedcontainerbillingtype:bool) \\n{union isfuzzy = true \\n(protectedinstancehistoryunderazurediagnostics(isprotectedcontainerbillingtype) | where _excludelegacyevent == false),\\n(protectedinstancehistoryunderresourcespecific(isprotectedcontainerbillingtype))\\n// protectedinstance is at billinggroup level. custombackupmanagementtype can be the filter used.\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid, timerangeendday\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementtype, resourceid, timegenerated, protectedinstancecount, timerangeendday\\n};\\nlet latestprotectedinstancetable = (isprotectedcontainerbillingtype:bool) \\n{union isfuzzy = true \\n(protectedinstanceunderazurediagnostics(isprotectedcontainerbillingtype) | where _excludelegacyevent == false),\\n(protectedinstanceunderresourcespecific(isprotectedcontainerbillingtype))\\n| where startofday(timegenerated) == asonday\\n// protectedinstance is at billinggroup level. custombackupmanagementtype can be the filter used.\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementtype, resourceid, timegenerated, protectedinstancecount, timerangeendday = startofday(timegenerated)\\n};\\nlet latestprotectedinstancehistorytablefromprotectedcontaineruniqueid = ()\\n{ \\ntotalprotectedinstancehistorytable(true) \\n| join kind= rightouter (latestprotectedcontainerhistoryinfotableexcludingdpmvms) on protectedcontaineruniqueid, timerangeendday\\n| project timerangeendday = timerangeendday1, timegenerated = timegenerated1, protectedinstancecount, backupitemfrontendsize, storageconsumedinmbs, backupmanagementtype = backupmanagementtype1, backupsolution, custombackupmanagementtype, billinggrouptype = \"datasourceset\", billinggroupfriendlyname = protectedcontainerfriendlyname, billinggroupuniqueid = protectedcontaineruniqueid1, billinggroupname = protectedcontainername, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter,\\nstoragereplicationtype, resourceid\\n};\\nlet latestprotectedinstancetablefromprotectedcontaineruniqueid = ()\\n{ \\nlatestprotectedinstancetable(true)\\n| join kind= rightouter (latestprotectedcontainerinfotableexcludingdpmvms ) on protectedcontaineruniqueid\\n| project timerangeendday = timerangeendday1, timegenerated = timegenerated1, protectedinstancecount, backupitemfrontendsize, storageconsumedinmbs, backupmanagementtype = backupmanagementtype1, backupsolution, custombackupmanagementtype, billinggrouptype = \"datasourceset\", billinggroupfriendlyname = protectedcontainerfriendlyname,  billinggroupuniqueid = protectedcontaineruniqueid1, billinggroupname = protectedcontainername, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter,\\nstoragereplicationtype, resourceid\\n};\\nlet latestprotectedinstancehistorytablefrombackupitemuniqueid = ()\\n{ \\n(totalprotectedinstancehistorytable(false) \\n| where backupmanagementtype in (\"dpm\",\"azurebackupserver\"))\\n| join kind= rightouter (latestbackupitemassociationandstorageconsumptionhistorytable | where ((backupmanagementtype has \"dpm\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"dpm\" and backupitemtype has \"hypervvm\") \\n or (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"hypervvm\"))\\n | extend custombackupmanagementtype = backupmanagementtype) on backupitemuniqueid, timerangeendday\\n| project timerangeendday = timerangeendday1, timegenerated = timegenerated1, protectedinstancecount, backupitemfrontendsize, storageconsumedinmbs, custombackupmanagementtype, backupmanagementtype, backupsolution, billinggrouptype = \"datasource\", billinggroupfriendlyname = backupitemfriendlyname, billinggroupuniqueid = backupitemuniqueid1, billinggroupname = backupitemname, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, storagereplicationtype, resourceid\\n};\\nlet latestprotectedinstancetablefrombackupitemuniqueid = ()\\n{ \\n(latestprotectedinstancetable(false)\\n| where backupmanagementtype in (\"dpm\",\"azurebackupserver\"))\\n| join kind= rightouter \\n// applicable only for dpm vm scenarios\\n(latestbackupitemassociationandstorageconsumptiontable | where ((backupmanagementtype has \"dpm\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"dpm\" and backupitemtype has \"hypervvm\") \\nor (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"hypervvm\"))\\n| extend custombackupmanagementtype = backupmanagementtype) on backupitemuniqueid\\n| project timerangeendday = timerangeendday1, timegenerated = timegenerated1, protectedinstancecount, backupitemfrontendsize, storageconsumedinmbs, backupmanagementtype, custombackupmanagementtype, backupsolution, billinggrouptype = \"datasource\", billinggroupfriendlyname = backupitemfriendlyname, \\n billinggroupuniqueid = backupitemuniqueid1, billinggroupname = backupitemname, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, storagereplicationtype, resourceid\\n};\\n// special handling for dpm, azurebackupserver cluster scenario - node ps has protectedinstance, whereas cluster ps has storage consumption\\nlet latestprotectedinstancehistorytablefromdpmnodeprotectedcontaineruniqueid = ()\\n{ \\n((totalprotectedinstancehistorytable(true) \\n| where backupmanagementtype in (\"dpm\",\"azurebackupserver\")\\n| where protectedinstancecount > 0)\\n| join kind= leftanti (latestprotectedcontainerhistoryinfotableexcludingdpmvms ) on protectedcontaineruniqueid, timerangeendday\\n| project protectedcontaineruniqueid, backupmanagementtype, resourceid, timegenerated, protectedinstancecount, timerangeendday)\\n| join (\\nunion isfuzzy = true  \\n(protectedcontainerunderazurediagnostics() | where _excludelegacyevent == false),\\n(protectedcontainerunderresourcespecific())\\n| where backupmanagementtype in (\"dpm\",\"azurebackupserver\")\\n| where isempty(_billinggroupname) or _billinggroupname == \"*\" or protectedcontainerfriendlyname contains (_billinggroupname)\\n| summarize arg_max(timegenerated, *) by protectedcontaineruniqueid)\\n  on protectedcontaineruniqueid\\n  // backupitemfrontendsize and storageconsumed will be 0.0 as the same will be calculated at cluster level \\n  // as it is dpm or azurebackupserver, no extra handling needed for azureworkload\\n  // ideally the timegenerated field should come from backupitem/protectedcontainer. this is a special case and we are getting the container properties from latest table and not from history table.\\n| project timerangeendday, timegenerated, protectedinstancecount, backupitemfrontendsize = 0.0, storageconsumedinmbs = 0.0, backupmanagementtype, custombackupmanagementtype = backupmanagementtype, \\nbackupsolution = iff(backupmanagementtype == \"azurebackupserver\", \"azure backup server\", \"dpm\"), billinggrouptype = \"datasourceset\", billinggroupfriendlyname = protectedcontainerfriendlyname, \\n billinggroupuniqueid = protectedcontaineruniqueid, billinggroupname = protectedcontainername, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, storagereplicationtype, resourceid\\n};\\n// special handling for dpm, azurebackupserver cluster scenario - node ps has protectedinstance, whereas cluster ps has storage consumption\\nlet latestprotectedinstancetablefromdpmnodeprotectedcontaineruniqueid = ()\\n{ \\n(\\n(latestprotectedinstancetable(true)\\n| where backupmanagementtype in (\"dpm\",\"azurebackupserver\")\\n| where protectedinstancecount > 0)\\n| join kind= leftanti (latestprotectedcontainerinfotableexcludingdpmvms ) on protectedcontaineruniqueid\\n| project protectedcontaineruniqueid, backupmanagementtype, resourceid, timegenerated, protectedinstancecount, timerangeendday)\\n| join (\\nunion isfuzzy = true  \\n(protectedcontainerunderazurediagnostics() | where _excludelegacyevent == false),\\n(protectedcontainerunderresourcespecific())\\n| where backupmanagementtype in (\"dpm\",\"azurebackupserver\")\\n| where isempty(_billinggroupname) or _billinggroupname == \"*\" or protectedcontainerfriendlyname contains (_billinggroupname)\\n| summarize arg_max(timegenerated, *) by protectedcontaineruniqueid)\\n  on protectedcontaineruniqueid\\n  // backupitemfrontendsize and storageconsumed will be 0.0 as the same will be calculated at cluster level \\n  // as it is dpm or azurebackupserver, no extra handling needed for azureworkload\\n  // ideally the timegenerated field should come from backupitem/protectedcontainer. this is a special case and we are getting the container properties from latest table and not from history table.\\n| project timerangeendday, timegenerated, protectedinstancecount, backupitemfrontendsize = 0.0, storageconsumedinmbs = 0.0, backupmanagementtype, custombackupmanagementtype = backupmanagementtype,\\n  backupsolution = iff(backupmanagementtype == \"azurebackupserver\", \"azure backup server\", \"dpm\"), billinggrouptype = \"datasourceset\", billinggroupfriendlyname = protectedcontainerfriendlyname, \\n billinggroupuniqueid = protectedcontaineruniqueid, billinggroupname = protectedcontainername, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, storagereplicationtype, resourceid\\n};\\nlet protectedinstancehistorymetric = ( )\\n{ union \\n(latestprotectedinstancehistorytablefromprotectedcontaineruniqueid()),\\n(latestprotectedinstancehistorytablefrombackupitemuniqueid()),\\n(latestprotectedinstancehistorytablefromdpmnodeprotectedcontaineruniqueid)\\n| where backupsolution in~ (_backupsolutionlist) or \\'*\\' in (_backupsolutionlist)\\n| project  custombackupmanagementtype, backupitemfrontendsize, storageconsumedinmbs, billinggroupuniqueid, billinggroupfriendlyname, billinggroupname, protectedinstancecount, billinggrouptype, timerangeendday, timegenerated, backupmanagementtype, backupsolution, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, storagereplicationtype, resourceid\\n};\\nlet protectedinstancemetric = ( ) \\n{ union \\n(latestprotectedinstancetablefrombackupitemuniqueid() ),\\n(latestprotectedinstancetablefromprotectedcontaineruniqueid()),\\n(latestprotectedinstancetablefromdpmnodeprotectedcontaineruniqueid)\\n| where backupsolution in~ (_backupsolutionlist) or \\'*\\' in (_backupsolutionlist)\\n| project  custombackupmanagementtype, backupmanagementtype, backupsolution, backupitemfrontendsize, storageconsumedinmbs, protectedinstancecount, billinggroupuniqueid, billinggroupfriendlyname, billinggroupname, billinggrouptype, timerangeendday, timegenerated, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, storagereplicationtype, resourceid\\n};\\nlet finaltable = () {union (protectedinstancemetric | where (_rangeend-_rangestart == 1d)), (protectedinstancehistorymetric | where (_rangeend-_rangestart > 1d))\\n};\\n// display tweaks for afs and null protectedinstancecount\\n// billing entity is at backupmanagementtype level and not at ds level. \\nlet finaltable_v1vault = () {finaltable\\n| project custombackupmanagementtype, backupmanagementtype, backupsolution, protectedinstancecount = iff(isempty(protectedinstancecount), 0.0 ,todouble(protectedinstancecount)/10), storageconsumedinmbs = iff(isempty(storageconsumedinmbs), todouble(0), todouble(storageconsumedinmbs)), backupitemfrontendsize = iff(isempty(backupitemfrontendsize), todouble(0), todouble(backupitemfrontendsize)), billinggroupuniqueid, billinggrouptype, billinggroupname, billinggroupfriendlyname, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, resourceid, storagereplicationtype, protectedcontainername, timegenerated\\n| project uniqueid = billinggroupuniqueid, name = billinggroupname, type = billinggrouptype, friendlyname = billinggroupfriendlyname,  sourcesizeinmbs = backupitemfrontendsize, extendedproperties = pack(\"protectedinstancecount\", protectedinstancecount), vaultstore_storageconsumptioninmbs = storageconsumedinmbs,  backupsolution,  vaultuniqueid, vaultname, vaultresourceid = resourceid, vaultsubscriptionid = subscriptionid, vaultlocation = azuredatacenter, vaultstore_storagereplicationtype = storagereplicationtype, vaulttags, vaulttype = \"microsoft.recoveryservices/vaults\", timegenerated};\\n// finaltable_dppvault to be added later\\nfinaltable_v1vault \\n| where \"microsoft.recoveryservices/vaults\" in~ (_vaulttypelist) or \\'*\\' in (_vaulttypelist)'}]}}, 'initialize_variable-billinggrouptrendfunction': {'runafter': {'initialize_variable-billinggroupfunction': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'billinggrouptrendfunction', 'type': 'string', 'value': '@{variables(\\'workspacestoquery_custom\\')}\\n@{variables(\\'reportfilter_trend\\')}\\nlet _billinggroupname = \"*\";\\n//other vars\\nlet asonday =  _rangeend-1d;\\nlet azurestoragecutoffdate = datetime(6/01/2020, 12:00:00.000 am);\\nlet azurestorageprotectedinstancecountcutoffdate = datetime(2/01/2021, 12:00:00.000 am);\\n// helperfunctions\\nlet extend_backupsolution = (t:(backupmanagementtype:string, backupitemtype:string))\\n{\\nt | extend backupsolution = iff(backupmanagementtype == \"iaasvm\", \"azure virtual machine backup\", \\niff(backupmanagementtype == \"mab\", \"azure backup agent\", \\niff(backupmanagementtype == \"dpm\", \"dpm\", \\niff(backupmanagementtype == \"azurebackupserver\", \"azure backup server\", \\niff(backupmanagementtype == \"azurestorage\", \"azure storage (azure files) backup\", \\niff(backupmanagementtype == \"azureworkload\" and backupitemtype == \"sqldatabase\", \"sql in azure vm backup\", \\niff(backupmanagementtype == \"azureworkload\" and backupitemtype == \"saphanadatabase\", \"sap hana in azure vm backup\", \"\")))))))\\n};\\n// source tables\\nlet vaultunderazurediagnostics = ()\\n{\\nazurediagnostics\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where category == \"azurebackupreport\" and operationname == \"vault\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\"\\n| project vaultname = columnifexists(\"vaultname_s\", \"\"), vaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), vaulttags = columnifexists(\"vaulttags_s\", \"\"), azuredatacenter =  columnifexists(\"azuredatacenter_s\", \"\"), resourcegroupname =  columnifexists(\"resourcegroupname_s\", \"\"), subscriptionid = toupper(subscriptionid), storagereplicationtype = columnifexists(\"storagereplicationtype_s\", \"\"), resourceid, timegenerated \\n| where subscriptionid in~ (_vaultsubscriptionlist) or \\'*\\' in (_vaultsubscriptionlist)\\n| where azuredatacenter in~ (_vaultlocationlist) or \\'*\\' in (_vaultlocationlist)\\n| where vaultname in~  (_vaultlist) or \\'*\\' in (_vaultlist)\\n| summarize arg_max(timegenerated, *) by resourceid\\n| project storagereplicationtype, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, resourceid, timegenerated\\n};\\nlet vaultunderresourcespecific = ()\\n{\\ncoreazurebackup\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where operationname == \"vault\" \\n| project storagereplicationtype, vaultuniqueid, vaultname, vaulttags, subscriptionid = toupper(subscriptionid), resourcegroupname, azuredatacenter, resourceid, timegenerated \\n| where subscriptionid in~ (_vaultsubscriptionlist) or \\'*\\' in (_vaultsubscriptionlist)\\n| where azuredatacenter in~ (_vaultlocationlist) or \\'*\\' in (_vaultlocationlist)\\n| where vaultname in~  (_vaultlist) or \\'*\\' in (_vaultlist)\\n| summarize arg_max(timegenerated, *) by resourceid\\n};\\nlet resourceidlistunderazurediagnostics = materialize(vaultunderazurediagnostics | distinct resourceid);\\nlet resourceidlistunderresourcespecific = materialize(vaultunderresourcespecific | distinct resourceid);\\nlet backupitemunderazurediagnostics = ()\\n{\\nlet sourcebackupitemtable = azurediagnostics\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where category == \"azurebackupreport\" and operationname == \"backupitem\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupitemprotectionstate = columnifexists(\"backupitemprotectionstate_s\", \"\"), backupitemappversion = columnifexists(\"backupitemappversion_s\", \"\"),secondarybackupprotectionstate = columnifexists(\"secondarybackupprotectionstate_s\", \"\"), backupitemname = columnifexists(\"backupitemname_s\", \"\"), backupitemfriendlyname = columnifexists(\"backupitemfriendlyname_s\", \"\"),\\nbackupitemtype = columnifexists(\"backupitemtype_s\", \"\"),  protectiongroupname = columnifexists(\"protectiongroupname_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid\\n//handle mab system state\\n// excluding secondarybackupprotectionstate, backupitemappversion, protectiongroupname\\n|  project backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupitemname = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), \"system state\", backupitemname), backupitemprotectionstate, backupitemappversion, secondarybackupprotectionstate, protectiongroupname, backupitemfriendlyname, backupitemtype, backupmanagementtype, timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\");\\nlet backupitemtable = extend_backupsolution(sourcebackupitemtable)\\n| where backupsolution in~ (_backupsolutionlist) or \\'*\\' in (_backupsolutionlist)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nvaultunderazurediagnostics | join   (\\n   backupitemtable \\n) on resourceid\\n| project-away resourceid1, timegenerated1;\\n};\\nlet backupitemunderresourcespecific = ()\\n{\\nlet sourcebackupitemtable = coreazurebackup\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where operationname == \"backupitem\" and state != \"deleted\"\\n//handle mab system state\\n// excluding secondarybackupprotectionstate, backupitemappversion, protectiongroupname\\n|  project backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupitemname = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), \"system state\", backupitemname), backupitemprotectionstate, backupitemappversion, secondarybackupprotectionstate, protectiongroupname, backupitemfriendlyname, backupitemtype, backupmanagementtype, timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\");\\nlet backupitemtable = extend_backupsolution(sourcebackupitemtable)\\n| where backupsolution in~ (_backupsolutionlist) or \\'*\\' in (_backupsolutionlist)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nvaultunderresourcespecific | join   (\\n   backupitemtable \\n) on resourceid\\n| project-away resourceid1, timegenerated1;\\n};\\nlet backupitemassociationunderazurediagnostics = ()\\n{\\n let backupitemassociationtable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"backupitemassociation\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"), protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"), \\nvaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), policyuniqueidguid = columnifexists(\"policyuniqueid_g\", \"\") , policyuniqueidstr = columnifexists(\"policyuniqueid_s\", \"\"),\\ntimegenerated, resourceid  \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// handle mab systemstate\\n// policyuniqueid can be either guid or string due to azurediagnostics behaviour\\n| project policyuniqueid = iff(policyuniqueidguid == \"\", policyuniqueidstr, policyuniqueidguid), backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupmanagementserveruniqueid, protectedcontaineruniqueid, vaultuniqueid, backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nbackupitemassociationtable\\n};\\nlet backupitemassociationunderresourcespecific = ()\\n{\\nlet backupitemassociationtable = coreazurebackup \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"backupitemassociation\" and state != \"deleted\"\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// handle mab systemstate\\n| project policyuniqueid, backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupmanagementserveruniqueid, protectedcontaineruniqueid, vaultuniqueid, backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nbackupitemassociationtable\\n};\\nlet backupitemassociationhistoryunderazurediagnostics = ()\\n{\\n let backupitemassociationtable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"backupitemassociation\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"), protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"), \\nvaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), policyuniqueidguid = columnifexists(\"policyuniqueid_g\", \"\"), policyuniqueidstr = columnifexists(\"policyuniqueid_s\", \"\"),\\ntimegenerated, resourceid  \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| where (_aggregationtype =~ \"daily\") or (_aggregationtype =~ \"weekly\" and startofday(timegenerated) == startofweek(timegenerated)) or (_aggregationtype =~ \"monthly\" and startofday(timegenerated) == startofmonth(timegenerated))\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// handle mab systemstate\\n// policyuniqueid can be either guid or string due to azurediagnostics behaviour\\n| project policyuniqueid = iff(policyuniqueidguid == \"\", policyuniqueidstr, policyuniqueidguid), backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupmanagementserveruniqueid, protectedcontaineruniqueid, vaultuniqueid, backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nbackupitemassociationtable\\n};\\nlet backupitemassociationhistoryunderresourcespecific = ()\\n{\\nlet backupitemassociationtable = coreazurebackup \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"backupitemassociation\" and state != \"deleted\"\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| where (_aggregationtype =~ \"daily\") or (_aggregationtype =~ \"weekly\" and startofday(timegenerated) == startofweek(timegenerated)) or (_aggregationtype =~ \"monthly\" and startofday(timegenerated) == startofmonth(timegenerated))\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// handle mab systemstate\\n| project policyuniqueid, backupitemuniqueid = iff((backupmanagementtype == \"mab\" and backupitemuniqueid contains \"ssbv\\\\\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", backupitemuniqueid ), backupitemuniqueid), backupmanagementserveruniqueid, protectedcontaineruniqueid, vaultuniqueid, backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nbackupitemassociationtable\\n};\\nlet backupitemfrontendsizehistoryunderazurediagnostics = ()\\n{\\n let backupitemfrontendsizetable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"backupitemfrontendsizeconsumption\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemfrontendsize = todouble(columnifexists(\"backupitemfrontendsize_s\", \"\")), backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| where (_aggregationtype =~ \"daily\") or (_aggregationtype =~ \"weekly\" and startofday(timegenerated) == startofweek(timegenerated)) or (_aggregationtype =~ \"monthly\" and startofday(timegenerated) == startofmonth(timegenerated))\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nbackupitemfrontendsizetable\\n};\\nlet backupitemfrontendsizehistoryunderresourcespecific = ()\\n{\\nlet backupitemfrontendsizetable = coreazurebackup \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"backupitemfrontendsizeconsumption\" and state != \"deleted\"\\n| project backupitemfrontendsize, backupitemuniqueid, backupmanagementtype, timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| where (_aggregationtype =~ \"daily\") or (_aggregationtype =~ \"weekly\" and startofday(timegenerated) == startofweek(timegenerated)) or (_aggregationtype =~ \"monthly\" and startofday(timegenerated) == startofmonth(timegenerated))\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nbackupitemfrontendsizetable\\n};\\nlet backupitemfrontendsizeunderazurediagnostics = ()\\n{\\n let backupitemfrontendsizetable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"backupitemfrontendsizeconsumption\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemfrontendsize = todouble(columnifexists(\"backupitemfrontendsize_s\", \"\")), backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nbackupitemfrontendsizetable\\n};\\nlet backupitemfrontendsizeunderresourcespecific = ()\\n{\\nlet backupitemfrontendsizetable = coreazurebackup \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"backupitemfrontendsizeconsumption\" and state != \"deleted\"\\n| project backupitemfrontendsize, backupitemuniqueid, backupmanagementtype, timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nbackupitemfrontendsizetable\\n};\\nlet storageassociationhistoryunderazurediagnostics = ()\\n{\\n let storageassociationtable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"storageassociation\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n// not projecting protectedcontaineruniqueid - dpm/azurebackupserver protectedcontainer (incase of cluster) is node ps and not cluster ps\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), vaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), storageuniqueid = columnifexists(\"storageuniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"), storageconsumedinmbs = todouble(columnifexists(\"storageconsumedinmbs_s\", \"\")), \\nstorageallocatedinmbs = todouble(columnifexists(\"storageallocatedinmbs_s\", \"\")), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| where (_aggregationtype =~ \"daily\") or (_aggregationtype =~ \"weekly\" and startofday(timegenerated) == startofweek(timegenerated)) or (_aggregationtype =~ \"monthly\" and startofday(timegenerated) == startofmonth(timegenerated))\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// providers like dpm, azurebackupserver has disk storage. filtering out cloud storage only.\\n| where split(storageuniqueid, \";\")[2] has \"cloud\"\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nstorageassociationtable\\n};\\nlet storageassociationhistoryunderresourcespecific = ()\\n{\\nlet storageassociationtable = addonazurebackupstorage \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now()) \\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"storageassociation\" and state != \"deleted\"\\n// not projecting protectedcontaineruniqueid - dpm/azurebackupserver protectedcontainer (incase of cluster) is node ps and not cluster ps\\n| project backupitemuniqueid, vaultuniqueid, backupmanagementserveruniqueid, storageuniqueid, storageconsumedinmbs, storageallocatedinmbs, backupmanagementtype, timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| where (_aggregationtype =~ \"daily\") or (_aggregationtype =~ \"weekly\" and startofday(timegenerated) == startofweek(timegenerated)) or (_aggregationtype =~ \"monthly\" and startofday(timegenerated) == startofmonth(timegenerated)) \\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// providers like dpm, azurebackupserver has disk storage. filtering out cloud storage only.\\n| where split(storageuniqueid, \";\")[2] has \"cloud\"\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday = startofday(timegenerated);\\nstorageassociationtable\\n};\\nlet storageassociationunderazurediagnostics = ()\\n{\\n let storageassociationtable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"storageassociation\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n// not projecting protectedcontaineruniqueid - dpm/azurebackupserver protectedcontainer (incase of cluster) is node ps and not cluster ps\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), vaultuniqueid = columnifexists(\"vaultuniqueid_s\", \"\"), storageuniqueid = columnifexists(\"storageuniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"), storageconsumedinmbs = todouble(columnifexists(\"storageconsumedinmbs_s\", \"\")), \\nstorageallocatedinmbs = todouble(columnifexists(\"storageallocatedinmbs_s\", \"\")), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// providers like dpm, azurebackupserver has disk storage. filtering out cloud storage only.\\n| where split(storageuniqueid, \";\")[2] has \"cloud\"\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nstorageassociationtable\\n};\\nlet storageassociationunderresourcespecific = ()\\n{\\nlet storageassociationtable = addonazurebackupstorage \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"storageassociation\" and state != \"deleted\"\\n// not projecting protectedcontaineruniqueid - dpm/azurebackupserver protectedcontainer (incase of cluster) is node ps and not cluster ps\\n| project backupitemuniqueid, vaultuniqueid, backupmanagementserveruniqueid, storageuniqueid, storageconsumedinmbs, storageallocatedinmbs, backupmanagementtype, timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n// providers like dpm, azurebackupserver has disk storage. filtering out cloud storage only.\\n| where split(storageuniqueid, \";\")[2] has \"cloud\"\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid;\\nstorageassociationtable\\n};\\nlet protectedcontainerunderazurediagnostics = ()\\n{\\nlet protectedcontainertable = azurediagnostics\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where category == \"azurebackupreport\" and operationname == \"protectedcontainer\"  and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"),  protectedcontainerfriendlyname = columnifexists(\"protectedcontainerfriendlyname_s\", \"\"), agentversion = columnifexists(\"agentversion_s\", \"\"),\\nprotectedcontainerostype = columnifexists(\"protectedcontainerostype_s\", \"\"), protectedcontainerosversion = columnifexists(\"protectedcontainerosversion_s\", \"\"), protectedcontainerworkloadtype = columnifexists(\"protectedcontainerworkloadtype_s\", \"\"),  protectedcontainername = columnifexists(\"protectedcontainername_s\", \"\"), protectedcontainerprotectionstate = columnifexists(\"protectedcontainerprotectionstate_s\", \"\"), protectedcontainerlocation = columnifexists(\"protectedcontainerlocation_s\", \"\"), protectedcontainertype = columnifexists(\"protectedcontainertype_s\", \"\"),\\nbackupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by protectedcontaineruniqueid;\\nvaultunderazurediagnostics | join   (\\n   protectedcontainertable \\n) on resourceid\\n| project-away resourceid1, timegenerated1;\\n};\\nlet protectedcontainerunderresourcespecific = ()\\n{\\nlet protectedcontainertable = coreazurebackup\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where operationname == \"protectedcontainer\" and state != \"deleted\"\\n| project protectedcontaineruniqueid,  protectedcontainerfriendlyname, agentversion,\\nprotectedcontainerostype, protectedcontainerosversion, protectedcontainerworkloadtype,  protectedcontainername, protectedcontainerprotectionstate, protectedcontainerlocation, protectedcontainertype,\\nbackupmanagementtype, timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by protectedcontaineruniqueid;\\nvaultunderresourcespecific | join   (\\n   protectedcontainertable \\n) on resourceid\\n| project-away resourceid1, timegenerated1;\\n};\\nlet protectedinstanceunderazurediagnostics = (isprotectedcontainerbillingtype:bool)\\n{\\n let protectedinstancetable = azurediagnostics \\n| where category == \"azurebackupreport\" and operationname == \"protectedinstance\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"),\\n protectedinstancecount = toint(columnifexists(\"protectedinstancecount_s\", \"\")), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid \\n| where (backupitemuniqueid == \"\" and isprotectedcontainerbillingtype) or (protectedcontaineruniqueid == \"\" and not(isprotectedcontainerbillingtype))\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid,\\n protectedinstancecount = iff((backupmanagementtype == \"azurestorage\" and timegenerated <= azurestorageprotectedinstancecountcutoffdate), 0, protectedinstancecount), backupmanagementtype, timegenerated, resourceid\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid;\\nprotectedinstancetable\\n};\\nlet protectedinstanceunderresourcespecific = (isprotectedcontainerbillingtype:bool)\\n{\\nlet protectedinstancetable = addonazurebackupprotectedinstance \\n| where operationname == \"protectedinstance\" and state != \"deleted\"\\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where (backupitemuniqueid == \"\" and isprotectedcontainerbillingtype) or (protectedcontaineruniqueid == \"\" and not(isprotectedcontainerbillingtype))\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid,\\n protectedinstancecount = iff((backupmanagementtype == \"azurestorage\" and timegenerated <= azurestorageprotectedinstancecountcutoffdate), 0, protectedinstancecount), backupmanagementtype, timegenerated, resourceid \\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid;\\nprotectedinstancetable\\n};\\nlet protectedinstancehistoryunderazurediagnostics = (isprotectedcontainerbillingtype:bool)\\n{\\n let protectedinstancetable = azurediagnostics \\n // take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderazurediagnostics)\\n| where category == \"azurebackupreport\" and operationname == \"protectedinstance\" and columnifexists(\"schemaversion_s\", \"\") == \"v2\" and columnifexists(\"state_s\", \"\") != \"deleted\"\\n| project backupitemuniqueid = columnifexists(\"backupitemuniqueid_s\", \"\"), protectedcontaineruniqueid = columnifexists(\"protectedcontaineruniqueid_s\", \"\"), backupmanagementserveruniqueid = columnifexists(\"backupmanagementserveruniqueid_s\", \"\"),\\n protectedinstancecount = toint(columnifexists(\"protectedinstancecount_s\", \"\")), backupmanagementtype = columnifexists(\"backupmanagementtype_s\", \"\"), timegenerated, resourceid\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\") \\n| where (_aggregationtype =~ \"daily\") or (_aggregationtype =~ \"weekly\" and startofday(timegenerated) == startofweek(timegenerated)) or (_aggregationtype =~ \"monthly\" and startofday(timegenerated) == startofmonth(timegenerated))\\n| where (backupitemuniqueid == \"\" and isprotectedcontainerbillingtype) or (protectedcontaineruniqueid == \"\" and not(isprotectedcontainerbillingtype))\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid,\\n protectedinstancecount = iff((backupmanagementtype == \"azurestorage\" and timegenerated <= azurestorageprotectedinstancecountcutoffdate), 0, protectedinstancecount), backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid, timerangeendday = startofday(timegenerated);\\nprotectedinstancetable\\n};\\nlet protectedinstancehistoryunderresourcespecific = (isprotectedcontainerbillingtype:bool)\\n{\\nlet protectedinstancetable = addonazurebackupprotectedinstance \\n// take records until previous day\\n| where timegenerated >= _rangestart and timegenerated <= _rangeend and timegenerated < startofday(now())\\n| where resourceid in (resourceidlistunderresourcespecific)\\n| where operationname == \"protectedinstance\" and state != \"deleted\"\\n| where not(timegenerated <= azurestoragecutoffdate and backupmanagementtype == \"azurestorage\")\\n| where (_aggregationtype =~ \"daily\") or (_aggregationtype =~ \"weekly\" and startofday(timegenerated) == startofweek(timegenerated)) or (_aggregationtype =~ \"monthly\" and startofday(timegenerated) == startofmonth(timegenerated))\\n| where (backupitemuniqueid == \"\" and isprotectedcontainerbillingtype) or (protectedcontaineruniqueid == \"\" and not(isprotectedcontainerbillingtype))\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid,\\n protectedinstancecount = iff((backupmanagementtype == \"azurestorage\" and timegenerated <= azurestorageprotectedinstancecountcutoffdate), 0, protectedinstancecount), backupmanagementtype, timegenerated, resourceid\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid, timerangeendday = startofday(timegenerated)\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementserveruniqueid, backupmanagementtype, resourceid, timegenerated, protectedinstancecount, timerangeendday;\\nprotectedinstancetable\\n};\\n// businesslogic\\nlet totalbackupitemdimensiontable = () {union isfuzzy = true \\n(backupitemunderazurediagnostics()),\\n(backupitemunderresourcespecific())\\n| summarize arg_max(timegenerated, *)   by backupitemuniqueid\\n| where isempty(_billinggroupname) or _billinggroupname == \"*\" or  backupitemfriendlyname contains (_billinggroupname)\\n| extend backupitemprotectionstate = iff(backupitemprotectionstate in (\"protected\", \"activelyprotected\",\"protectionerror\"), \"protected\", iff(backupitemprotectionstate in (\"irpending\"), \"initialbackuppending\", iff(isnotempty(backupitemprotectionstate),\"protectionstopped\",backupitemprotectionstate)))\\n//| where backupitemprotectionstate in~ (_protectioninfolist) or \\'*\\' in (_protectioninfolist)\\n| project backupitemuniqueid,  backupitemname, backupitemfriendlyname, backupmanagementtype, backupitemtype, backupsolution, backupitemprotectionstate,\\nstoragereplicationtype, resourceid, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter};\\nlet bi_historycombinationunderazurediagnostics = ()\\n{\\t\\n\\tlet base = ()\\n\\t{\\n\\tprotectedcontainerunderazurediagnostics | distinct protectedcontainername, protectedcontainerfriendlyname, protectedcontaineruniqueid \\n\\t| join  kind= rightouter  (\\n\\t\\tbackupitemassociationhistoryunderazurediagnostics |  project protectedcontaineruniqueid, backupitemuniqueid, backupmanagementserveruniqueid, policyuniqueid, timegenerated, timerangeendday, resourceid\\n\\t) on protectedcontaineruniqueid\\n\\t| project backupitemuniqueid, protectedcontaineruniqueid = protectedcontaineruniqueid1, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, timegenerated, timerangeendday, resourceid\\n\\t};\\n\\tlet base_size = ()\\n\\t{\\n\\tbase\\n\\t| join kind= leftouter (\\n\\t   backupitemfrontendsizehistoryunderazurediagnostics | project backupitemfrontendsize, backupitemuniqueid, timegenerated, timerangeendday \\n\\t) on backupitemuniqueid, timerangeendday\\n\\t// using leftouter due to azurestorage - storageconsumption table is not emitted. inner join will exclude azurestorage backupitems.\\n\\t| join kind= leftouter (\\n\\t   storageassociationhistoryunderazurediagnostics | project storageconsumedinmbs, backupitemuniqueid, timegenerated, timerangeendday\\n\\t) on backupitemuniqueid, timerangeendday\\n\\t| project backupitemuniqueid, protectedcontaineruniqueid, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, backupitemfrontendsize,\\n\\t storageconsumedinmbs, timegenerated, timerangeendday, resourceid\\n\\t};\\nbase_size\\n};\\nlet bi_historycombinationunderresourcespecific = ()\\n{\\n\\tlet base = ()\\n\\t{\\n\\tprotectedcontainerunderresourcespecific | distinct protectedcontainername, protectedcontainerfriendlyname, protectedcontaineruniqueid \\n\\t| join  kind= rightouter  (\\n\\t\\tbackupitemassociationhistoryunderresourcespecific |  project protectedcontaineruniqueid, backupitemuniqueid, backupmanagementserveruniqueid, policyuniqueid, timegenerated, timerangeendday, resourceid\\n\\t) on protectedcontaineruniqueid\\n\\t| project backupitemuniqueid, protectedcontaineruniqueid = protectedcontaineruniqueid1, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, timegenerated, timerangeendday, resourceid\\n\\t};\\n\\tlet base_size = ()\\n\\t{\\n\\tbase\\n\\t| join kind= leftouter (\\n\\t   backupitemfrontendsizehistoryunderresourcespecific | project backupitemfrontendsize, backupitemuniqueid, timegenerated, timerangeendday \\n\\t) on backupitemuniqueid, timerangeendday\\n\\t// using leftouter due to azurestorage - storageconsumption table is not emitted. inner join will exclude azurestorage backupitems.\\n\\t| join kind= leftouter (\\n\\t   storageassociationhistoryunderresourcespecific | project storageconsumedinmbs, backupitemuniqueid, timegenerated, timerangeendday\\n\\t) on backupitemuniqueid, timerangeendday\\n\\t| project backupitemuniqueid, protectedcontaineruniqueid, protectedcontainername, protectedcontainerfriendlyname, backupmanagementserveruniqueid, policyuniqueid, backupitemfrontendsize,\\n\\t storageconsumedinmbs, timegenerated, timerangeendday, resourceid\\n\\t};\\n\\tbase_size\\n};\\nlet latestbackupitemassociationandstorageconsumptionhistorytable = () \\n{\\ntotalbackupitemdimensiontable | join  \\n(union isfuzzy = true  \\n(bi_historycombinationunderazurediagnostics() | where _excludelegacyevent == false),\\n(bi_historycombinationunderresourcespecific())\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, timerangeendday)\\n  on backupitemuniqueid\\n| where isempty(_billinggroupname) or _billinggroupname == \"*\" or protectedcontainerfriendlyname contains (_billinggroupname)\\n| project backupitemuniqueid, backupitemname, backupitemfriendlyname, backupmanagementtype, backupitemtype, backupsolution, backupitemprotectionstate,\\nvaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, timegenerated,  resourceid,  protectedcontaineruniqueid, protectedcontainername, protectedcontainerfriendlyname, policyuniqueid, backupitemfrontendsize, storageconsumedinmbs, backupmanagementserveruniqueid, storagereplicationtype, timerangeendday\\n};\\nlet latestprotectedcontainerhistoryinfotableexcludingdpmvms = (){\\nlatestbackupitemassociationandstorageconsumptionhistorytable \\n| where not((backupmanagementtype has \"dpm\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"dpm\" and backupitemtype has \"hypervvm\") \\nor (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"hypervvm\"))\\n| summarize storageconsumedinmbs = sum(storageconsumedinmbs), backupitemfrontendsize = sum(backupitemfrontendsize), protectedcontainername = any(protectedcontainername), protectedcontainerfriendlyname = any(protectedcontainerfriendlyname), custombackupmanagementtype = iff((any(backupmanagementtype) has \"azureworkload\"), any(strcat(backupmanagementtype, \"/\", backupitemtype)), any(backupmanagementtype)), backupmanagementtype = any(backupmanagementtype), backupsolution = any(backupsolution),  vaultuniqueid = any(vaultuniqueid), vaultname = any(vaultname), vaulttags = any(vaulttags), subscriptionid = any(subscriptionid), resourcegroupname = any(resourcegroupname), azuredatacenter = any(azuredatacenter), storagereplicationtype = any(storagereplicationtype), resourceid = any(resourceid), timegenerated = any(timegenerated) by  protectedcontaineruniqueid,  timerangeendday\\n};\\nlet totalprotectedinstancehistorytable = (isprotectedcontainerbillingtype:bool) \\n{union isfuzzy = true \\n(protectedinstancehistoryunderazurediagnostics(isprotectedcontainerbillingtype) | where _excludelegacyevent == false),\\n(protectedinstancehistoryunderresourcespecific(isprotectedcontainerbillingtype))\\n// protectedinstance is at billinggroup level. custombackupmanagementtype can be the filter used.\\n//| where backupmanagementtype in (backupmanagementtypeparam) or \\'*\\' in (backupmanagementtypeparam)\\n| summarize arg_max(timegenerated, *) by backupitemuniqueid, protectedcontaineruniqueid, timerangeendday\\n| project backupitemuniqueid, protectedcontaineruniqueid, backupmanagementtype, resourceid, timegenerated, protectedinstancecount, timerangeendday\\n};\\nlet latestprotectedinstancehistorytablefromprotectedcontaineruniqueid = ()\\n{ \\ntotalprotectedinstancehistorytable(true) \\n| join kind= rightouter (latestprotectedcontainerhistoryinfotableexcludingdpmvms) on protectedcontaineruniqueid, timerangeendday\\n| project timerangeendday = timerangeendday1, timegenerated = timegenerated1, protectedinstancecount, backupitemfrontendsize, storageconsumedinmbs, backupmanagementtype = backupmanagementtype1, backupsolution, custombackupmanagementtype, billinggrouptype = \"datasourceset\", billinggroupfriendlyname = protectedcontainerfriendlyname, billinggroupuniqueid = protectedcontaineruniqueid1, billinggroupname = protectedcontainername, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter,\\nstoragereplicationtype, resourceid\\n};\\nlet latestprotectedinstancehistorytablefrombackupitemuniqueid = ()\\n{ \\n(totalprotectedinstancehistorytable(false) \\n| where backupmanagementtype in (\"dpm\",\"azurebackupserver\"))\\n| join kind= rightouter (latestbackupitemassociationandstorageconsumptionhistorytable | where ((backupmanagementtype has \"dpm\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"dpm\" and backupitemtype has \"hypervvm\") \\n or (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"vmwarevm\") or (backupmanagementtype has \"azurebackupserver\" and backupitemtype has \"hypervvm\"))\\n | extend custombackupmanagementtype = backupmanagementtype) on backupitemuniqueid, timerangeendday\\n| project timerangeendday = timerangeendday1, timegenerated = timegenerated1, protectedinstancecount, backupitemfrontendsize, storageconsumedinmbs, custombackupmanagementtype, backupmanagementtype, backupsolution, billinggrouptype = \"datasource\", billinggroupfriendlyname = backupitemfriendlyname, billinggroupuniqueid = backupitemuniqueid1, billinggroupname = backupitemname, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, storagereplicationtype, resourceid\\n};\\n// special handling for dpm, azurebackupserver cluster scenario - node ps has protectedinstance, whereas cluster ps has storage consumption\\nlet latestprotectedinstancehistorytablefromdpmnodeprotectedcontaineruniqueid = ()\\n{ \\n((totalprotectedinstancehistorytable(true) \\n| where backupmanagementtype in (\"dpm\",\"azurebackupserver\")\\n| where protectedinstancecount > 0)\\n| join kind= leftanti (latestprotectedcontainerhistoryinfotableexcludingdpmvms ) on protectedcontaineruniqueid, timerangeendday\\n| project protectedcontaineruniqueid, backupmanagementtype, resourceid, timegenerated, protectedinstancecount, timerangeendday)\\n| join (\\nunion isfuzzy = true  \\n(protectedcontainerunderazurediagnostics() | where _excludelegacyevent == false),\\n(protectedcontainerunderresourcespecific())\\n| where backupmanagementtype in (\"dpm\",\"azurebackupserver\")\\n| where isempty(_billinggroupname) or _billinggroupname == \"*\" or protectedcontainerfriendlyname contains (_billinggroupname)\\n| summarize arg_max(timegenerated, *) by protectedcontaineruniqueid)\\n  on protectedcontaineruniqueid\\n  // backupitemfrontendsize and storageconsumed will be 0.0 as the same will be calculated at cluster level \\n  // as it is dpm or azurebackupserver, no extra handling needed for azureworkload\\n  // ideally the timegenerated field should come from backupitem/protectedcontainer. this is a special case and we are getting the container properties from latest table and not from history table.\\n| project timerangeendday, timegenerated, protectedinstancecount, backupitemfrontendsize = 0.0, storageconsumedinmbs = 0.0, backupmanagementtype, custombackupmanagementtype = backupmanagementtype, \\nbackupsolution = iff(backupmanagementtype == \"azurebackupserver\", \"azure backup server\", \"dpm\"), billinggrouptype = \"datasourceset\", billinggroupfriendlyname = protectedcontainerfriendlyname, \\n billinggroupuniqueid = protectedcontaineruniqueid, billinggroupname = protectedcontainername, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, storagereplicationtype, resourceid\\n};\\nlet protectedinstancehistorymetric = ( )\\n{ union \\n(latestprotectedinstancehistorytablefromprotectedcontaineruniqueid()),\\n(latestprotectedinstancehistorytablefrombackupitemuniqueid()),\\n(latestprotectedinstancehistorytablefromdpmnodeprotectedcontaineruniqueid)\\n| where backupsolution in~ (_backupsolutionlist) or \\'*\\' in (_backupsolutionlist)\\n| project  custombackupmanagementtype, backupitemfrontendsize, storageconsumedinmbs, billinggroupuniqueid, billinggroupfriendlyname, billinggroupname, protectedinstancecount, billinggrouptype, timerangeendday, timegenerated, backupmanagementtype, backupsolution, protectedcontainername, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, storagereplicationtype, resourceid\\n};\\nlet finaltable = () {protectedinstancehistorymetric\\n};\\n// display tweaks for afs and null protectedinstancecount\\n// billing entity is at backupmanagementtype level and not at ds level. \\nlet finaltable_v1vault = () {finaltable\\n| project custombackupmanagementtype, backupmanagementtype, backupsolution, protectedinstancecount = iff(isempty(protectedinstancecount), 0.0 ,todouble(protectedinstancecount)/10), storageconsumedinmbs = iff(isempty(storageconsumedinmbs), todouble(0), todouble(storageconsumedinmbs)), backupitemfrontendsize = iff(isempty(backupitemfrontendsize), todouble(0), todouble(backupitemfrontendsize)), billinggroupuniqueid, billinggrouptype, billinggroupname, billinggroupfriendlyname, vaultuniqueid, vaultname, vaulttags, subscriptionid, resourcegroupname, azuredatacenter, resourceid, storagereplicationtype, protectedcontainername, timegenerated\\n| project uniqueid = billinggroupuniqueid, name = billinggroupname, type = billinggrouptype, friendlyname = billinggroupfriendlyname,  sourcesizeinmbs = backupitemfrontendsize, extendedproperties = pack(\"protectedinstancecount\", protectedinstancecount), vaultstore_storageconsumptioninmbs = storageconsumedinmbs,  backupsolution,  vaultuniqueid, vaultname, vaultresourceid = resourceid, vaultsubscriptionid = subscriptionid, vaultlocation = azuredatacenter, vaultstore_storagereplicationtype = storagereplicationtype, vaulttags, vaulttype = \"microsoft.recoveryservices/vaults\", timegenerated};\\n// finaltable_dppvault to be added later\\nfinaltable_v1vault \\n| where \"microsoft.recoveryservices/vaults\" in~ (_vaulttypelist) or \\'*\\' in (_vaulttypelist)'}]}}, 'initialize_variable-coreazurebackup': {'runafter': {'initialize_variable-azurediagnostics': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'coreazurebackup_incomplete', 'type': 'string', 'value': 'let coreazurebackup = ()\\n{\\nunion'}]}}, 'initialize_variable-emailbodyforsuccessfulrun': {'runafter': {'initialize_variable-billinggrouptrendfunction': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'visual', 'type': 'string'}]}}, 'initialize_variable-reportfilterforhistoricaldata': {'runafter': {'initialize_variable-unionofworkspaces': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'reportfilter_trend', 'type': 'string', 'value': 'let _rangestart = iff((datetime(@{parameters(\\'startdate\\')}) == datetime(null)), startofday(ago(1d)), startofday(datetime(@{parameters(\\'startdate\\')})));\\nlet _rangeend = iff((datetime(@{parameters(\\'enddate\\')})== datetime(null)), startofday(now()), startofday(datetime(@{parameters(\\'enddate\\')})) + 1d);\\nlet _vaultsubscriptionlist = split(@{parameters(\\'vaultsubscriptionlistfilter\\')}, \\',\\');\\nlet _vaultlocationlist = split(@{parameters(\\'vaultlocationlistfilter\\')}, \\',\\');\\nlet _vaultlist = split(@{parameters(\\'vaultlistfilter\\')}, \\',\\');\\nlet _vaulttypelist = \"*\";\\nlet _excludelegacyevent = @{parameters(\\'excludelegacyevent\\')};\\nlet _backupsolutionlist =  split(@{parameters(\\'backupsolutionlistfilter\\')}, \\',\\');\\nlet _aggregationtype = @{parameters(\\'aggregationtype\\')};'}]}}, 'initialize_variable-reportfilterforlatestdata': {'runafter': {'initialize_variable-reportfilterforhistoricaldata': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'reportfilter_latest', 'type': 'string', 'value': 'let _rangestart = iff(( datetime(@{parameters(\\'enddate\\')})== datetime(null)), startofday(ago(1d)), startofday(datetime(@{parameters(\\'enddate\\')})));\\nlet _rangeend = iff((datetime(@{parameters(\\'enddate\\')})== datetime(null)), startofday(now()), startofday(datetime(@{parameters(\\'enddate\\')})) + 1d);\\nlet _vaultsubscriptionlist = split(@{parameters(\\'vaultsubscriptionlistfilter\\')}, \\',\\');\\nlet _vaultlocationlist = split(@{parameters(\\'vaultlocationlistfilter\\')}, \\',\\');\\nlet _vaultlist = split(@{parameters(\\'vaultlistfilter\\')}, \\',\\');\\nlet _vaulttypelist = \"*\";\\nlet _excludelegacyevent = @{parameters(\\'excludelegacyevent\\')};\\nlet _backupsolutionlist  =  split(@{parameters(\\'backupsolutionlistfilter\\')}, \\',\\');'}]}}, 'initialize_variable-unionofworkspaces': {'runafter': {'for_each': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'workspacestoquery_custom', 'type': 'string', 'value': \"@{concat(concat(substring(variables('addonazurebackupstorage_incomplete'),0,sub(length(variables('addonazurebackupstorage_incomplete')),1)),'};'),\\r\\nconcat(substring(variables('addonazurebackupprotectedinstance_incomplete'),0,sub(length(variables('addonazurebackupprotectedinstance_incomplete')),1)),'};'),\\r\\nconcat(substring(variables('addonazurebackuppolicy_incomplete'),0,sub(length(variables('addonazurebackuppolicy_incomplete')),1)),'};'),\\r\\nconcat(substring(variables('addonazurebackupjobs_incomplete'),0,sub(length(variables('addonazurebackupjobs_incomplete')),1)),'};'),\\r\\nconcat(substring(variables('coreazurebackup_incomplete'),0,sub(length(variables('coreazurebackup_incomplete')),1)),'};'),\\r\\nconcat(substring(variables('azurediagnostics_incomplete'),0,sub(length(variables('azurediagnostics_incomplete')),1)),'};'))}\"}]}}, 'scope': {'actions': {'create_csv_table-billinggrouplist': {'runafter': {'run_query_and_list_results-billinggrouplist': ['succeeded']}, 'type': 'table', 'inputs': {'format': 'csv', 'from': \"@if(empty(body('run_query_and_list_results-billinggrouplist')?['value']),variables('nodatamessage'),body('run_query_and_list_results-billinggrouplist')?['value'])\"}}, 'run_query_and_list_results-billinggrouplist': {'runafter': {'run_query_and_visualize_results-cloudstoragetrend': ['succeeded']}, 'type': 'apiconnection', 'inputs': {'body': '@{variables(\\'billinggroupfunction\\')}\\n|  extend name_array = split(name,\";\")\\n|  extend name_arraylen = array_length(name_array)\\n| project billedentity=friendlyname, billedentityresourcegroup=iff(name_arraylen == 3, name_array[(name_arraylen-2)], \"(none)\"), billedentitytype=type, backupsolution, protectedinstances=todouble(parse_json(extendedproperties).protectedinstancecount), cloudstorage=vaultstore_storageconsumptioninmbs/1024, storagereplicationtype=vaultstore_storagereplicationtype, vault=vaultresourceid, vaultresourcegroup=split(split(tolower(vaultresourceid), \\'/resourcegroups/\\')[1],\\'/\\')[0], subscription=vaultsubscriptionid', 'host': {'connection': {'name': \"@parameters('$connections')['azuremonitorlogs']['connectionid']\"}}, 'method': 'post', 'path': '/querydata', 'queries': {'resourcegroups': \"[parameters('workspaceresourcegroup')]\", 'resourcename': \"[parameters('logicappworkspace')]\", 'resourcetype': 'log analytics workspace', 'subscriptions': \"[parameters('workspacesubscriptionid')]\", 'timerange': 'set in query'}}}, 'run_query_and_visualize_results-billinggrouptrend': {'type': 'apiconnection', 'inputs': {'body': \"@{variables('billinggrouptrendfunction')}\\n// query to transform function output\\n| summarize protectedinstancecount = sum(todouble(parse_json(extendedproperties).protectedinstancecount)) by  startofday(timegenerated)\\n\", 'host': {'connection': {'name': \"@parameters('$connections')['azuremonitorlogs']['connectionid']\"}}, 'method': 'post', 'path': '/visualizequery', 'queries': {'resourcegroups': \"[parameters('workspaceresourcegroup')]\", 'resourcename': \"[parameters('logicappworkspace')]\", 'resourcetype': 'log analytics workspace', 'subscriptions': \"[parameters('workspacesubscriptionid')]\", 'timerange': 'set in query', 'vistype': 'time chart'}}}, 'run_query_and_visualize_results-cloudstoragetrend': {'runafter': {'run_query_and_visualize_results-billinggrouptrend': ['succeeded']}, 'type': 'apiconnection', 'inputs': {'body': \"@{variables('billinggrouptrendfunction')}\\n// query to transform function output\\n| summarize storageconsumedingbs = sum(vaultstore_storageconsumptioninmbs)/1024 by  startofday(timegenerated)\\n\", 'host': {'connection': {'name': \"@parameters('$connections')['azuremonitorlogs']['connectionid']\"}}, 'method': 'post', 'path': '/visualizequery', 'queries': {'resourcegroups': \"[parameters('workspaceresourcegroup')]\", 'resourcename': \"[parameters('logicappworkspace')]\", 'resourcetype': 'log analytics workspace', 'subscriptions': \"[parameters('workspacesubscriptionid')]\", 'timerange': 'set in query', 'vistype': 'time chart'}}}, 'set_variable-emailbodyforsuccessfulrun': {'runafter': {'create_csv_table-billinggrouplist': ['succeeded']}, 'type': 'setvariable', 'inputs': {'name': 'visual', 'value': '<div>\\n<h3>protected instances trend</h3>\\n<br>\\n<img src=\"cid:@{body(\\'run_query_and_visualize_results-billinggrouptrend\\')?[\\'attachmentname\\']}\" width:\"50px\"/>\\n<br>\\n<h3> cloud storage trend</h3> \\n<br>\\n<img src=\"cid:@{body(\\'run_query_and_visualize_results-cloudstoragetrend\\')?[\\'attachmentname\\']}\" width:\"50px\"/>\\n<br>\\n</div>'}}}, 'runafter': {'initialize_variable-nodatamessage': ['succeeded']}, 'type': 'scope'}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'azuremonitorlogs': {'connectionid': \"[resourceid('microsoft.web/connections', variables('azuremonitorlogsconnectionname'))]\", 'connectionname': \"[variables('azuremonitorlogsconnectionname')]\", 'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'azuremonitorlogs')]\"}, 'office365': {'connectionid': \"[resourceid('microsoft.web/connections', variables('office365connectionname'))]\", 'connectionname': \"[variables('office365connectionname')]\", 'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'office365')]\"}}}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/connections', parameters('servicebusconnectionname'))]\"], 'properties': {'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'manual': {'type': 'request', 'kind': 'http', 'inputs': {'schema': {'$schema': 'http://json-schema.org/draft-04/schema#', 'properties': {'context': {'properties': {'name': {'type': 'string'}, 'portallink': {'type': 'string'}, 'resourcename': {'type': 'string'}}, 'required': ['name', 'portallink', 'resourcename'], 'type': 'object'}, 'status': {'type': 'string'}}, 'required': ['status', 'context'], 'type': 'object'}}}}, 'actions': {'http': {'type': 'http', 'inputs': {'body': {'longurl': \"@{triggerbody()['context']['portallink']}\"}, 'headers': {'content-type': 'application/json'}, 'method': 'post', 'uri': 'https://www.googleapis.com/urlshortener/v1/url?key=aizasybkt1brba-uulhz8hmuai0ywjtpnlxhshi'}}, 'send_message': {'type': 'apiconnection', 'inputs': {'body': {'body': \"azure alert - '@{triggerbody()['context']['name']}' @{triggerbody()['status']} on '@{triggerbody()['context']['resourcename']}'. details: @{body('http')['id']}\"}}, 'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'post', 'path': '/messages.json'}, 'runafter': {'http': ['succeeded']}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'servicebus': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'servicebus')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('servicebusconnectionname'))]\"}}}}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-11-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'apiversion': '2018-08-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 132, 'direction': 'inbound'}}, {'name': 'http', 'properties': {'provisioningstate': 'succeeded', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 131, 'direction': 'inbound'}}, {'name': 'https', 'properties': {'provisioningstate': 'succeeded', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 130, 'direction': 'inbound'}}, {'name': 'goaccesssocket', 'properties': {'provisioningstate': 'succeeded', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '8080', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 129, 'direction': 'inbound'}}]}}{'apiversion': '2018-08-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2018-08-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('networksecuritygroupname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vm01name')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'iis01'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat(variables('vm01name'), '_nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vm01name')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'properties': {'primary': true}, 'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('vm01name'), '_nic'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vm02name')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'appvm01'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat(variables('vm02name'), '_nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vm02name')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'properties': {'primary': true}, 'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('vm02name'), '_nic'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vm03name')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'appvm02'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat(variables('vm03name'), '_nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vm03name')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'properties': {'primary': true}, 'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('vm03name'), '_nic'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vm04name')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'dns01'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', concat(variables('vm04name'), '_nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vm04name')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'properties': {'primary': true}, 'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('vm04name'), '_nic'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'vnet01'}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('nsgname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', concat(variables('vm01name'), '_nic_pip'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('subnet1prefix')]\", \"[variables('subnet2prefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}, {'name': \"[variables('subnet2name')]\", 'properties': {'addressprefix': \"[variables('subnet2prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(variables('vm01name'), '_nic_pip' )]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'iis01 nic pip'}, 'properties': {'publicipallocationmethod': 'dynamic', 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('vm01name'), '_nic')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'iis01 nic'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': '10.0.1.5', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat(variables('vm01name'), '_nic_pip' ))]\"}, 'subnet': {'id': \"[variables('nic01subnetref')]\"}}}]}}{'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('vm02name'), '_nic')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'appvm01 nic'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': '10.0.2.5', 'subnet': {'id': \"[variables('nic02subnetref')]\"}}}]}}{'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('vm03name'), '_nic')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'appvm02 nic'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': '10.0.2.6', 'subnet': {'id': \"[variables('nic03subnetref')]\"}}}]}}{'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('vm04name'), '_nic')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'dns01 nic'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': '10.0.2.4', 'subnet': {'id': \"[variables('nic04subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-06-15', 'name': \"[variables('lbname')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.network/publicipaddresses/',variables('apppublicipname'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfename')]\", 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid')]\"}}}], 'backendaddresspools': [{'name': \"[variables('lbbeaddresspool')]\"}], 'loadbalancingrules': [{'name': 'weblb', 'properties': {'backendaddresspool': {'id': \"[variables('lbbeaddresspoolid')]\"}, 'backendport': 80, 'enablefloatingip': false, 'frontendipconfiguration': {'id': \"[variables('lbfeipconfigid')]\"}, 'frontendport': 80, 'probe': {'id': \"[variables('lbwebhttpsprobeid')]\"}, 'protocol': 'tcp', 'loaddistribution': 'sourceip'}}, {'name': 'webhttpslb', 'properties': {'backendaddresspool': {'id': \"[variables('lbbeaddresspoolid')]\"}, 'backendport': 443, 'enablefloatingip': false, 'frontendipconfiguration': {'id': \"[variables('lbfeipconfigid')]\"}, 'frontendport': 443, 'probe': {'id': \"[variables('lbwebhttpsprobeid')]\"}, 'protocol': 'tcp', 'loaddistribution': 'sourceip'}}], 'probes': [{'name': \"[variables('lbwebprobename')]\", 'properties': {'protocol': 'http', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 5, 'requestpath': 'hostingstart.html'}}, {'name': \"[variables('lbwebhttpsprobename')]\", 'properties': {'protocol': 'tcp', 'port': 443, 'intervalinseconds': 15, 'numberofprobes': 5}}], 'inboundnatpools': [{'name': \"[variables('natpoolnamefrontend')]\", 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigidweb')]\"}, 'protocol': 'tcp', 'frontendportrangestart': \"[variables('natstartportfrontend')]\", 'frontendportrangeend': \"[variables('natendportfrontend')]\", 'backendport': \"[variables('natbackendportfrontend')]\"}}]}}{'apiversion': '2015-06-15', 'name': \"[variables('lbservicename')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.network/publicipaddresses/',variables('servicepublicipname'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfeservicename')]\", 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid2')]\"}}}], 'backendaddresspools': [{'name': \"[variables('lbbeserviceaddresspool')]\"}], 'loadbalancingrules': [{'name': 'wcflb', 'properties': {'backendaddresspool': {'id': \"[variables('lbbeserviceaddresspoolid')]\"}, 'backendport': 80, 'enablefloatingip': false, 'frontendipconfiguration': {'id': \"[variables('lbfeserviceipconfigid')]\"}, 'frontendport': 80, 'probe': {'id': \"[variables('lbwebserviceprobeid')]\"}, 'protocol': 'tcp', 'loaddistribution': 'default'}}], 'probes': [{'name': \"[variables('lbwebserviceprobename')]\", 'properties': {'protocol': 'http', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 5, 'requestpath': 'hostingstart.html'}}], 'inboundnatpools': [{'name': \"[variables('natpoolnameservice')]\", 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigidservice')]\"}, 'protocol': 'tcp', 'frontendportrangestart': \"[variables('natstartportservice')]\", 'frontendportrangeend': \"[variables('natendportservice')]\", 'backendport': \"[variables('natbackendportservice')]\"}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': 'appnetworksecuritygroup', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'webrule', 'properties': {'description': 'this rule allows traffic in on port 80', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': \"[variables('appvnetsubnet1prefix')]\", 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'webhttpsrule', 'properties': {'description': 'this rule allows traffic in on port 443', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': \"[variables('appvnetsubnet1prefix')]\", 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'rdprule', 'properties': {'description': 'this rule allows traffic on port 3389 from the web', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': \"[variables('appvnetsubnet1prefix')]\", 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('region-tm-test-vm'),copyindex())]\", 'location': \"[variables('region')[copyindex()]]\", 'tags': {'displayname': 'regions-test-vms'}, 'comments': 'test vms to test traffic manager scenario from each region!', 'dependson': ['region-tm-vm-pips-loop', 'region-tm-vm-nics-loop'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2012-r2-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}}, 'osprofile': {'computername': \"[replace(replace(concat(variables('region-tm-test-vm'),copyindex()),'_',''),'-','')]\", 'adminusername': \"[parameters('adminuser')]\", 'windowsconfiguration': {'provisionvmagent': true, 'enableautomaticupdates': true}, 'adminpassword': \"[parameters('adminuserpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('region-tm-vm-nic'), copyindex()))]\"}]}}, 'copy': {'name': 'test-vms-loop', 'count': 2}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/availabilitysets', 'name': \"[concat(variables('region-availabilityset'),copyindex())]\", 'location': \"[variables('region')[copyindex()]]\", 'tags': {'displayname': 'region-availabilitysets'}, 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}, 'copy': {'name': 'web-vms-availabilitysets-loop', 'count': 2}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'comments': 'simple network security group for default subnets', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[concat(variables('region-vnet-name'), copyindex(), '-default-nsg')]\", 'location': \"[variables('region')[copyindex()]]\", 'properties': {'securityrules': \"[variables('networksecuritygroupallowrdprule')]\"}, 'copy': {'name': 'default-nsg-loop', 'count': 2}}{'comments': 'simple network security group for front end subnets', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[concat(variables('region-vnet-name'), copyindex(), '-', variables('vnet-front-end-subnet'), '-nsg')]\", 'location': \"[variables('region')[copyindex()]]\", 'properties': {'securityrules': \"[variables('networksecuritygroupallowrdprule')]\"}, 'copy': {'name': 'front-end-nsg-loop', 'count': 2}}{'type': 'microsoft.network/virtualnetworks', 'name': \"[concat(variables('region-vnet-name'),copyindex())]\", 'apiversion': '2020-07-01', 'location': \"[variables('region')[copyindex()]]\", 'tags': {'displayname': 'vnetloop'}, 'dependson': ['default-nsg-loop', 'front-end-nsg-loop'], 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': 'default', 'properties': {'addressprefix': '10.0.4.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', concat(variables('region-vnet-name'), copyindex(), '-default-nsg'))]\"}}}, {'name': \"[variables('vnet-front-end-subnet')]\", 'properties': {'addressprefix': '10.0.2.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', concat(variables('region-vnet-name'), copyindex(), '-', variables('vnet-front-end-subnet'), '-nsg'))]\"}}}, {'name': \"[variables('vnet-lb-subnet')]\", 'properties': {'addressprefix': '10.0.1.0/24'}}, {'name': \"[variables('vnet-appgw-subnet')]\", 'properties': {'addressprefix': '10.0.3.0/28'}}]}, 'copy': {'name': 'vnetloop', 'count': 2}}{'apiversion': '2020-07-01', 'name': \"[concat(variables('region-web-ilb-pip'),copyindex())]\", 'type': 'microsoft.network/publicipaddresses', 'location': \"[variables('region')[copyindex()]]\", 'tags': {'displayname': 'region-web-ilb-pips'}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[tolower(concat(variables('region-web-lb'),copyindex()))]\"}}, 'copy': {'name': 'region-web-ilb-pip-loop', 'count': 2}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/loadbalancers', 'name': \"[concat(variables('region-web-lb'),copyindex())]\", 'location': \"[variables('region')[copyindex()]]\", 'tags': {'displayname': 'region-web-lbs'}, 'dependson': ['region-web-ilb-pip-loop'], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',concat(variables('region-web-ilb-pip'),copyindex()))]\"}}}], 'backendaddresspools': [{'name': 'backendpool1'}], 'probes': [{'name': 'lbprobe', 'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 2}}], 'loadbalancingrules': [{'name': 'lbrule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', concat(variables('region-web-lb'),copyindex()), 'loadbalancerfrontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', concat(variables('region-web-lb'),copyindex()), 'backendpool1')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', concat(variables('region-web-lb'),copyindex()), 'lbprobe')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'idletimeoutinminutes': 15}}]}, 'copy': {'name': 'region-web-lb-loop', 'count': 2}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(variables('region-tm-vm-pip'),copyindex())]\", 'location': \"[variables('region')[copyindex()]]\", 'tags': {'displayname': 'region-tm-vm-pips'}, 'comments': 'test vms to test traffic manager scenario from each region!', 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[tolower(concat(variables('region-tm-test-vm'),copyindex()))]\"}, 'idletimeoutinminutes': 4}, 'copy': {'name': 'region-tm-vm-pips-loop', 'count': 2}}{'apiversion': '2020-07-01', 'name': \"[concat(variables('region-tm-vm-nic'),copyindex())]\", 'type': 'microsoft.network/networkinterfaces', 'location': \"[variables('region')[copyindex()]]\", 'tags': {'displayname': 'region-tm-vm-nics'}, 'comments': 'test vms to test traffic manager scenario from each region!', 'dependson': ['vnetloop', 'region-tm-vm-pips-loop'], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipaddress': '10.0.4.4', 'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',concat(variables('region-tm-vm-pip'),copyindex()))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', concat(variables('region-vnet-name'),copyindex()), 'default')]\"}}}], 'enableipforwarding': false}, 'copy': {'name': 'region-tm-vm-nics-loop', 'count': 2}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('diskstoragetype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/proximityplacementgroups', 'name': \"[variables('ppg_name')]\", 'location': \"[parameters('location')]\"}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('ansible_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('ansible_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\", \"[resourceid('microsoft.keyvault/vaults',variables('key_vault_name'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('ansiblevmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('ansible_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': 64}, 'datadisks': [{'name': \"[concat(variables('ansible_vm_name'),'-playbook')]\", 'disksizegb': 50, 'lun': 0, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('ansible_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('ansible_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('rdp_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('rdp_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('windowsrdpvmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[variables('rdp_os_version')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'osprofile': {'computername': \"[variables('rdp_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'adminpassword': \"[parameters('sasexternalpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('rdp_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a key resource in an existing KeyVault with apiVersion 2019-09-01.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[variables('key_vault_name')]\", 'location': \"[parameters('location')]\", 'properties': {'enabledfordeployment': true, 'enabledfordiskencryption': false, 'enabledfortemplatedeployment': true, 'enablesoftdelete': false, 'tenantid': \"[variables('tenantid')]\", 'accesspolicies': [{'objectid': \"[parameters('keyvaultownerid')]\", 'tenantid': \"[variables('tenantid')]\", 'permissions': {'keys': \"[variables('keyspermissions')]\", 'secrets': \"[variables('secretspermissions')]\"}}], 'sku': {'name': \"[variables('skuname')]\", 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}}{'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2019-09-01', 'name': \"[concat(variables('key_vault_name'), '/', variables('key_vault_secretname_sasinst'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'value': \"[parameters('sasinternalpassword')]\"}}{'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2019-09-01', 'name': \"[concat(variables('key_vault_name'), '/', variables('key_vault_secretname_sasext'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'value': \"[parameters('sasexternalpassword')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/proximityplacementgroups', 'name': \"[variables('ppg_name')]\", 'location': \"[parameters('location')]\"}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('ansible_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('ansible_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\", \"[resourceid('microsoft.keyvault/vaults',variables('key_vault_name'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('ansiblevmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('ansible_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': 64}, 'datadisks': [{'name': \"[concat(variables('ansible_vm_name'),'-playbook')]\", 'disksizegb': 50, 'lun': 0, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('ansible_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('ansible_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('rdp_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('rdp_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('windowsrdpvmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[variables('rdp_os_version')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'osprofile': {'computername': \"[variables('rdp_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'adminpassword': \"[parameters('sasexternalpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('rdp_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('meta_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('meta_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'tags': \"[variables('sas94vm_tags')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('sasmetavmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('meta_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': \"[variables('sas_osdisk_size')]\"}, 'datadisks': [{'name': \"[concat(variables('meta_vm_name'),'-opt-sas')]\", 'disksizegb': \"[variables('sas_opt_sas_disk_size')]\", 'lun': 0, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('meta_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('meta_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('compute_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('compute_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'tags': \"[variables('sas94vm_tags')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('sascomputevmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('compute_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': \"[variables('sas_osdisk_size')]\"}, 'datadisks': [{'name': \"[concat(variables('compute_vm_name'),'-opt-sas')]\", 'disksizegb': \"[variables('sas_opt_sas_disk_size')]\", 'lun': 0, 'createoption': 'empty'}, {'name': \"[concat(variables('compute_vm_name'),'-sasdata')]\", 'disksizegb': \"[parameters('sasdatastorage')]\", 'lun': 1, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('compute_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'customdata': \"[base64(variables('custom_data_sas'))]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('compute_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('mid_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('mid_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'tags': \"[variables('sas94vm_tags')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('sasmidvmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('mid_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': \"[variables('sas_osdisk_size')]\"}, 'datadisks': [{'name': \"[concat(variables('mid_vm_name'),'-opt-sas')]\", 'disksizegb': \"[variables('sas_opt_sas_disk_size')]\", 'lun': 0, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('mid_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('mid_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('microservices_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('microservices_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'tags': \"[variables('sasviyavm_tags')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('viyamicroservicesvmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('microservices_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': \"[variables('sas_osdisk_size')]\"}, 'datadisks': [{'name': \"[concat(variables('microservices_vm_name'),'-opt-sas')]\", 'disksizegb': \"[variables('sas_opt_sas_disk_size')]\", 'lun': 0, 'createoption': 'empty'}, {'name': \"[concat(variables('microservices_vm_name'),'-sasbackup')]\", 'disksizegb': \"[variables('sas_viya_backup_size')]\", 'lun': 1, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('microservices_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('microservices_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('spre_vm_name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('spre_nw_interface'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnostic_storagegroup_name'))]\"], 'tags': \"[variables('sasviyavm_tags')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('viyasprevmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'redhat', 'offer': 'rhel', 'sku': '7.7', 'version': 'latest'}, 'osdisk': {'ostype': 'linux', 'name': \"[concat(variables('spre_vm_name'),'-osdisk')]\", 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': \"[variables('sas_osdisk_size')]\"}, 'datadisks': [{'name': \"[concat(variables('spre_vm_name'),'-opt-sas')]\", 'disksizegb': \"[variables('sas_opt_sas_disk_size')]\", 'lun': 0, 'createoption': 'empty'}, {'name': \"[concat(variables('spre_vm_name'),'-sasbackup')]\", 'disksizegb': \"[variables('sas_viya_backup_size')]\", 'lun': 1, 'createoption': 'empty'}]}, 'osprofile': {'computername': \"[variables('spre_vm_name')]\", 'adminusername': \"[parameters('primaryusername')]\", 'customdata': \"[base64(variables('custom_data_sas'))]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[concat('/home/', parameters('primaryusername'), '/.ssh/authorized_keys')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('spre_nw_interface'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagnostic_storagegroup_name')).primaryendpoints.blob]\"}}, 'proximityplacementgroup': {'id': \"[resourceid('microsoft.compute/proximityplacementgroups',variables('ppg_name'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-ansiblesslcopy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase4-viyainstallpart2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runphase2ansiblesslcopy.log;')]\"}, 'filepath': {'value': 'scripts/ansible_ssl.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-viyainstallpart1', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-microservicesviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-spreviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-cascontrollerviyaark')]\", 'casworkerviyaarkcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runphase3_viyainstallpart1.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase4-viyainstallpart2', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase3-viyainstallpart1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runphase4_viyainstallpart2.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase5-viyainstallpart3', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '3',' ','2>&1 | tee /var/log/sas/install/runphase5_viyainstallpart3.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase6-viyapostinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase5-viyainstallpart3')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '4',' ','2>&1 | tee /var/log/sas/install/runphase6_viyapostinstall.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'rdpcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('rdp_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': 'powershell.exe expand-archive -literalpath client_install.zip -destination c:\\\\windowsazure\\\\client_install'}, 'filepath': {'value': 'client_install.zip'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sasclientinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'rdpcontentfiledownload')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('powershell -executionpolicy unrestricted -file sas_client_install.ps1 ','-stg_acc_name ',parameters('storageaccountname'),' -stg_key ',parameters('storageaccountkey'),' -file_share_name ',parameters('filesharename'),' -depot_folder_name ',parameters('sasdepotfolder'),' -clients_sid ',parameters('sasserverlicensefile'),' -app_name ',parameters('sasapplicationname'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactslocation'),' -storageuri ',variables('storage_account_uri'))]\"}, 'filepath': {'value': 'sas_client_install.ps1'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-metahostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','meta',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-ansiblesslcopy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase4-viyainstallpart2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runphase2ansiblesslcopy.log;')]\"}, 'filepath': {'value': 'scripts/ansible_ssl.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-viyainstallpart1', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-microservicesviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-spreviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-cascontrollerviyaark')]\", 'casworkerviyaarkcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runphase3_viyainstallpart1.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase4-viyainstallpart2', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase3-viyainstallpart1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runphase4_viyainstallpart2.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase5-viyainstallpart3', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '3',' ','2>&1 | tee /var/log/sas/install/runphase5_viyainstallpart3.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase6-viyapostinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase5-viyainstallpart3')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '4',' ','2>&1 | tee /var/log/sas/install/runphase6_viyapostinstall.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'rdpcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('rdp_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': 'powershell.exe expand-archive -literalpath client_install.zip -destination c:\\\\windowsazure\\\\client_install'}, 'filepath': {'value': 'client_install.zip'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sasclientinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'rdpcontentfiledownload')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('powershell -executionpolicy unrestricted -file sas_client_install.ps1 ','-stg_acc_name ',parameters('storageaccountname'),' -stg_key ',parameters('storageaccountkey'),' -file_share_name ',parameters('filesharename'),' -depot_folder_name ',parameters('sasdepotfolder'),' -clients_sid ',parameters('sasserverlicensefile'),' -app_name ',parameters('sasapplicationname'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactslocation'),' -storageuri ',variables('storage_account_uri'))]\"}, 'filepath': {'value': 'sas_client_install.ps1'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-metahostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','meta',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metacontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-metahostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-metainstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metacontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_install.sh 2>&1 | tee /var/log/sas/install/meta_install.log')]\"}, 'filepath': {'value': 'scripts/meta_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-metaconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_config.sh 2>&1 | tee /var/log/sas/install/meta_config.log')]\"}, 'filepath': {'value': 'scripts/meta_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-computehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','compute',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computecontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-computehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-computeinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computecontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_install.sh 2>&1 | tee /var/log/sas/install/compute_install.log')]\"}, 'filepath': {'value': 'scripts/compute_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-computeconfig', 'dependson': [\"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-metaconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_config.sh 2>&1 | tee /var/log/sas/install/compute_config.log')]\"}, 'filepath': {'value': 'scripts/compute_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-07-01','full').identity.principalid]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-ansiblesslcopy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase4-viyainstallpart2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runphase2ansiblesslcopy.log;')]\"}, 'filepath': {'value': 'scripts/ansible_ssl.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-viyainstallpart1', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-microservicesviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-spreviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-cascontrollerviyaark')]\", 'casworkerviyaarkcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runphase3_viyainstallpart1.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase4-viyainstallpart2', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase3-viyainstallpart1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runphase4_viyainstallpart2.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase5-viyainstallpart3', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '3',' ','2>&1 | tee /var/log/sas/install/runphase5_viyainstallpart3.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase6-viyapostinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase5-viyainstallpart3')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '4',' ','2>&1 | tee /var/log/sas/install/runphase6_viyapostinstall.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'rdpcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('rdp_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': 'powershell.exe expand-archive -literalpath client_install.zip -destination c:\\\\windowsazure\\\\client_install'}, 'filepath': {'value': 'client_install.zip'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sasclientinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'rdpcontentfiledownload')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('powershell -executionpolicy unrestricted -file sas_client_install.ps1 ','-stg_acc_name ',parameters('storageaccountname'),' -stg_key ',parameters('storageaccountkey'),' -file_share_name ',parameters('filesharename'),' -depot_folder_name ',parameters('sasdepotfolder'),' -clients_sid ',parameters('sasserverlicensefile'),' -app_name ',parameters('sasapplicationname'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactslocation'),' -storageuri ',variables('storage_account_uri'))]\"}, 'filepath': {'value': 'sas_client_install.ps1'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-metahostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','meta',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metacontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-metahostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-metainstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metacontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_install.sh 2>&1 | tee /var/log/sas/install/meta_install.log')]\"}, 'filepath': {'value': 'scripts/meta_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-metaconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_config.sh 2>&1 | tee /var/log/sas/install/meta_config.log')]\"}, 'filepath': {'value': 'scripts/meta_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-computehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','compute',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computecontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-computehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-computeinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computecontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_install.sh 2>&1 | tee /var/log/sas/install/compute_install.log')]\"}, 'filepath': {'value': 'scripts/compute_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-computeconfig', 'dependson': [\"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-metaconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_config.sh 2>&1 | tee /var/log/sas/install/compute_config.log')]\"}, 'filepath': {'value': 'scripts/compute_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-midhostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','midaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','mid',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-midhostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-midinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','midcontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./mid_install.sh 2>&1 | tee /var/log/sas/install/mid-install.log')]\"}, 'filepath': {'value': 'scripts/mid_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-midconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-computeconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./mid_config.sh 2>&1 | tee /var/log/sas/install/mid_config.log')]\"}, 'filepath': {'value': 'scripts/mid_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicesroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicesaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','midaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-microserviceshostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','microservicesaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicescontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-microserviceshostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': 'cp viya-ark.tar.gz /tmp'}, 'filepath': {'value': 'properties/viya-ark.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-microservicesviyaark', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'microservicescontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runphase2_viyaark.log')]\"}, 'filepath': {'value': 'scripts/viya_ark.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'ansibleaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('ansible_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-ansiblehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactslocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/ansible_setup.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-ansiblesslcopy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('ansible_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase4-viyainstallpart2')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runphase2ansiblesslcopy.log;')]\"}, 'filepath': {'value': 'scripts/ansible_ssl.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-viyainstallpart1', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-microservicesviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-spreviyaark')]\", \"[resourceid('microsoft.resources/deployments', 'phase2-cascontrollerviyaark')]\", 'casworkerviyaarkcopy'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runphase3_viyainstallpart1.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase4-viyainstallpart2', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase3-viyainstallpart1')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runphase4_viyainstallpart2.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase5-viyainstallpart3', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '3',' ','2>&1 | tee /var/log/sas/install/runphase5_viyainstallpart3.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase6-viyapostinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'phase5-viyainstallpart3')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('ansible_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viyainstall.sh',' ', '4',' ','2>&1 | tee /var/log/sas/install/runphase6_viyapostinstall.log')]\"}, 'filepath': {'value': 'scripts/viyainstall.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'rdpcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('rdp_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': 'powershell.exe expand-archive -literalpath client_install.zip -destination c:\\\\windowsazure\\\\client_install'}, 'filepath': {'value': 'client_install.zip'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sasclientinstall', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'rdpcontentfiledownload')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('windows_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('rdp_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('powershell -executionpolicy unrestricted -file sas_client_install.ps1 ','-stg_acc_name ',parameters('storageaccountname'),' -stg_key ',parameters('storageaccountkey'),' -file_share_name ',parameters('filesharename'),' -depot_folder_name ',parameters('sasdepotfolder'),' -clients_sid ',parameters('sasserverlicensefile'),' -app_name ',parameters('sasapplicationname'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactslocation'),' -storageuri ',variables('storage_account_uri'))]\"}, 'filepath': {'value': 'sas_client_install.ps1'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metaaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('meta_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','ansibleaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-metahostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','meta',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'metacontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-metahostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-metainstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metacontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_install.sh 2>&1 | tee /var/log/sas/install/meta_install.log')]\"}, 'filepath': {'value': 'scripts/meta_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-metaconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('meta_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-metainstall')]\", \"[resourceid('microsoft.resources/deployments','phase2-ansiblesslcopy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('meta_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./meta_config.sh 2>&1 | tee /var/log/sas/install/meta_config.log')]\"}, 'filepath': {'value': 'scripts/meta_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computeaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','metaaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-computehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','compute',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'computecontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-computehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-computeinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('compute_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computecontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_install.sh 2>&1 | tee /var/log/sas/install/compute_install.log')]\"}, 'filepath': {'value': 'scripts/compute_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-computeconfig', 'dependson': [\"[resourceid('microsoft.resources/deployments','phase2-computeinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-metaconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('compute_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./compute_config.sh 2>&1 | tee /var/log/sas/install/compute_config.log')]\"}, 'filepath': {'value': 'scripts/compute_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','computeaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-midhostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','midaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('sasapplicationname'),' ',parameters('sasdepotfolder'),' ',parameters('filesharename'),' ',parameters('storageaccountname'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('sasserverlicensefile'),' ','mid',' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/sasapp_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'midcontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-midhostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': 'cp response-properties.tar.gz /tmp'}, 'filepath': {'value': 'properties/response-properties.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-midinstall', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','midcontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments','phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./mid_install.sh 2>&1 | tee /var/log/sas/install/mid-install.log')]\"}, 'filepath': {'value': 'scripts/mid_install.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase3-midconfig', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('mid_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase2-midinstall')]\", \"[resourceid('microsoft.resources/deployments','phase3-computeconfig')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('mid_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./mid_config.sh 2>&1 | tee /var/log/sas/install/mid_config.log')]\"}, 'filepath': {'value': 'scripts/mid_config.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicesroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicesaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','midaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-microserviceshostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('microservices_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','microservicesaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('viyarepofolder'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'microservicescontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('microservices_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-microserviceshostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': 'cp viya-ark.tar.gz /tmp'}, 'filepath': {'value': 'properties/viya-ark.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-microservicesviyaark', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'microservicescontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('microservices_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runphase2_viyaark.log')]\"}, 'filepath': {'value': 'scripts/viya_ark.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'spreroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('spre_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('spre_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('spre_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'spreaccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('spre_vm_name'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\", \"[resourceid('microsoft.resources/deployments','cascontrolleraccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('spre_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-sprehostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',  variables('spre_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','spreaccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('spre_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('filesharename'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'sprecontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('spre_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-sprehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('spre_vm_name')]\"}, 'commandtoexecute': {'value': 'cp viya-ark.tar.gz /tmp'}, 'filepath': {'value': 'properties/viya-ark.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-spreviyaark', 'dependson': [\"[resourceid('microsoft.resources/deployments','sprecontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('spre_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runphase2_viyaark.log')]\"}, 'filepath': {'value': 'scripts/viya_ark.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'cascontrollerroleassignment', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('cascontroller_vm_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('role_assignment_template')]\"}, 'parameters': {'roleassignmentname': {'value': \"[guid(resourceid('microsoft.compute/virtualmachines', variables('cascontroller_vm_name')), variables('reader_role'), variables('rbacprincipalid'))]\"}, 'roledefinitionid': {'value': \"[variables('reader_role')]\"}, 'principalid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('cascontroller_vm_name')),'2019-07-01','full').identity.principalid]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'cascontrolleraccesspolicy', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('cascontroller_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','microservicesaccesspolicy')]\", \"[resourceid('microsoft.keyvault/vaults', variables('key_vault_name'))]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('access_policy_template')]\"}, 'parameters': {'keyvaultname': {'value': \"[variables('key_vault_name')]\"}, 'tenantid': {'value': \"[variables('tenantid')]\"}, 'objectid': {'value': \"[reference(resourceid('microsoft.compute/virtualmachines',variables('cascontroller_vm_name')),'2019-12-01', 'full').identity.principalid]\"}, 'secretspermissions': {'value': \"[variables('secretspermissions')]\"}, 'keyspermissions': {'value': \"[variables('keyspermissions')]\"}, 'certificatespermissions': {'value': \"[variables('certificatespermissions')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase1-cascontrollerhostsetup', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',  variables('cascontroller_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','cascontrolleraccesspolicy')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('cascontroller_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageaccountname'),' ',parameters('filesharename'),' ',parameters('filesharename'),' ',parameters('sasapplicationname'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberofviyacasnodes'),' ',parameters('_artifactslocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runphase1_hostsetup.log')]\"}, 'filepath': {'value': 'scripts/viya_prereq.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'cascontentfiledownload', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines',variables('cascontroller_vm_name'))]\", \"[resourceid('microsoft.resources/deployments','phase1-cascontrollerhostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('cascontroller_vm_name')]\"}, 'commandtoexecute': {'value': 'cp viya-ark.tar.gz /tmp'}, 'filepath': {'value': 'properties/viya-ark.tar.gz'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2019-10-01', 'name': 'phase2-cascontrollerviyaark', 'dependson': [\"[resourceid('microsoft.resources/deployments', 'cascontentfiledownload')]\", \"[resourceid('microsoft.resources/deployments', 'phase1-ansiblehostsetup')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('linux_extension_template')]\"}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vmname': {'value': \"[variables('cascontroller_vm_name')]\"}, 'commandtoexecute': {'value': \"[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runphase2_viyaark.log')]\"}, 'filepath': {'value': 'scripts/viya_ark.sh'}, '_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2019-06-01', 'name': \"[variables('vnet_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups',variables('pub_sub_nw_sg'))]\", \"[resourceid('microsoft.network/networksecuritygroups',variables('pvt_sub_nw_sg'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddresscidr')]\"]}, 'subnets': [{'name': \"[variables('vnet_pvt_subnt')]\", 'properties': {'addressprefix': \"[parameters('sasprivatesubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pvt_sub_nw_sg'))]\"}}}, {'name': \"[variables('vnet_viya_pvt_subnt')]\", 'properties': {'addressprefix': \"[parameters('viyaprivatesubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pvt_sub_nw_sg'))]\"}}}, {'name': \"[variables('vnet_pub_subnt')]\", 'properties': {'addressprefix': \"[parameters('ansiblebastionpublicsubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pub_sub_nw_sg'))]\"}}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('pub_sub_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('adminingresslocation')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}], 'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('pvt_sub_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('ansible_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('adminingresslocation')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}], 'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('meta_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2019-06-01', 'name': \"[variables('vnet_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups',variables('pub_sub_nw_sg'))]\", \"[resourceid('microsoft.network/networksecuritygroups',variables('pvt_sub_nw_sg'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddresscidr')]\"]}, 'subnets': [{'name': \"[variables('vnet_pvt_subnt')]\", 'properties': {'addressprefix': \"[parameters('sasprivatesubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pvt_sub_nw_sg'))]\"}}}, {'name': \"[variables('vnet_viya_pvt_subnt')]\", 'properties': {'addressprefix': \"[parameters('viyaprivatesubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pvt_sub_nw_sg'))]\"}}}, {'name': \"[variables('vnet_pub_subnt')]\", 'properties': {'addressprefix': \"[parameters('ansiblebastionpublicsubnetcidr')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('pub_sub_nw_sg'))]\"}}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('pub_sub_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('adminingresslocation')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}], 'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('pvt_sub_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('ansible_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': \"[parameters('adminingresslocation')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}], 'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80,443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('meta_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('mid_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('compute_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('rdp_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('microservices_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('spre_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('cascontroller_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-09-01', 'name': \"[variables('casworker_nw_sg')]\", 'location': \"[parameters('location')]\", 'properties': {'defaultsecurityrules': [{'name': 'allowvnetinbound', 'properties': {'description': 'allow inbound traffic from all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'description': 'deny all inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'inbound'}}, {'name': 'allowvnetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to all vms in vnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 65000, 'direction': 'outbound'}}, {'name': 'allowinternetoutbound', 'properties': {'description': 'allow outbound traffic from all vms to the internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 65001, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'description': 'deny all outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 65500, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-09-01', 'name': \"[variables('ansible_pub_nw_interface')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'basic', 'tier': 'regional'}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2019-09-01', 'name': \"[variables('ansible_nw_interface')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('ansible_pub_nw_interface'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('ansible_nw_sg'))]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet_name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('ansible_pub_nw_interface'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet_name'), variables('vnet_pub_subnt'))]\"}, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': true, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('ansible_nw_sg'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2019-09-01', 'name': \"[variables('rdp_nw_interface')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('rdp_nw_sg'))]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet_name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet_name'), variables('vnet_pvt_subnt'))]\"}, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': true, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('rdp_nw_sg'))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('sourceservername')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('sourcenicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftsqlserver', 'offer': 'sql2016sp1-ws2016', 'sku': 'standard', 'version': 'latest'}, 'osdisk': {'ostype': 'windows', 'createoption': 'fromimage', 'caching': 'readwrite', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': 127}, 'datadisks': [{'lun': 0, 'name': \"[concat(variables('sourceservername'),'_disk-1')]\", 'createoption': 'empty', 'caching': 'readonly', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'disksizegb': 1023}]}, 'osprofile': {'computername': \"[variables('sourceservername')]\", 'adminusername': \"[parameters('sourcewindowsadminusername')]\", 'adminpassword': \"[parameters('sourcewindowsadminpassword')]\", 'windowsconfiguration': {'provisionvmagent': true, 'enableautomaticupdates': true}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('sourcenicname')))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), '2019-06-01').primaryendpoints['blob']]\"}}}, 'resources': [{'apiversion': '2019-12-01', 'type': 'extensions', 'name': 'sqliaasextension', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('sourceservername'))]\"], 'properties': {'type': 'sqliaasagent', 'publisher': 'microsoft.sqlserver.management', 'typehandlerversion': '1.2', 'autoupgrademinorversion': 'true', 'settings': {'autotelemetrysettings': {'region': \"[parameters('location')]\"}, 'autopatchingsettings': {'patchcategory': 'windowsmandatoryupdates', 'enable': false, 'dayofweek': 'sunday', 'maintenancewindowstartinghour': '2', 'maintenancewindowduration': '60'}, 'keyvaultcredentialsettings': {'enable': false}, 'serverconfigurationsmanagementsettings': {'sqlconnectivityupdatesettings': {'connectivitytype': 'private', 'port': '1433'}, 'sqlworkloadtypeupdatesettings': {'sqlworkloadtype': 'oltp'}, 'sqlstorageupdatesettings': {'diskcount': '1', 'numberofcolumns': '8', 'startingdeviceid': '2', 'diskconfigurationtype': 'new'}, 'additionalfeaturesserverconfigurations': {'isrservicesenabled': 'false'}}}, 'protectedsettings': {'sqlauthupdateusername': \"[parameters('sourcewindowsadminusername')]\", 'sqlauthupdatepassword': \"[parameters('sourcesqlauthenticationpassword')]\"}}}, {'apiversion': '2019-12-01', 'type': 'extensions', 'name': 'customscriptextension', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('sourceservername'))]\", \"[resourceid('microsoft.compute/virtualmachines/extensions', variables('sourceservername'), 'sqliaasextension')]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'settings': {'fileuris': \"[variables('scriptfiles')]\"}, 'protectedsettings': {'commandtoexecute': \"[concat('powershell -executionpolicy unrestricted -file ', './', variables('scriptlocation'), ' ', variables('scriptparameters'))]\"}}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": " {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'scope': \"[format('microsoft.storage/storageaccounts/{0}', parameters('storageaccountname'))]\", 'name': \"[guid(resourceid('microsoft.dataprotection/backupvaults', parameters('vaultname')), variables('roledefinitionid'), resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')))]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.dataprotection/backupvaults', parameters('vaultname')), '2021-01-01', 'full').identity.principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.dataprotection/backupvaults', parameters('vaultname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot'}}{'type': 'microsoft.storage/storageaccounts/blobservices/containers', 'apiversion': '2021-04-01', 'name': \"[format('{0}/default/{1}', variables('storageaccountname'), variables('containername'))]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/networksecuritygroups', 'location': \"[parameters('location')]\", 'name': \"[parameters('nsgname')]\"}{'apiversion': '2020-06-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('loadbalancerpublicipname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[variables('computelocation')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet0name')]\", 'properties': {'addressprefix': \"[variables('subnet0prefix')]\"}}]}, 'tags': {'resourcetype': 'service fabric', 'clustername': \"[parameters('clustername')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'tags': {'resourcetype': 'service fabric', 'clustername': \"[parameters('clustername')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet0name')]\", 'properties': {'addressprefix': \"[variables('subnet0prefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[variables('lbipname')]\", 'location': \"[parameters('location')]\", 'tags': {'resourcetype': 'service fabric', 'clustername': \"[parameters('clustername')]\"}, 'properties': {'dnssettings': {'domainnamelabel': \"[variables('dnsname')]\"}, 'publicipallocationmethod': 'dynamic'}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2018-08-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', concat('nsg-', variables('subnetsettings')[0].subnetname))]\", \"[resourceid('microsoft.network/networksecuritygroups/', concat('nsg-', variables('subnetsettings')[1].subnetname))]\", \"[resourceid('microsoft.network/networksecuritygroups/', concat('nsg-', variables('subnetsettings')[2].subnetname))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'copy': [{'name': 'subnets', 'count': \"[length(variables('subnetsettings'))]\", 'input': {'name': \"[variables('subnetsettings')[copyindex('subnets')].subnetname]\", 'properties': {'addressprefix': \"[variables('subnetsettings')[copyindex('subnets')].subnetprefix]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', concat('nsg-', variables('subnetsettings')[copyindex('subnets')].subnetname))]\"}}}}]}, 'tags': {'resourcetype': 'service fabric', 'clustername': \"[parameters('clustername')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-12-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[listkeyvalue(variables('appconfigref'), '2019-10-01', variables('windowsosversionparameters')).value]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': \"[listkeyvalue(variables('appconfigref'), '2019-10-01', variables('disksizegbparameters')).value]\", 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', parameters('storageaccountname'))).primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2'}{'type': 'microsoft.storage/storageaccounts/blobservices/containers', 'apiversion': '2021-04-01', 'name': \"[format('{0}/default/{1}', parameters('storageaccountname'), parameters('blobcontainername'))]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'installmongo', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-08-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/extensions/', variables('vmname'),'configuremongo')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'), concat('templates/install-mongo.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'vmname': {'value': \"[variables('vmname')]\"}, 'mongoinstalluri': {'value': \"[uri(parameters('_artifactslocation'), concat('scripts/mongo-install-ubuntu.sh', parameters('_artifactslocationsastoken')))]\"}, 'location': {'value': \"[parameters('location')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('clusternode1').defaultstorageaccount.name]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-06-01', 'sku': {'name': \"[variables('clusternode1').defaultstorageaccount.type]\"}, 'kind': 'storage', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('defaultstorageaccount').name]\", 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'sku': {'name': \"[variables('defaultstorageaccount').type]\"}, 'kind': 'storagev2', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vnet1').dnsname]\", 'apiversion': '2019-12-01', 'location': \"[variables('vnet1').location]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('vnet1').dnsnicname)]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('unbuntunodevirtualmachinesize')]\"}, 'osprofile': {'computername': \"[variables('vnet1').dnsname]\", 'adminusername': \"[parameters('sshusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('ubuntu')]\", 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('vnet1').dnsnicname)]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'comments': \"simple network security group for subnet [variables('vnet1').subnetname]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-04-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[variables('vnet1').location]\", 'properties': {}}{'comments': \"simple network security group for subnet [variables('vnet2').subnetname]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-04-01', 'name': \"[variables('networksecuritygroupname2')]\", 'location': \"[variables('vnet2').location]\", 'properties': {}}{'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnet1').name]\", 'apiversion': '2020-04-01', 'location': \"[variables('vnet1').location]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet1').addressspaceprefix]\"]}, 'dhcpoptions': {'dnsservers': [\"[variables('vnet1').dnsipaddress]\"]}, 'subnets': [{'name': \"[variables('vnet1').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet1').subnetprefix]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}, {'name': \"[variables('vnet1').gatewaysubnetname]\", 'properties': {'addressprefix': \"[variables('vnet1').gatewaysubnetprefix]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('vnet1').vpngatewayip]\", 'location': \"[variables('vnet1').location]\", 'apiversion': '2020-04-01', 'properties': {'publicipallocationmethod': 'dynamic'}}{'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[variables('vnet1').vpngatewayname]\", 'location': \"[variables('vnet1').location]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('vnet1').vpngatewayip)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1').name)]\"], 'apiversion': '2020-04-01', 'properties': {'gatewaytype': 'vpn', 'vpntype': 'routebased', 'sku': {'name': 'basic', 'tier': 'basic'}, 'ipconfigurations': [{'name': 'default', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet1').name, variables('vnet1').gatewaysubnetname)]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('vnet1').vpngatewayip)]\"}}}]}}{'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnet2').name]\", 'apiversion': '2020-04-01', 'location': \"[variables('vnet2').location]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname2'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet2').addressspaceprefix]\"]}, 'dhcpoptions': {'dnsservers': [\"[variables('vnet2').dnsipaddress]\"]}, 'subnets': [{'name': \"[variables('vnet2').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet2').subnetprefix]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname2'))]\"}}}, {'name': \"[variables('vnet2').gatewaysubnetname]\", 'properties': {'addressprefix': \"[variables('vnet2').gatewaysubnetprefix]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('vnet2').vpngatewayip]\", 'location': \"[variables('vnet2').location]\", 'apiversion': '2020-04-01', 'properties': {'publicipallocationmethod': 'dynamic'}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('clusternode1').defaultstorageaccount.name]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-06-01', 'sku': {'name': \"[variables('clusternode1').defaultstorageaccount.type]\"}, 'kind': 'storage', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('clstgacnt')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-06-01', 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('networksecuritygroup').name]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-05-01', 'properties': {'securityrules': [{'name': 'allow_hdinsight_management_traffic', 'properties': {'description': 'allow traffic from the azure health and management services to reach hdinsight', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'hdinsight', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 300, 'direction': 'inbound'}}, {'name': 'allow_azure_resolver_traffic', 'properties': {'description': \"allow access from azure's recursive resolver\", 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '168.63.129.16', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 301, 'direction': 'inbound'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2019-08-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'y1', 'tier': 'dynamic'}, 'properties': {'name': \"[variables('hostingplanname')]\", 'computemode': 'dynamic'}}{'apiversion': '2019-08-01', 'type': 'microsoft.web/sites', 'name': \"[parameters('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'siteconfig': {'appsettings': [{'name': 'azurewebjobsdashboard', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'azurewebjobsstorage', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'website_contentshare', 'value': \"[tolower(parameters('functionappname'))]\"}, {'name': 'functions_extension_version', 'value': '~1'}, {'name': 'website_node_default_version', 'value': '6.5.0'}]}}, 'resources': [{'apiversion': '2019-08-01', 'name': 'web', 'type': 'sourcecontrols', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('functionappname'))]\"], 'properties': {'repourl': \"[variables('repourl')]\", 'branch': \"[variables('branch')]\", 'ismanualintegration': true}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'type': 'microsoft.web/connections', 'apiversion': '2016-06-01', 'name': \"[parameters('as2_primary_connection_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.logic/integrationaccounts', parameters('primary_integrationaccountname'))]\"], 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': \"[parameters('as2_primary_connection_displayname')]\", 'parametervalues': {'integrationaccountid': \"[resourceid(parameters('primary_integrationaccountresourcegroup'), 'microsoft.logic/integrationaccounts', parameters('primary_integrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid(parameters('primary_integrationaccountresourcegroup'), 'microsoft.logic/integrationaccounts', parameters('primary_integrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2016-06-01', 'name': \"[parameters('as2_secondary_connection_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.logic/integrationaccounts', parameters('secondary_integrationaccountname'))]\"], 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': \"[parameters('as2_secondary_connection_displayname')]\", 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('secondary_integrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('secondary_integrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2016-06-01', 'name': \"[parameters('edifact_primary_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('edifactid')]\"}, 'displayname': \"[parameters('edifact_primary_connection_displayname')]\", 'parametervalues': {'integrationaccountid': \"[resourceid(parameters('primary_integrationaccountresourcegroup'), 'microsoft.logic/integrationaccounts', parameters('primary_integrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid(parameters('primary_integrationaccountresourcegroup'), 'microsoft.logic/integrationaccounts', parameters('primary_integrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2016-06-01', 'name': \"[parameters('edifact_secondary_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('edifactid')]\"}, 'displayname': \"[parameters('edifact_secondary_connection_displayname')]\", 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('secondary_integrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('secondary_integrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2016-06-01', 'name': \"[parameters('x12_primary_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('x12id')]\"}, 'displayname': \"[parameters('x12_primary_connection_displayname')]\", 'parametervalues': {'integrationaccountid': \"[resourceid(parameters('primary_integrationaccountresourcegroup'), 'microsoft.logic/integrationaccounts', parameters('primary_integrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid(parameters('primary_integrationaccountresourcegroup'), 'microsoft.logic/integrationaccounts', parameters('primary_integrationaccountname')), '2019-05-01').value]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus Namespace and Topic.\n\n===\n\n", "truth": " {'type': 'microsoft.servicebus/namespaces', 'sku': {'name': 'standard', 'tier': 'standard'}, 'name': \"[parameters('servicebusnamespace')]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'properties': {'metricid': \"[concat(subscription().subscriptionid, ':router', parameters('servicebusnamespace'))]\", 'createdat': '2018-04-07t12:06:43.41z', 'updatedat': '2018-04-07t12:07:09.597z', 'servicebusendpoint': \"[concat('https://', parameters('servicebusnamespace'),'.servicebus.windows.net:443/')]\", 'status': 'active'}}{'type': 'microsoft.servicebus/namespaces/authorizationrules', 'name': \"[concat(parameters('servicebusnamespace'), '/', 'rootmanagesharedaccesskey')]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\"], 'properties': {'rights': ['listen', 'manage', 'send']}}{'type': 'microsoft.servicebus/namespaces/topics', 'name': \"[concat(parameters('servicebusnamespace'), '/', parameters('messageroutingtopic'))]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\"], 'properties': {'defaultmessagetimetolive': 'p14d', 'maxsizeinmegabytes': 1024, 'requiresduplicatedetection': false, 'duplicatedetectionhistorytimewindow': 'pt10m', 'enablebatchedoperations': true, 'status': 'active', 'supportordering': false, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': true, 'enableexpress': false}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.servicebus/namespaces', 'sku': {'name': 'standard', 'tier': 'standard'}, 'name': \"[parameters('servicebusnamespace')]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'properties': {'metricid': \"[concat(subscription().subscriptionid, ':router', parameters('servicebusnamespace'))]\", 'createdat': '2018-04-07t12:06:43.41z', 'updatedat': '2018-04-07t12:07:09.597z', 'servicebusendpoint': \"[concat('https://', parameters('servicebusnamespace'),'.servicebus.windows.net:443/')]\", 'status': 'active'}}{'type': 'microsoft.servicebus/namespaces/authorizationrules', 'name': \"[concat(parameters('servicebusnamespace'), '/', 'rootmanagesharedaccesskey')]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\"], 'properties': {'rights': ['listen', 'manage', 'send']}}{'type': 'microsoft.servicebus/namespaces/topics', 'name': \"[concat(parameters('servicebusnamespace'), '/', parameters('messageroutingtopic'))]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\"], 'properties': {'defaultmessagetimetolive': 'p14d', 'maxsizeinmegabytes': 1024, 'requiresduplicatedetection': false, 'duplicatedetectionhistorytimewindow': 'pt10m', 'enablebatchedoperations': true, 'status': 'active', 'supportordering': false, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': true, 'enableexpress': false}}{'type': 'microsoft.servicebus/namespaces/topics/subscriptions', 'name': \"[concat(parameters('servicebusnamespace'), '/', parameters('messageroutingtopic'), '/', parameters('backendlogicappsubscription'))]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\", \"[resourceid('microsoft.servicebus/namespaces/topics', parameters('servicebusnamespace'), parameters('messageroutingtopic'))]\"], 'properties': {'lockduration': 'pt30s', 'requiressession': true, 'defaultmessagetimetolive': 'p14d', 'deadletteringonmessageexpiration': false, 'deadletteringonfilterevaluationexceptions': false, 'maxdeliverycount': 10, 'status': 'active', 'enablebatchedoperations': false, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s'}}{'type': 'microsoft.servicebus/namespaces/topics/subscriptions', 'name': \"[concat(parameters('servicebusnamespace'), '/', parameters('messageroutingtopic'), '/', parameters('clientlogicappsubscription'))]\", 'apiversion': '2017-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespace'))]\", \"[resourceid('microsoft.servicebus/namespaces/topics', parameters('servicebusnamespace'), parameters('messageroutingtopic'))]\"], 'properties': {'lockduration': 'pt30s', 'requiressession': true, 'defaultmessagetimetolive': 'p14d', 'deadletteringonmessageexpiration': false, 'deadletteringonfilterevaluationexceptions': false, 'maxdeliverycount': 10, 'status': 'active', 'enablebatchedoperations': false, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s'}}{'type': 'microsoft.servicebus/namespaces/topics/ END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-07-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'zones': [\"[parameters('zone')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('osversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('osdiskstorageaccounttype')]\"}}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', format('{0}-nic', parameters('vmname')))]\"}]}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'enableautomaticupdates': true}}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true}}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', format('{0}-nic', parameters('vmname')))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-06-01', 'name': \"[tolower(parameters('storagename'))]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storage', 'tags': {'displayname': 'storage account'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': 'availabilityset1', 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 3, 'platformupdatedomaincount': 20}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('vmname')]\"}}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-07-01', 'location': \"[variables('location')]\", 'name': \"[variables('publicipaddressname')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforlbip')]\"}}, 'type': 'microsoft.network/publicipaddresses'}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('nsgname')]\", 'location': \"[variables('location')]\", 'properties': {'securityrules': [{'name': 'ssh-rule', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'web-rule', 'properties': {'description': 'allow web', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '8080', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}]}}{'apiversion': '2020-07-01', 'location': \"[variables('location')]\", 'name': \"[variables('vnetname')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('nsgname'))]\"], 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': '10.0.0.0/24', 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}]}, 'type': 'microsoft.network/virtualnetworks'} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2021-02-01', 'name': \"[parameters('publicipname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('publicipsku')]\"}, 'properties': {'publicipallocationmethod': \"[parameters('publicipallocationmethod')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-02-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/autoscalesettings', 'apiversion': '2015-04-01', 'name': 'autoscalewad', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachinescalesets/', variables('naminginfix'))]\"], 'properties': {'name': 'autoscalewad', 'targetresourceuri': \"[concat('/subscriptions/',subscription().subscriptionid, '/resourcegroups/',  resourcegroup().name, '/providers/microsoft.compute/virtualmachinescalesets/', variables('naminginfix'))]\", 'enabled': true, 'profiles': [{'name': 'profile1', 'capacity': {'minimum': '1', 'maximum': '10', 'default': '1'}, 'rules': [{'metrictrigger': {'metricname': 'percentage cpu', 'metricresourceuri': \"[concat('/subscriptions/',subscription().subscriptionid, '/resourcegroups/',  resourcegroup().name, '/providers/microsoft.compute/virtualmachinescalesets/', variables('naminginfix'))]\", 'timegrain': 'pt1m', 'statistic': 'average', 'timewindow': 'pt5m', 'timeaggregation': 'average', 'operator': 'greaterthan', 'threshold': 60}, 'scaleaction': {'direction': 'increase', 'type': 'changecount', 'value': '1', 'cooldown': 'pt1m'}}, {'metrictrigger': {'metricname': 'percentage cpu', 'metricresourceuri': \"[concat('/subscriptions/',subscription().subscriptionid, '/resourcegroups/',  resourcegroup().name, '/providers/microsoft.compute/virtualmachinescalesets/', variables('naminginfix'))]\", 'timegrain': 'pt1m', 'statistic': 'average', 'timewindow': 'pt5m', 'timeaggregation': 'average', 'operator': 'lessthan', 'threshold': 30}, 'scaleaction': {'direction': 'decrease', 'type': 'changecount', 'value': '1', 'cooldown': 'pt5m'}}]}]}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'comments': \"simple network security group for subnet [variables('subnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-05-01', 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'apiversion': '2020-08-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[variables('subnetmaster')]\", 'properties': {'addressprefix': '10.0.0.0/24'}}, {'name': \"[variables('subnetdata')]\", 'properties': {'addressprefix': '10.0.1.0/24'}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('masterpublicipaddressname')]\", 'apiversion': '2017-06-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[concat(variables('vmssdomainname'),'-master-node')]\"}}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('datapublicipaddressname')]\", 'apiversion': '2017-06-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[concat(variables('vmssdomainname'),'-data-node')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('storageaccountname')]\", 'apiversion': '2019-06-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storagev2'} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2021-03-01', 'name': \"[variables('publicipaddressname')]\", 'sku': {'name': 'basic'}, 'location': \"[parameters('location')]\", 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-03-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-03-01', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"]}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2021-03-01', 'name': \"[variables('networkinterfacename')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"]} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[parameters('publicipname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('publicipsku')]\"}, 'properties': {'publicipallocationmethod': \"[parameters('publicipallocationmethod')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[parameters('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'apiversion': '2020-06-01', 'name': \"[variables('availabilitysetname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformupdatedomaincount': 2, 'platformfaultdomaincount': 2}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'dependson': [\"[variables('storageaccountname')]\", 'nicloop', \"[variables('availabilitysetname')]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('networkinterfacename'), copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname')).primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/disks', 'apiversion': '2018-09-30', 'name': \"[variables('diskname')]\", 'location': \"[parameters('location')]\", 'properties': {'creationdata': {'createoption': 'import', 'sourceuri': \"[parameters('osdiskvhduri')]\"}, 'ostype': \"[parameters('ostype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-06-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': \"simple network security group for subnet [variables('subnet1name')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2019-06-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/disks', 'apiversion': '2017-03-30', 'name': \"[concat(parameters('vmname'), '_osdisk')]\", 'location': \"[parameters('location')]\", 'properties': {'creationdata': {'createoption': 'import', 'sourceuri': \"[parameters('osdiskvhduri')]\"}, 'ostype': \"[parameters('ostype')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/images', 'apiversion': '2019-12-01', 'name': \"[variables('imagename')]\", 'location': \"[parameters('location')]\", 'properties': {'storageprofile': {'osdisk': {'ostype': \"[parameters('ostype')]\", 'osstate': 'generalized', 'bloburi': \"[parameters('osdiskvhduri')]\", 'storageaccounttype': 'standard_lrs'}}, 'hypervgeneration': 'v2'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'type': 'microsoft.network/loadbalancers', 'name': \"[variables('lbname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'apiversion': '2019-12-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('feipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('bepoolname')]\"}], 'loadbalancingrules': [{'name': 'proberule', 'properties': {'loaddistribution': 'default', 'frontendipconfiguration': {'id': \"[variables('feipconfigid')]\"}, 'backendaddresspool': {'id': \"[variables('bepoolid')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes/', variables('lbname'), variables('probename'))]\"}}}], 'probes': [{'name': \"[variables('probename')]\", 'properties': {'protocol': \"[parameters('healthprobeprotocol')]\", 'port': \"[parameters('healthprobeport')]\", 'requestpath': '/', 'intervalinseconds': 5, 'numberofprobes': 2}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2020-06-01', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': false, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readonly', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[format('{0}/subnets/{1}', resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname')), variables('subnetname'))]\"}, 'publicipaddressconfiguration': {'name': 'pub1', 'properties': {'idletimeoutinminutes': 15, 'publicipprefix': {'id': \"[resourceid('microsoft.network/publicipprefixes', variables('publicipprefixname'))]\"}}}, 'loadbalancerbackendaddresspools': [{'id': \"[format('{0}/backendaddresspools/{1}', resourceid('microsoft.network/loadbalancers', variables('loadbalancername')), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[format('{0}/inboundnatpools/{1}', resourceid('microsoft.network/loadbalancers', variables('loadbalancername')), variables('natpoolname'))]\"}]}}]}}]}}}, 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/publicipprefixes', variables('publicipprefixname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'name': \"[parameters('virtualnetworkname')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'name': \"[parameters('networkinterfacename')]\", 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipaddressname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', parameters('networksecuritygroupname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipaddressname'))]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', parameters('networksecuritygroupname'))]\"}}}{'name': \"[parameters('publicipaddressname')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'basic'}, 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a key resource in an existing KeyVault with apiVersion 2019-09-01.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'tenantid': '[subscription().tenantid]', 'accesspolicies': [{'objectid': \"[reference(resourceid('microsoft.compute/virtualmachinescalesets/', parameters('vmssname')), '2020-12-01', 'full').identity.principalid]\", 'tenantid': '[subscription().tenantid]', 'permissions': {'keys': \"[parameters('keyspermissions')]\", 'secrets': \"[parameters('secretspermissions')]\"}}], 'sku': {'name': \"[parameters('skuname')]\", 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmname'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'foo', 'count': \"[parameters('scalenumber')]\"}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('nicname'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmname'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicname'), copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(parameters('newstorageaccountname'), '2021-02-01').primaryendpoints['blob']]\"}}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'), '1/', variables('vmextensionname'))]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat(parameters('vmname'), '1'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('nicname'), '0'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('privateip.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat(parameters('customscriptcommandtoexecute'), reference(resourceid('microsoft.network/networkinterfaces', concat(variables('nicname'), '0'))).ipconfigurations[0].properties.privateipaddress)]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2016-04-30-preview', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2, 'managed': true}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('nicnameprefix'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('nicnameprefix'),copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), '2021-01-01').primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/images', 'apiversion': '2017-03-30', 'name': \"[variables('imagename')]\", 'location': '[resourcegroup().location]', 'properties': {'storageprofile': {'osdisk': {'ostype': 'windows', 'osstate': 'generalized', 'bloburi': \"[parameters('sourceimagevhduri')]\", 'storageaccounttype': 'standard_lrs'}}}}{'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2017-03-30', 'name': \"[parameters('vmssname')]\", 'location': '[resourcegroup().location]', 'dependson': [\"[concat('microsoft.network/loadbalancers/',variables('lbname'))]\", \"[concat('microsoft.network/virtualnetworks/',variables('virtualnetworkname'))]\", \"[concat('microsoft.compute/images/',variables('imagename'))]\"], 'sku': {'name': \"[parameters('vmsize')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'imagereference': {'id': \"[resourceid('microsoft.compute/images', variables('imagename'))]\"}}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': 'nic1', 'properties': {'primary': true, 'ipconfigurations': [{'name': 'ip1', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[variables('lbbeaddresspoolid')]\"}]}}]}}]}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-06-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'tags': {'department': \"[parameters('departmentname')]\", 'application': \"[parameters('applicationname')]\", 'created by': \"[parameters('createdby')]\"}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2019-06-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'department': \"[parameters('departmentname')]\", 'application': \"[parameters('applicationname')]\", 'created by': \"[parameters('createdby')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2019-06-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'tags': {'department': \"[parameters('departmentname')]\", 'application': \"[parameters('applicationname')]\", 'created by': \"[parameters('createdby')]\"}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-01-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storage', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'name': \"[variables('vnetname')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}, {'name': \"[variables('subnet2name')]\", 'properties': {'addressprefix': \"[variables('subnet2prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': 'publicip', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'comments': 'simple network security group for subnet [subnet]', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressrange')]\"]}, 'subnets': [{'name': 'subnet', 'properties': {'addressprefix': \"[variables('subnetaddressrange')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2020-05-01', 'name': 'loadbalancer', 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': ['microsoft.network/publicipaddresses/publicip'], 'properties': {'frontendipconfigurations': [{'name': 'lbfe', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', 'publicip')]\"}}}], 'backendaddresspools': [{'name': 'lbbap'}], 'inboundnatrules': [{'name': 'rdp', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', 'loadbalancer', 'lbfe')]\"}, 'protocol': 'tcp', 'frontendport': \"[parameters('rdpport')]\", 'backendport': 3389, 'enablefloatingip': false}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2019-06-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2016-04-30-preview', 'dependson': [\"[concat('microsoft.network/loadbalancers/', variables('lbname'))]\", \"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'secrets': [{'sourcevault': {'id': \"[resourceid(parameters('vaultresourcegroup'), 'microsoft.keyvault/vaults', parameters('vaultname'))]\"}, 'vaultcertificates': [{'certificateurl': \"[parameters('httpssecreturlwithversion')]\"}, {'certificateurl': \"[parameters('httpssecretcaurlwithversion')]\"}]}], 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid( 'microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid( 'microsoft.network/loadbalancers/inboundnatpools', variables('lbname'), variables('natpoolname'))]\"}]}}]}}]}, 'extensionprofile': {'extensions': [{'name': 'lapextension', 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': false, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', parameters('scriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('bash ', parameters('scriptfilename'), ' ', parameters('certthumbprint'), ' ', parameters('cacertthumbprint'))]\"}}}]}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'apiversion': '2019-09-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': '10.0.0.0/24'}}]}}{'apiversion': '2020-11-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[variables('dnsnameforpublicip')]\"}}}{'apiversion': '2020-11-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-03-01', 'name': \"[parameters('dnslabelprefix')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('dnslabelprefix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[format('{0}-osdisk', parameters('dnslabelprefix'))]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[format('{0}-datadisk', parameters('dnslabelprefix'))]\", 'caching': 'none', 'createoption': 'empty', 'disksizegb': 1024, 'lun': 0}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))).primaryendpoints.blob]\"}}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'comments': \"simple network security group for subnet [variables('subnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2020-08-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2021-03-01', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}, 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-06-01', 'name': \"[parameters('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'http', 'properties': {'priority': 300, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '80'}}, {'name': 'https', 'properties': {'priority': 310, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '443'}}, {'name': 'ssh', 'properties': {'priority': 340, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '22'}}, {'name': 'azurenotebooks', 'properties': {'priority': 360, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '8000'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2019-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/24']}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': '10.0.0.0/24'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('vmname')]\"}}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storage'} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2019-04-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-02-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'publicipaddressversion': 'ipv4', 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}, 'idletimeoutinminutes': 4}, 'sku': {'name': 'basic', 'tier': 'regional'}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-02-01', 'name': \"[parameters('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'priority': 1000, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '22'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforpublicip')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-06-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'apiversion': '2020-06-01', 'name': 'deploy-virus-attack-oms-resource', 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('omstemplateuri')]\"}, 'parameters': {'omsworkspacename': {'value': \"[variables('omsworkspacename')]\"}, 'omssolutionsname': {'value': \"[variables('omssolutions')]\"}, 'sku': {'value': \"[parameters('omssku')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-06-01', 'name': \"[concat(parameters('vnetname'),'-','-resource')]\", 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('vnettemplateuri')]\"}, 'parameters': {'vnetname': {'value': \"[parameters('vnetname')]\"}, 'addressprefix': {'value': \"[parameters('vnetaddressspace')]\"}, 'subnets': {'value': \"[variables('subnets')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-06-01', 'name': \"[concat(variables('nsgname'),'-','-resource')]\", 'type': 'microsoft.resources/deployments', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nsgtemplateuri')]\"}, 'parameters': {'nsgname': {'value': \"[variables('nsgname')]\"}, 'securityrules': {'value': \"[variables('nsgsecurityrules')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-06-01', 'name': \"[concat(variables('vmnames')[copyindex()],'-pip','-resource')]\", 'type': 'microsoft.resources/deployments', 'copy': {'name': 'copy-pip', 'count': 2}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('piptemplateuri')]\"}, 'parameters': {'publicipaddressname': {'value': \"[concat(variables('vmnames')[copyindex()],'-pip')]\"}, 'publicipaddresstype': {'value': \"[parameters('pipaddresstype')]\"}, 'dnsnameforpublicip': {'value': \"[concat(variables('vmnames')[copyindex()],uniquestring(resourcegroup().id, 'pip'),'-pip')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-06-01', 'name': \"[concat(variables('vmnames')[copyindex()],'-nic','-resource')]\", 'type': 'microsoft.resources/deployments', 'dependson': ['copy-pip', \"[format('{0}--resource',variables('nsgname'))]\", \"[format('{0}--resource',parameters('vnetname'))]\"], 'copy': {'name': 'copy-nic', 'count': 2}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('nictemplateuri')]\"}, 'parameters': {'nicname': {'value': \"[concat(variables('vmnames')[copyindex()],'-nic')]\"}, 'publicipaddressid': {'value': \"[resourceid('microsoft.network/publicipaddresses',concat(variables('vmnames')[copyindex()],'-pip'))]\"}, 'subnetid': {'value': \"[resourceid('microsoft.network/virtualnetworks/subnets',parameters('vnetname'), variables('subnets')[0].name)]\"}, 'location': {'value': \"[parameters('location')]\"}, 'nsgid': {'value': \"[resourceid('microsoft.network/networksecuritygroups',variables('nsgname'))]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-06-01', 'name': \"[concat(variables('vmnames')[copyindex()])]\", 'type': 'microsoft.resources/deployments', 'dependson': ['copy-nic'], 'copy': {'name': 'copy-vm', 'count': 2}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('vmtemplateuri')]\"}, 'parameters': {'vmname': {'value': \"[concat(variables('vmnames')[copyindex()])]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminuserpassword')]\"}, 'nicid': {'value': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('vmnames')[copyindex()],'-nic'))]\"}, 'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[variables('tags')]\"}}}}{'apiversion': '2020-06-01', 'name': 'omsextension', 'type': 'microsoft.resources/deployments', 'dependson': ['copy-vm', 'deploy-virus-attack-oms-resource'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('omsextensiontemplateuri')]\"}, 'parameters': {'vmnames': {'value': \"[variables('vmnames')]\"}, 'omsworkspacename': {'value': \"[variables('omsworkspacename')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'resourcegroupname': {'value': \"[parameters('resourcegroupname')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[variables('diagnosticstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'tags': {'displayname': 'diagnosticstorageaccount'}, 'kind': 'storagev2'} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-08-01', 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}, {'name': \"[variables('appgwsubnetname')]\", 'properties': {'addressprefix': \"[variables('appgwsubnetprefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('appgwpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2016-03-30', 'properties': {'publicipallocationmethod': 'dynamic'}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-08-01', 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}, {'name': \"[variables('appgwsubnetname')]\", 'properties': {'addressprefix': \"[variables('appgwsubnetprefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('appgwpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-04-01', 'properties': {'publicipallocationmethod': 'dynamic'}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-11-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('osversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'creatingvm', 'type': 'microsoft.resources/deployments', 'apiversion': '2019-09-01', 'dependson': [\"[variables('virtualnetworkname')]\", \"[variables('storageaccountname')]\", \"[variables('networksecuritygroupname')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('createvmurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'azurecli2dockerimage': {'value': \"[variables('azurecli2dockerimage')]\"}, 'containername': {'value': \"[variables('containername')]\"}, 'operatingsystem': {'value': \"[parameters('operatingsystem')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'nsgid': {'value': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}, 'provisionextensions': {'value': false}, 'storageaccountid': {'value': \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"}, 'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'subnetref': {'value': \"[variables('subnetref')]\"}, 'vmsize': {'value': \"[parameters('vmsize')]\"}, 'vmname': {'value': \"[variables('vmname')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('vmnsgname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': 'nsg for the vm subnet.', 'tags': {'displayname': 'vm nsg'}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('ipaddressname')]\", 'apiversion': '2016-03-30', 'location': \"[parameters('location')]\", 'comments': ' public ip used by the jump vm', 'tags': {'displayname': 'vm public ip'}, 'properties': {'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a key resource in an existing KeyVault with apiVersion 2019-09-01.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('vmname'))]\"], 'properties': {'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'tenantid': '[subscription().tenantid]', 'accesspolicies': [{'objectid': \"[reference(resourceid('microsoft.compute/virtualmachines/', parameters('vmname')), '2019-07-01', 'full').identity.principalid]\", 'tenantid': '[subscription().tenantid]', 'permissions': {'keys': \"[parameters('keyspermissions')]\", 'secrets': \"[parameters('secretspermissions')]\"}}], 'sku': {'name': \"[parameters('skuname')]\", 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('virtualmachinescalesetname')]\", 'apiversion': '2021-07-01', 'location': \"[parameters('location')]\", 'properties': {'singleplacementgroup': false, 'platformfaultdomaincount': \"[variables('virtualmachinescalesetplatformfaultdomaincount')]\"}, 'zones': \"[variables('selectedzone')]\"}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('virtualmachinenameprefix'), copyindex(1))]\", 'apiversion': '2021-07-01', 'location': \"[parameters('location')]\", 'copy': {'name': 'vmcopy', 'count': \"[parameters('virtualmachinecount')]\"}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachinescalesets/', parameters('virtualmachinescalesetname'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('virtualmachinenameprefix'), copyindex(1), '-nic1'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('virtualmachinesize')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('operatingsystemvalues')[parameters('operatingsystem')].publishervalue]\", 'offer': \"[variables('operatingsystemvalues')[parameters('operatingsystem')].offervalue]\", 'sku': \"[variables('operatingsystemvalues')[parameters('operatingsystem')].skuvalue]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('virtualmachinenameprefix'),copyindex(1))]\", 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'caching': 'readwrite'}}, 'osprofile': {'computername': \"[concat(parameters('virtualmachinenameprefix'),copyindex(1))]\", 'adminusername': \"[parameters('virtualmachineadminusername')]\", 'adminpassword': \"[parameters('virtualmachineadminpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('virtualmachinenameprefix'), copyindex(1), '-nic1'))]\"}]}, 'virtualmachinescaleset': {'id': \"[resourceid('microsoft.compute/virtualmachinescalesets', parameters('virtualmachinescalesetname'))]\"}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), variables('apiversion')).primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2020-08-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-11-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('dnslabelprefix')]\"}}}{'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('jumpboxname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[variables('jumpboxsaname')]\", \"[variables('jumpboxnicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsku')]\"}, 'osprofile': {'computername': \"[variables('jumpboxname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('jumpboxnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('jumpboxsaname')).primaryendpoints.blob]\"}}}}{'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[variables('virtualnetworkname')]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'automatic'}, 'virtualmachineprofile': {'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'createoption': 'fromimage'}, 'copy': [{'name': 'datadisks', 'count': 4, 'input': {'lun': \"[copyindex('datadisks')]\", 'disksizegb': 10, 'createoption': 'empty', 'caching': 'none'}}]}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'customdata': \"[variables('customdata')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[variables('subnetid')]\"}}}]}}]}, 'extensionprofile': {'extensions': [{'name': \"[variables('extensionname')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': \"[variables('extensionname')]\", 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[reference(variables('keyvaultresourceid'),'2016-10-01').vaulturi]\", 'keyvaultresourceid': \"[variables('keyvaultresourceid')]\", 'kekvaultresourceid': \"[variables('keyvaultresourceid')]\", 'keyencryptionkeyurl': \"[parameters('keyencryptionkeyurl')]\", 'keyencryptionalgorithm': \"[parameters('keyencryptionalgorithm')]\", 'volumetype': \"[parameters('volumetype')]\"}}}]}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh_rule', 'properties': {'description': 'locks inbound down to ssh default port 22.', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 123, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}, 'sku': {'name': 'basic'}}{'comments': \"simple network security group for subnet [variables('vnetsubnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname2')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname2'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefixes')]\"]}, 'subnets': [{'name': \"[variables('vnetsubnetname')]\", 'properties': {'addressprefix': \"[variables('vnetsubnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname2'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'name': \"[variables('lbname')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"}}}], 'backendaddresspools': [{'name': 'backendpool1'}], 'inboundnatrules': [{'name': 'rdp-vm0', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname'), 'loadbalancerfrontend')]\"}, 'protocol': 'tcp', 'frontendport': 50001, 'backendport': 3389, 'enablefloatingip': false}}]}}{'comments': \"simple network security group for subnet [variables('subnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nic1nameprefix')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\", \"[resourceid('microsoft.network/loadbalancers/', variables('lbname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), 'backendpool1')]\"}], 'loadbalancerinboundnatrules': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatrules', variables('lbname'), 'rdp-vm0')]\"}]}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nic2nameprefix')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnetname'))]\"}}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforlbip')]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'name': \"[concat(parameters('dhgnameprefix'),copyindex())]\", 'type': 'microsoft.compute/hostgroups', 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'zones': \"[if(equals(parameters('numberofzoness'), 0), json('null'),array(copyindex(1)))]\", 'copy': {'name': \"[parameters('dhgnameprefix')]\", 'count': \"[if(equals(parameters('numberofzoness'), 0), 1, parameters('numberofzoness'))]\"}, 'properties': {'platformfaultdomaincount': \"[parameters('numberoffds')]\"}}{'name': \"[concat(parameters('dhgnameprefix'),div(copyindex(), parameters('numberofhostsperzone')),'/', parameters('dhnameprefix'),div(copyindex(), parameters('numberofhostsperzone')),mod(copyindex(), parameters('numberofhostsperzone')))]\", 'type': 'microsoft.compute/hostgroups/hosts', 'apiversion': '2018-10-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/hostgroups',parameters('dhgnameprefix'), copyindex(2))]\"], 'sku': {'name': \"[parameters('dhsku')]\"}, 'copy': {'name': \"[parameters('dhgnameprefix')]\", 'count': \"[variables('numberofhosts')]\"}, 'properties': {'platformfaultdomain': \"[mod(copyindex(), parameters('numberoffds'))]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-08-01', 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-09-01', 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('longnaminginfix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'creatingvmss', 'type': 'microsoft.resources/deployments', 'apiversion': '2019-09-01', 'dependson': [\"[variables('virtualnetworkname')]\", \"[variables('storageaccountname')]\", \"[variables('networksecuritygroupname')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('createvmssurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'adminpasswordorsshkey': {'value': \"[parameters('adminpasswordorsshkey')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'azurecli2dockerimage': {'value': \"[variables('azurecli2dockerimage')]\"}, 'containername': {'value': \"[variables('containername')]\"}, 'operatingsystem': {'value': \"[parameters('operatingsystem')]\"}, 'instancecount': {'value': 0}, 'location': {'value': \"[parameters('location')]\"}, 'networksecuritygroupname': {'value': \"[variables('networksecuritygroupname')]\"}, 'nicname': {'value': \"[variables('nicname')]\"}, 'overprovision': {'value': \"[parameters('overprovision')]\"}, 'provisionextensions': {'value': false}, 'storageaccountid': {'value': \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"}, 'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'subnetref': {'value': \"[variables('subnetref')]\"}, 'vmsize': {'value': \"[parameters('vmsize')]\"}, 'vmssname': {'value': \"[variables('vmssname')]\"}, 'vmssprefix': {'value': \"[variables('vmssprefix')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('pipname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[variables('vmssuniquename')]\"}}}{'type': 'microsoft.network/loadbalancers', 'name': \"[variables('lbname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('pipname'))]\"], 'tags': {'displayname': 'load balancer'}, 'properties': {'frontendipconfigurations': [{'name': \"[variables('feipconfigname')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('pipname'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('bepoolname')]\"}], 'inboundnatpools': [{'name': \"[variables('natpoolname')]\", 'properties': {'frontendipconfiguration': {'id': \"[variables('feipconfigid')]\"}, 'protocol': 'tcp', 'frontendportrangestart': 10022, 'frontendportrangeend': 11022, 'backendport': 22}}], 'loadbalancingrules': [{'name': 'httprule', 'properties': {'loaddistribution': 'default', 'frontendipconfiguration': {'id': \"[variables('feipconfigid')]\"}, 'backendaddresspool': {'id': \"[variables('bepoolid')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('lbname'), variables('httpsprobename'))]\"}}}, {'name': 'httpsrule', 'properties': {'loaddistribution': 'default', 'frontendipconfiguration': {'id': \"[variables('feipconfigid')]\"}, 'backendaddresspool': {'id': \"[variables('bepoolid')]\"}, 'protocol': 'tcp', 'frontendport': 443, 'backendport': 443, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('lbname'), variables('httpsprobename'))]\"}}}], 'probes': [{'name': \"[variables('httpprobename')]\", 'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 5, 'numberofprobes': 2}}, {'name': \"[variables('httpsprobename')]\", 'properties': {'protocol': 'tcp', 'port': 443, 'intervalinseconds': 5, 'numberofprobes': 2}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[variables('diagstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2'} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[parameters('storagename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('servicebusnamespaceprivateendpointid')]\", \"[variables('blobstorageaccountprivateendpointid')]\", \"[variables('nicid')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('vmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-04-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(tolower(parameters('vmname')), uniquestring(resourcegroup().id))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-04-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(tolower(parameters('vmname')), uniquestring(resourcegroup().id))]\"}}}{'apiversion': '2019-08-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowsshinbound', 'properties': {'priority': 100, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('virtualnetworkaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[variables('nsgid')]\"}, 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]}}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('publicipid')]\", \"[variables('vnetid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetid')]\"}}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2018-09-01', 'name': \"[variables('servicebusnamespaceprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2018-09-01', 'name': \"[variables('blobprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2018-09-01', 'name': \"[concat(variables('servicebusnamespaceprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('servicebusnamespaceprivatednszoneid')]\", \"[variables('vnetid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('vnetid')]\"}}}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2018-09-01', 'name': \"[concat(variables('blobprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('blobprivatednszoneid')]\", \"[variables('vnetid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('vnetid')]\"}}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-04-01', 'name': \"[parameters('servicebusnamespaceprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetid')]\", \"[variables('servicebusnamespaceid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('servicebusnamespaceprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('servicebusnamespaceid')]\", 'groupids': [\"[variables('servicebusnamespaceprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('subnetid')]\"}, 'customdnsconfigs': [{'fqdn': \"[concat(parameters('servicebusnamespacename'), variables('servicebuspublicdnszoneforwarder'))]\"}]}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-04-01', 'name': \"[parameters('blobstorageaccountprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetid')]\", \"[variables('blobstorageaccountid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('blobstorageaccountprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('blobstorageaccountid')]\", 'groupids': [\"[variables('blobstorageaccountprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('subnetid')]\"}, 'customdnsconfigs': [{'fqdn': \"[concat(parameters('blobstorageaccountname'), variables('blobpublicdnszoneforwarder'))]\"}]}}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-03-01', 'name': \"[variables('servicebusnamespaceprivatednszonegroup')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('servicebusnamespaceprivatednszoneid')]\", \"[variables('servicebusnamespaceprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('servicebusnamespaceprivatednszoneid')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreates and optionally secures a Key Vault with logging linked to a storage account.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[variables('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'tenantid': \"[variables('tenantid')]\", 'sku': {'name': 'standard', 'family': 'a'}, 'accesspolicies': [], 'enablesoftdelete': true}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02', 'name': \"[variables('applicationinsightsname')]\", 'location': \"[if(or(equals(parameters('location'),'eastus2'), equals(parameters('location'),'westcentralus')),'southcentralus',parameters('location'))]\", 'kind': 'web', 'properties': {'application_type': 'web'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis module creates a key resource in an existing KeyVault with apiVersion 2019-09-01.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[variables('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'tenantid': \"[variables('tenantid')]\", 'sku': {'name': 'standard', 'family': 'a'}, 'accesspolicies': []}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nA template for creating a new Azure Container Registry. Use this template as the framework for your custom deployment.\n\n===\n\n", "truth": " {'condition': \"[equals(parameters('containerregistryoption'), 'new')]\", 'type': 'microsoft.containerregistry/registries', 'apiversion': '2019-12-01-preview', 'name': \"[parameters('containerregistryname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('containerregistrysku')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnetname'))]\"], 'tags': \"[parameters('tagvalues')]\", 'properties': {'adminuserenabled': true, 'networkruleset': \"[if(equals(parameters('containerregistrybehindvnet'), 'true'), variables('networkrulesetbehindvnet'), json('null'))]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.containerregistry/registries', 'apiversion': '2019-12-01-preview', 'name': \"[parameters('acrname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('acrsku')]\"}, 'properties': {'adminuserenabled': \"[parameters('acradminuserenabled')]\", 'networkruleset': {'defaultaction': \"[parameters('acrnetworkrulesetdefaultaction')]\", 'bypass': \"[parameters('acrbypass')]\", 'resourcetype': \"[parameters('acrresourcetype')]\"}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': \"[format('nsg-{0}-{1}-deployment', variables('name'), variables('uniquesuffix'))]\", 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'tags': {'value': \"[parameters('tags')]\"}, 'nsgname': {'value': \"[format('nsg-{0}-{1}', variables('name'), variables('uniquesuffix'))]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1124.51302', 'templatehash': '10817103010105652969'}}, 'parameters': {'location': {'type': 'string', 'metadata': {'description': 'azure region of the deployment'}}, 'tags': {'type': 'object', 'metadata': {'description': 'tags to add to the resources'}}, 'nsgname': {'type': 'string', 'metadata': {'description': 'name of the network security group'}}}, 'resources': [{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[parameters('nsgname')]\", 'location': \"[parameters('location')]\", 'tags': \"[parameters('tags')]\", 'properties': {'securityrules': [{'name': 'batchnodemanagement', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '29876-29877', 'sourceaddressprefix': 'batchnodemanagement', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}, {'name': 'azuremachinelearning', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '44224', 'sourceaddressprefix': 'azuremachinelearning', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 130, 'direction': 'inbound'}}, {'name': 'azureactivedirectory', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'azureactivedirectory', 'access': 'allow', 'priority': 140, 'direction': 'outbound'}}, {'name': 'azuremachinelearningoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'azuremachinelearning', 'access': 'allow', 'priority': 150, 'direction': 'outbound'}}, {'name': 'azureresourcemanager', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'azureresourcemanager', 'access': 'allow', 'priority': 160, 'direction': 'outbound'}}, {'name': 'azurestorageaccount', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': \"[format('storage.{0}', parameters('location'))]\", 'access': 'allow', 'priority': 170, 'direction': 'outbound'}}, {'name': 'azurefrontdoor', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'azurefrontdoor.frontend', 'access': 'allow', 'priority': 180, 'direction': 'outbound'}}, {'name': 'azurecontainerregistry', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': \"[format('azurecontainerregistry.{0}', parameters('location'))]\", 'access': 'allow', 'priority': 190, 'direction': 'outbound'}}, {'name': 'microsoftcontainerregistry', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'microsoftcontainerregistry', 'access': 'allow', 'priority': 200, 'direction': 'outbound'}}]}}], 'outputs': {'networksecuritygroup': {'type': 'string', 'value': \"[resourceid('microsoft.network/networksecuritygroups', parameters('nsgname'))]\"}}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': \"[format('vnet-{0}-{1}-deployment', variables('name'), variables('uniquesuffix'))]\", 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'virtualnetworkname': {'value': \"[format('vnet-{0}-{1}', variables('name'), variables('uniquesuffix'))]\"}, 'networksecuritygroupid': {'value': \"[reference(resourceid('microsoft.resources/deployments', format('nsg-{0}-{1}-deployment', variables('name'), variables('uniquesuffix'))), '2020-10-01').outputs.networksecuritygroup.value]\"}, 'vnetaddressprefix': {'value': \"[parameters('vnetaddressprefix')]\"}, 'trainingsubnetprefix': {'value': \"[parameters('trainingsubnetprefix')]\"}, 'scoringsubnetprefix': {'value': \"[parameters('scoringsubnetprefix')]\"}, 'tags': {'value': \"[parameters('tags')]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1124.51302', 'templatehash': '10626371512799024852'}}, 'parameters': {'location': {'type': 'string', 'defaultvalue': '[resourcegroup().location]', 'metadata': {'description': 'azure region of the deployment'}}, 'tags': {'type': 'object', 'defaultvalue': {}, 'metadata': {'description': 'tags to add to the resources'}}, 'virtualnetworkname': {'type': 'string', 'metadata': {'description': 'name of the virtual network resource'}}, 'networksecuritygroupid': {'type': 'string', 'metadata': {'description': 'group id of the network security group'}}, 'vnetaddressprefix': {'type': 'string', 'defaultvalue': '192.168.0.0/16', 'metadata': {'description': 'virtual network address prefix'}}, 'trainingsubnetprefix': {'type': 'string', 'defaultvalue': '192.168.0.0/24', 'metadata': {'description': 'training subnet address prefix'}}, 'scoringsubnetprefix': {'type': 'string', 'defaultvalue': '192.168.1.0/24', 'metadata': {'description': 'scoring subnet address prefix'}}}, 'resources': [{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-07-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'tags': \"[parameters('tags')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': 'snet-training', 'properties': {'addressprefix': \"[parameters('trainingsubnetprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'disabled', 'networksecuritygroup': {'id': \"[parameters('networksecuritygroupid')]\"}}}, {'name': 'snet-scoring', 'properties': {'addressprefix': \"[parameters('scoringsubnetprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'disabled', 'serviceendpoints': [{'service': 'microsoft.keyvault'}, {'service': 'microsoft.containerregistry'}, {'service': 'microsoft.storage'}], 'networksecuritygroup': {'id': \"[parameters('networksecuritygroupid')]\"}}}]}}], 'outputs': {'id': {'type': 'string', 'value': \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"}, 'name': {'type': 'string', 'value': \"[parameters('virtualnetworkname')]\"}}}}, 'dependson': [\"[resourceid('microsoft.resources/deployments', format('nsg-{0}-{1}-deployment', variables('name'), variables('uniquesuffix')))]\"]}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': \"[format('kv-{0}-{1}-deployment', variables('name'), variables('uniquesuffix'))]\", 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'keyvaultname': {'value': \"[format('kv-{0}-{1}', variables('name'), variables('uniquesuffix'))]\"}, 'keyvaultplename': {'value': \"[format('ple-{0}-{1}-kv', variables('name'), variables('uniquesuffix'))]\"}, 'subnetid': {'value': \"[format('{0}/subnets/snet-training', reference(resourceid('microsoft.resources/deployments', format('vnet-{0}-{1}-deployment', variables('name'), variables('uniquesuffix'))), '2020-10-01').outputs.id.value)]\"}, 'virtualnetworkid': {'value': \"[format('{0}', reference(resourceid('microsoft.resources/deployments', format('vnet-{0}-{1}-deployment', variables('name'), variables('uniquesuffix'))), '2020-10-01').outputs.id.value)]\"}, 'tags': {'value': \"[parameters('tags')]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1124.51302', 'templatehash': '12942824693449975193'}}, 'parameters': {'location': {'type': 'string', 'defaultvalue': '[resourcegroup().location]', 'metadata': {'description': 'the azure region to deploy the resrouce group into'}}, 'tags': {'type': 'object', 'defaultvalue': {}, 'metadata': {'description': 'tags to apply to the key vault instance'}}, 'keyvaultname': {'type': 'string', 'metadata': {'description': 'the name of the key vault'}}, 'keyvaultplename': {'type': 'string', 'metadata': {'description': 'the name of the key vault private link endpoint'}}, 'subnetid': {'type': 'string', 'metadata': {'description': 'the subnet id where the key vault private link is to be created'}}, 'virtualnetworkid': {'type': 'string', 'metadata': {'description': 'the vnet id where the key vault private link is to be created'}}}, 'variables': {'privatednszonename': \"[format('privatelink{0}', environment().suffixes.keyvaultdns)]\"}, 'resources': [{'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'tags': \"[parameters('tags')]\", 'properties': {'createmode': 'default', 'enabledfordeployment': false, 'enabledfordiskencryption': false, 'enabledfortemplatedeployment': false, 'enablesoftdelete': true, 'enablerbacauthorization': true, 'enablepurgeprotection': true, 'networkacls': {'bypass': 'azureservices', 'defaultaction': 'deny'}, 'sku': {'family': 'a', 'name': 'standard'}, 'softdeleteretentionindays': 7, 'tenantid': '[subscription().tenantid]'}}, {'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-11-01', 'name': \"[parameters('keyvaultplename')]\", 'location': \"[parameters('location')]\", 'tags': \"[parameters('tags')]\", 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('keyvaultplename')]\", 'properties': {'groupids': ['vault'], 'privatelinkserviceid': \"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"}}], 'subnet': {'id': \"[parameters('subnetid')]\"}}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"]}, {'type': 'microsoft.network/privatednszones', 'apiversion': '2020-01-01', 'name': \"[variables('privatednszonename')]\", 'location': 'global'}, {'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-06-01', 'name': \"[format('{0}/vault-privatednszonegroup', parameters('keyvaultplename'))]\", 'properties': {'privatednszoneconfigs': [{'name': \"[variables('privatednszonename')]\", 'properties': {'privatednszoneid': \"[resourceid('microsoft.network/privatednszones', variables('privatednszonename'))]\"}}]}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('privatednszonename'))]\", \"[resourceid('microsoft.network/privateendpoints', parameters('keyvaultplename'))]\"]}, {'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-01-01', 'name': \"[format('{0}/{1}', variables('privatednszonename'), uniquestring(resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))))]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[parameters('virtualnetworkid')]\"}}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\", \"[resourceid('microsoft.network/privatednszones', variables('privatednszonename'))]\"]}], 'outputs': {'keyvaultid': {'type': 'string', 'value': \"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"}}}}, 'dependson': [\"[resourceid('microsoft.resources/deployments', format('vnet-{0}-{1}-deployment', variables('name'), variables('uniquesuffix')))]\"]}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': \"[format('st{0}{1}-deployment', variables('name'), variables('uniquesuffix'))]\", 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'storagename': {'value': \"[format('st{0}{1}', variables('name'), variables('uniquesuffix'))]\"}, 'storagepleblobname': {'value': \"[format('ple-{0}-{1}-st-blob', variables('name'), variables('uniquesuffix'))]\"}, 'storageplefilename': {'value': \"[format('ple-{0}-{1}-st-file', variables('name'), variables('uniquesuffix'))]\"}, 'storageskuname': {'value': 'standard_lrs'}, 'subnetid': {'value': \"[format('{0}/subnets/snet-training', reference(resourceid('microsoft.resources/deployments', format('vnet-{0}-{1}-deployment', variables('name'), variables('uniquesuffix'))), '2020-10-01').outputs.id.value)]\"}, 'virtualnetworkid': {'value': \"[format('{0}', reference(resourceid('microsoft.resources/deployments', format('vnet-{0}-{1}-deployment', variables('name'), variables('uniquesuffix'))), '2020-10-01').outputs.id.value)]\"}, 'tags': {'value': \"[parameters('tags')]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1124.51302', 'templatehash': '10314405918172506604'}}, 'parameters': {'location': {'type': 'string', 'metadata': {'description': 'azure region of the deployment'}}, 'tags': {'type': 'object', 'metadata': {'description': 'tags to add to the resources'}}, 'storagename': {'type': 'string', 'metadata': {'description': 'name of the storage account'}}, 'storagepleblobname': {'type': 'string', 'metadata': {'description': 'name of the storage blob private link endpoint'}}, 'storageplefilename': {'type': 'string', 'metadata': {'description': 'name of the storage file private link endpoint'}}, 'subnetid': {'type': 'string', 'metadata': {'description': 'resource id of the subnet'}}, 'virtualnetworkid': {'type': 'string', 'metadata': {'description': 'resource id of the virtual network'}}, 'storageskuname': {'type': 'string', 'defaultvalue': 'standard_lrs', 'metadata': {'description': 'storage sku'}, 'allowedvalues': ['standard_lrs', 'standard_zrs', 'standard_grs', 'standard_gzrs', 'standard_ragrs', 'standard_ragzrs', 'premium_lrs', 'premium_zrs']}}, 'variables': {'storagenamecleaned': \"[replace(parameters('storagename'), '-', '')]\", 'blobprivatednszonename': \"[format('privatelink.blob.{0}', environment().suffixes.storage)]\", 'fileprivatednszonename': \"[format('privatelink.file.{0}', environment().suffixes.storage)]\"}, 'resources': [{'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[variables('storagenamecleaned')]\", 'location': \"[parameters('location')]\", 'tags': \"[parameters('tags')]\", 'sku': {'name': \"[parameters('storageskuname')]\"}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot', 'allowblobpublicaccess': false, 'allowcrosstenantreplication': false, 'allowsharedkeyaccess': true, 'encryption': {'keysource': 'microsoft.storage', 'requireinfrastructureencryption': false, 'services': {'blob': {'enabled': true, 'keytype': 'account'}, 'file': {'enabled': true, 'keytype': 'account'}, 'queue': {'enabled': true, 'keytype': 'service'}, 'table': {'enabled': true, 'keytype': 'service'}}}, 'ishnsenabled': false, 'isnfsv3enabled': false, 'keypolicy': {'keyexpirationperiodindays': 7}, 'largefilesharesstate': 'disabled', 'minimumtlsversion': 'tls1_2', 'networkacls': {'bypass': 'azureservices', 'defaultaction': 'deny'}, 'supportshttpstrafficonly': true}}, {'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-11-01', 'name': \"[parameters('storagepleblobname')]\", 'location': \"[parameters('location')]\", 'tags': \"[parameters('tags')]\", 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('storagepleblobname')]\", 'properties': {'groupids': ['blob'], 'privatelinkserviceid': \"[resourceid('microsoft.storage/storageaccounts', variables('storagenamecleaned'))]\", 'privatelinkserviceconnectionstate': {'status': 'approved', 'description': 'auto-approved', 'actionsrequired': 'none'}}}], 'subnet': {'id': \"[parameters('subnetid')]\"}}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storagenamecleaned'))]\"]}, {'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-11-01', 'name': \"[parameters('storageplefilename')]\", 'location': \"[parameters('location')]\", 'tags': \"[parameters('tags')]\", 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('storageplefilename')]\", 'properties': {'groupids': ['file'], 'privatelinkserviceid': \"[resourceid('microsoft.storage/storageaccounts', variables('storagenamecleaned'))]\", 'privatelinkserviceconnectionstate': {'status': 'approved', 'description': 'auto-approved', 'actionsrequired': 'none'}}}], 'subnet': {'id': \"[parameters('subnetid')]\"}}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storagenamecleaned'))]\"]}, {'type': 'microsoft.network/privatednszones', 'apiversion': '2020-01-01', 'name': \"[variables('blobprivatednszonename')]\", 'location': 'global'}, {'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-06-01', 'name': \"[format('{0}/blob-privatednszonegroup', parameters('storagepleblobname'))]\", 'properties': {'privatednszoneconfigs': [{'name': \"[variables('blobprivatednszonename')]\", 'properties': {'privatednszoneid': \"[resourceid('microsoft.network/privatednszones', variables('blobprivatednszonename'))]\"}}]}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('blobprivatednszonename'))]\", \"[resourceid('microsoft.network/privateendpoints', parameters('storagepleblobname'))]\"]}, {'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-01-01', 'name': \"[format('{0}/{1}', variables('blobprivatednszonename'), uniquestring(resourceid('microsoft.storage/storageaccounts', variables('storagenamecleaned'))))]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[parameters('virtualnetworkid')]\"}}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('blobprivatednszonename'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storagenamecleaned'))]\"]}, {'type': 'microsoft.network/privatednszones', 'apiversion': '2020-01-01', 'name': \"[variables('fileprivatednszonename')]\", 'location': 'global'}, {'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-06-01', 'name': \"[format('{0}/flie-privatednszonegroup', parameters('storageplefilename'))]\", 'properties': {'privatednszoneconfigs': [{'name': \"[variables('fileprivatednszonename')]\", 'properties': {'privatednszoneid': \"[resourceid('microsoft.network/privatednszones', variables('fileprivatednszonename'))]\"}}]}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('fileprivatednszonename'))]\", \"[resourceid('microsoft.network/privateendpoints', parameters('storageplefilename'))]\"]}, {'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-01-01', 'name': \"[format('{0}/{1}', variables('fileprivatednszonename'), uniquestring(resourceid('microsoft.storage/storageaccounts', variables('storagenamecleaned'))))]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[parameters('virtualnetworkid')]\"}}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('fileprivatednszonename'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storagenamecleaned'))]\"]}], 'outputs': {'storageid': {'type': 'string', 'value': \"[resourceid('microsoft.storage/storageaccounts', variables('storagenamecleaned'))]\"}}}}, 'dependson': [\"[resourceid('microsoft.resources/deployments', format('vnet-{0}-{1}-deployment', variables('name'), variables('uniquesuffix')))]\"]} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('networkinterfacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', parameters('networksecuritygroupname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups',parameters('networksecuritygroupname'))]\"}}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[parameters('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'priority': 1000, 'protocol': 'tcp', 'access': 'allow', 'direction': 'inbound', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '22'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[variables('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('virtualnetworkaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('virtualnetworksubnetname')]\", 'properties': {'addressprefix': \"[variables('virtualnetworksubnetprefix')]\", 'serviceendpoints': [{'service': 'microsoft.web', 'locations': ['*']}]}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[variables('location')]\", 'sku': {'name': \"[variables('publicipaddresssku')]\"}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddressallocationtype')]\", 'dnssettings': {'domainnamelabel': \"[tolower(variables('webappname'))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storage'} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'publicnetworkaccessforingestion': 'enabled', 'publicnetworkaccessforquery': 'enabled'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-04-01', 'name': \"[parameters('virtualnetwork_name')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('virtualnetwork_cidr')]\"]}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storage'} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure SQL Server with Auditing enabled to write audit logs to a blob storage\n\n===\n\n", "truth": " {'name': \"[parameters('databaseservername')]\", 'type': 'microsoft.sql/servers', 'location': \"[parameters('databaseserverlocation')]\", 'apiversion': '2014-04-01-preview', 'dependson': [], 'tags': {'displayname': \"[parameters('databaseservername')]\"}, 'properties': {'administratorlogin': \"[parameters('databaseserveradminlogin')]\", 'administratorloginpassword': \"[parameters('databaseserveradminloginpassword')]\"}, 'resources': [{'name': 'allowallwindowsazureips', 'type': 'firewallrules', 'location': \"[parameters('databaseserverlocation')]\", 'apiversion': '2014-04-01-preview', 'dependson': [\"[concat('microsoft.sql/servers/', parameters('databaseservername'))]\"], 'properties': {'startipaddress': '0.0.0.0', 'endipaddress': '0.0.0.0'}}, {'name': \"[parameters('databasename')]\", 'type': 'databases', 'location': \"[parameters('databaseserverlocation')]\", 'apiversion': '2014-04-01-preview', 'dependson': [\"[parameters('databaseservername')]\"], 'tags': {'displayname': 'cawadb1'}, 'properties': {'collation': \"[parameters('databasecollation')]\", 'edition': \"[parameters('databaseedition')]\", 'maxsizebytes': '1073741824'}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('sqlservername')]\", 'properties': {'administratorlogin': \"[parameters('sqlserveradministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqlserveradministratorloginpassword')]\", 'version': '12.0'}, 'tags': {'displayname': \"[parameters('sqlservername')]\"}, 'resources': [{'type': 'databases', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('sqlservername')]\"], 'name': 'master', 'properties': {}}, {'type': 'databases/providers/diagnosticsettings', 'name': \"[concat('master/microsoft.insights/',variables('diagnosticsettingsname'))]\", 'dependson': [\"[parameters('sqlservername')]\", \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\", \"[resourceid('microsoft.sql/servers/databases', parameters('sqlservername'), 'master')]\"], 'apiversion': '2017-05-01-preview', 'properties': {'name': \"[variables('diagnosticsettingsname')]\", 'workspaceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\", 'logs': [{'category': 'sqlsecurityauditevents', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}, {'condition': \"[parameters('ismsdevopsauditenabled')]\", 'category': 'devopsoperationsaudit', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}]}}, {'apiversion': '2017-03-01-preview', 'type': 'auditingsettings', 'name': 'defaultauditingsettings', 'dependson': [\"[parameters('sqlservername')]\", \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\"], 'properties': {'state': 'enabled', 'isazuremonitortargetenabled': true}}, {'condition': \"[parameters('ismsdevopsauditenabled')]\", 'type': 'devopsauditingsettings', 'apiversion': '2020-02-02-preview', 'name': 'default', 'dependson': [\"[parameters('sqlservername')]\", \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\"], 'properties': {'state': 'enabled', 'isazuremonitortargetenabled': true}}]} END"}
{"prompt": "\n\n###\n\nCreates and optionally secures a Key Vault with logging linked to a storage account.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('stackname')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites',parameters('stackname'))]\"], 'properties': {'enablerbacauthorization': false, 'enablesoftdelete': false, 'enabledfordeployment': false, 'enabledfordiskencryption': false, 'enabledfortemplatedeployment': false, 'tenantid': '[subscription().tenantid]', 'accesspolicies': [{'tenantid': '[subscription().tenantid]', 'objectid': \"[parameters('aaduserobjectid')]\", 'permissions': {'secrets': ['list', 'get', 'set']}}, {'tenantid': \"[reference(resourceid('microsoft.web/sites', parameters('stackname')), '2018-02-01', 'full').identity.tenantid]\", 'objectid': \"[reference(resourceid('microsoft.web/sites', parameters('stackname')), '2018-02-01', 'full').identity.principalid]\", 'permissions': {'secrets': ['list', 'get', 'set']}}], 'sku': {'name': 'standard', 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[variables('location')]\", 'properties': {'addressspace': {'addressprefixes': ['172.16.0.0/16']}, 'enableddosprotection': false, 'enablevmprotection': false, 'subnets': [{'name': \"[parameters('frontendsubnet')]\", 'properties': {'addressprefix': '172.16.0.0/24', 'serviceendpoints': [{'service': 'microsoft.sql'}], 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'disabled'}}, {'name': \"[parameters('backendsubnet')]\", 'properties': {'addressprefix': '172.16.1.0/24', 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'disabled'}}, {'name': \"[parameters('gatewaysubnet')]\", 'properties': {'addressprefix': '172.16.255.0/27', 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'disabled'}}]}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vnetname'), '/',parameters('frontendsubnet'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'addressprefix': '172.16.0.0/24', 'serviceendpoints': [{'service': 'microsoft.sql'}], 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'disabled'}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vnetname'), '/',parameters('backendsubnet'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'addressprefix': '172.16.1.0/24', 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'disabled'}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vnetname'), '/',parameters('gatewaysubnet'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'addressprefix': '172.16.255.0/27', 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'disabled'}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('nicname')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'ipconfigurations': [{'name': \"[concat( parameters('stackname'),'vmip')]\", 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), parameters('backendsubnet'))]\"}}}]}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2019-04-01', 'name': \"[variables('privatedbendpointname')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.sql/servers', parameters('stackname'))]\"], 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), parameters('backendsubnet'))]\"}, 'privatelinkserviceconnections': [{'name': \"[variables('privatedbendpointname')]\", 'properties': {'privatelinkserviceid': \"[resourceid('microsoft.sql/servers',parameters('stackname'))]\", 'groupids': ['sqlserver']}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('privatedbdnszonename')]\", 'location': 'global', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"]}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat(variables('privatedbdnszonename'), '/', variables('privatedbdnszonename'), '-link')]\", 'location': 'global', 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('privatedbdnszonename'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02', 'name': \"[format('appinsights{0}', variables('websitename'))]\", 'location': \"[parameters('location')]\", 'tags': {\"[format('hidden-link:{0}', resourceid('microsoft.web/sites', variables('websitename')))]\": 'resource', 'displayname': 'appinsightscomponent'}, 'kind': 'web', 'properties': {'application_type': 'web'}, 'dependson': [\"[resourceid('microsoft.web/sites', variables('websitename'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02', 'name': \"[variables('applicationinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-07-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('functionsubnetname')]\", 'properties': {'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled', 'delegations': [{'name': 'webapp', 'properties': {'servicename': 'microsoft.web/serverfarms'}}], 'addressprefix': \"[parameters('functionsubnetaddressprefix')]\"}}, {'name': \"[parameters('privateendpointsubnetname')]\", 'properties': {'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled', 'addressprefix': \"[parameters('privateendpointsubnetaddressprefix')]\"}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('privatestoragefilednszonename')]\", 'location': 'global'}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('privatestorageblobdnszonename')]\", 'location': 'global'}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('privatestoragequeuednszonename')]\", 'location': 'global'}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('privatestoragetablednszonename')]\", 'location': 'global'}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('privatestoragefilednszonename'), format('{0}-link', variables('privatestoragefilednszonename')))]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('privatestoragefilednszonename'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('privatestorageblobdnszonename'), format('{0}-link', variables('privatestorageblobdnszonename')))]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('privatestorageblobdnszonename'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('privatestoragetablednszonename'), format('{0}-link', variables('privatestoragetablednszonename')))]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('privatestoragetablednszonename'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('storageaccountname')]\", 'apiversion': '2019-06-01', 'location': \"[parameters('location')]\", 'kind': 'storagev2', 'sku': {'name': 'standard_lrs'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis template provides a way to deploy an Azure database for MySQL with VNet integration.\n\n===\n\n", "truth": " {'type': 'microsoft.dbformysql/servers', 'apiversion': '2017-12-01', 'name': \"[variables('servername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('databaseskuname')]\", 'tier': \"[parameters('databaseskutier')]\", 'capacity': \"[parameters('databaseskucapacity')]\", 'size': \"[parameters('databaseskusizemb')]\", 'family': \"[parameters('databaseskufamily')]\"}, 'properties': {'version': \"[parameters('mysqlversion')]\", 'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'storagemb': \"[parameters('databaseskusizemb')]\"}, 'resources': [{'type': 'firewallrules', 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'name': \"[variables('firewallrule')]\", 'dependson': [\"[resourceid('microsoft.dbformysql/servers', variables('servername'))]\"], 'properties': {'startipaddress': '0.0.0.0', 'endipaddress': '255.255.255.255'}}, {'name': \"[variables('databasename')]\", 'type': 'databases', 'apiversion': '2017-12-01', 'dependson': [\"[resourceid('microsoft.dbformysql/servers', variables('servername'))]\", \"[resourceid('microsoft.dbformysql/servers/firewallrules', variables('servername'), variables('firewallrule'))]\"], 'properties': {'charset': 'utf8', 'collation': 'utf8_general_ci'}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.dbformysql/servers', 'apiversion': '2017-12-01', 'name': \"[variables('mysqlservername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('dbskuname')]\", 'tier': \"[parameters('dbskutier')]\", 'capacity': \"[parameters('dbskucapacity')]\", 'family': \"[parameters('databaseskufamily')]\"}, 'properties': {'createmode': 'default', 'version': \"[parameters('mysqlversion')]\", 'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'storageprofile': {'storagemb': \"[parameters('dbskusizemb')]\", 'backupretentiondays': 7, 'georedundantbackup': 'disabled'}, 'sslenforcement': 'disabled'}}{'type': 'microsoft.dbformysql/servers/firewallrules', 'apiversion': '2017-12-01', 'name': \"[format('{0}/{1}', variables('mysqlservername'), 'allowazureips')]\", 'properties': {'startipaddress': '0.0.0.0', 'endipaddress': '255.255.255.255'}, 'dependson': [\"[resourceid('microsoft.dbformysql/servers', variables('mysqlservername'))]\"]} END"}
{"prompt": "\n\n###\n\nCreates and optionally secures a Key Vault with logging linked to a storage account.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2021-04-01-preview', 'name': \"[format('{0}/{1}', variables('keyvaultname'), format('kvs-{0}-aikey', variables('basename')))]\", 'properties': {'value': \"[reference(resourceid('microsoft.insights/components', format('ai-{0}', variables('basename')))).instrumentationkey]\"}, 'dependson': [\"[resourceid('microsoft.insights/components', format('ai-{0}', variables('basename')))]\", \"[resourceid('microsoft.keyvault/vaults', variables('keyvaultname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/privatednszones/a', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('apimanagementcustomdnsname'), 'api')]\", 'properties': {'ttl': 3600, 'arecords': [{'ipv4address': \"[reference(resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))).privateipaddresses[0]]\"}]}, 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))]\", \"[resourceid('microsoft.network/privatednszones', parameters('apimanagementcustomdnsname'))]\"]}{'type': 'microsoft.network/privatednszones/a', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('apimanagementcustomdnsname'), 'management')]\", 'properties': {'ttl': 3600, 'arecords': [{'ipv4address': \"[reference(resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))).privateipaddresses[0]]\"}]}, 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))]\", \"[resourceid('microsoft.network/privatednszones', parameters('apimanagementcustomdnsname'))]\"]}{'type': 'microsoft.network/privatednszones/a', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('apimanagementcustomdnsname'), 'portal')]\", 'properties': {'ttl': 3600, 'arecords': [{'ipv4address': \"[reference(resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))).privateipaddresses[0]]\"}]}, 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))]\", \"[resourceid('microsoft.network/privatednszones', parameters('apimanagementcustomdnsname'))]\"]}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('apimanagementcustomdnsname'), 'privatednszonelink')]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', parameters('apimanagementcustomdnsname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"]}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', 'privatelink.azurewebsites.net', 'webappprivatednszonelink')]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/privatednszones', 'privatelink.azurewebsites.net')]\"]}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2021-02-01', 'name': \"[format('{0}/{1}', format('pe-{0}-sites', variables('basename')), 'webappprivatednszonegroup')]\", 'properties': {'privatednszoneconfigs': [{'name': 'config', 'properties': {'privatednszoneid': \"[resourceid('microsoft.network/privatednszones', 'privatelink.azurewebsites.net')]\"}}]}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', 'privatelink.azurewebsites.net')]\", \"[resourceid('microsoft.network/privateendpoints', format('pe-{0}-sites', variables('basename')))]\"]} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/privatednszones/a', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('apimanagementcustomdnsname'), 'api')]\", 'properties': {'ttl': 3600, 'arecords': [{'ipv4address': \"[reference(resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))).privateipaddresses[0]]\"}]}, 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))]\", \"[resourceid('microsoft.network/privatednszones', parameters('apimanagementcustomdnsname'))]\"]}{'type': 'microsoft.network/privatednszones/a', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('apimanagementcustomdnsname'), 'management')]\", 'properties': {'ttl': 3600, 'arecords': [{'ipv4address': \"[reference(resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))).privateipaddresses[0]]\"}]}, 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))]\", \"[resourceid('microsoft.network/privatednszones', parameters('apimanagementcustomdnsname'))]\"]}{'type': 'microsoft.network/privatednszones/a', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('apimanagementcustomdnsname'), 'portal')]\", 'properties': {'ttl': 3600, 'arecords': [{'ipv4address': \"[reference(resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))).privateipaddresses[0]]\"}]}, 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apimanagementservicename'))]\", \"[resourceid('microsoft.network/privatednszones', parameters('apimanagementcustomdnsname'))]\"]}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('apimanagementcustomdnsname'), 'privatednszonelink')]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', parameters('apimanagementcustomdnsname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"]}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', 'privatelink.azurewebsites.net', 'webappprivatednszonelink')]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/privatednszones', 'privatelink.azurewebsites.net')]\"]}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2021-02-01', 'name': \"[format('{0}/{1}', format('pe-{0}-sites', variables('basename')), 'webappprivatednszonegroup')]\", 'properties': {'privatednszoneconfigs': [{'name': 'config', 'properties': {'privatednszoneid': \"[resourceid('microsoft.network/privatednszones', 'privatelink.azurewebsites.net')]\"}}]}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', 'privatelink.azurewebsites.net')]\", \"[resourceid('microsoft.network/privateendpoints', format('pe-{0}-sites', variables('basename')))]\"]}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2021-02-01', 'name': \"[format('{0}/{1}', format('pe-{0}-kv', variables('basename')), 'keyvaultprivatednszonegroup')]\", 'properties': {'privatednszoneconfigs': [{'name': 'config', 'properties': {'privatednszoneid': \"[resourceid('microsoft.network/privatednszones', 'privatelink.vaultcore.azure.net')]\"}}]}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', 'privatelink.vaultcore.azure.net')]\", \"[resourceid('microsoft.network/privateendpoints', format('pe-{0}-kv', variables('basename')))]\"]}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', 'privatelink.vaultcore.azure.net', 'keyvaultprivatednszonelink')]\", 'location': 'global', 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', 'privatelink.vaultcore.azure.net')]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"]}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-03-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetappserviceintname')]\", 'properties': {'addressprefix': \"[parameters('subnetappserviceintaddressprefix')]\", 'delegations': [{'name': 'delegation', 'properties': {'servicename': 'microsoft.web/serverfarms'}}]}}, {'name': \"[variables('subnetprivateendpointname')]\", 'properties': {'addressprefix': \"[parameters('subnetprivateendpointaddressprefix')]\", 'privateendpointnetworkpolicies': 'disabled'}}, {'name': \"[variables('subnetapimanagementname')]\", 'properties': {'addressprefix': \"[parameters('subnetapimanagementaddressprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgapimanagementname'))]\"}}}, {'name': \"[variables('subnetappgatewayname')]\", 'properties': {'addressprefix': \"[parameters('subnetapplicationgatewayaddressprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgappgatewayname'))]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('nsgapimanagementname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgappgatewayname'))]\"]}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-02-01', 'name': \"[variables('nsgappgatewayname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'agw-in', 'properties': {'direction': 'inbound', 'access': 'allow', 'protocol': '*', 'description': 'app gateway inbound', 'priority': 100, 'sourceaddressprefix': 'gatewaymanager', 'sourceportrange': '*', 'destinationaddressprefix': '*', 'destinationportrange': '65200-65535'}}, {'name': 'https-in', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 110, 'direction': 'inbound', 'description': 'allow https inbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-02-01', 'name': \"[variables('nsgapimanagementname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'apim-in', 'properties': {'direction': 'inbound', 'access': 'allow', 'protocol': 'tcp', 'description': 'api management inbound', 'priority': 100, 'sourceaddressprefix': 'apimanagement', 'sourceportrange': '*', 'destinationaddressprefix': 'virtualnetwork', 'destinationportrange': '3443'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2021-03-01', 'name': \"[variables('appgatewaypublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4', 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[parameters('apimanagementcustomdnsname')]\", 'location': 'global'}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': 'privatelink.azurewebsites.net', 'location': 'global'}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2021-02-01', 'name': \"[format('pe-{0}-sites', variables('basename'))]\", 'location': \"[parameters('location')]\", 'properties': {'subnet': {'id': \"[variables('privateendpointsubnetid')]\"}, 'privatelinkserviceconnections': [{'name': \"[format('plsc-{0}-sites', variables('basename'))]\", 'properties': {'privatelinkserviceid': \"[resourceid('microsoft.web/sites', variables('webappname'))]\", 'groupids': ['sites']}}]}, 'dependson': [\"[resourceid('microsoft.web/sites', variables('webappname'))]\"]}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2021-02-01', 'name': \"[format('pe-{0}-kv', variables('basename'))]\", 'location': \"[parameters('location')]\", 'properties': {'subnet': {'id': \"[variables('privateendpointsubnetid')]\", 'name': \"[variables('subnetprivateendpointname')]\"}, 'privatelinkserviceconnections': [{'id': \"[resourceid('microsoft.keyvault/vaults', variables('keyvaultname'))]\", 'name': \"[format('plsc-{0}-kv', variables('basename'))]\", 'properties': {'privatelinkserviceid': \"[resourceid('microsoft.keyvault/vaults', variables('keyvaultname'))]\", 'groupids': ['vault']}}]}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults', variables('keyvaultname'))]\"]} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'type': 'microsoft.insights/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'scope': \"[format('microsoft.cache/redis/{0}', parameters('rediscachename'))]\", 'name': \"[parameters('rediscachename')]\", 'properties': {'storageaccountid': \"[extensionresourceid(format('/subscriptions/{0}/resourcegroups/{1}', subscription().subscriptionid, parameters('existingdiagnosticsstorageaccountresourcegroup')), 'microsoft.storage/storageaccounts', parameters('existingdiagnosticsstorageaccountname'))]\", 'metrics': [{'timegrain': 'allmetrics', 'enabled': \"[parameters('diagnosticsenabled')]\", 'retentionpolicy': {'days': 90, 'enabled': \"[parameters('diagnosticsenabled')]\"}}]}, 'dependson': [\"[resourceid('microsoft.cache/redis', parameters('rediscachename'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an IoT hub and an IoT Hub Device Provisioning Service, and link the two services together.\n\n===\n\n", "truth": " {'condition': \"[equals(parameters('iothubneworexisting'), 'new')]\", 'type': 'microsoft.devices/iothubs', 'apiversion': '2020-03-01', 'name': \"[parameters('iothubname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('iothubsku')]\", 'tier': \"[parameters('iothubskutier')]\", 'capacity': 1}}{'condition': \"[equals(parameters('iothubneworexisting'), 'new')]\", 'type': 'microsoft.devices/iothubs/eventhubendpoints/consumergroups', 'apiversion': '2020-03-01', 'name': \"[concat(parameters('iothubname'), '/events/', parameters('consumergroupname'))]\", 'dependson': [\"[resourceid('microsoft.devices/iothubs', parameters('iothubname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.devices/iothubs', 'apiversion': '2021-03-31', 'name': \"[parameters('iothubname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'properties': {'authorizationpolicies': [{'keyname': 'iothubowner', 'rights': 'registrywrite, serviceconnect, serviceconnectdelete', 'retentionpolicy': {'days': 7, 'enabled': true}}], 'cloudtodevice': {'maxdeliverycount': 10, 'defaultttlasiso8601': 'pt1h', 'feedback': {'lockdurationasiso8601': 'pt1m', 'ttlasiso8601': 'pt1h', 'maxdeliverycount': 10}}, 'enablefileuploadnotifications': false, 'eventhubconnection': {'defaultconnection': {'name': 'iothub14cc0', 'connectionstring': \"[concat('defaultendpointsprotocol=https;accountname=', parameters('iothubname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', parameters('iothubname')), '2021-04-01').keys[0].value)]\", 'endpointstatus': 'enabled'}}}, 'dependson': [\"[resourceid('microsoft.devices/iothubs/eventhubconnection', parameters('iothubname'), 'iothub14cc0')]\", \"[resourceid('microsoft.devices/iothubs/eventhubconnection', parameters('iothubname'), 'iothub')]\"]} END"}
{"prompt": "\n\n###\n\nThis module creates a key resource in an existing KeyVault with apiVersion 2019-09-01.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'tenantid': \"[parameters('tenantid')]\", 'accesspolicies': [{'objectid': \"[parameters('objectid')]\", 'tenantid': \"[parameters('tenantid')]\", 'permissions': {'keys': \"[parameters('keyspermissions')]\", 'secrets': \"[parameters('secretspermissions')]\"}}], 'sku': {'name': \"[parameters('skuname')]\", 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}}{'copy': {'name': 'secrets', 'count': \"[length(parameters('secretsobject').secrets)]\"}, 'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2021-04-01-preview', 'name': \"[format('{0}/{1}', parameters('keyvaultname'), parameters('secretsobject').secrets[copyindex()].secretname)]\", 'properties': {'value': \"[parameters('secretsobject').secrets[copyindex()].secretvalue]\"}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[variables('blobstorageaccountprivateendpointid')]\", \"[variables('nicid')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('vmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'), '/customscript')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmid')]\", \"[variables('keyvaultid')]\", \"[variables('keyvaultprivateendpointid')]\", \"[variables('keyvaultprivatednszonegroupid')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'skipdos2unix': false, 'timestamp': 123456789, 'fileuris': [\"[variables('scriptfileuri')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('bash ',  parameters('scriptfilename'), ' ', variables('keyvaultserviceendpoint'), ' ', variables('blobserviceprimaryendpoint'), ' ', variables('azureenvironment'))]\"}}}{'condition': \"[parameters('deployloganalytics')]\", 'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/loganalytics')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmid')]\", \"[variables('workspaceid')]\", \"[variables('customscriptid')]\"], 'properties': {'publisher': 'microsoft.enterprisecloud.monitoring', 'type': 'omsagentforlinux', 'typehandlerversion': '1.12', 'settings': {'workspaceid': \"[reference(variables('workspaceid'), '2020-03-01-preview').customerid]\", 'stoponmultipleconnections': false}, 'protectedsettings': {'workspacekey': \"[listkeys(variables('workspaceid'),'2020-03-01-preview').primarysharedkey]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-04-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(tolower(parameters('vmname')), uniquestring(resourcegroup().id))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-04-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(tolower(parameters('vmname')), uniquestring(resourcegroup().id))]\"}}}{'apiversion': '2019-08-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowsshinbound', 'properties': {'priority': 100, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('virtualnetworkaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[variables('nsgid')]\"}, 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]}}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('publicipid')]\", \"[variables('vnetid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetid')]\"}}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2018-09-01', 'name': \"[variables('keyvaultprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2018-09-01', 'name': \"[variables('blobprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2018-09-01', 'name': \"[concat(variables('keyvaultprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('keyvaultprivatednszoneid')]\", \"[variables('vnetid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('vnetid')]\"}}}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2018-09-01', 'name': \"[concat(variables('blobprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('blobprivatednszoneid')]\", \"[variables('vnetid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('vnetid')]\"}}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-04-01', 'name': \"[parameters('keyvaultprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetid')]\", \"[variables('keyvaultid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('keyvaultprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('keyvaultid')]\", 'groupids': [\"[variables('keyvaultprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('subnetid')]\"}, 'customdnsconfigs': [{'fqdn': \"[concat(parameters('keyvaultname'), variables('keyvaultpublicdnszoneforwarder'))]\"}]}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-04-01', 'name': \"[parameters('blobstorageaccountprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetid')]\", \"[variables('blobstorageaccountid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('blobstorageaccountprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('blobstorageaccountid')]\", 'groupids': [\"[variables('blobstorageaccountprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('subnetid')]\"}, 'customdnsconfigs': [{'fqdn': \"[concat(parameters('blobstorageaccountname'), variables('blobpublicdnszoneforwarder'))]\"}]}}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-03-01', 'name': \"[variables('keyvaultprivatednszonegroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('keyvaultid')]\", \"[variables('keyvaultprivatednszoneid')]\", \"[variables('keyvaultprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('keyvaultprivatednszoneid')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('appserviceplantier')]\", 'capacity': \"[parameters('appserviceplaninstances')]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'network', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vnetipprefix': {'value': \"[parameters('vnetipprefix')]\"}, 'apimanagementsubnetipprefix': {'value': \"[parameters('apimanagementsubnetipprefix')]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1272.37030', 'templatehash': '7509198128725014274'}}, 'parameters': {'location': {'type': 'string', 'metadata': {'description': 'the location into which the virtual network resources should be deployed.'}}, 'vnetipprefix': {'type': 'string', 'metadata': {'description': 'the ip address prefix (cidr range) to use when deploying the virtual network.'}}, 'apimanagementsubnetipprefix': {'type': 'string', 'metadata': {'description': 'the ip address prefix (cidr range) to use when deploying the api management subnet within the virtual network.'}}}, 'variables': {'vnetname': 'vnet', 'apimanagementsubnetname': 'apim', 'nsgname': 'mynsg'}, 'resources': [{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetipprefix')]\"]}, 'subnets': [{'name': \"[variables('apimanagementsubnetname')]\", 'properties': {'addressprefix': \"[parameters('apimanagementsubnetipprefix')]\", 'serviceendpoints': [{'service': 'microsoft.storage'}, {'service': 'microsoft.sql'}, {'service': 'microsoft.eventhub'}, {'service': 'microsoft.servicebus'}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"]}, {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'client_communication_to_api_management', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'azurefrontdoor.backend', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'secure_client_communication_to_api_management', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'azurefrontdoor.backend', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'management_endpoint_for_azure_portal_and_powershell', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3443', 'sourceaddressprefix': 'apimanagement', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}, {'name': 'dependency_on_azure_storage', 'properties': {'description': 'apim service dependency on azure blob and azure table storage', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'storage', 'access': 'allow', 'priority': 130, 'direction': 'outbound'}}, {'name': 'azure_active_directory_and_azure_keyvault_dependency', 'properties': {'description': 'connect to azure active directory for developer portal authentication or for oauth2 flow during any proxy authentication', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'azureactivedirectory', 'access': 'allow', 'priority': 140, 'direction': 'outbound'}}, {'name': 'access_to_azure_sql_endpoints', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '1433', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'sql', 'access': 'allow', 'priority': 150, 'direction': 'outbound'}}, {'name': 'access_to_azure_keyvault', 'properties': {'description': 'allow apim service control plane access to keyvault to refresh secrets', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'azurekeyvault', 'access': 'allow', 'priority': 160, 'direction': 'outbound'}}, {'name': 'dependency_for_log_to_event_hub_policy_and_monitoring_agent', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportranges': ['5671', '5672', '443'], 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'eventhub', 'access': 'allow', 'priority': 170, 'direction': 'outbound'}}, {'name': 'dependency_on_azure_file_share_for_git', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '445', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'storage', 'access': 'allow', 'priority': 180, 'direction': 'outbound'}}, {'name': 'health_and_monitoring_extension', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['443', '12000'], 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'azurecloud', 'access': 'allow', 'priority': 190, 'direction': 'outbound'}}, {'name': 'publish_diagnostic_logs_and_metrics_resource_health_and_application_insights', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['1886', '443'], 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'azuremonitor', 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'connect_to_smtp_relay_for_sending_e-mails', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['25', '587', '25028'], 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 210, 'direction': 'outbound'}}, {'name': 'access_redis_service_for_cache_policies_between_machines', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '6381-6383', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 220, 'direction': 'inbound'}}, {'name': 'sync_counters_for_rate_limit_policies_between_machines', 'properties': {'protocol': 'udp', 'sourceportrange': '*', 'destinationportrange': '4290', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 230, 'direction': 'inbound'}}, {'name': 'azure_infrastructure_load_balancer', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'azureloadbalancer', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 240, 'direction': 'inbound'}}]}}], 'outputs': {'vnetname': {'type': 'string', 'value': \"[variables('vnetname')]\"}, 'apimanagementsubnetresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('apimanagementsubnetname'))]\"}}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'network', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vnetipprefix': {'value': \"[parameters('vnetipprefix')]\"}, 'vmsubnetipprefix': {'value': \"[parameters('vmsubnetipprefix')]\"}, 'privatelinkservicesubnetipprefix': {'value': \"[parameters('privatelinkservicesubnetipprefix')]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1272.37030', 'templatehash': '11351038166691976046'}}, 'parameters': {'location': {'type': 'string', 'metadata': {'description': 'the location into which the virtual network resources should be deployed.'}}, 'vnetipprefix': {'type': 'string', 'metadata': {'description': 'the ip address prefix (cidr range) to use when deploying the virtual network.'}}, 'vmsubnetipprefix': {'type': 'string', 'metadata': {'description': 'the ip address prefix (cidr range) to use when deploying the vm subnet within the virtual network.'}}, 'privatelinkservicesubnetipprefix': {'type': 'string', 'metadata': {'description': 'the ip address prefix (cidr range) to use when deploying the private link service environment subnet within the virtual network.'}}}, 'variables': {'vnetname': 'vnet', 'vmsubnetname': 'vms', 'privatelinkservicesubnetname': 'privatelinkservice'}, 'resources': [{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetipprefix')]\"]}, 'subnets': [{'name': \"[variables('vmsubnetname')]\", 'properties': {'addressprefix': \"[parameters('vmsubnetipprefix')]\"}}, {'name': \"[variables('privatelinkservicesubnetname')]\", 'properties': {'addressprefix': \"[parameters('privatelinkservicesubnetipprefix')]\", 'privatelinkservicenetworkpolicies': 'disabled'}}]}}], 'outputs': {'vnetname': {'type': 'string', 'value': \"[variables('vnetname')]\"}, 'vmsubnetresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('vmsubnetname'))]\"}, 'privatelinkservicesubnetresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('privatelinkservicesubnetname'))]\"}}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'load-balancer', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'subnetresourceid': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'network')).outputs.vmsubnetresourceid.value]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1272.37030', 'templatehash': '16599086315146897739'}}, 'parameters': {'location': {'type': 'string', 'metadata': {'description': 'the location into which the load balancer resources should be deployed.'}}, 'subnetresourceid': {'type': 'string', 'metadata': {'description': 'the resource id of the virtual network subnet that the load balancer should be deployed into.'}}}, 'variables': {'loadbalancername': 'myloadbalancer', 'frontendipconfigurationname': 'myfrontendipconfiguration', 'healthprobename': 'myhealthprobe', 'backendaddresspoolname': 'mybackendaddresspool'}, 'resources': [{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-06-01', 'name': \"[variables('loadbalancername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'frontendipconfigurations': [{'name': \"[variables('frontendipconfigurationname')]\", 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[parameters('subnetresourceid')]\"}}}], 'backendaddresspools': [{'name': \"[variables('backendaddresspoolname')]\"}], 'probes': [{'name': \"[variables('healthprobename')]\", 'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 2}}], 'loadbalancingrules': [{'name': 'httprule', 'properties': {'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'idletimeoutinminutes': 15, 'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancername'), variables('frontendipconfigurationname'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('backendaddresspoolname'))]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('loadbalancername'), variables('healthprobename'))]\"}}}]}}], 'outputs': {'frontendipaddress': {'type': 'string', 'value': \"[reference(resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))).frontendipconfigurations[0].properties.privateipaddress]\"}, 'frontendipconfigurationresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancername'), variables('frontendipconfigurationname'))]\"}, 'backendaddresspoolresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('backendaddresspoolname'))]\"}}}}, 'dependson': [\"[resourceid('microsoft.resources/deployments', 'network')]\"]}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'vm', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'subnetresourceid': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'network')).outputs.vmsubnetresourceid.value]\"}, 'vmimagereference': {'value': \"[variables('vmimagereference')[parameters('vmosname')]]\"}, 'vmsize': {'value': \"[parameters('vmsize')]\"}, 'vmosdiskstorageaccounttype': {'value': \"[parameters('vmosdiskstorageaccounttype')]\"}, 'vmadminusername': {'value': \"[parameters('vmadminusername')]\"}, 'vmadminpassword': {'value': \"[parameters('vmadminpassword')]\"}, 'loadbalancerbackendaddresspoolresourceid': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'load-balancer')).outputs.backendaddresspoolresourceid.value]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1272.37030', 'templatehash': '14108886978548335943'}}, 'parameters': {'location': {'type': 'string', 'metadata': {'description': 'the location into which the private link service resources should be deployed.'}}, 'subnetresourceid': {'type': 'string', 'metadata': {'description': 'the resource id of the virtual network subnet that the vm should be deployed into.'}}, 'vmsize': {'type': 'string', 'metadata': {'description': 'the name of the sku to use when creating the virtual machine.'}}, 'vmimagereference': {'type': 'object', 'metadata': {'description': 'the details of the image to deploy on the virtual machine.'}}, 'vmosdiskstorageaccounttype': {'type': 'string', 'metadata': {'description': \"the type of disk and storage account to use for the virtual machine's os disk.\"}}, 'vmadminusername': {'type': 'string', 'metadata': {'description': 'the administrator username to use for the virtual machine.'}}, 'vmadminpassword': {'type': 'securestring', 'metadata': {'description': 'the administrator password to use for the virtual machine.'}}, 'loadbalancerbackendaddresspoolresourceid': {'type': 'string', 'metadata': {'description': \"the resource id of the load balancer's backend address pool, which this virtual machine's nic will be added to.\"}}}, 'variables': {'vmname': 'myvm', 'vmnicname': 'myvm-nic', 'vmosdiskname': 'myvm-osdisk'}, 'resources': [{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('vmname'), 'installcustomscript')]\", 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.0', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"]}, {'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('vmnicname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[parameters('subnetresourceid')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[parameters('loadbalancerbackendaddresspoolresourceid')]\"}]}}]}}, {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': \"[parameters('vmimagereference')]\", 'osdisk': {'name': \"[variables('vmosdiskname')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('vmosdiskstorageaccounttype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmnicname'))]\"}]}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('vmnicname'))]\"]}]}}, 'dependson': [\"[resourceid('microsoft.resources/deployments', 'load-balancer')]\", \"[resourceid('microsoft.resources/deployments', 'network')]\"]} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'network', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'vnetipprefix': {'value': \"[parameters('vnetipprefix')]\"}, 'containerinstancessubnetipprefix': {'value': \"[parameters('containerinstancessubnetipprefix')]\"}, 'applicationgatewaysubnetipprefix': {'value': \"[parameters('applicationgatewaysubnetipprefix')]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1272.37030', 'templatehash': '2097233642399514556'}}, 'parameters': {'location': {'type': 'string', 'metadata': {'description': 'the location into which the virtual network resources should be deployed.'}}, 'vnetipprefix': {'type': 'string', 'metadata': {'description': 'the ip address prefix (cidr range) to use when deploying the virtual network.'}}, 'containerinstancessubnetipprefix': {'type': 'string', 'metadata': {'description': 'the ip address prefix (cidr range) to use when deploying the container group subnet within the virtual network.'}}, 'applicationgatewaysubnetipprefix': {'type': 'string', 'metadata': {'description': 'the ip address prefix (cidr range) to use when deploying the application gateway subnet within the virtual network.'}}}, 'variables': {'vnetname': 'vnet', 'containergroupsubnetname': 'containers', 'applicationgatewaysubnetname': 'applicationgateway', 'nsgname': 'mynsg'}, 'resources': [{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetipprefix')]\"]}, 'subnets': [{'name': \"[variables('containergroupsubnetname')]\", 'properties': {'addressprefix': \"[parameters('containerinstancessubnetipprefix')]\", 'delegations': [{'name': 'delegationservice', 'properties': {'servicename': 'microsoft.containerinstance/containergroups'}}]}}, {'name': \"[variables('applicationgatewaysubnetname')]\", 'properties': {'addressprefix': \"[parameters('applicationgatewaysubnetipprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"]}, {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow_front_door_to_send_http_traffic', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['80', '443'], 'sourceaddressprefix': 'azurefrontdoor.backend', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}, {'name': 'allow_gwm', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '65200-65535', 'sourceaddressprefix': 'gatewaymanager', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'allow_azureloadbalancer', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'azureloadbalancer', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}]}}], 'outputs': {'vnetname': {'type': 'string', 'value': \"[variables('vnetname')]\"}, 'vnetresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}, 'applicationgatewaysubnetresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('applicationgatewaysubnetname'))]\"}, 'containergroupsubnetresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('containergroupsubnetname'))]\"}}}}}{'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'application-gateway', 'properties': {'expressionevaluationoptions': {'scope': 'inner'}, 'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'backendipaddress': {'value': \"[reference(resourceid('microsoft.containerinstance/containergroups', variables('containergroupname'))).ipaddress.ip]\"}, 'subnetresourceid': {'value': \"[reference(resourceid('microsoft.resources/deployments', 'network')).outputs.applicationgatewaysubnetresourceid.value]\"}, 'frontdoorid': {'value': \"[reference(resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))).frontdoorid]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'metadata': {'_generator': {'name': 'bicep', 'version': '0.4.1272.37030', 'templatehash': '15426880971631504539'}}, 'parameters': {'location': {'type': 'string', 'metadata': {'description': 'the location into which the application gateway resources should be deployed.'}}, 'publicipaddressdomainnamelabel': {'type': 'string', 'defaultvalue': \"[format('appgw{0}', uniquestring(resourcegroup().id))]\", 'metadata': {'description': \"the domain name label to attach to the application gateway's public ip address. this must be unique within the specified location.\"}}, 'minimumcapacity': {'type': 'int', 'defaultvalue': 2, 'metadata': {'description': 'the minimum number of capacity units for the application gateway to use when autoscaling.'}}, 'maximumcapacity': {'type': 'int', 'defaultvalue': 10, 'metadata': {'description': 'the maximum number of capacity units for the application gateway to use when autoscaling.'}}, 'backendipaddress': {'type': 'string', 'metadata': {'description': 'the ip address of the backend to configure in application gateway.'}}, 'pickhostnamefrombackendaddress': {'type': 'bool', 'defaultvalue': false, 'metadata': {'description': 'indicates that application gateway should override the host header in the request with the host name of the back-end when the request is routed from the application gateway to the backend.'}}, 'subnetresourceid': {'type': 'string', 'metadata': {'description': 'the resource id of the virtual network subnet that the application gateway should be deployed into.'}}, 'frontdoorid': {'type': 'string', 'metadata': {'description': \"the unique id associated with the front door profile that will send traffic to this application. the application gateway waf will be configured to disallow traffic that hasn't had this id attached to it.\"}}}, 'variables': {'publicipaddressname': 'myapplicationgateway-pip', 'applicationgatewayname': 'myapplicationgateway', 'gatewayipconfigurationname': 'mygatewayipconfiguration', 'frontendipconfigurationname': 'myfrontendipconfiguration', 'frontendport': 80, 'frontendportname': 'myfrontendport', 'backendport': 80, 'backendaddresspoolname': 'mybackendaddresspool', 'backendhttpsettingname': 'mybackendhttpsetting', 'httplistenername': 'myhttplistener', 'requestroutingrulename': 'myrequestroutingrule', 'wafpolicyname': 'mywafpolicy', 'wafpolicymanagedrulesettype': 'owasp', 'wafpolicymanagedrulesetversion': '3.1'}, 'resources': [{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[parameters('publicipaddressdomainnamelabel')]\"}}}, {'type': 'microsoft.network/applicationgateways', 'apiversion': '2021-05-01', 'name': \"[variables('applicationgatewayname')]\", 'location': \"[parameters('location')]\", 'properties': {'sku': {'name': 'waf_v2', 'tier': 'waf_v2'}, 'autoscaleconfiguration': {'mincapacity': \"[parameters('minimumcapacity')]\", 'maxcapacity': \"[parameters('maximumcapacity')]\"}, 'gatewayipconfigurations': [{'name': \"[variables('gatewayipconfigurationname')]\", 'properties': {'subnet': {'id': \"[parameters('subnetresourceid')]\"}}}], 'frontendipconfigurations': [{'name': \"[variables('frontendipconfigurationname')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"}}}], 'frontendports': [{'name': \"[variables('frontendportname')]\", 'properties': {'port': \"[variables('frontendport')]\"}}], 'backendaddresspools': [{'name': \"[variables('backendaddresspoolname')]\", 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress')]\"}]}}], 'backendhttpsettingscollection': [{'name': \"[variables('backendhttpsettingname')]\", 'properties': {'port': \"[variables('backendport')]\", 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'pickhostnamefrombackendaddress': \"[parameters('pickhostnamefrombackendaddress')]\"}}], 'httplisteners': [{'name': \"[variables('httplistenername')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', variables('applicationgatewayname'), variables('frontendipconfigurationname'))]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', variables('applicationgatewayname'), variables('frontendportname'))]\"}, 'firewallpolicy': {'id': \"[resourceid('microsoft.network/applicationgatewaywebapplicationfirewallpolicies', variables('wafpolicyname'))]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': \"[variables('requestroutingrulename')]\", 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', variables('applicationgatewayname'), variables('httplistenername'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', variables('applicationgatewayname'), variables('backendaddresspoolname'))]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', variables('applicationgatewayname'), variables('backendhttpsettingname'))]\"}}}], 'webapplicationfirewallconfiguration': {'enabled': true, 'firewallmode': 'prevention', 'rulesetversion': \"[variables('wafpolicymanagedrulesetversion')]\", 'rulesettype': \"[variables('wafpolicymanagedrulesettype')]\", 'requestbodycheck': false}, 'firewallpolicy': {'id': \"[resourceid('microsoft.network/applicationgatewaywebapplicationfirewallpolicies', variables('wafpolicyname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/applicationgatewaywebapplicationfirewallpolicies', variables('wafpolicyname'))]\"]}, {'type': 'microsoft.network/applicationgatewaywebapplicationfirewallpolicies', 'apiversion': '2020-06-01', 'name': \"[variables('wafpolicyname')]\", 'location': \"[parameters('location')]\", 'properties': {'policysettings': {'mode': 'prevention', 'state': 'enabled', 'requestbodycheck': false}, 'customrules': [{'name': 'requirecorrectfrontdooridheader', 'ruletype': 'matchrule', 'priority': 1, 'action': 'block', 'matchconditions': [{'matchvariables': [{'variablename': 'requestheaders', 'selector': 'x-azure-fdid'}], 'negationconditon': true, 'operator': 'equal', 'matchvalues': [\"[parameters('frontdoorid')]\"]}]}], 'managedrules': {'managedrulesets': [{'rulesettype': \"[variables('wafpolicymanagedrulesettype')]\", 'rulesetversion': \"[variables('wafpolicymanagedrulesetversion')]\"}]}}}], 'outputs': {'applicationgatewayresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.network/applicationgateways', variables('applicationgatewayname'))]\"}, 'publicipaddresshostname': {'type': 'string', 'value': \"[reference(resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))).dnssettings.fqdn]\"}}}}, 'dependson': [\"[resourceid('microsoft.containerinstance/containergroups', variables('containergroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\", \"[resourceid('microsoft.resources/deployments', 'network')]\"]} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2021-02-01', 'name': \"[parameters('serverfarmname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[parameters('serverfarmname')]\"}, 'sku': {'name': 'f1', 'capacity': 1}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': ['172.20.0.0/16']}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': '172.20.0.0/24', 'privateendpointnetworkpolicies': 'disabled'}}]}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('privateendpointname')]\", 'location': \"[parameters('location')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), variables('subnetname'))]\"}, 'privatelinkserviceconnections': [{'name': 'myconnection', 'properties': {'privatelinkserviceid': \"[resourceid('microsoft.apimanagement/service', parameters('apimanagementservicename'))]\", 'groupids': ['gateway']}}]}, 'dependson': [\"[resourceid('microsoft.apimanagement/service', parameters('apimanagementservicename'))]\"]} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': 'storage-deploy', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('azstoragetempluri')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'tags': {'value': \"[variables('tags')]\"}, 'location': {'value': \"[parameters('location')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "truth": " {'scope': \"[format('microsoft.apimanagement/service/{0}', variables('apim-name'))]\", 'type': 'microsoft.insights/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'logtoanalytics', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apim-name'))]\"], 'properties': {'workspaceid': \"[parameters('log-analytics-workspace-id')]\", 'logs': [{'category': 'gatewaylogs', 'enabled': true}], 'metrics': [{'category': 'allmetrics', 'enabled': true}]}}{'scope': \"[format('microsoft.network/applicationgateways/{0}', variables('app-gateway-name'))]\", 'type': 'microsoft.insights/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'logtoanalytics', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/applicationgateways', variables('app-gateway-name'))]\"], 'properties': {'workspaceid': \"[parameters('log-analytics-workspace-id')]\", 'logs': [{'category': 'applicationgatewayaccesslog', 'enabled': true}, {'category': 'applicationgatewayperformancelog', 'enabled': true}, {'category': 'applicationgatewayfirewalllog', 'enabled': true}], 'metrics': [{'category': 'allmetrics', 'enabled': true}]}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.insights/components', 'apiversion': '2020-02-02-preview', 'name': \"[variables('appinsightsname')]\", 'location': \"[parameters('location')]\", 'kind': 'web', 'properties': {'application_type': 'web', 'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', variables('loganalyticsname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2'} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'name': 'provisionconfiguration', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('provisionconfigurationurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'_artifactslocation': {'value': \"[parameters('_artifactslocation')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'automationaccountname': {'value': \"[variables('automationaccountname')]\"}, 'adminusername': {'value': \"[parameters('adminusername')]\"}, 'adminpassword': {'value': \"[parameters('adminpassword')]\"}, 'domainname': {'value': \"[parameters('domainname')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'compilename': {'value': \"[parameters('compilename')]\"}, 'devopsstoragepackagesbase': {'value': \"[parameters('devopsstoragepackagesbase')]\"}}}}{'name': 'provisionnetwork', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-06-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('provisionnetworkurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'virtualnetworkname': {'value': \"[variables('virtualnetworkname')]\"}, 'virtualnetworkaddressrange': {'value': \"[parameters('virtualnetworkaddressrange')]\"}, 'virtualnetworksubnets': {'value': \"[variables('virtualnetworksubnets')]\"}, 'nicname': {'value': \"[variables('nicname')]\"}, 'nicipaddress': {'value': \"[parameters('nicipaddress')]\"}, 'nicsubnetref': {'value': \"[variables('nicsubnetref')]\"}, 'publicipaddressname': {'value': \"[variables('publicipaddressname')]\"}, 'publicipaddresstype': {'value': \"[variables('publicipaddresstype')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-06-01', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storage', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'kind': 'storagev2', 'sku': {'name': 'standard_lrs'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('publicipaddresssku')]\"}, 'zones': [\"[parameters('zone')]\"], 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': \"[variables('networksecuritygrouprules')]\"}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-05-01', 'name': \"[variables('networkinterfacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('networksecuritygroupname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}, 'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"}}}], 'enableacceleratednetworking': true, 'networksecuritygroup': {'id': \"[variables('nsgid')]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('publicipaddresssku')]\"}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': \"[variables('networksecuritygrouprules')]\"}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('eventhubsnamespaceprivateendpointid')]\", \"[variables('blobstorageaccountprivateendpointid')]\", \"[variables('nicid')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('vmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-04-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(tolower(parameters('vmname')), uniquestring(resourcegroup().id))]\"}}}{'apiversion': '2019-08-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowsshinbound', 'properties': {'priority': 100, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('virtualnetworkaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[variables('nsgid')]\"}, 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]}}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('publicipid')]\", \"[variables('vnetid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetid')]\"}}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2018-09-01', 'name': \"[variables('eventhubsnamespaceprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2018-09-01', 'name': \"[variables('blobprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'ishnsenabled': true, 'islocaluserenabled': true, 'issftpenabled': true}}{'type': 'microsoft.storage/storageaccounts/blobservices/containers', 'apiversion': '2021-04-01', 'name': \"[format('{0}/default/{1}', parameters('storageaccountname'), parameters('homedirectory'))]\", 'properties': {'publicaccess': 'none'}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]}{'type': 'microsoft.storage/storageaccounts/localusers', 'apiversion': '2021-04-01', 'name': \"[format('{0}/{1}', parameters('storageaccountname'), parameters('username'))]\", 'properties': {'permissionscopes': [{'permissions': 'rcwdl', 'service': 'blob', 'resourcename': \"[parameters('homedirectory')]\"}], 'homedirectory': \"[parameters('homedirectory')]\", 'sshauthorizedkeys': \"[if(empty(parameters('publickey')), null(), createarray(createobject('description', format('{0} public key', parameters('username')), 'key', parameters('publickey'))))]\", 'hassharedkey': false}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('filestorageaccountprivateendpointid')]\", \"[variables('blobstorageaccountprivateendpointid')]\", \"[variables('nicid')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('vmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'), '/', variables('customscriptextensionname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmid')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'skipdos2unix': false, 'timestamp': 123456789, 'fileuris': [\"[variables('scriptfileuri')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('bash ',  parameters('scriptfilename'), ' ', variables('fileserviceprimaryendpoint'), ' ', variables('blobserviceprimaryendpoint'))]\"}}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/', variables('omsagentforlinuxname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmid')]\", \"[variables('workspaceid')]\", \"[variables('customscriptid')]\"], 'properties': {'publisher': 'microsoft.enterprisecloud.monitoring', 'type': 'omsagentforlinux', 'typehandlerversion': '1.12', 'settings': {'workspaceid': \"[reference(variables('workspaceid'), '2020-08-01').customerid]\", 'stoponmultipleconnections': false}, 'protectedsettings': {'workspacekey': \"[listkeys(variables('workspaceid'),'2020-08-01').primarysharedkey]\"}}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/dependencyagent')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmid')]\", \"[variables('workspaceid')]\", \"[variables('customscriptid')]\", \"[variables('omsagentforlinuxid')]\"], 'properties': {'publisher': 'microsoft.azure.monitoring.dependencyagent', 'type': 'dependencyagentlinux', 'typehandlerversion': '9.10', 'autoupgrademinorversion': true}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('filestorageaccountprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('filestorageaccountid')]\", \"[variables('fileshareid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('filestorageaccountprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('filestorageaccountid')]\", 'groupids': [\"[variables('filestorageaccountprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('subnetid')]\"}}}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-06-01', 'name': \"[variables('fileprivatednszonegroup')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('fileprivatednszoneid')]\", \"[variables('filestorageaccountprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('fileprivatednszoneid')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(tolower(parameters('vmname')), uniquestring(resourcegroup().id))]\"}}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module allows you to create a user-assigned managed identity and a role assignment scoped to the resource group.\n\n===\n\n", "truth": " {'type': 'microsoft.managedidentity/userassignedidentities', 'apiversion': '2018-11-30', 'name': 'deploymentscript', 'location': \"[parameters('location')]\"} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.managedidentity/userassignedidentities', 'apiversion': '2018-11-30', 'name': \"[parameters('managedidentityname')]\", 'location': \"[parameters('location')]\"} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'apiversion': '2019-06-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('adlsstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_ragrs'}, 'kind': 'storagev2'} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2020-04-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(tolower(parameters('vmname')), uniquestring(resourcegroup().id))]\"}}}{'apiversion': '2019-08-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowsshinbound', 'properties': {'priority': 100, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2019-11-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('virtualnetworkaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[variables('nsgid')]\"}, 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}]}}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('publicipid')]\", \"[variables('vnetid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetid')]\"}}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2018-09-01', 'name': \"[variables('adlsprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'kind': 'storagev2', 'sku': {'name': 'standard_lrs'}, 'properties': {'accesstier': 'hot'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'condition': \"[empty(parameters('customresourceproviderid'))]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2019-09-01', 'name': 'customproviderinfrastructuretemplate', 'properties': {'mode': 'incremental', 'expressionevaluationoptions': {'scope': 'inner'}, 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'logicappname': {'value': \"[parameters('logicappname')]\"}, 'customresourceprovidername': {'value': \"[parameters('customresourceprovidername')]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'parameters': {'location': {'type': 'string'}, 'logicappname': {'type': 'string'}, 'customresourceprovidername': {'type': 'string'}}, 'resources': [{'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'switch': {'cases': {'createassociation': {'actions': {'createcustomresource': {'inputs': {'body': {'properties': \"@addproperty(triggerbody().body['properties'], 'mydynamicproperty', 'mydynamicvalue')\"}, 'statuscode': 200}, 'kind': 'http', 'type': 'response'}}, 'case': 'create'}}, 'default': {'actions': {'defaulthttpresponse': {'inputs': {'statuscode': 200}, 'kind': 'http', 'type': 'response'}}}, 'expression': '@triggerbody().operationtype', 'type': 'switch'}}, 'contentversion': '1.0.0.0', 'outputs': {}, 'parameters': {}, 'triggers': {'customproviderwebhook': {'inputs': {'schema': {'required': ['operationtype', 'resourcetype', 'resourceid', 'resourcename', 'body'], 'properties': {'operationtype': {'$id': '#/properties/operationtype', 'type': 'string', 'enum': ['create', 'delete', 'get', 'list', 'trigger']}, 'resourcetype': {'$id': '#/properties/resourcetype', 'type': 'string'}, 'resourceid': {'$id': '#/properties/resourceid', 'type': 'string'}, 'resourcename': {'$id': '#/properties/resourcename', 'type': 'string'}, 'body': {'$id': '#/properties/body', 'type': 'object'}}}}, 'kind': 'http', 'type': 'request'}}}}}, {'type': 'microsoft.customproviders/resourceproviders', 'apiversion': '2018-09-01-preview', 'name': \"[parameters('customresourceprovidername')]\", 'location': \"[parameters('location')]\", 'properties': {'resourcetypes': [{'name': 'associations', 'mode': 'secure', 'routingtype': 'webhook,cache,extension', 'endpoint': \"[listcallbackurl(resourceid('microsoft.logic/workflows/triggers', parameters('logicappname'), 'customproviderwebhook'), '2019-05-01').value]\"}]}}], 'outputs': {'customproviderresourceid': {'type': 'string', 'value': \"[resourceid('microsoft.customproviders/resourceproviders', parameters('customresourceprovidername'))]\"}}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis template creates an IoT hub and an IoT Hub Device Provisioning Service, and link the two services together.\n\n===\n\n", "truth": " {'type': 'microsoft.devices/iothubs', 'apiversion': '2021-03-31', 'name': \"[parameters('iothubname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 's1', 'capacity': 1}, 'properties': {'authorizationpolicies': [{'keyname': 'iothubowner', 'rights': 'registrywrite, serviceconnect, deviceconnect'}, {'keyname': 'service', 'rights': 'serviceconnect'}, {'keyname': 'device', 'rights': 'deviceconnect'}, {'keyname': 'registryread', 'rights': 'registryread'}, {'keyname': 'registryreadwrite', 'rights': 'registrywrite'}, {'keyname': 'deviceupdateservice', 'rights': 'registryread, serviceconnect, deviceconnect'}], 'cloudtodevice': {'maxdeliverycount': 10, 'defaultttlasiso8601': 'pt1h', 'feedback': {'lockdurationasiso8601': 'pt1m', 'ttlasiso8601': 'pt1h', 'maxdeliverycount': 10}}, 'enablefileuploadnotifications': false, 'eventhubendpoints': {'events': {'retentiontimeindays': 1, 'partitioncount': 4}}, 'features': 'none', 'messagingendpoints': {'filenotifications': {'lockdurationasiso8601': 'pt1m', 'ttlasiso8601': 'pt1h', 'maxdeliverycount': 10}}, 'routing': {'routes': [{'name': 'deviceupdate.devicetwinchanges', 'source': 'twinchangeevents', 'condition': \"(optype = 'updatetwin' or optype = 'replacetwin') and is_defined($body.tags.adugroup)\", 'endpointnames': ['events'], 'isenabled': true}, {'name': 'deviceupdate.digitaltwinchanges', 'source': 'digitaltwinchangeevents', 'condition': 'true', 'endpointnames': ['events'], 'isenabled': true}, {'name': 'deviceupdate.devicelifecycle', 'source': 'devicelifecycleevents', 'condition': \"optype = 'deletedeviceidentity' or optype = 'deletemoduleidentity'\", 'endpointnames': ['events'], 'isenabled': true}], 'fallbackroute': {'name': '$fallback', 'source': 'devicemessages', 'condition': 'true', 'endpointnames': ['events'], 'isenabled': true}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.devices/iothubs', 'apiversion': '2021-03-31', 'name': \"[parameters('iothubname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'properties': {'authorizationpolicies': [{'keyname': 'iothubowner', 'rights': 'registrywrite, serviceconnect, serviceconnectdelete', 'retentionpolicy': {'days': 7, 'enabled': true}}], 'cloudtodevice': {'maxdeliverycount': 10, 'defaultttlasiso8601': 'pt1h', 'feedback': {'lockdurationasiso8601': 'pt1m', 'ttlasiso8601': 'pt1h', 'maxdeliverycount': 10}}, 'enablefileuploadnotifications': false, 'eventhubconnection': {'defaultconnection': {'name': 'iothub14cc0', 'connectionstring': \"[concat('defaultendpointsprotocol=https;accountname=', parameters('iothubname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', parameters('iothubname')), '2021-04-01').keys[0].value)]\", 'endpointnames': ['events', 'messagingendpoints'], 'isrservicesenabled': true, 'eventhubauthorizationpolicies': 'iothubauthorizationpolicies', 'eventhubendpoints': {'endpointnames': ['events'], 'serviceconnections': [{'name': 'eventhubconnection', 'properties': {'serviceconnectionid': \"[resourceid('microsoft.devices/iothubs/serviceconnections', parameters('iothubname'), 'eventhub')]\", 'connectionstring': \"[concat('serviceconnect=', parameters('iothubname'), ';endpointsuffix=', environment().suffixes.storage, ';accountname=', parameters('iothubname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', parameters('iothubname')), '2021-04-01').keys[0].value)]\", 'endpointstatus': 'enabled'}}], 'cloudtodevice': {'maxdeliverycount': 10, 'defaultttlasiso8601': 'pt1h', 'feedback': {'lockdurationasiso8601': 'pt1m', 'ttlasiso8601': 'pt1h', 'maxdeliverycount': 10}}, 'enablefileuploadnotifications': false, 'eventhubconnection': {'defaultconnection': {'name': 'eventhub14cc0', 'connectionstring': \"[concat('defaultendpointsprotocol=https;accountname=', parameters('iothubname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', parameters('iothubname')), '2021-04-01').keys[0].value)]\", 'endpointnames': ['events', 'messagingendpoints'], 'isrservicesenabled': true, 'eventhubauthorizationpolicies': 'iothubauthorizationpolicies', 'eventhubendpoints': {'endpointnames': ['events'], 'serviceconnections': [{'name': 'eventhubconnection', 'properties': {'serviceconnectionid': \"[resourceid('microsoft.devices/iothubs/serviceconnections', parameters('iothubname'), 'eventhub')]\", 'connectionstring': \"[concat('serviceconnect=', parameters('iothubname'), ';endpointsuffix=', environment().suffixes.storage, ';accountname=', parameters('iothubname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', parameters('iothubname')), '2021-04-01').keys[0].value)]\", 'endpointnames': ['events', 'messagingendpoints'], 'isrservicesenabled': true, 'eventhubauthorizationpolicies': 'iothubauthorizationpolicies', 'eventhubendpoints': {'endpointnames': ['events'], 'serviceconnections': [{' END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "truth": " {'type': 'microsoft.resources/deployments', 'name': 'storageaccount', 'apiversion': '2021-01-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'),concat('nested/storageaccount.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'storageaccounttype': {'value': \"[variables('storageaccounttype')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'type': 'microsoft.resources/deployments', 'name': 'datafactory', 'apiversion': '2021-01-01', 'dependson': ['kibanaesdeployedvm'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'),concat('nested/datafactory.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'kibanaesdeployedvmip': {'value': \"[reference('kibanaesdeployedvm').outputs.publicipaddress.value]\"}, 'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, '_artifactslocation': {'value': \"[variables('artloc')]\"}, '_artifactslocationsastoken': {'value': \"[parameters('_artifactslocationsastoken')]\"}, 'datafactoryname': {'value': \"[parameters('datafactoryname')]\"}, 'datafactorylocation': {'value': \"[parameters('location')]\"}, 'blobcontainer': {'value': \"[variables('blobcontainer')]\"}, 'serviceprincipalid': {'value': \"[parameters('serviceprincipalid')]\"}, 'serviceprincipalkey': {'value': \"[parameters('serviceprincipalkey')]\"}}}}{'type': 'microsoft.resources/deployments', 'name': 'datalakeanalytics', 'apiversion': '2021-01-01', 'dependson': ['storageaccount'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'),concat('nested/datalakeanalytics.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adlanalyticsname': {'value': \"[parameters('adlanalyticsname')]\"}, 'adlstorename': {'value': \"[parameters('adlstorename')]\"}, 'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'datalakeanalyticslocation': {'value': \"[parameters('datalakeanalyticslocation')]\"}}}}{'type': 'microsoft.resources/deployments', 'name': 'eventhubtemplate', 'apiversion': '2021-01-01', 'dependson': ['datalakeanalytics'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'),concat('nested/eventhub.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'eventhubnamespacename': {'value': \"[parameters('eventhubnamespacename')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'eventhubsku': {'value': \"[parameters('eventhubsku')]\"}, 'skucapacity': {'value': \"[parameters('skucapacity')]\"}, 'isautoinflateenabled': {'value': \"[parameters('isautoinflateenabled')]\"}, 'maximumthroughputunits': {'value': \"[variables('maximumthroughputunits')]\"}, 'datacleaninginputstream': {'value': \"[variables('datacleaninginputstream')]\"}, 'datacleaningoutputstream': {'value': \"[variables('datacleaningoutputstream')]\"}, 'messageretentionindays': {'value': \"[parameters('messageretentionindays')]\"}, 'partitioncount': {'value': \"[parameters('partitioncount')]\"}, 'captureencodingformat': {'value': \"[parameters('captureencodingformat')]\"}, 'capturetime': {'value': \"[parameters('capturetime')]\"}, 'capturesize': {'value': \"[parameters('capturesize')]\"}, 'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'capturenameformat': {'value': \"[variables('capturenameformat')]\"}}}}{'type': 'microsoft.resources/deployments', 'name': 'streamanalyticsjobstemplate', 'apiversion': '2021-01-01', 'dependson': ['eventhubtemplate'], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[uri(parameters('_artifactslocation'),concat('nested/streamanalytics.json', parameters('_artifactslocationsastoken')))]\", 'contentversion': '1.0.0.0'}, 'parameters': {'eventhubnamespacename': {'value': \"[parameters('eventhubnamespacename')]\"}, 'location': {'value': \"[parameters('location')]\"}, 'datacleaninginputstream': {'value': \"[variables('datacleaninginputstream')]\"}, 'datacleaningoutputstream': {'value': \"[variables('datacleaningoutputstream')]\"}, 'storageaccountname': {'value': \"[variables('storageaccountname')]\"}, 'datacleaningstreamanalyticsjob': {'value': \"[variables('datacleaningstreamanalyticsjob')]\"}, 'dataaggregatorstreamanalyticsjob1': {'value': \"[variables('dataaggregatorstreamanalyticsjob1')]\"}, 'dataaggregatorstreamanalyticsjob2': {'value': \"[variables('dataaggregatorstreamanalyticsjob2')]\"}, 'dataaggregatorstreamanalyticsjob3': {'value': \"[variables('dataaggregatorstreamanalyticsjob3')]\"}}}} END", "openai_output": "\n\n===\n\n {'name': 'shared', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('sharedtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'networksettings': {'value': \"[variables('networksettings')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': \"[concat('webnode', copyindex())]\", 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'copy': {'name': 'vmloop', 'count': \"[parameters('webnodecount')]\"}, 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('webtemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'mysqlpassword': {'value': \"[parameters('mysqlpassword')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': \"[concat('web', copyindex())]\"}, 'subnet': {'value': \"[variables('networksettings').subnet.web]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('webnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('webossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redismasternode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redismastertemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'redismaster'}, 'subnet': {'value': \"[variables('networksettings').subnet.redis]\"}, 'sizeofdatadiskingb': {'value': \"[variables('sizeofdatadiskingb')]\"}, 'vmsize': {'value': \"[parameters('dbnodevmsize')]\"}, 'zabbixserveripaddress': {'value': \"[parameters('zabbixserveripaddress')]\"}, 'ossettings': {'value': \"[variables('redismasterossettings')]\"}, 'authenticationtype': {'value': \"[parameters('authenticationtype')]\"}, 'adminpasswordorkey': {'value': \"[parameters('adminpasswordorkey')]\"}, 'location': {'value': \"[parameters('location')]\"}}}}{'name': 'redisslavenode', 'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'dependson': [\"[resourceid('microsoft.resources/deployments/', 'shared')]\", \"[resourceid('microsoft.resources/deployments/', 'redismasternode')]\"], 'properties': {'mode': 'incremental', 'templatelink': {'uri': \"[variables('redisslavetemplateurl')]\", 'contentversion': '1.0.0.0'}, 'parameters': {'adminusername': {'value': \"[parameters('adminusername')]\"}, 'namespace': {'value': \"[variables('namespace')]\"}, 'vmbasename': {'value': 'rediss END"}
{"prompt": "\n\n###\n\nThis template creates a EventHubs namespace, an Event Hub, a consumer group and authorizationRules\n\n===\n\n", "truth": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('eventhubnamespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2021-01-01-preview', 'name': \"[parameters('eventhubname')]\", 'type': 'eventhubs', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces', parameters('eventhubnamespacename'))]\"]}]} END", "openai_output": "\n\n===\n\n {'apiversion': '2018-01-01-preview', 'name': \"[parameters('eventhubnamespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('eventhubname')]\", 'type': 'eventhubs', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('eventhubnamespacename'))]\"], 'properties': {'messageretentionindays': \"[parameters('messageretentionindays')]\", 'partitioncount': \"[parameters('partitioncount')]\", 'maxsizeinmegabytes': \"[parameters('maxsizeinmegabytes')]\"}}]} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "truth": " {'condition': \"[parameters('enableads')]\", 'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[variables('storagename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2', 'properties': {'minimumtlsversion': 'tls1_2', 'supportshttpstrafficonly': 'true', 'allowblobpublicaccess': 'false'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'name': \"[variables('storageaccountname')]\", 'apiversion': '2021-02-01', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'apiversion': '2019-06-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow_tds_inbound', 'properties': {'description': 'allow access to data', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '1433', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}, {'name': 'allow_redirect_inbound', 'properties': {'description': 'allow inbound redirect traffic to managed instance inside the virtual network', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '11000-11999', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1100, 'direction': 'inbound'}}, {'name': 'deny_all_inbound', 'properties': {'description': 'deny all other inbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 4096, 'direction': 'inbound'}}, {'name': 'deny_all_outbound', 'properties': {'description': 'deny all other outbound traffic', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 4096, 'direction': 'outbound'}}]}}{'type': 'microsoft.network/routetables', 'name': \"[variables('routetablename')]\", 'apiversion': '2019-06-01', 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false}}{'name': \"[parameters('virtualnetworkname')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2019-06-01', 'dependson': [\"[variables('routetablename')]\", \"[variables('networksecuritygroupname')]\"], 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', variables('routetablename'))]\"}, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}, 'delegations': [{'name': 'midelegation', 'properties': {'servicename': 'microsoft.sql/managedinstances'}}]}}, {'name': \"[parameters('managementsubnetname')]\", 'properties': {'addressprefix': \"[parameters('managementsubnetprefix')]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "truth": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}}, 'resources': [{'type': 'subnets', 'apiversion': '2020-06-01', 'name': \"[variables('subnet1name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetname')]\"], 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'privateendpointnetworkpolicies': 'disabled'}}]}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-06-01', 'name': \"[variables('privateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetname')]\", \"[variables('sqlservername')]\"], 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnet1name'))]\"}, 'privatelinkserviceconnections': [{'name': \"[variables('privateendpointname')]\", 'properties': {'privatelinkserviceid': \"[resourceid('microsoft.sql/servers',variables('sqlservername'))]\", 'groupids': ['sqlserver']}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-01-01', 'name': \"[variables('privatednszonename')]\", 'location': 'global', 'dependson': [\"[variables('vnetname')]\"], 'properties': ''}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-01-01', 'name': \"[concat(variables('privatednszonename'), '/', variables('privatednszonename'), '-link')]\", 'location': 'global', 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('privatednszonename'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}}}{'type': 'microsoft.network/privateendpoints/privatednszonegroups', 'apiversion': '2020-06-01', 'name': \"[variables('pvtendpointdnsgroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/privatednszones', variables('privatednszonename'))]\", \"[variables('privateendpointname')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'config1', 'properties': {'privatednszoneid': \"[resourceid('microsoft.network/privatednszones', variables('privatednszonename'))]\"}}]}} END", "openai_output": "\n\n===\n\n {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis module creates a key resource in an existing KeyVault with apiVersion 2019-09-01.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[variables('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', 'demoidentity')]\"], 'properties': {'enabledfordeployment': false, 'enabledfordiskencryption': false, 'enabledfortemplatedeployment': false, 'tenantid': '[subscription().tenantid]', 'accesspolicies': [{'objectid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', 'demoidentity'), '2018-11-30').principalid]\", 'tenantid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', 'demoidentity'), '2018-11-30').tenantid]\", 'permissions': {'secrets': ['get', 'list']}}], 'sku': {'name': 'standard', 'family': 'a'}}}{'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2019-09-01', 'name': \"[concat(variables('keyvaultname'), '/', variables('keyvaultcasecretname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.keyvault/vaults', variables('keyvaultname'))]\", \"[resourceid('microsoft.resources/deploymentscripts', 'createanddeploycertificates')]\"], 'properties': {'value': \"[reference('createanddeploycertificates').outputs.interca]\"}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nThis module creates a key resource in an existing KeyVault with apiVersion 2019-09-01.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('applicationgatewayuserdefinedmanagedidentityid')]\", \"[variables('aadpodidentityuserdefinedmanagedidentityid')]\"], 'properties': {'accesspolicies': [{'tenantid': \"[reference(variables('applicationgatewayuserdefinedmanagedidentityid')).tenantid]\", 'objectid': \"[reference(variables('applicationgatewayuserdefinedmanagedidentityid')).principalid]\", 'permissions': {'secrets': ['get', 'list'], 'certificates': ['get']}}, {'tenantid': \"[reference(variables('aadpodidentityuserdefinedmanagedidentityid')).tenantid]\", 'objectid': \"[reference(variables('aadpodidentityuserdefinedmanagedidentityid')).principalid]\", 'permissions': {'secrets': ['get', 'list'], 'certificates': ['get']}}], 'sku': {'family': 'a', 'name': 'standard'}, 'tenantid': '[subscription().tenantid]', 'networkacls': {'bypass': 'azureservices', 'defaultaction': \"[parameters('keyvaultnetworkrulesetdefaultaction')]\"}, 'enabledfordeployment': false, 'enabledfordiskencryption': false, 'enabledfortemplatedeployment': false, 'enablesoftdelete': false}, 'resources': [{'name': 'microsoft.insights/default', 'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'dependson': [\"[variables('keyvaultid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'auditevent', 'enabled': true}], 'metrics': [{'category': 'allmetrics', 'enabled': true}]}}, {'comments': 'grant the aks cluster ingress controller pod managed identity with reader role permissions over key vault; paired with the access policy, this allows our ingress controller to pull certificates.', 'type': 'providers/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[concat('microsoft.authorization/', guid(concat(resourcegroup().id), variables('readerroleid')))]\", 'dependson': [\"[variables('keyvaultid')]\", \"[variables('aadpodidentityuserdefinedmanagedidentityid')]\"], 'properties': {'roledefinitionid': \"[variables('readerroleid')]\", 'principalid': \"[reference(variables('aadpodidentityuserdefinedmanagedidentityid')).principalid]\", 'principaltype': 'serviceprincipal'}}]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": " {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('akscontributorroleassignmentname')]\", 'dependson': [\"[variables('aksclusteruserdefinedmanagedidentityid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'roledefinitionid': \"[variables('contributorroleid')]\", 'description': 'assign the cluster user-defined managed identity contributor role on the resource group.', 'principalid': \"[reference(variables('aksclusteruserdefinedmanagedidentityname')).principalid]\", 'principaltype': 'serviceprincipal', 'scope': '[resourcegroup().id]'}}{'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('appgwcontributorroleassignmentname')]\", 'dependson': [\"[variables('aksclusterid')]\", \"[variables('applicationgatewayid')]\"], 'properties': {'roledefinitionid': \"[variables('contributorroleid')]\", 'principalid': \"[reference(variables('aksclusterid'), '2020-12-01', 'full').properties.addonprofiles.ingressapplicationgateway.identity.objectid]\", 'principaltype': 'serviceprincipal', 'scope': '[resourcegroup().id]'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmconsumername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfaceconsumername'))]\"], 'tags': {'displayname': \"[variables('vmconsumername')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmconsumername')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmconsumername'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfaceconsumername'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "truth": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2019-06-01', 'name': \"[variables('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'encryption': {'services': {'blob': {'enabled': true}, 'file': {'enabled': true}}, 'keysource': 'microsoft.storage'}, 'supportshttpstrafficonly': true}} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "truth": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-12-01', 'name': \"[parameters('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 's1', 'tier': 'standard'}}{'type': 'microsoft.web/sites', 'apiversion': '2020-12-01', 'name': \"[parameters('uniquednsnameforwebapp')]\", 'location': \"[parameters('location')]\", 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('appserviceplanname'))]\"}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', parameters('appserviceplanname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('contoso_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'contoso as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname')), '2019-05-01').value]\"}}}{'type': 'microsoft.web/connections', 'apiversion': '2018-07-01-preview', 'name': \"[parameters('fabrikam_as2_connection_name')]\", 'location': \"[parameters('location')]\", 'properties': {'api': {'id': \"[variables('as2id')]\"}, 'displayname': 'fabrikam as2 connection', 'parametervalues': {'integrationaccountid': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\", 'integrationaccounturl': \"[listcallbackurl(resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname')), '2019-05-01').value]\"}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': 'jumpbox', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('jumpboxnicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'osprofile': {'computername': 'jumpbox', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('jumpboxnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": " {'condition': \"[parameters('enabledeletelock')]\", 'type': 'microsoft.authorization/locks', 'apiversion': '2017-04-01', 'scope': \"[format('microsoft.network/publicipaddresses/{0}', parameters('publicipaddressname'))]\", 'name': \"[variables('publiciplockname')]\", 'properties': {'level': 'cannotdelete'}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', parameters('publicipaddressname'))]\"]}{'condition': \"[parameters('enabledeletelock')]\", 'type': 'microsoft.authorization/locks', 'apiversion': '2017-04-01', 'scope': \"[format('microsoft.network/applicationgateways/{0}', parameters('applicationgatewayname'))]\", 'name': \"[variables('appgatewaylockname')]\", 'properties': {'level': 'cannotdelete'}, 'dependson': [\"[resourceid('microsoft.network/applicationgateways', parameters('applicationgatewayname'))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'name': 'jumpbox', 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('jumpboxnicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'osprofile': {'computername': 'jumpbox', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('jumpboxnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}}{'name': 'server', 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('servernicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'osprofile': {'computername': 'server', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('servernicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('projectname'),'-vm', copyindex(1), '/', 'installwebserver')]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'extensioncopy', 'count': 3}, 'dependson': ['vmcopy'], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.7', 'autoupgrademinorversion': true, 'settings': {'commandtoexecute': \"powershell.exe install-windowsfeature -name web-server -includemanagementtools && powershell.exe remove-item 'c:\\\\inetpub\\\\wwwroot\\\\iisstart.htm' && powershell.exe add-content -path 'c:\\\\inetpub\\\\wwwroot\\\\iisstart.htm' -value $('hello world from ' + $env:computername)\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('projectname'),'-vm', copyindex(1))]\", 'location': \"[parameters('location')]\", 'zones': ['[copyindex(1)]'], 'copy': {'name': 'vmcopy', 'count': 3}, 'dependson': ['networkinterfacecopy'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('vmstorageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('projectname'),'-vm', copyindex(1), '-networkinterface'))]\"}]}, 'osprofile': {'computername': \"[concat(parameters('projectname'),'-vm', copyindex(1))]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'enableautomaticupdates': true, 'provisionvmagent': true}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmnameprefix'), copyindex())]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/',concat(variables('nicnameprefix'),copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2012-r2-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicnameprefix'),copyindex()))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'copy': {'name': 'vm', 'count': \"[length(range(0, variables('numvms')))]\"}, 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-07-01', 'name': \"[format('{0}{1}', variables('vmname'), range(0, variables('numvms'))[copyindex()])]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[format('{0}{1}', variables('vmname'), range(0, variables('numvms'))[copyindex()])]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[format('{0}{1}-osdisk', variables('vmname'), range(0, variables('numvms'))[copyindex()])]\", 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', format('{0}{1}-nic', variables('vmname'), range(0, variables('numvms'))[range(0, variables('numvms'))[copyindex()]]))]\"}]}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', format('{0}{1}-nic', variables('vmname'), range(0, variables('numvms'))[range(0, variables('numvms'))[copyindex()]]))]\"]}{'copy': {'name': 'customscript', 'count': \"[length(range(0, variables('numvms')))]\"}, 'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2021-07-01', 'name': \"[format('{0}/{1}', format('{0}{1}', variables('vmname'), range(0, variables('numvms'))[range(0, variables('numvms'))[copyindex()]]), 'installcustomscript')]\", 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'commandtoexecute': 'sudo bash -c \"sudo apt-get install -f -y && sudo apt-get update -y && sudo apt-get upgrade -y && sudo apt-get install -y apache2 && echo \\\\\"you\\'re connected to $(hostname)\\\\\" | sudo tee /var/www/html/index.html\"'}}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', format('{0}{1}', variables('vmname'), range(0, variables('numvms'))[range(0, variables('numvms'))[copyindex()]]))]\"]} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat('vm-r1','-',copyindex(1),'/','installwebserver')]\", 'location': \"[parameters('location-r1')]\", 'copy': {'name': 'extensioncopy', 'count': 3}, 'dependson': ['vmcopy'], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.7', 'autoupgrademinorversion': true, 'settings': {'commandtoexecute': \"powershell.exe install-windowsfeature -name web-server -includemanagementtools && powershell.exe remove-item 'c:\\\\inetpub\\\\wwwroot\\\\iisstart.htm' && powershell.exe add-content -path 'c:\\\\inetpub\\\\wwwroot\\\\iisstart.htm' -value $('hello world from ' + $env:computername)\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[concat('vm-r1','-',copyindex(1))]\", 'location': \"[parameters('location-r1')]\", 'zones': ['[copyindex(1)]'], 'copy': {'name': 'vmcopy', 'count': 3}, 'dependson': ['networkinterfacecopy'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('vmstorageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat('vm-r1','-', copyindex(1), '-networkinterface'))]\"}]}, 'osprofile': {'computername': \"[concat('vm-r1','-',copyindex(1))]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'enableautomaticupdates': true, 'provisionvmagent': true}}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat('vm-r2','-',copyindex(1),'/','installwebserver')]\", 'location': \"[parameters('location-r2')]\", 'copy': {'name': 'extensioncopy', 'count': 3}, 'dependson': ['vmcopy'], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.7', 'autoupgrademinorversion': true, 'settings': {'commandtoexecute': \"powershell.exe install-windowsfeature -name web-server -includemanagementtools && powershell.exe remove-item 'c:\\\\inetpub\\\\wwwroot\\\\iisstart.htm' && powershell.exe add-content -path 'c:\\\\inetpub\\\\wwwroot\\\\iisstart.htm' -value $('hello world from ' + $env:computername)\"}}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[concat('vm-r2','-',copyindex(1))]\", 'location': \"[parameters('location-r2')]\", 'zones': ['[copyindex(1)]'], 'copy': {'name': 'vmcopy', 'count': 3}, 'dependson': ['networkinterfacecopy'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('vmstorageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat('vm-r2','-', copyindex(1), '-networkinterface'))]\"}]}, 'osprofile': {'computername': \"[concat('vm-r2','-',copyindex(1))]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'enableautomaticupdates': true, 'provisionvmagent': true}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'name': 'jumpbox', 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-03-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('jumpboxnicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'osprofile': {'computername': 'jumpbox', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('jumpboxnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}}{'name': 'server', 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-03-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('servernicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'osprofile': {'computername': 'server', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('servernicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-12-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'condition': \"[parameters('deploycustomdnsforwarder')]\", 'type': 'microsoft.compute/availabilitysets', 'comments': 'thi is the availability set for creating a ha cluster, run the template multiple times to get multiple dns servers', 'name': \"[parameters('dnsavailabilitysetname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('dnsvmname')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsavailabilitysetid')]\", \"[variables('blobstorageaccountblobprivateendpointid')]\", \"[variables('dnsvmnicid')]\"], 'properties': {'availabilityset': {'id': \"[variables('dnsavailabilitysetid')]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('dnsvmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('dnsvmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('dnsvmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('dnsvmnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis module creates a Shared Image Gallery resource with apiVersion 2019-12-01.\n\n===\n\n", "truth": " {'condition': \"[parameters('deploycustomdnsforwarder')]\", 'type': 'microsoft.compute/availabilitysets', 'comments': 'thi is the availability set for creating a ha cluster, run the template multiple times to get multiple dns servers', 'name': \"[parameters('dnsavailabilitysetname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('dnsvmname')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsavailabilitysetid')]\", \"[variables('blobstorageaccountblobprivateendpointid')]\", \"[variables('dnsvmnicid')]\"], 'properties': {'availabilityset': {'id': \"[variables('dnsavailabilitysetid')]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('dnsvmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('dnsvmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('dnsvmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('dnsvmnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('dnsvmname'),'/customscript')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsvmid')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('dnsvmscriptfileuri')]\"], 'commandtoexecute': \"[concat('./', variables('dnsvmscriptfilename'))]\"}}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('dnsvmname'),'/loganalytics')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsvmid')]\", \"[variables('workspaceid')]\", \"[variables('dnscustomscriptid')]\"], 'properties': {'publisher': 'microsoft.enterprisecloud.monitoring', 'type': 'omsagentforlinux', 'typehandlerversion': '1.12', 'settings': {'workspaceid': \"[reference(variables('workspaceid'), '2020-03-01-preview').customerid]\", 'stoponmultipleconnections': false}, 'protectedsettings': {'workspacekey': \"[listkeys(variables('workspaceid'),'2020-03-01-preview').primarysharedkey]\"}}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('dnsvmname'),'/dependencyagent')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsvmid')]\", \"[variables('workspaceid')]\", \"[variables('dnscustomscriptid')]\", \"[variables('dnsomsagentforlinuxid')]\"], 'properties': {'publisher': 'microsoft.azure.monitoring.dependencyagent', 'type': 'dependencyagentlinux', 'typehandlerversion': '9.10', 'autoupgrademinorversion': true}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('devvmname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[variables('adlsstorageaccountadlsprivateendpointid')]\", \"[variables('adlsstorageaccountblobprivateendpointid')]\", \"[variables('blobstorageaccountblobprivateendpointid')]\", \"[variables('devvmnicid')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('devvmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('devvmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('devvmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('devvmnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('devvmname'), '/customscript')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('devvmid')]\", \"[variables('devcontributorroleassignmentid')]\", \"[variables('devstorageblobdatacontributorroleassignmentid')]\", \"[variables('firewallpolicydefaultnetworkrulecollectiongroupid')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.1', 'autoupgrademinorversion': true, 'settings': {'skipdos2unix': false, 'timestamp': 123456789, 'fileuris': [\"[variables('testvmscriptfileuri')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('bash ',  variables('testvmscriptfilename'), ' ', parameters('privatednszonename'), ' ', parameters('devvmname'), ' ', parameters('prodvmname'), ' ', variables('adlsserviceprimaryendpoint'), ' ', variables('blobserviceprimaryendpoint'))]\"}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('devvmname'),'/loganalytics')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('devvmid')]\", \"[variables('workspaceid')]\", \"[variables('devcustomscriptid')]\"], 'properties': {'publisher': 'microsoft.enterprisecloud.monitoring', 'type': 'omsagentforlinux', 'typehandlerversion': '1.12', 'settings': {'workspaceid': \"[reference(variables('workspaceid'), '2020-03-01-preview').customerid]\", 'stoponmultipleconnections': false}, 'protectedsettings': {'workspacekey': \"[listkeys(variables('workspaceid'),'2020-03-01-preview').primarysharedkey]\"}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('devvmname'),'/dependencyagent')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('devvmid')]\", \"[variables('workspaceid')]\", \"[variables('devcustomscriptid')]\", \"[variables('devomsagentforlinuxid')]\"], 'properties': {'publisher': 'microsoft.azure.monitoring.dependencyagent', 'type': 'dependencyagentlinux', 'typehandlerversion': '9.10', 'autoupgrademinorversion': true}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('prodvmname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[variables('adlsstorageaccountadlsprivateendpointid')]\", \"[variables('adlsstorageaccountblobprivateendpointid')]\", \"[variables('blobstorageaccountblobprivateendpointid')]\", \"[variables('prodvmnicid')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('prodvmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('prodvmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('prodvmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('prodvmnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('prodvmname'), '/customscript')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('prodvmid')]\", \"[variables('prodcontributorroleassignmentid')]\", \"[variables('prodstorageblobdatacontributorroleassignmentid')]\", \"[variables('firewallpolicydefaultnetworkrulecollectiongroupid')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.1', 'autoupgrademinorversion': true, 'settings': {'skipdos2unix': false, 'timestamp': 123456789, 'fileuris': [\"[variables('testvmscriptfileuri')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('bash ',  variables('testvmscriptfilename'), ' ', parameters('privatednszonename'), ' ', parameters('devvmname'), ' ', parameters('prodvmname'), ' ', variables('adlsserviceprimaryendpoint'), ' ', variables('blobserviceprimaryendpoint'))]\"}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('prodvmname'),'/loganalytics')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('prodvmid')]\", \"[variables('workspaceid')]\", \"[variables('prodcustomscriptid')]\"], 'properties': {'publisher': 'microsoft.enterprisecloud.monitoring', 'type': 'omsagentforlinux', 'typehandlerversion': '1.12', 'settings': {'workspaceid': \"[reference(variables('workspaceid'), '2020-03-01-preview').customerid]\", 'stoponmultipleconnections': false}, 'protectedsettings': {'workspacekey': \"[listkeys(variables('workspaceid'),'2020-03-01-preview').primarysharedkey]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "truth": " {'condition': \"[parameters('deploycustomdnsforwarder')]\", 'type': 'microsoft.compute/availabilitysets', 'comments': 'thi is the availability set for creating a ha cluster, run the template multiple times to get multiple dns servers', 'name': \"[parameters('dnsavailabilitysetname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('dnsvmname')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsavailabilitysetid')]\", \"[variables('blobstorageaccountblobprivateendpointid')]\", \"[variables('dnsvmnicid')]\"], 'properties': {'availabilityset': {'id': \"[variables('dnsavailabilitysetid')]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('dnsvmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('dnsvmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('dnsvmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('dnsvmnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('dnsvmname'),'/customscript')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsvmid')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('dnsvmscriptfileuri')]\"], 'commandtoexecute': \"[concat('./', variables('dnsvmscriptfilename'))]\"}}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('dnsvmname'),'/loganalytics')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsvmid')]\", \"[variables('workspaceid')]\", \"[variables('dnscustomscriptid')]\"], 'properties': {'publisher': 'microsoft.enterprisecloud.monitoring', 'type': 'omsagentforlinux', 'typehandlerversion': '1.12', 'settings': {'workspaceid': \"[reference(variables('workspaceid'), '2020-03-01-preview').customerid]\", 'stoponmultipleconnections': false}, 'protectedsettings': {'workspacekey': \"[listkeys(variables('workspaceid'),'2020-03-01-preview').primarysharedkey]\"}}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('dnsvmname'),'/dependencyagent')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsvmid')]\", \"[variables('workspaceid')]\", \"[variables('dnscustomscriptid')]\", \"[variables('dnsomsagentforlinuxid')]\"], 'properties': {'publisher': 'microsoft.azure.monitoring.dependencyagent', 'type': 'dependencyagentlinux', 'typehandlerversion': '9.10', 'autoupgrademinorversion': true}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('devvmname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[variables('adlsstorageaccountadlsprivateendpointid')]\", \"[variables('adlsstorageaccountblobprivateendpointid')]\", \"[variables('blobstorageaccountblobprivateendpointid')]\", \"[variables('devvmnicid')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('devvmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('devvmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'disksizegb': \"[parameters('osdisksize')]\", 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[parameters('datadiskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('devvmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('diskstorageaccountype')]\"}}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('devvmnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('blobstorageaccountid')).primaryendpoints['blob']]\"}}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('devvmname'), '/customscript')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('devvmid')]\", \"[variables('devcontributorroleassignmentid')]\", \"[variables('devstorageblobdatacontributorroleassignmentid')]\", \"[variables('firewallpolicydefaultnetworkrulecollectiongroupid')]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.1', 'autoupgrademinorversion': true, 'settings': {'skipdos2unix': false, 'timestamp': 123456789, 'fileuris': [\"[variables('testvmscriptfileuri')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('bash ',  variables('testvmscriptfilename'), ' ', parameters('privatednszonename'), ' ', parameters('devvmname'), ' ', parameters('prodvmname'), ' ', variables('adlsserviceprimaryendpoint'), ' ', variables('blobserviceprimaryendpoint'))]\"}}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'tags': {'displayname': \"[variables('vmname')]\"}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('vmadminusername')]\", 'adminpassword': \"[parameters('vmadminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}, 'disksizegb': 128}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'install software for windows vm'}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.9', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted install-windowsfeature -name web-server'}}} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "truth": " {'apiversion': '2020-04-01-preview', 'type': 'microsoft.authorization/roleassignments', 'name': \"[variables('devcontributorroleassignmentguid')]\", 'dependson': [\"[variables('devvmid')]\"], 'properties': {'roledefinitionid': \"[variables('contributorroleid')]\", 'principalid': \"[reference(variables('devvmid'), '2020-06-01', 'full').identity.principalid]\", 'scope': '[resourcegroup().id]'}}{'apiversion': '2020-04-01-preview', 'type': 'microsoft.authorization/roleassignments', 'name': \"[variables('devstorageblobdatacontributorroleassignmentguid')]\", 'dependson': [\"[variables('devvmid')]\"], 'properties': {'roledefinitionid': \"[variables('storageblobdatacontributorroleid')]\", 'principalid': \"[reference(variables('devvmid'), '2020-06-01', 'full').identity.principalid]\", 'scope': '[resourcegroup().id]'}}{'apiversion': '2020-04-01-preview', 'type': 'microsoft.authorization/roleassignments', 'name': \"[variables('prodcontributorroleassignmentguid')]\", 'dependson': [\"[variables('prodvmid')]\"], 'properties': {'roledefinitionid': \"[variables('contributorroleid')]\", 'principalid': \"[reference(variables('prodvmid'), '2020-06-01', 'full').identity.principalid]\", 'scope': '[resourcegroup().id]'}}{'apiversion': '2020-04-01-preview', 'type': 'microsoft.authorization/roleassignments', 'name': \"[variables('prodstorageblobdatacontributorroleassignmentguid')]\", 'dependson': [\"[variables('prodvmid')]\"], 'properties': {'roledefinitionid': \"[variables('storageblobdatacontributorroleid')]\", 'principalid': \"[reference(variables('prodvmid'), '2020-06-01', 'full').identity.principalid]\", 'scope': '[resourcegroup().id]'}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('roledefinitionid')]\", 'principalid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).principalid]\", 'principaltype': 'serviceprincipal'}, 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreates and optionally secures a Key Vault with logging linked to a storage account.\n\n===\n\n", "truth": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END", "openai_output": "\n\n===\n\n {'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('identityname'))]\"], 'properties': {'sku': {'name': 'standard', 'family': 'a'}, 'tenantid': \"[reference(variables('identityid')).tenantid]\", 'accesspolicies': [{'tenantid': \"[reference(variables('identityid')).tenantid]\", 'objectid': \"[reference(variables('identityid')).principalid]\", 'permissions': {'secrets': ['get']}}], 'enablesoftdelete': true}} END"}
