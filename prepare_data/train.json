{"prompt": "\n\n###\n\nThis module creates a KeyVault resource with apiVersion 2019-09-01.\n\n===\n\n", "completion": " {'name': \"[parameters('vaultname')]\", 'type': 'microsoft.keyvault/vaults', 'apiversion': '2019-09-01', 'location': \"[parameters('location')]\", 'tags': \"[parameters('tags')]\", 'properties': {'tenantid': \"[parameters('tenantid')]\", 'sku': {'family': 'a', 'name': \"[parameters('skuname')]\"}, 'copy': [{'name': 'accesspolicies', 'count': \"[length(parameters('accesspolicies'))]\", 'input': {'tenantid': \"[parameters('accesspolicies')[copyindex('accesspolicies')].tenantid]\", 'objectid': \"[parameters('accesspolicies')[copyindex('accesspolicies')].objectid]\", 'permissions': \"[parameters('accesspolicies')[copyindex('accesspolicies')].permissions]\"}}], 'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'enablesoftdelete': \"[parameters('enablesoftdelete')]\", 'softdeleteretentionindays': \"[if(parameters('enablesoftdelete'), parameters('softdeleteretentionindays'), json('null'))]\", 'enablerbacauthorization': \"[parameters('enablerbacauthorization')]\", 'enablepurgeprotection': \"[if(parameters('enablepurgeprotection'), parameters('enablepurgeprotection'), json('null'))]\", 'networkacls': {'bypass': \"[parameters('networkrulebypassoptions')]\", 'defaultaction': \"[parameters('networkruleaction')]\", 'copy': [{'name': 'iprules', 'count': \"[length(parameters('iprules'))]\", 'input': {'value': \"[parameters('iprules')[copyindex('iprules')]]\"}}, {'name': 'virtualnetworkrules', 'count': \"[length(parameters('virtualnetworkrules'))]\", 'input': {'id': \"[parameters('virtualnetworkrules')[copyindex('virtualnetworkrules')]]\"}}]}}} END"}
{"prompt": "\n\n###\n\nThis module creates a key resource in an existing KeyVault with apiVersion 2019-09-01.\n\n===\n\n", "completion": " {'type': 'microsoft.keyvault/vaults/keys', 'apiversion': '2019-09-01', 'name': \"[concat(parameters('vaultname'), '/', parameters('keyname'))]\", 'tags': \"[parameters('tags')]\", 'properties': {'attributes': \"[parameters('attributes')]\", 'crv': \"[parameters('crv')]\", 'kty': \"[parameters('kty')]\", 'key_ops': \"[parameters('key_ops')]\", 'key_size': \"[parameters('key_size')]\"}} END"}
{"prompt": "\n\n###\n\nThis module allows you to create a user-assigned managed identity and a role assignment scoped to the resource group.\n\n===\n\n", "completion": " {'type': 'microsoft.managedidentity/userassignedidentities', 'apiversion': '2018-11-30', 'name': \"[parameters('managedidentityname')]\", 'location': \"[parameters('location')]\"} END"}
{"prompt": "\n\n###\n\nThis module creates a storageAccount resource with apiVersion 2021-01-01.\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-01-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\"}, 'kind': \"[parameters('kind')]\", 'properties': {'accesstier': \"[parameters('accesstier')]\", 'minimumtlsversion': \"[parameters('minimumtlsversion')]\", 'supportshttpstrafficonly': \"[parameters('supportshttpstrafficonly')]\", 'allowblobpublicaccess': \"[parameters('allowblobpublicaccess')]\", 'allowsharedkeyaccess': \"[parameters('allowsharedkeyaccess')]\", 'networkacls': {'bypass': \"[parameters('networkaclsbypass')]\", 'defaultaction': \"[parameters('networkaclsdefaultaction')]\"}}} END"}
{"prompt": "\n\n###\n\nThe Azure Database Migration Service is a fully managed service designed to enable seamless migrations from multiple database sources to Azure Data platforms with minimal downtime.\n\n===\n\n", "completion": " {'type': 'microsoft.datamigration/services', 'sku': {'name': 'standard_4vcores', 'tier': 'standard', 'size': '4 vcores'}, 'name': \"[variables('dmsservicename')]\", 'apiversion': '2018-07-15-preview', 'location': \"[parameters('location')]\", 'properties': {'virtualsubnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('advnet'), variables('defaultsubnetname'))]\"}, 'resources': [{'type': 'projects', 'name': 'sqltosqldbmigrationproject', 'apiversion': '2018-07-15-preview', 'location': \"[parameters('location')]\", 'properties': {'sourceplatform': 'sql', 'targetplatform': 'sqldb'}, 'dependson': [\"[resourceid('microsoft.datamigration/services', variables('dmsservicename'))]\"]}], 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', variables('advnet'), variables('defaultsubnetname'))]\"]} END"}
{"prompt": "\n\n###\n\nDeploy Azure Database Migration Service (DMS)\n\n===\n\n", "completion": " {'type': 'microsoft.datamigration/services', 'apiversion': '2018-07-15-preview', 'name': \"[parameters('servicename')]\", 'location': \"[parameters('location')]\", 'sku': {'tier': 'standard', 'size': '1 vcores', 'name': 'standard_1vcores'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnetname'))]\"], 'properties': {'virtualsubnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnetname'))]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a storage account, backup vault, backup policy, grants necessary permission and enables protection\n\n===\n\n", "completion": " {'type': 'microsoft.dataprotection/backupvaults', 'apiversion': '2021-01-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'properties': {'storagesettings': [{'datastoretype': 'vaultstore', 'type': \"[parameters('vaultstorageredundancy')]\"}]}}{'type': 'microsoft.dataprotection/backupvaults/backuppolicies', 'apiversion': '2021-01-01', 'name': \"[format('{0}/{1}', parameters('vaultname'), parameters('backuppolicyname'))]\", 'properties': {'policyrules': [{'lifecycles': [{'sourcedatastore': {'datastoretype': 'operationalstore', 'objecttype': 'datastoreinfobase'}, 'deleteafter': {'objecttype': 'absolutedeleteoption', 'duration': \"[variables('retentionduration')]\"}}], 'isdefault': true, 'name': 'default', 'objecttype': 'azureretentionrule', 'ruletype': 'retention'}], 'datasourcetypes': [\"[variables('datasourcetype')]\"], 'objecttype': 'backuppolicy'}, 'dependson': [\"[resourceid('microsoft.dataprotection/backupvaults', parameters('vaultname'))]\"]}{'type': 'microsoft.dataprotection/backupvaults/backupinstances', 'apiversion': '2021-01-01', 'name': \"[format('{0}/{1}', parameters('vaultname'), parameters('storageaccountname'))]\", 'properties': {'objecttype': 'backupinstance', 'datasourceinfo': {'objecttype': 'datasource', 'resourceid': \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\", 'resourcename': \"[parameters('storageaccountname')]\", 'resourcetype': \"[variables('resourcetype')]\", 'resourceuri': \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\", 'resourcelocation': \"[parameters('location')]\", 'datasourcetype': \"[variables('datasourcetype')]\"}, 'policyinfo': {'policyid': \"[resourceid('microsoft.dataprotection/backupvaults/backuppolicies', parameters('vaultname'), parameters('backuppolicyname'))]\", 'name': \"[parameters('backuppolicyname')]\"}}, 'dependson': [\"[resourceid('microsoft.dataprotection/backupvaults/backuppolicies', parameters('vaultname'), parameters('backuppolicyname'))]\", \"[resourceid('microsoft.dataprotection/backupvaults', parameters('vaultname'))]\", \"[extensionresourceid(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), 'microsoft.authorization/roleassignments', guid(resourceid('microsoft.dataprotection/backupvaults', parameters('vaultname')), variables('roledefinitionid'), resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Backup Vault without any advanced features or additional resources\n\n===\n\n", "completion": " {'type': 'microsoft.dataprotection/backupvaults', 'apiversion': '2021-01-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'properties': {'storagesettings': [{'datastoretype': 'vaultstore', 'type': \"[parameters('vaultstorageredundancy')]\"}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a disk, backup vault, backup policy, grants necessary permission and enables protection\n\n===\n\n", "completion": " {'type': 'microsoft.dataprotection/backupvaults', 'apiversion': '2021-01-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'properties': {'storagesettings': [{'datastoretype': 'vaultstore', 'type': \"[parameters('vaultstorageredundancy')]\"}]}}{'type': 'microsoft.dataprotection/backupvaults/backuppolicies', 'apiversion': '2021-01-01', 'name': \"[format('{0}/{1}', parameters('vaultname'), parameters('backuppolicyname'))]\", 'properties': {'policyrules': [{'backupparameters': {'backuptype': 'incremental', 'objecttype': 'azurebackupparams'}, 'trigger': {'schedule': {'repeatingtimeintervals': [\"[variables('repeatingtimeinterval')]\"], 'timezone': 'utc'}, 'taggingcriteria': [{'taginfo': {'tagname': 'default', 'id': 'default_'}, 'taggingpriority': 99, 'isdefault': true}], 'objecttype': 'schedulebasedtriggercontext'}, 'datastore': {'datastoretype': 'operationalstore', 'objecttype': 'datastoreinfobase'}, 'name': 'backuphourly', 'objecttype': 'azurebackuprule'}, {'lifecycles': [{'sourcedatastore': {'datastoretype': 'operationalstore', 'objecttype': 'datastoreinfobase'}, 'deleteafter': {'objecttype': 'absolutedeleteoption', 'duration': \"[variables('retentionduration')]\"}}], 'isdefault': true, 'name': 'default', 'objecttype': 'azureretentionrule', 'ruletype': 'retention'}], 'datasourcetypes': [\"[variables('datasourcetype')]\"], 'objecttype': 'backuppolicy'}, 'dependson': [\"[resourceid('microsoft.dataprotection/backupvaults', parameters('vaultname'))]\"]}{'type': 'microsoft.dataprotection/backupvaults/backupinstances', 'apiversion': '2021-01-01', 'name': \"[format('{0}/{1}', parameters('vaultname'), parameters('diskname'))]\", 'properties': {'objecttype': 'backupinstance', 'datasourceinfo': {'objecttype': 'datasource', 'resourceid': \"[resourceid('microsoft.compute/disks', parameters('diskname'))]\", 'resourcename': \"[parameters('diskname')]\", 'resourcetype': \"[variables('resourcetype')]\", 'resourceuri': \"[resourceid('microsoft.compute/disks', parameters('diskname'))]\", 'resourcelocation': \"[parameters('location')]\", 'datasourcetype': \"[variables('datasourcetype')]\"}, 'policyinfo': {'policyid': \"[resourceid('microsoft.dataprotection/backupvaults/backuppolicies', parameters('vaultname'), parameters('backuppolicyname'))]\", 'name': \"[parameters('backuppolicyname')]\", 'policyparameters': {'datastoreparameterslist': [{'objecttype': 'azureoperationalstoreparameters', 'datastoretype': 'operationalstore', 'resourcegroupid': '[resourcegroup().id]'}]}}}, 'dependson': [\"[resourceid('microsoft.dataprotection/backupvaults/backuppolicies', parameters('vaultname'), parameters('backuppolicyname'))]\", \"[resourceid('microsoft.dataprotection/backupvaults', parameters('vaultname'))]\", \"[resourceid('microsoft.compute/disks', parameters('diskname'))]\", \"[resourceid('microsoft.authorization/roleassignments', variables('rolenameguidfordisk'))]\", \"[resourceid('microsoft.authorization/roleassignments', variables('rolenameguidforsnapshotrg'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a Data Share account\n\n===\n\n", "completion": " {'type': 'microsoft.datashare/accounts', 'apiversion': '2021-08-01', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}} END"}
{"prompt": "\n\n###\n\nCreate a Data Share\n\n===\n\n", "completion": " {'type': 'microsoft.datashare/accounts', 'apiversion': '2021-08-01', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}}{'type': 'microsoft.datashare/accounts/shares', 'apiversion': '2021-08-01', 'name': \"[format('{0}/{1}', parameters('accountname'), parameters('sharename'))]\", 'properties': {'sharekind': 'copybased'}, 'dependson': [\"[resourceid('microsoft.datashare/accounts', parameters('accountname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a Data Share from a storage account\n\n===\n\n", "completion": " {'type': 'microsoft.datashare/accounts', 'apiversion': '2021-08-01', 'name': \"[variables('datashareaccountname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'properties': {}}{'type': 'microsoft.datashare/accounts/shares', 'apiversion': '2021-08-01', 'name': \"[format('{0}/{1}', variables('datashareaccountname'), variables('datasharename'))]\", 'properties': {'sharekind': 'copybased'}, 'dependson': [\"[resourceid('microsoft.datashare/accounts', variables('datashareaccountname'))]\"]}{'type': 'microsoft.datashare/accounts/shares/datasets', 'apiversion': '2021-08-01', 'name': \"[format('{0}/{1}/{2}', variables('datashareaccountname'), variables('datasharename'), variables('containername'))]\", 'kind': 'container', 'properties': {'subscriptionid': '[subscription().subscriptionid]', 'resourcegroup': '[resourcegroup().name]', 'storageaccountname': \"[variables('storageaccountname')]\", 'containername': \"[variables('containername')]\"}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/blobservices/containers', split(format('{0}/default/{1}', variables('storageaccountname'), variables('containername')), '/')[0], split(format('{0}/default/{1}', variables('storageaccountname'), variables('containername')), '/')[1], split(format('{0}/default/{1}', variables('storageaccountname'), variables('containername')), '/')[2])]\", \"[resourceid('microsoft.datashare/accounts/shares', variables('datashareaccountname'), variables('datasharename'))]\", \"[resourceid('microsoft.datashare/accounts', variables('datashareaccountname'))]\", \"[resourceid('microsoft.datashare/accounts/shares/invitations', variables('datashareaccountname'), variables('datasharename'), variables('invitename'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.datashare/accounts/shares/synchronizationsettings', variables('datashareaccountname'), variables('datasharename'), format('{0}_synchronizationsetting', variables('datasharename')))]\"]}{'type': 'microsoft.datashare/accounts/shares/invitations', 'apiversion': '2021-08-01', 'name': \"[format('{0}/{1}/{2}', variables('datashareaccountname'), variables('datasharename'), variables('invitename'))]\", 'properties': {'targetemail': \"[parameters('invitationemail')]\"}, 'dependson': [\"[resourceid('microsoft.datashare/accounts/shares', variables('datashareaccountname'), variables('datasharename'))]\", \"[resourceid('microsoft.datashare/accounts', variables('datashareaccountname'))]\"]}{'type': 'microsoft.datashare/accounts/shares/synchronizationsettings', 'apiversion': '2021-08-01', 'name': \"[format('{0}/{1}/{2}', variables('datashareaccountname'), variables('datasharename'), format('{0}_synchronizationsetting', variables('datasharename')))]\", 'kind': 'schedulebased', 'properties': {'recurrenceinterval': \"[parameters('syncinterval')]\", 'synchronizationtime': \"[parameters('synctime')]\"}, 'dependson': [\"[resourceid('microsoft.datashare/accounts/shares', variables('datashareaccountname'), variables('datasharename'))]\", \"[resourceid('microsoft.datashare/accounts', variables('datashareaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nDeploy an Azure Databricks workspace and configure CMK.\n\n===\n\n", "completion": " {'type': 'microsoft.databricks/workspaces', 'apiversion': '2018-04-01', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('pricingtier')]\"}, 'properties': {'managedresourcegroupid': \"[subscriptionresourceid('microsoft.resources/resourcegroups', variables('managedresourcegroupname'))]\", 'parameters': {'prepareencryption': {'value': true}}}} END"}
{"prompt": "\n\n###\n\nDeploy a NAT Gateway, Network Security Group, a Virtual Network and an Azure Databricks Workspace with the Virtual Network.\n\n===\n\n", "completion": " {'apiversion': '2018-04-01', 'type': 'microsoft.databricks/workspaces', 'location': \"[parameters('location')]\", 'name': \"[parameters('workspacename')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', parameters('nsgname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('vnetname'))]\"], 'sku': {'name': \"[parameters('pricingtier')]\"}, 'comments': 'the managed resource group specified will be locked after deployment.', 'properties': {'managedresourcegroupid': \"[variables('managedresourcegroupid')]\", 'parameters': {'customvirtualnetworkid': {'value': \"[variables('vnetid')]\"}, 'custompublicsubnetname': {'value': \"[parameters('publicsubnetname')]\"}, 'customprivatesubnetname': {'value': \"[parameters('privatesubnetname')]\"}, 'enablenopublicip': {'value': \"[parameters('disablepublicip')]\"}}}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure Databricks workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.databricks/workspaces', 'apiversion': '2018-04-01', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('pricingtier')]\"}, 'properties': {'managedresourcegroupid': \"[subscriptionresourceid('microsoft.resources/resourcegroups', variables('managedresourcegroupname'))]\", 'parameters': {'enablenopublicip': {'value': \"[parameters('disablepublicip')]\"}}}} END"}
{"prompt": "\n\n###\n\nDeploy a Network Security Group, a Virtual Network and an Azure Databricks Workspace with the Virtual Network.\n\n===\n\n", "completion": " {'type': 'microsoft.databricks/workspaces', 'apiversion': '2018-04-01', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('pricingtier')]\"}, 'properties': {'managedresourcegroupid': \"[subscriptionresourceid('microsoft.resources/resourcegroups', variables('managedresourcegroupname'))]\", 'parameters': {'customvirtualnetworkid': {'value': \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"}, 'custompublicsubnetname': {'value': \"[parameters('publicsubnetname')]\"}, 'customprivatesubnetname': {'value': \"[parameters('privatesubnetname')]\"}, 'enablenopublicip': {'value': \"[parameters('disablepublicip')]\"}}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]} END"}
{"prompt": "\n\n###\n\nDeploy an Azure Databricks workspace with a custom virtual network address range.\n\n===\n\n", "completion": " {'type': 'microsoft.databricks/workspaces', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'apiversion': '2018-04-01', 'sku': {'name': \"[parameters('pricingtier')]\"}, 'properties': {'managedresourcegroupid': \"[subscriptionresourceid('microsoft.resources/resourcegroups', variables('managedresourcegroupname'))]\", 'parameters': {'vnetaddressprefix': {'value': \"[parameters('vnetaddressprefix')]\"}, 'enablenopublicip': {'value': \"[parameters('disablepublicip')]\"}}}} END"}
{"prompt": "\n\n###\n\nDeploy a a Load Balancer, Network Security Group, a Virtual Network and an Azure Databricks Workspace with the Virtual Network.\n\n===\n\n", "completion": " {'apiversion': '2018-04-01', 'type': 'microsoft.databricks/workspaces', 'location': \"[parameters('location')]\", 'name': \"[parameters('workspacename')]\", 'dependson': [\"[resourceid('microsoft.network/loadbalancers', parameters('loadbalancername'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', parameters('nsgname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('vnetname'))]\"], 'sku': {'name': \"[parameters('pricingtier')]\"}, 'comments': 'the managed resource group specified will be locked after deployment.', 'properties': {'managedresourcegroupid': \"[variables('managedresourcegroupid')]\", 'parameters': {'customvirtualnetworkid': {'value': \"[variables('vnetid')]\"}, 'custompublicsubnetname': {'value': \"[parameters('publicsubnetname')]\"}, 'customprivatesubnetname': {'value': \"[parameters('privatesubnetname')]\"}, 'enablenopublicip': {'value': \"[parameters('disablepublicip')]\"}, 'loadbalancerid': {'value': \"[variables('loadbalancerid')]\"}, 'loadbalancerbackendpoolname': {'value': \"[parameters('loadbalancerbackendpoolname')]\"}}}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure Databricks workspace with a custom virtual network.\n\n===\n\n", "completion": " {'comments': 'the resource group specified will be locked after deployment.', 'type': 'microsoft.databricks/workspaces', 'apiversion': '2018-04-01', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('pricingtier')]\"}, 'properties': {'managedresourcegroupid': \"[variables('managedresourcegroupid')]\", 'parameters': {'customvirtualnetworkid': {'value': \"[parameters('customvirtualnetworkid')]\"}, 'custompublicsubnetname': {'value': \"[parameters('custompublicsubnetname')]\"}, 'customprivatesubnetname': {'value': \"[parameters('customprivatesubnetname')]\"}, 'enablenopublicip': {'value': \"[parameters('disablepublicip')]\"}}}} END"}
{"prompt": "\n\n###\n\nDeploy a Virtual Network for Azure Databricks VNet injection.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template creates a lab in Azure DevTest Labs with a claimed Windows Server 2019 Datacenter VM\n\n===\n\n", "completion": " {'type': 'microsoft.devtestlab/labs', 'apiversion': '2018-10-15-preview', 'name': \"[parameters('labname')]\", 'location': \"[parameters('location')]\", 'resources': [{'type': 'virtualnetworks', 'apiversion': '2018-10-15-preview', 'name': \"[variables('labvirtualnetworkname')]\", 'dependson': [\"[resourceid('microsoft.devtestlab/labs', parameters('labname'))]\"]}, {'type': 'virtualmachines', 'apiversion': '2018-10-15-preview', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.devtestlab/labs', parameters('labname'))]\", \"[resourceid('microsoft.devtestlab/labs/virtualnetworks', parameters('labname'), variables('labvirtualnetworkname'))]\"], 'properties': {'username': \"[parameters('username')]\", 'password': \"[parameters('password')]\", 'labvirtualnetworkid': \"[variables('labvirtualnetworkid')]\", 'labsubnetname': \"[variables('labsubnetname')]\", 'size': \"[parameters('vmsize')]\", 'allowclaim': 'false', 'galleryimagereference': {'offer': 'windowsserver', 'publisher': 'microsoftwindowsserver', 'sku': '2019-datacenter', 'ostype': 'windows', 'version': 'latest'}}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a lab in Azure DevTest Labs with a Windows Server 2019 Datacenter VM\n\n===\n\n", "completion": " {'type': 'microsoft.devtestlab/labs', 'apiversion': '2018-10-15-preview', 'name': \"[parameters('labname')]\", 'location': \"[parameters('location')]\", 'resources': [{'type': 'virtualnetworks', 'apiversion': '2018-10-15-preview', 'name': \"[variables('labvirtualnetworkname')]\", 'dependson': [\"[resourceid('microsoft.devtestlab/labs', parameters('labname'))]\"]}, {'type': 'virtualmachines', 'apiversion': '2018-10-15-preview', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.devtestlab/labs', parameters('labname'))]\", \"[resourceid('microsoft.devtestlab/labs/virtualnetworks', parameters('labname'), variables('labvirtualnetworkname'))]\"], 'properties': {'username': \"[parameters('username')]\", 'password': \"[parameters('password')]\", 'labvirtualnetworkid': \"[variables('labvirtualnetworkid')]\", 'labsubnetname': \"[variables('labsubnetname')]\", 'size': \"[parameters('vmsize')]\", 'allowclaim': 'true', 'galleryimagereference': {'offer': 'windowsserver', 'publisher': 'microsoftwindowsserver', 'sku': '2019-datacenter', 'ostype': 'windows', 'version': 'latest'}}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a new DevTest Lab instance\n\n===\n\n", "completion": " {'apiversion': '2018-10-15-preview', 'type': 'microsoft.devtestlab/labs', 'name': \"[parameters('newlabname')]\", 'location': \"[parameters('location')]\"} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys 5 Node Service Fabric Cluster running Ubuntu \n\n===\n\n", "completion": " {'apiversion': '2017-07-01-preview', 'type': 'microsoft.servicefabric/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('supportlogstorageaccountname'))]\"], 'properties': {'addonfeatures': ['dnsservice', 'repairmanager'], 'certificate': {'thumbprint': \"[parameters('certificatethumbprint')]\", 'x509storename': \"[parameters('certificatestorevalue')]\"}, 'clusterstate': 'default', 'diagnosticsstorageaccountconfig': {'blobendpoint': \"[reference(variables('supportlogstorageaccountname'), '2020-08-01-preview').primaryendpoints['blob']]\", 'protectedaccountkeyname': 'storageaccountkey1', 'queueendpoint': \"[reference(variables('supportlogstorageaccountname'), '2020-08-01-preview').primaryendpoints['queue']]\", 'storageaccountname': \"[variables('supportlogstorageaccountname')]\", 'tableendpoint': \"[reference(variables('supportlogstorageaccountname'), '2020-08-01-preview').primaryendpoints['table']]\"}, 'fabricsettings': [{'parameters': [{'name': 'clusterprotectionlevel', 'value': \"[parameters('clusterprotectionlevel')]\"}], 'name': 'security'}], 'managementendpoint': \"[concat('https://',reference(resourceid('microsoft.network/publicipaddresses',concat(variables('lbipname'),'-',variables('vmnodetype0name')))).dnssettings.fqdn,':',variables('nt0fabrichttpgatewayport'))]\", 'nodetypes': [{'name': \"[variables('vmnodetype0name')]\", 'applicationports': {'endport': \"[variables('nt0applicationendport')]\", 'startport': \"[variables('nt0applicationstartport')]\"}, 'clientconnectionendpointport': \"[variables('nt0fabrictcpgatewayport')]\", 'durabilitylevel': 'bronze', 'ephemeralports': {'endport': \"[variables('nt0ephemeralendport')]\", 'startport': \"[variables('nt0ephemeralstartport')]\"}, 'httpgatewayendpointport': \"[variables('nt0fabrichttpgatewayport')]\", 'isprimary': true, 'vminstancecount': \"[parameters('nt0instancecount')]\"}], 'provisioningstate': 'default', 'reliabilitylevel': 'silver', 'upgrademode': 'automatic', 'vmimage': 'linux'}, 'tags': {'resourcetype': 'service fabric', 'clustername': \"[parameters('clustername')]\"}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys 5 Node Service Fabric Cluster\n\n===\n\n", "completion": " {'apiversion': '2019-03-01', 'type': 'microsoft.servicefabric/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('supportlogstorageaccountname')]\"], 'tags': {'resourcetype': 'service fabric', 'clustername': \"[parameters('clustername')]\"}, 'properties': {'certificate': {'thumbprint': \"[parameters('certificatethumbprint')]\", 'x509storename': \"[parameters('certificatestorevalue')]\"}, 'clusterstate': 'default', 'diagnosticsstorageaccountconfig': {'blobendpoint': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('supportlogstorageaccountname')), '2021-01-01').primaryendpoints.blob]\", 'protectedaccountkeyname': 'storageaccountkey1', 'queueendpoint': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('supportlogstorageaccountname')), '2021-01-01').primaryendpoints.queue]\", 'storageaccountname': \"[variables('supportlogstorageaccountname')]\", 'tableendpoint': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('supportlogstorageaccountname')), '2021-01-01').primaryendpoints.table]\"}, 'fabricsettings': [{'parameters': [{'name': 'clusterprotectionlevel', 'value': \"[parameters('clusterprotectionlevel')]\"}], 'name': 'security'}], 'managementendpoint': \"[concat('https://',reference(variables('lbipname')).dnssettings.fqdn,':',variables('nt0fabrichttpgatewayport'))]\", 'nodetypes': [{'name': \"[variables('vmnodetype0name')]\", 'applicationports': {'endport': \"[variables('nt0applicationendport')]\", 'startport': \"[variables('nt0applicationstartport')]\"}, 'clientconnectionendpointport': \"[variables('nt0fabrictcpgatewayport')]\", 'durabilitylevel': 'silver', 'ephemeralports': {'endport': \"[variables('nt0ephemeralendport')]\", 'startport': \"[variables('nt0ephemeralstartport')]\"}, 'httpgatewayendpointport': \"[variables('nt0fabrichttpgatewayport')]\", 'isprimary': true, 'vminstancecount': \"[parameters('nt0instancecount')]\"}], 'provisioningstate': 'default', 'reliabilitylevel': 'silver', 'upgrademode': 'automatic', 'vmimage': 'windows'}} END"}
{"prompt": "\n\n###\n\nThis template deploys 3 Nodetype Service Fabric Cluster. it also allows you to allows you to control the inbound and outbound network traffic using Network Security Groups\n\n===\n\n", "completion": " {'apiversion': '2018-02-01', 'type': 'microsoft.servicefabric/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('supportlogstorageaccountname'))]\"], 'properties': {'certificate': {'thumbprint': \"[parameters('certificatethumbprint')]\", 'x509storename': \"[parameters('certificatestorevalue')]\"}, 'clusterstate': 'default', 'diagnosticsstorageaccountconfig': {'blobendpoint': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('supportlogstorageaccountname')), '2021-04-01').primaryendpoints.blob]\", 'protectedaccountkeyname': 'storageaccountkey1', 'queueendpoint': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('supportlogstorageaccountname')), '2021-04-01').primaryendpoints.queue]\", 'storageaccountname': \"[variables('supportlogstorageaccountname')]\", 'tableendpoint': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('supportlogstorageaccountname')), '2021-04-01').primaryendpoints.table]\"}, 'fabricsettings': [{'parameters': [{'name': 'clusterprotectionlevel', 'value': \"[parameters('clusterprotectionlevel')]\"}], 'name': 'security'}], 'managementendpoint': \"[concat('https://', reference(variables('lbipnameurl')).dnssettings.fqdn,':',variables('nodesettings')[0].fabrichttpgatewayport)]\", 'copy': [{'name': 'nodetypes', 'count': \"[length(variables('nodesettings'))]\", 'input': {'name': \"[variables('nodesettings')[copyindex('nodetypes')].vmnodetypename]\", 'applicationports': {'endport': \"[variables('nodesettings')[copyindex('nodetypes')].applicationendport]\", 'startport': \"[variables('nodesettings')[copyindex('nodetypes')].applicationstartport]\"}, 'clientconnectionendpointport': \"[variables('nodesettings')[copyindex('nodetypes')].fabrictcpgatewayport]\", 'durabilitylevel': 'bronze', 'ephemeralports': {'endport': \"[variables('nodesettings')[copyindex('nodetypes')].ephemeralendport]\", 'startport': \"[variables('nodesettings')[copyindex('nodetypes')].ephemeralstartport]\"}, 'httpgatewayendpointport': \"[variables('nodesettings')[copyindex('nodetypes')].fabrichttpgatewayport]\", 'isprimary': true, 'vminstancecount': \"[variables('nodesettings')[0].instancecount]\"}}], 'provisioningstate': 'default', 'reliabilitylevel': 'silver', 'upgrademode': 'automatic', 'vmimage': 'windows'}, 'tags': {'resourcetype': 'service fabric', 'clustername': \"[parameters('clustername')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a new Azure App Configuration store with one Key Vault reference.\n\n===\n\n", "completion": " {'type': 'microsoft.appconfiguration/configurationstores', 'apiversion': '2020-07-01-preview', 'name': \"[parameters('configstorename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'resources': [{'type': 'keyvalues', 'apiversion': '2020-07-01-preview', 'name': \"[parameters('keyvaluename')]\", 'dependson': [\"[parameters('configstorename')]\"], 'properties': {'value': \"[string(variables('keyvaultref'))]\", 'contenttype': 'application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8'}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a new Azure App Configuration store with two key-values.\n\n===\n\n", "completion": " {'type': 'microsoft.appconfiguration/configurationstores', 'apiversion': '2020-07-01-preview', 'name': \"[parameters('configstorename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}}{'type': 'microsoft.appconfiguration/configurationstores/keyvalues', 'apiversion': '2020-07-01-preview', 'name': \"[concat(parameters('configstorename'), '/', parameters('keyvaluenames')[copyindex()])]\", 'copy': {'name': 'keyvaluecopy', 'count': \"[length(parameters('keyvaluenames'))]\"}, 'dependson': [\"[parameters('configstorename')]\"], 'properties': {'value': \"[parameters('keyvaluevalues')[copyindex()]]\", 'contenttype': \"[parameters('contenttype')]\", 'tags': \"[parameters('tags')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a new Azure App Configuration store with one feature flag.\n\n===\n\n", "completion": " {'type': 'microsoft.appconfiguration/configurationstores', 'apiversion': '2020-07-01-preview', 'name': \"[parameters('configstorename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'resources': [{'type': 'keyvalues', 'apiversion': '2020-07-01-preview', 'name': \"[concat('.appconfig.featureflag~2f', parameters('featureflagkey'), '$', parameters('featureflaglabel'))]\", 'dependson': [\"[parameters('configstorename')]\"], 'properties': {'value': \"[string(variables('featureflagvalue'))]\", 'contenttype': 'application/vnd.microsoft.appconfig.ff+json;charset=utf-8'}}]} END"}
{"prompt": "\n\n###\n\nThis template references existing key-value configurations from an existing config store and uses retrieved values to set properties of the resources the template creates.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template creates a new Azure App Configuration store with three key-values controlled by a copy function.\n\n===\n\n", "completion": " {'type': 'microsoft.appconfiguration/configurationstores', 'apiversion': '2020-07-01-preview', 'name': \"[parameters('configstorename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}}{'type': 'microsoft.appconfiguration/configurationstores/keyvalues', 'apiversion': '2020-07-01-preview', 'name': \"[concat(parameters('configstorename'), '/', if(contains(parameters('keydata')[copyindex()], 'label'), format('{0}${1}', parameters('keydata')[copyindex()].key, parameters('keydata')[copyindex()].label), parameters('keydata')[copyindex()].key)) ]\", 'copy': {'name': 'keyvaluecopy', 'count': \"[length(parameters('keydata'))]\"}, 'dependson': [\"[parameters('configstorename')]\"], 'properties': {'value': \"[parameters('keydata')[copyindex()].value]\", 'contenttype': \"[if(contains(parameters('keydata')[copyindex()], 'contenttype'), parameters('keydata')[copyindex()].contenttype, json('null'))]\", 'tags': \"[if(contains(parameters('keydata')[copyindex()], 'tag'), parameters('keydata')[copyindex()].tag, json('null'))]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure App Configuration store.\n\n===\n\n", "completion": " {'type': 'microsoft.appconfiguration/configurationstores', 'apiversion': '2019-10-01', 'name': \"[parameters('configstorename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\"}} END"}
{"prompt": "\n\n###\n\nCreate a Data Factory account, Provision SSIS runtime in Azure.\n\n===\n\n", "completion": " {'name': \"[parameters('datafactoryname')]\", 'apiversion': '2018-06-01', 'type': 'microsoft.datafactory/factories', 'location': \"[parameters('location')]\", 'properties': {}, 'resources': [{'name': \"[concat(parameters('datafactoryname'), '/spazuressisir')]\", 'type': 'microsoft.datafactory/factories/integrationruntimes', 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'managed', 'typeproperties': {'computeproperties': {'location': \"[parameters('location')]\", 'nodesize': \"[parameters('nodesize')]\", 'numberofnodes': \"[parameters('nodenumber')]\", 'maxparallelexecutionspernode': \"[parameters('maximumparallelexecutionspernode')]\", 'vnetproperties': {'vnetid': \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", 'subnet': \"[parameters('subnetname')]\"}}, 'ssisproperties': {'cataloginfo': {'catalogserverendpoint': \"[parameters('azuresqlservername')]\", 'catalogadminusername': \"[parameters('databaseadminusername')]\", 'catalogadminpassword': {'type': 'securestring', 'value': \"[parameters('databaseadminpassword')]\"}, 'catalogpricingtier': \"[parameters('catalogpricingtier')]\"}}}}}]} END"}
{"prompt": "\n\n###\n\nCreate a Data Factory account, Blob source, SQL sink and Copy Activity Pipeline\n\n===\n\n", "completion": " {'name': \"[parameters('datafactoryname')]\", 'apiversion': '2017-09-01-preview', 'type': 'microsoft.datafactory/factories', 'location': \"[parameters('datafactorylocation')]\", 'properties': {}, 'resources': [{'type': 'linkedservices', 'name': \"[variables('azurestoragelinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2017-09-01-preview', 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': {'value': \"[parameters('azurestorageconnectionstring')]\", 'type': 'securestring'}}}}, {'type': 'linkedservices', 'name': \"[variables('ondemandhdinsightlinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2017-09-01-preview', 'properties': {'type': 'hdinsightondemand', 'typeproperties': {'clustertype': 'spark', 'clustersize': 4, 'timetolive': '00:05:00', 'clusterresourcegroup': '[resourcegroup().name]', 'tenant': '[subscription().tenantid]', 'sparkversion': '', 'serviceprincipalid': \"[parameters('serviceprincipalid')]\", 'serviceprincipalkey': {'type': 'securestring', 'value': \"[parameters('serviceprincipalkey')]\"}, 'linkedservicename': {'referencename': \"[variables('azurestoragelinkedservicename')]\", 'type': 'linkedservicereference'}}}}, {'type': 'pipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\", \"[variables('ondemandhdinsightlinkedservicename')]\"], 'apiversion': '2017-09-01-preview', 'properties': {'activities': [{'name': 'mysparkactivity', 'type': 'hdinsightspark', 'dependson': [], 'policy': {'timeout': '7.00:00:00', 'retry': 0, 'retryintervalinseconds': 30}, 'typeproperties': {'rootpath': \"[variables('scriptrootpath')]\", 'entryfilepath': \"[variables('entryfilepath')]\", 'arguments': [], 'sparkjoblinkedservice': {'referencename': \"[variables('azurestoragelinkedservicename')]\", 'type': 'linkedservicereference'}}, 'linkedservicename': {'referencename': \"[variables('ondemandhdinsightlinkedservicename')]\", 'type': 'linkedservicereference'}}]}}]} END"}
{"prompt": "\n\n###\n\nCreate a Data Factory account, Blob source, SQL sink and Copy Activity Pipeline\n\n===\n\n", "completion": " {'name': \"[variables('datafactoryname')]\", 'apiversion': '2015-10-01', 'type': 'microsoft.datafactory/datafactories', 'location': 'west us', 'resources': [{'type': 'linkedservices', 'name': \"[variables('azurestoragelinkedservicename')]\", 'dependson': [\"[variables('datafactoryname')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': \"[concat('defaultendpointsprotocol=https;accountname=',parameters('storageaccountname'),';accountkey=',parameters('storageaccountkey'))]\"}}}, {'type': 'linkedservices', 'name': \"[variables('azuresqllinkedservicename')]\", 'dependson': [\"[variables('datafactoryname')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azuresqldatabase', 'description': 'azure sql linked service', 'typeproperties': {'connectionstring': \"[concat('server=tcp:',parameters('sqlservername'),'.database.windows.net,1433;database=', parameters('databasename'), ';user id=',parameters('sqlserverusername'),';password=',parameters('sqlserverpassword'),';trusted_connection=false;encrypt=true;connection timeout=30')]\"}}}, {'type': 'datasets', 'name': \"[variables('blobinputdatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azureblob', 'linkedservicename': \"[variables('azurestoragelinkedservicename')]\", 'structure': [{'name': 'column0', 'type': 'string'}, {'name': 'column1', 'type': 'string'}], 'typeproperties': {'folderpath': \"[concat(parameters('sourceblobcontainer'), '/')]\", 'filename': \"[parameters('sourceblobname')]\", 'format': {'type': 'textformat', 'columndelimiter': ','}}, 'availability': {'frequency': 'day', 'interval': 1}, 'external': true}}, {'type': 'datasets', 'name': \"[variables('sqloutputdatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azuresqllinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azuresqltable', 'linkedservicename': \"[variables('azuresqllinkedservicename')]\", 'structure': [{'name': 'firstname', 'type': 'string'}, {'name': 'lastname', 'type': 'string'}], 'typeproperties': {'tablename': \"[parameters('targetsqltable')]\"}, 'availability': {'frequency': 'day', 'interval': 1}}}, {'type': 'datapipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\", \"[variables('azuresqllinkedservicename')]\", \"[variables('blobinputdatasetname')]\", \"[variables('sqloutputdatasetname')]\"], 'apiversion': '2015-10-01', 'properties': {'activities': [{'name': 'copyfromazureblobtoazuresql', 'description': 'copy data frm azure blob to azure sql', 'type': 'copy', 'inputs': [{'name': \"[variables('blobinputdatasetname')]\"}], 'outputs': [{'name': \"[variables('sqloutputdatasetname')]\"}], 'typeproperties': {'source': {'type': 'blobsource'}, 'sink': {'type': 'sqlsink', 'sqlwritercleanupscript': \"$$text.format('delete from {0}', 'emp')\"}, 'translator': {'type': 'tabulartranslator', 'columnmappings': 'column0:firstname,column1:lastname'}}, 'policy': {'concurrency': 1, 'executionpriorityorder': 'newestfirst', 'retry': 3, 'timeout': '01:00:00'}}], 'start': '2016-10-03t00:00:00z', 'end': '2016-10-04t00:00:00z'}}]} END"}
{"prompt": "\n\n###\n\nThis sample demonstrates copying a number of tables from Azure SQL Database to Azure SQL Data Warehouse. You can apply the same pattern in other copy scenarios as well.\n\n===\n\n", "completion": " {'name': \"[parameters('datafactoryname')]\", 'apiversion': '2018-06-01', 'type': 'microsoft.datafactory/factories', 'location': \"[parameters('location')]\", 'properties': {}, 'resources': [{'type': 'linkedservices', 'name': \"[variables('azurestoragelinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': {'value': \"[concat('defaultendpointsprotocol=https;accountname=', parameters('azurestorageaccountname'),';accountkey=',listkeys(parameters('azurestorageaccountresourceid'), '2021-01-01').keys[0].value)]\", 'type': 'securestring'}}}}, {'type': 'linkedservices', 'name': \"[variables('azuresqldatabaselinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azuresqldatabase', 'description': 'azure sql database linked service', 'typeproperties': {'connectionstring': {'value': \"[variables('azuresqldatabaseconnectionstring')]\", 'type': 'securestring'}}}}, {'type': 'linkedservices', 'name': \"[variables('azuresqldatawarehouselinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azuresqldw', 'description': 'azure sql data warehouse linked service', 'typeproperties': {'connectionstring': {'value': \"[variables('azuresqlldatawarehouseconnectionstring')]\", 'type': 'securestring'}}}}, {'name': \"[variables('inputdatasetname')]\", 'type': 'datasets', 'apiversion': '2018-06-01', 'properties': {'linkedservicename': {'referencename': \"[variables('azuresqldatabaselinkedservicename')]\", 'type': 'linkedservicereference'}, 'type': 'azuresqltable', 'typeproperties': {'tablename': \"'dummy'\"}}, 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azuresqldatabaselinkedservicename')]\"]}, {'name': \"[variables('outputdatasetname')]\", 'type': 'datasets', 'apiversion': '2018-06-01', 'properties': {'linkedservicename': {'referencename': \"[variables('azuresqldatawarehouselinkedservicename')]\", 'type': 'linkedservicereference'}, 'parameters': {'dwtablename': {'type': 'string'}}, 'type': 'azuresqldwtable', 'typeproperties': {'tablename': {'value': '@{dataset().dwtablename}', 'type': 'expression'}}}, 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azuresqldatawarehouselinkedservicename')]\"]}, {'type': 'pipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('inputdatasetname')]\", \"[variables('outputdatasetname')]\"], 'apiversion': '2018-06-01', 'properties': {'activities': [{'name': 'iteratesqltables', 'type': 'foreach', 'typeproperties': {'items': {'value': '@pipeline().parameters.tablelist', 'type': 'expression'}, 'activities': [{'name': 'copydata', 'type': 'copy', 'typeproperties': {'source': {'type': 'sqlsource', 'sqlreaderquery': 'select * from [@{item().table_schema}].[@{item().table_name}]'}, 'sink': {'type': 'sqldwsink', 'allowpolybase': true, 'writebatchsize': 10000, 'precopyscript': 'truncate table [@{item().table_schema}].[@{item().table_name}]', 'polybasesettings': {'rejectvalue': 0, 'rejecttype': 'value', 'usetypedefault': false}}, 'enablestaging': true, 'stagingsettings': {'linkedservicename': {'referencename': \"[variables('azurestoragelinkedservicename')]\", 'type': 'linkedservicereference'}}, 'clouddatamovementunits': 0}, 'inputs': [{'referencename': \"[variables('inputdatasetname')]\", 'type': 'datasetreference', 'parameters': {}}], 'outputs': [{'referencename': \"[variables('outputdatasetname')]\", 'type': 'datasetreference', 'parameters': {'dwtablename': \"[concat(variables('leftbracket'), '@{item().table_schema}].[@{item().table_name}]')]\"}}]}]}}], 'parameters': {'tablelist': {'type': 'array'}}}}, {'name': \"[variables('pipelinename2')]\", 'type': 'pipelines', 'apiversion': '2018-06-01', 'properties': {'activities': [{'name': 'lookuptablelist', 'description': ' retrieve the table list from azure sql database', 'type': 'lookup', 'typeproperties': {'source': {'type': 'sqlsource', 'sqlreaderquery': \"select table_schema, table_name from information_schema.tables where table_type = 'base table' and table_schema = 'saleslt' and table_name <> 'productmodel'\"}, 'dataset': {'referencename': \"[variables('inputdatasetname')]\", 'type': 'datasetreference', 'parameters': {}}, 'firstrowonly': false}}, {'name': 'triggercopy', 'type': 'executepipeline', 'dependson': [{'activity': 'lookuptablelist', 'dependencyconditions': ['succeeded']}], 'typeproperties': {'pipeline': {'referencename': \"[variables('pipelinename')]\", 'type': 'pipelinereference'}, 'parameters': {'tablelist': \"@activity('lookuptablelist').output.value\"}}}]}, 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('inputdatasetname')]\", \"[variables('outputdatasetname')]\", \"[variables('pipelinename')]\"]}]} END"}
{"prompt": "\n\n###\n\nCreate a Data Factory account, Blob source, SQL sink and Copy Activity Pipeline\n\n===\n\n", "completion": " {'type': 'microsoft.datafactory/factories', 'apiversion': '2018-06-01', 'name': \"[parameters('datafactoryname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}}{'type': 'microsoft.datafactory/factories/linkedservices', 'apiversion': '2018-06-01', 'name': \"[format('{0}/{1}', parameters('datafactoryname'), variables('datafactorylinkedservicename'))]\", 'properties': {'type': 'azureblobstorage', 'typeproperties': {'connectionstring': \"[format('defaultendpointsprotocol=https;accountname={0};accountkey={1}', parameters('storageaccountname'), listkeys(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2021-04-01').keys[0].value)]\"}}, 'dependson': [\"[resourceid('microsoft.datafactory/factories', parameters('datafactoryname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]}{'type': 'microsoft.datafactory/factories/datasets', 'apiversion': '2018-06-01', 'name': \"[format('{0}/{1}', parameters('datafactoryname'), variables('datafactorydatasetinname'))]\", 'properties': {'linkedservicename': {'referencename': \"[variables('datafactorylinkedservicename')]\", 'type': 'linkedservicereference'}, 'type': 'binary', 'typeproperties': {'location': {'type': 'azureblobstoragelocation', 'container': \"[format('{0}/default/{1}', parameters('storageaccountname'), parameters('blobcontainername'))]\", 'folderpath': 'input', 'filename': 'emp.txt'}}}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/blobservices/containers', split(format('{0}/default/{1}', parameters('storageaccountname'), parameters('blobcontainername')), '/')[0], split(format('{0}/default/{1}', parameters('storageaccountname'), parameters('blobcontainername')), '/')[1], split(format('{0}/default/{1}', parameters('storageaccountname'), parameters('blobcontainername')), '/')[2])]\", \"[resourceid('microsoft.datafactory/factories', parameters('datafactoryname'))]\", \"[resourceid('microsoft.datafactory/factories/linkedservices', parameters('datafactoryname'), variables('datafactorylinkedservicename'))]\"]}{'type': 'microsoft.datafactory/factories/datasets', 'apiversion': '2018-06-01', 'name': \"[format('{0}/{1}', parameters('datafactoryname'), variables('datafactorydatasetoutname'))]\", 'properties': {'linkedservicename': {'referencename': \"[variables('datafactorylinkedservicename')]\", 'type': 'linkedservicereference'}, 'type': 'binary', 'typeproperties': {'location': {'type': 'azureblobstoragelocation', 'container': \"[format('{0}/default/{1}', parameters('storageaccountname'), parameters('blobcontainername'))]\", 'folderpath': 'output'}}}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/blobservices/containers', split(format('{0}/default/{1}', parameters('storageaccountname'), parameters('blobcontainername')), '/')[0], split(format('{0}/default/{1}', parameters('storageaccountname'), parameters('blobcontainername')), '/')[1], split(format('{0}/default/{1}', parameters('storageaccountname'), parameters('blobcontainername')), '/')[2])]\", \"[resourceid('microsoft.datafactory/factories', parameters('datafactoryname'))]\", \"[resourceid('microsoft.datafactory/factories/linkedservices', parameters('datafactoryname'), variables('datafactorylinkedservicename'))]\"]}{'type': 'microsoft.datafactory/factories/pipelines', 'apiversion': '2018-06-01', 'name': \"[format('{0}/{1}', parameters('datafactoryname'), variables('pipelinename'))]\", 'properties': {'activities': [{'name': 'mycopyactivity', 'type': 'copy', 'policy': {'timeout': '7.00:00:00', 'retry': 0, 'retryintervalinseconds': 30, 'secureoutput': false, 'secureinput': false}, 'typeproperties': {'source': {'type': 'binarysource', 'storesettings': {'type': 'azureblobstoragereadsettings', 'recursive': true}}, 'sink': {'type': 'binarysink', 'storesettings': {'type': 'azureblobstoragewritersettings'}}, 'enablestaging': false}, 'inputs': [{'referencename': \"[variables('datafactorydatasetinname')]\", 'type': 'datasetreference'}], 'outputs': [{'referencename': \"[variables('datafactorydatasetoutname')]\", 'type': 'datasetreference'}]}]}, 'dependson': [\"[resourceid('microsoft.datafactory/factories', parameters('datafactoryname'))]\", \"[resourceid('microsoft.datafactory/factories/datasets', parameters('datafactoryname'), variables('datafactorydatasetinname'))]\", \"[resourceid('microsoft.datafactory/factories/datasets', parameters('datafactoryname'), variables('datafactorydatasetoutname'))]\"]} END"}
{"prompt": "\n\n###\n\nInstall and register HA gateway on Windows virtual machines using the custom script extension\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThe template creates a data factory, linked services for on-premises SQL server and Azure blob storage, datasets to represent input and output data, and then the pipeline that copies the data.\n\n===\n\n", "completion": " {'name': \"[parameters('datafactoryname')]\", 'apiversion': '2018-06-01', 'type': 'microsoft.datafactory/factories', 'location': \"[parameters('datafactorylocation')]\", 'properties': {}, 'resources': [{'type': 'linkedservices', 'name': \"[variables('azurestoragelinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': {'value': \"[concat('defaultendpointsprotocol=https;accountname=',parameters('storageaccountname'),';accountkey=',listkeys(variables('storageaccountid'), '2021-01-01').keys[0].value)]\", 'type': 'securestring'}}}}, {'name': \"[variables('selfhostedirname')]\", 'type': 'integrationruntimes', 'apiversion': '2018-06-01', 'properties': {'type': 'selfhosted'}, 'dependson': [\"[parameters('datafactoryname')]\"]}, {'name': \"[variables('onpremsqlserverlinkedservicename')]\", 'type': 'linkedservices', 'apiversion': '2018-06-01', 'properties': {'type': 'sqlserver', 'typeproperties': {'connectionstring': {'type': 'securestring', 'value': \"[parameters('onpremsqlserverconnectionstring')]\"}}, 'connectvia': {'referencename': \"[variables('selfhostedirname')]\", 'type': 'integrationruntimereference'}}, 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('selfhostedirname')]\"]}, {'name': \"[variables('inputdatasetname')]\", 'type': 'datasets', 'apiversion': '2018-06-01', 'properties': {'linkedservicename': {'referencename': \"[variables('onpremsqlserverlinkedservicename')]\", 'type': 'linkedservicereference'}, 'type': 'sqlservertable', 'typeproperties': {'tablename': \"[parameters('sqltablename')]\"}}, 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('onpremsqlserverlinkedservicename')]\"]}, {'name': \"[variables('outputdatasetname')]\", 'type': 'datasets', 'apiversion': '2018-06-01', 'properties': {'linkedservicename': {'referencename': \"[variables('azurestoragelinkedservicename')]\", 'type': 'linkedservicereference'}, 'type': 'azureblob', 'typeproperties': {'filename': \"@concat(pipeline().runid, '.txt')\", 'folderpath': \"[concat(parameters('blobcontainer'), '\\\\', parameters('outputblobfolder'))]\"}}, 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"]}, {'type': 'pipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('inputdatasetname')]\", \"[variables('outputdatasetname')]\"], 'apiversion': '2018-06-01', 'properties': {'activities': [{'type': 'copy', 'typeproperties': {'source': {'type': 'blobsource', 'recursive': true}, 'sink': {'type': 'sqlsink', 'writebatchsize': 10000}}, 'name': 'mycopyactivity', 'inputs': [{'referencename': \"[variables('inputdatasetname')]\", 'type': 'datasetreference'}], 'outputs': [{'referencename': \"[variables('outputdatasetname')]\", 'type': 'datasetreference'}]}]}}]} END"}
{"prompt": "\n\n###\n\nExecute dependent script extensions\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nTwo-Activity Chained Data Factory Pipeline On-Prem SQL -> Azure Data Lake Store -> Azure SQL\n\n===\n\n", "completion": " {'name': \"[variables('datafactoryname')]\", 'apiversion': '2015-10-01', 'type': 'microsoft.datafactory/datafactories', 'location': \"[parameters('location')]\", 'resources': [{'dependson': [\"[resourceid('microsoft.datafactory/datafactories/', variables('datafactoryname'))]\"], 'type': 'gateways', 'apiversion': '2015-10-01', 'name': \"[variables('gatewayname')]\", 'properties': {'description': 'adf on-premises data management gateway'}}, {'type': 'linkedservices', 'name': \"[variables('datalakelinkedservicename')]\", 'apiversion': '2015-10-01', 'dependson': [\"[variables('datafactoryname')]\"], 'properties': {'type': 'azuredatalakestore', 'typeproperties': {'datalakestoreuri': \"[parameters('datalakestoreuri')]\", 'serviceprincipalid': \"[parameters('datalakestoreserviceprincipalid')]\", 'serviceprincipalkey': \"[parameters('datalakestoreserviceprincipalkey')]\", 'tenant': '[subscription().tenantid]', 'subscriptionid': '[subscription().subscriptionid]', 'resourcegroupname': '[resourcegroup().name]'}}}, {'type': 'linkedservices', 'name': \"[variables('sqllinkedservicename')]\", 'apiversion': '2015-10-01', 'dependson': [\"[variables('datafactoryname')]\", \"[variables('gatewayname')]\"], 'properties': {'type': 'onpremisessqlserver', 'typeproperties': {'connectionstring': 'placeholder-connectionstring-replace-post-deployment', 'gatewayname': \"[variables('gatewayname')]\", 'password': '**********'}}}, {'type': 'linkedservices', 'name': \"[variables('azuresqllinkedservicename')]\", 'apiversion': '2015-10-01', 'dependson': [\"[variables('datafactoryname')]\"], 'properties': {'type': 'azuresqldatabase', 'typeproperties': {'connectionstring': \"[parameters('azuresqlconnectionstring')]\"}}}, {'type': 'datasets', 'name': \"[variables('datalakedatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('datalakelinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'structure': [{'name': 'currencycode', 'type': 'string'}, {'name': 'name', 'type': 'string'}, {'name': 'modifieddate', 'type': 'datetime'}], 'published': false, 'type': 'azuredatalakestore', 'linkedservicename': \"[variables('datalakelinkedservicename')]\", 'typeproperties': {'filename': 'data.orc', 'folderpath': \"[concat(variables('datafactoryname'), '/{year}/{month}/{day}/{hour}/{minute}/')]\", 'format': {'type': 'orcformat'}, 'partitionedby': [{'name': 'year', 'value': {'type': 'datetime', 'date': 'slicestart', 'format': 'yy'}}, {'name': 'month', 'value': {'type': 'datetime', 'date': 'slicestart', 'format': 'mm'}}, {'name': 'day', 'value': {'type': 'datetime', 'date': 'slicestart', 'format': 'dd'}}, {'name': 'hour', 'value': {'type': 'datetime', 'date': 'slicestart', 'format': 'hh'}}, {'name': 'minute', 'value': {'type': 'datetime', 'date': 'slicestart', 'format': 'mm'}}]}, 'availability': {'frequency': 'day', 'interval': 1}, 'external': false}}, {'type': 'datasets', 'name': \"[variables('sqldatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('sqllinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'structure': [{'name': 'currencycode', 'type': 'string'}, {'name': 'name', 'type': 'string'}, {'name': 'modifieddate', 'type': 'datetime'}], 'published': false, 'type': 'sqlservertable', 'linkedservicename': \"[variables('sqllinkedservicename')]\", 'typeproperties': {'tablename': 'sales.currency'}, 'availability': {'frequency': 'day', 'interval': 1}, 'external': true}}, {'type': 'datasets', 'name': \"[variables('azuresqldatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azuresqllinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'structure': [{'name': 'currencycode', 'type': 'string'}, {'name': 'name', 'type': 'string'}, {'name': 'modifieddate', 'type': 'datetime'}], 'published': false, 'type': 'azuresqltable', 'linkedservicename': \"[variables('azuresqllinkedservicename')]\", 'typeproperties': {'tablename': 'sales.currency'}, 'availability': {'frequency': 'day', 'interval': 1}, 'external': false}}, {'type': 'datapipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('datalakelinkedservicename')]\", \"[variables('sqllinkedservicename')]\", \"[variables('azuresqllinkedservicename')]\", \"[variables('datalakedatasetname')]\"], 'apiversion': '2015-10-01', 'properties': {'activities': [{'type': 'copy', 'typeproperties': {'source': {'type': 'sqlsource', 'sqlreaderquery': \"$$text.format('select * from sales.currency where modifieddate >= \\\\'{0:yyyy-mm-dd hh:mm}\\\\' and modifieddate < \\\\'{1:yyyy-mm-dd hh:mm}\\\\'', windowstart, windowend)\"}, 'sink': {'type': 'azuredatalakestoresink', 'writebatchsize': 0, 'writebatchtimeout': '00:00:00'}}, 'inputs': [{'name': \"[variables('sqldatasetname')]\"}], 'outputs': [{'name': \"[variables('datalakedatasetname')]\"}], 'policy': {'timeout': '1.00:00:00', 'concurrency': 10, 'executionpriorityorder': 'newestfirst', 'style': 'startofinterval', 'retry': 3, 'longretry': 0, 'longretryinterval': '00:00:00'}, 'scheduler': {'frequency': 'day', 'interval': 1}, 'name': 'activity-onpremsql->adl'}, {'type': 'copy', 'typeproperties': {'source': {'type': 'azuredatalakestoresource', 'recursive': false}, 'sink': {'type': 'sqlsink', 'sqlwritercleanupscript': \"$$text.format('delete [sales].[currency] where [modifieddate] >= \\\\'{0:yyyy-mm-dd hh:mm}\\\\' and [modifieddate] <\\\\'{1:yyyy-mm-dd hh:mm}\\\\'', windowstart, windowend)\", 'writebatchsize': 0, 'writebatchtimeout': '00:00:00'}, 'translator': {'type': 'tabulartranslator', 'columnmappings': 'currencycode:currencycode,modifieddate:modifieddate,name:name'}}, 'inputs': [{'name': \"[variables('datalakedatasetname')]\"}], 'outputs': [{'name': \"[variables('azuresqldatasetname')]\"}], 'policy': {'timeout': '1.00:00:00', 'concurrency': 10, 'executionpriorityorder': 'newestfirst', 'style': 'startofinterval', 'retry': 3, 'longretry': 0, 'longretryinterval': '00:00:00'}, 'scheduler': {'frequency': 'day', 'interval': 1}, 'name': 'activity-adl->azuresql'}], 'start': '2017-08-16t00:00:00z', 'end': '2099-08-16t00:00:00z', 'ispaused': true, 'pipelinemode': 'scheduled'}}]} END"}
{"prompt": "\n\n###\n\nCreate a data factory with one pipeline. Pipeline has a HDInsight Hive activity that runs hive script on an Azure HDInsight cluster to transform data.\n\n===\n\n", "completion": " {'name': \"[variables('datafactoryname')]\", 'apiversion': '2015-10-01', 'type': 'microsoft.datafactory/datafactories', 'location': \"[parameters('location')]\", 'resources': [{'type': 'linkedservices', 'name': \"[variables('azurestoragelinkedservicename')]\", 'dependson': [\"[variables('datafactoryname')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': \"[concat('defaultendpointsprotocol=https;accountname=',parameters('storageaccountname'),';accountkey=',parameters('storageaccountkey'))]\"}}}, {'type': 'linkedservices', 'name': \"[variables('hdinsightondemandlinkedservicename')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'hdinsightondemand', 'typeproperties': {'clustersize': 1, 'version': '3.2', 'timetolive': '00:05:00', 'ostype': 'windows', 'linkedservicename': \"[variables('azurestoragelinkedservicename')]\"}}}, {'type': 'datasets', 'name': \"[variables('blobinputdatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azureblob', 'linkedservicename': \"[variables('azurestoragelinkedservicename')]\", 'typeproperties': {'filename': \"[parameters('inputblobname')]\", 'folderpath': \"[concat(parameters('blobcontainer'), '/', parameters('inputblobfolder'))]\", 'format': {'type': 'textformat', 'columndelimiter': ','}}, 'availability': {'frequency': 'month', 'interval': 1}, 'external': true}}, {'type': 'datasets', 'name': \"[variables('bloboutputdatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azureblob', 'linkedservicename': \"[variables('azurestoragelinkedservicename')]\", 'typeproperties': {'folderpath': \"[concat(parameters('blobcontainer'), '/', parameters('outputblobfolder'))]\", 'format': {'type': 'textformat', 'columndelimiter': ','}}, 'availability': {'frequency': 'month', 'interval': 1}}}, {'type': 'datapipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\", \"[variables('hdinsightondemandlinkedservicename')]\", \"[variables('blobinputdatasetname')]\", \"[variables('bloboutputdatasetname')]\"], 'apiversion': '2015-10-01', 'properties': {'description': 'pipeline that transforms data using hive script.', 'activities': [{'type': 'hdinsighthive', 'typeproperties': {'scriptpath': \"[concat(parameters('blobcontainer'), '/', parameters('hivescriptfolder'), '/', parameters('hivescriptfile'))]\", 'scriptlinkedservice': \"[variables('azurestoragelinkedservicename')]\", 'defines': {'inputtable': \"[concat(replace(reference(resourceid(parameters('storageaccountresourcegroupname'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2016-01-01').primaryendpoints.blob, 'https://', concat('wasb://', parameters('blobcontainer'), '@')), parameters('inputblobfolder'))]\", 'partitionedtable': \"[concat(replace(reference(resourceid(parameters('storageaccountresourcegroupname'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2016-01-01').primaryendpoints.blob, 'https://', concat('wasb://', parameters('blobcontainer'), '@')), parameters('outputblobfolder'))]\"}}, 'inputs': [{'name': \"[variables('blobinputdatasetname')]\"}], 'outputs': [{'name': \"[variables('bloboutputdatasetname')]\"}], 'policy': {'concurrency': 1, 'retry': 2}, 'scheduler': {'frequency': 'month', 'interval': 1}, 'name': 'runsamplehiveactivity', 'linkedservicename': \"[variables('hdinsightondemandlinkedservicename')]\"}], 'start': '2016-09-01t00:00:00z', 'end': '2016-09-02t00:00:00z', 'ispaused': false}}]} END"}
{"prompt": "\n\n###\n\nCreate an empty data factory\n\n===\n\n", "completion": " {'type': 'microsoft.datafactory/factories', 'apiversion': '2018-06-01', 'name': \"[parameters('name')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'properties': {}} END"}
{"prompt": "\n\n###\n\nCreate a Data Factory account, Blob source, SQL sink and Copy Activity Pipeline\n\n===\n\n", "completion": " {'name': \"[parameters('datafactoryname')]\", 'apiversion': '2017-09-01-preview', 'type': 'microsoft.datafactory/factories', 'location': \"[parameters('datafactorylocation')]\", 'properties': {}, 'resources': [{'type': 'linkedservices', 'name': \"[variables('azurestoragelinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2017-09-01-preview', 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': {'value': \"[parameters('azurestorage_connectionstring')]\", 'type': 'securestring'}}}}, {'type': 'linkedservices', 'name': \"[variables('azuresqldatabaselinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2017-09-01-preview', 'properties': {'type': 'azuresqldatabase', 'description': 'azure sql database linked service', 'typeproperties': {'connectionstring': {'value': \"[parameters('azuresqldatabase_connectionstring')]\", 'type': 'securestring'}}}}, {'type': 'datasets', 'name': \"[variables('inputdatasetname')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2017-09-01-preview', 'properties': {'type': 'azureblob', 'structure': [{'name': 'prop_0', 'type': 'string'}, {'name': 'prop_1', 'type': 'string'}], 'typeproperties': {'format': {'type': 'textformat', 'columndelimiter': ',', 'nullvalue': '\\\\n', 'treatemptyasnull': false, 'firstrowasheader': false}, 'folderpath': \"[concat(parameters('blobcontainer'), '/', parameters('inputblobfolder'), '/')]\", 'filename': \"[parameters('inputblobname')]\"}, 'linkedservicename': {'referencename': \"[variables('azurestoragelinkedservicename')]\", 'type': 'linkedservicereference'}}}, {'type': 'datasets', 'name': \"[variables('outputdatasetname')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azuresqldatabaselinkedservicename')]\"], 'apiversion': '2017-09-01-preview', 'properties': {'type': 'azuresqltable', 'structure': [{'name': 'firstname', 'type': 'string'}, {'name': 'lastname', 'type': 'string'}], 'typeproperties': {'tablename': \"[parameters('sqltablename')]\"}, 'linkedservicename': {'referencename': \"[variables('azuresqldatabaselinkedservicename')]\", 'type': 'linkedservicereference'}}}, {'type': 'pipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('inputdatasetname')]\", \"[variables('outputdatasetname')]\"], 'apiversion': '2017-09-01-preview', 'properties': {'activities': [{'type': 'copy', 'typeproperties': {'source': {'type': 'blobsource', 'recursive': true}, 'sink': {'type': 'sqlsink', 'writebatchsize': 10000}}, 'name': 'mycopyactivity', 'inputs': [{'referencename': \"[variables('inputdatasetname')]\", 'type': 'datasetreference'}], 'outputs': [{'referencename': \"[variables('outputdatasetname')]\", 'type': 'datasetreference'}]}]}}]} END"}
{"prompt": "\n\n###\n\nCreate a Data Factory account, Blob source, MySQL sink and Copy Activity Pipeline\n\n===\n\n", "completion": " {'name': \"[parameters('datafactoryname')]\", 'apiversion': '2018-06-01', 'type': 'microsoft.datafactory/factories', 'location': \"[parameters('location')]\", 'properties': {}, 'resources': [{'type': 'linkedservices', 'name': \"[variables('azurestoragelinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': {'value': \"[concat('defaultendpointsprotocol=https;accountname=', split(split(reference(parameters('storageaccountresourceid'), '2019-04-01').primaryendpoints.blob, '/')[2], '.')[0], ';accountkey=', listkeys(parameters('storageaccountresourceid'), '2019-04-01').keys[0].value)]\", 'type': 'securestring'}}}}, {'type': 'linkedservices', 'name': \"[variables('azuremysqldatabaselinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azuremysql', 'description': 'azure database for mysql linked service', 'typeproperties': {'connectionstring': {'value': \"[concat('server=', reference(parameters('mysqlresourceid'), '2017-12-01').fullyqualifieddomainname, ';port=3306;database=' ,parameters('mysqldatabase'), ';uid=', parameters('mysqlusername'), ';pwd=', parameters('mysqlpassword'), ';sslmode=preferred;')]\", 'type': 'securestring'}}}}, {'type': 'datasets', 'name': \"[variables('inputdatasetname')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azureblob', 'structure': [{'name': 'firstname', 'type': 'string'}, {'name': 'lastname', 'type': 'string'}], 'typeproperties': {'format': {'type': 'textformat', 'columndelimiter': ',', 'nullvalue': '\\\\n', 'treatemptyasnull': false, 'firstrowasheader': false}, 'folderpath': \"[concat(parameters('blobcontainer'), '/', parameters('inputblobfolder'), '/')]\", 'filename': \"[parameters('inputblobname')]\"}, 'linkedservicename': {'referencename': \"[variables('azurestoragelinkedservicename')]\", 'type': 'linkedservicereference'}}}, {'type': 'datasets', 'name': \"[variables('outputdatasetname')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azuremysqldatabaselinkedservicename')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azuremysqltable', 'typeproperties': {'tablename': \"[parameters('mysqltablename')]\"}, 'linkedservicename': {'referencename': \"[variables('azuremysqldatabaselinkedservicename')]\", 'type': 'linkedservicereference'}}}, {'type': 'pipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('inputdatasetname')]\", \"[variables('outputdatasetname')]\"], 'apiversion': '2018-06-01', 'properties': {'activities': [{'type': 'copy', 'typeproperties': {'source': {'type': 'blobsource', 'recursive': true}, 'sink': {'type': 'azuremysqlsink', 'writebatchsize': 10000}}, 'name': 'mycopyactivity', 'inputs': [{'referencename': \"[variables('inputdatasetname')]\", 'type': 'datasetreference'}], 'outputs': [{'referencename': \"[variables('outputdatasetname')]\", 'type': 'datasetreference'}]}]}}]} END"}
{"prompt": "\n\n###\n\nCreate a Data Factory, Copy from Blob to SQL with Sproc\n\n===\n\n", "completion": " {'name': \"[variables('datafactoryname')]\", 'apiversion': '2015-10-01', 'type': 'microsoft.datafactory/datafactories', 'location': \"[parameters('location')]\", 'resources': [{'type': 'linkedservices', 'name': \"[variables('storagelinkedservicename')]\", 'apiversion': '2015-10-01', 'dependson': [\"[variables('datafactoryname')]\"], 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': \"[concat('defaultendpointsprotocol=https;accountname=',parameters('storageaccountname'),';accountkey=',parameters('storageaccountkey'))]\"}}}, {'type': 'linkedservices', 'name': \"[variables('sqllinkedservicename')]\", 'apiversion': '2015-10-01', 'dependson': [\"[variables('datafactoryname')]\"], 'properties': {'type': 'azuresqldatabase', 'description': 'azure sql linked service', 'typeproperties': {'connectionstring': \"[concat('data source=tcp:', parameters('sqlservername'), '.database.windows.net,1433;initial catalog=', parameters('sqldatabasename'), ';integrated security=false;user id=', parameters('sqluserid'), ';password=', parameters('sqlpassword'), ';connect timeout=30;encrypt=true')]\"}}}, {'type': 'datasets', 'name': \"[variables('storagedataset')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('storagelinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azureblob', 'linkedservicename': \"[variables('storagelinkedservicename')]\", 'typeproperties': {'folderpath': \"[concat(parameters('sourceblobcontainer'), '/')]\", 'filename': \"[parameters('sourceblobname')]\", 'format': {'type': 'textformat'}}, 'availability': {'frequency': 'hour', 'interval': 1}, 'external': true}}, {'type': 'datasets', 'name': \"[variables('intermediatedataset')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('sqllinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azuresqltable', 'linkedservicename': \"[variables('sqllinkedservicename')]\", 'typeproperties': {'tablename': \"[variables('intermediatedataset')]\"}, 'availability': {'frequency': 'hour', 'interval': 1}}}, {'type': 'datasets', 'name': \"[variables('sqldataset')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('sqllinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azuresqltable', 'linkedservicename': \"[variables('sqllinkedservicename')]\", 'typeproperties': {'tablename': \"[parameters('sqltargettable')]\"}, 'availability': {'frequency': 'hour', 'interval': 1}}}, {'type': 'datapipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('storagelinkedservicename')]\", \"[variables('sqllinkedservicename')]\", \"[variables('storagedataset')]\", \"[variables('sqldataset')]\"], 'apiversion': '2015-10-01', 'properties': {'description': 'copies data from azure blob to sql db while invoking stored procedure', 'activities': [{'name': 'blobtosqltablecopyactivity', 'type': 'copy', 'typeproperties': {'source': {'type': 'blobsource'}, 'sink': {'type': 'sqlsink', 'writebatchsize': 0, 'writebatchtimeout': '00:00:00'}}, 'inputs': [{'name': \"[variables('storagedataset')]\"}], 'outputs': [{'name': \"[variables('intermediatedataset')]\"}]}, {'name': 'sqltabletosqldbsprocactivity', 'type': 'sqlserverstoredprocedure', 'inputs': [{'name': \"[variables('intermediatedataset')]\"}], 'outputs': [{'name': \"[variables('sqldataset')]\"}], 'typeproperties': {'storedprocedurename': \"[parameters('sqlwriterstoredprocedurename')]\"}, 'scheduler': {'frequency': 'hour', 'interval': 1}, 'policy': {'timeout': '02:00:00', 'concurrency': 1, 'executionpriorityorder': 'newestfirst', 'retry': 3}}], 'start': '2016-10-01t00:00:00z', 'end': '2016-10-02t00:00:00z'}}]} END"}
{"prompt": "\n\n###\n\nCreate a data factory with one pipeline with the following sequence of activities: Copy -> HDInsight Hive -> Copy.\n\n===\n\n", "completion": " {'name': \"[variables('datafactoryname')]\", 'apiversion': '2015-10-01', 'type': 'microsoft.datafactory/datafactories', 'location': 'west us', 'resources': [{'type': 'linkedservices', 'name': \"[variables('ftplinkedservicename')]\", 'dependson': [\"[variables('datafactoryname')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'ftpserver', 'typeproperties': {'host': \"[parameters('ftphost')]\", 'port': 21, 'authenticationtype': 'basic', 'username': \"[parameters('ftpuser')]\", 'password': \"[parameters('ftppassword')]\", 'enablessl': false, 'enableservercertificatevalidation': false}}}, {'type': 'linkedservices', 'name': \"[variables('azurestoragelinkedservicename')]\", 'dependson': [\"[variables('datafactoryname')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': \"[concat('defaultendpointsprotocol=https;accountname=',parameters('storageaccountname'),';accountkey=',parameters('storageaccountkey'))]\"}}}, {'type': 'linkedservices', 'name': \"[variables('hdinsightondemandlinkedservicename')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'hdinsightondemand', 'typeproperties': {'clustersize': 1, 'version': '3.2', 'timetolive': '00:05:00', 'ostype': 'windows', 'linkedservicename': \"[variables('azurestoragelinkedservicename')]\"}}}, {'type': 'linkedservices', 'name': \"[variables('azuresqllinkedservicename')]\", 'dependson': [\"[variables('datafactoryname')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azuresqldatabase', 'description': 'azure sql linked service', 'typeproperties': {'connectionstring': \"[concat('server=tcp:',parameters('sqlservername'),'.database.windows.net,1433;database=', parameters('sqldatabasename'), ';user id=',parameters('sqlserverusername'),';password=',parameters('sqlserverpassword'),';trusted_connection=false;encrypt=true;connection timeout=30')]\"}}}, {'type': 'datasets', 'name': \"[variables('ftpdatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('ftplinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'fileshare', 'linkedservicename': \"[variables('ftplinkedservicename')]\", 'typeproperties': {'folderpath': \"[parameters('ftpfoldername')]\", 'filename': \"[parameters('ftpfilename')]\"}, 'availability': {'frequency': 'day', 'interval': 1}, 'external': true}}, {'type': 'datasets', 'name': \"[variables('blobinputdatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azureblob', 'linkedservicename': \"[variables('azurestoragelinkedservicename')]\", 'typeproperties': {'filename': \"[parameters('inputblobname')]\", 'folderpath': \"[concat(parameters('blobcontainer'), '/', parameters('inputblobfolder'))]\"}, 'availability': {'frequency': 'day', 'interval': 1}}}, {'type': 'datasets', 'name': \"[variables('bloboutputdatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azureblob', 'linkedservicename': \"[variables('azurestoragelinkedservicename')]\", 'typeproperties': {'folderpath': \"[concat(parameters('blobcontainer'), '/', parameters('outputblobfolder'))]\", 'format': {'type': 'textformat', 'columndelimiter': ','}}, 'availability': {'frequency': 'day', 'interval': 1}}}, {'type': 'datasets', 'name': \"[variables('sqldatasetname')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azuresqllinkedservicename')]\"], 'apiversion': '2015-10-01', 'properties': {'type': 'azuresqltable', 'linkedservicename': \"[variables('azuresqllinkedservicename')]\", 'typeproperties': {'tablename': \"[parameters('targetsqltable')]\"}, 'availability': {'frequency': 'day', 'interval': 1}, 'policy': {}}}, {'type': 'datapipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[variables('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\", \"[variables('hdinsightondemandlinkedservicename')]\", \"[variables('ftplinkedservicename')]\", \"[variables('azuresqllinkedservicename')]\", \"[variables('ftpdatasetname')]\", \"[variables('blobinputdatasetname')]\", \"[variables('bloboutputdatasetname')]\", \"[variables('sqldatasetname')]\"], 'apiversion': '2015-10-01', 'properties': {'description': 'pipeline that copies data from an ftp server to azure blobs, invokes a hive script on an on-demand hdinsightcluster to transform the data', 'activities': [{'type': 'copy', 'name': 'ftptoblobcopy', 'typeproperties': {'source': {'type': 'filesystemsource', 'recursive': false}, 'sink': {'type': 'blobsink', 'copybehavior': 'preservehierarchy', 'writebatchsize': 0, 'writebatchtimeout': '00:00:00'}}, 'inputs': [{'name': \"[variables('ftpdatasetname')]\"}], 'outputs': [{'name': \"[variables('blobinputdatasetname')]\"}], 'policy': {'concurrency': 1, 'executionpriorityorder': 'newestfirst', 'retry': 1, 'timeout': '00:05:00'}}, {'type': 'hdinsighthive', 'typeproperties': {'scriptpath': \"[concat(parameters('blobcontainer'), '/', parameters('hivescriptfolder'), '/', parameters('hivescriptfile'))]\", 'scriptlinkedservice': \"[variables('azurestoragelinkedservicename')]\", 'defines': {'inputtable': \"[concat(replace(reference(resourceid(parameters('storageaccountresourcegroupname'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2016-01-01').primaryendpoints.blob, 'https://', concat('wasb://', parameters('blobcontainer'), '@')), parameters('inputblobfolder'))]\", 'outputtable': \"[concat(replace(reference(resourceid(parameters('storageaccountresourcegroupname'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2016-01-01').primaryendpoints.blob, 'https://', concat('wasb://', parameters('blobcontainer'), '@')), parameters('outputblobfolder'))]\"}}, 'inputs': [{'name': \"[variables('blobinputdatasetname')]\"}], 'outputs': [{'name': \"[variables('bloboutputdatasetname')]\"}], 'policy': {'concurrency': 1, 'retry': 2}, 'name': 'runsamplehiveactivity', 'linkedservicename': \"[variables('hdinsightondemandlinkedservicename')]\"}, {'type': 'copy', 'typeproperties': {'source': {'type': 'blobsource'}, 'sink': {'type': 'sqlsink', 'writebatchsize': 0, 'writebatchtimeout': '00:00:00'}}, 'inputs': [{'name': \"[variables('bloboutputdatasetname')]\"}], 'outputs': [{'name': \"[variables('sqldatasetname')]\"}], 'policy': {'timeout': '1.00:00:00', 'concurrency': 1, 'executionpriorityorder': 'newestfirst', 'style': 'startofinterval', 'retry': 3, 'longretry': 0, 'longretryinterval': '00:00:00'}, 'name': 'blobtosqlcopy'}], 'start': '2015-10-01t00:00:00z', 'end': '2015-10-02t00:00:00z', 'ispaused': false}}]} END"}
{"prompt": "\n\n###\n\nCreate a Data Factory account, Blob source, SQL sink and Copy Activity Pipeline\n\n===\n\n", "completion": " {'name': \"[parameters('datafactoryname')]\", 'apiversion': '2018-06-01', 'type': 'microsoft.datafactory/factories', 'location': \"[parameters('location')]\", 'properties': {}, 'resources': [{'type': 'linkedservices', 'name': \"[variables('azurestoragelinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azurestorage', 'description': 'azure storage linked service', 'typeproperties': {'connectionstring': {'value': \"[concat('defaultendpointsprotocol=https;accountname=', split(split(reference(parameters('storageaccountresourceid'), '2019-04-01').primaryendpoints.blob, '/')[2], '.')[0], ';accountkey=', listkeys(parameters('storageaccountresourceid'), '2019-04-01').keys[0].value)]\", 'type': 'securestring'}}}}, {'type': 'linkedservices', 'name': \"[variables('azurepostgresqldatabaselinkedservicename')]\", 'dependson': [\"[parameters('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azurepostgresql', 'description': 'azure database for postgresql linked service', 'typeproperties': {'connectionstring': {'value': \"[concat('server=', reference(parameters('postgresqlresourceid'), '2017-12-01').fullyqualifieddomainname, ';port=5432;database=' ,parameters('postgresqldatabase'), ';uid=', parameters('postgresqlusername'), ';password=', parameters('postgresqlpassword'), ';ssl mode=require')]\", 'type': 'securestring'}}}}, {'type': 'datasets', 'name': \"[variables('inputdatasetname')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azurestoragelinkedservicename')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azureblob', 'structure': [{'name': 'firstname', 'type': 'string'}, {'name': 'lastname', 'type': 'string'}], 'typeproperties': {'format': {'type': 'textformat', 'columndelimiter': ',', 'nullvalue': '\\\\n', 'treatemptyasnull': false, 'firstrowasheader': false}, 'folderpath': \"[concat(parameters('blobcontainer'), '/', parameters('inputblobfolder'), '/')]\", 'filename': \"[parameters('inputblobname')]\"}, 'linkedservicename': {'referencename': \"[variables('azurestoragelinkedservicename')]\", 'type': 'linkedservicereference'}}}, {'type': 'datasets', 'name': \"[variables('outputdatasetname')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('azurepostgresqldatabaselinkedservicename')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azurepostgresqltable', 'typeproperties': {'tablename': \"[parameters('postgresqltablename')]\"}, 'linkedservicename': {'referencename': \"[variables('azurepostgresqldatabaselinkedservicename')]\", 'type': 'linkedservicereference'}}}, {'type': 'pipelines', 'name': \"[variables('pipelinename')]\", 'dependson': [\"[parameters('datafactoryname')]\", \"[variables('inputdatasetname')]\", \"[variables('outputdatasetname')]\"], 'apiversion': '2018-06-01', 'properties': {'activities': [{'type': 'copy', 'typeproperties': {'source': {'type': 'blobsource', 'recursive': true}, 'sink': {'type': 'azurepostgresqlsink', 'writebatchsize': 10000}}, 'name': 'mycopyactivity', 'inputs': [{'referencename': \"[variables('inputdatasetname')]\", 'type': 'datasetreference'}], 'outputs': [{'referencename': \"[variables('outputdatasetname')]\", 'type': 'datasetreference'}]}]}}]} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Data Factory to perform data movement from Salesforce to Azure Blobs\n\n===\n\n", "completion": " {'name': \"[variables('datafactoryname')]\", 'apiversion': '2018-06-01', 'type': 'microsoft.datafactory/factories', 'location': \"[parameters('location')]\", 'resources': [{'dependson': [\"[variables('datafactoryname')]\"], 'type': 'linkedservices', 'name': \"[variables('sflinkedservicename')]\", 'apiversion': '2018-06-01', 'properties': {'type': 'salesforce', 'description': 'salesforce linked service', 'typeproperties': {'username': \"[parameters('sfusername')]\", 'password': \"[parameters('sfpassword')]\", 'securitytoken': \"[parameters('sfsecuritytoken')]\"}}}, {'type': 'linkedservices', 'name': \"[variables('storagelinkedservicename')]\", 'dependson': [\"[variables('datafactoryname')]\"], 'apiversion': '2018-06-01', 'properties': {'type': 'azurestorage', 'description': 'azure blobs storage linked service', 'typeproperties': {'connectionstring': \"[concat('defaultendpointsprotocol=https;accountname=',parameters('storageaccountname'),';accountkey=',parameters('storageaccountkey'))]\"}}}, {'dependson': [\"[variables('datafactoryname')]\", \"[variables('sflinkedservicename')]\"], 'type': 'datasets', 'name': \"[variables('sfdataset')]\", 'apiversion': '2018-06-01', 'properties': {'type': 'relationaltable', 'linkedservicename': \"[variables('sflinkedservicename')]\", 'typeproperties': {'tablename': \"[parameters('sftable')]\"}, 'availability': {'frequency': 'day', 'interval': 1}, 'external': true}}, {'dependson': [\"[variables('datafactoryname')]\", \"[variables('storagelinkedservicename')]\"], 'type': 'datasets', 'name': \"[variables('storagedataset')]\", 'apiversion': '2018-06-01', 'properties': {'type': 'azureblob', 'linkedservicename': \"[variables('storagelinkedservicename')]\", 'typeproperties': {'folderpath': 'datafromsftable/{year}/{month}/{day}/data.csv', 'partitionedby': [{'name': 'year', 'value': {'type': 'datetime', 'date': 'slicestart', 'format': 'yyyy'}}, {'name': 'month', 'value': {'type': 'datetime', 'date': 'slicestart', 'format': '%m'}}, {'name': 'day', 'value': {'type': 'datetime', 'date': 'slicestart', 'format': '%d'}}], 'format': {'type': 'textformat'}}, 'availability': {'frequency': 'day', 'interval': 1}, 'external': false}}, {'dependson': [\"[variables('datafactoryname')]\", \"[variables('storagelinkedservicename')]\", \"[variables('sflinkedservicename')]\", \"[variables('sfdataset')]\", \"[variables('storagedataset')]\"], 'type': 'pipelines', 'name': \"[variables('pipelinename')]\", 'apiversion': '2018-06-01', 'properties': {'description': 'pipeline to copy data from sf object to azure blobs', 'activities': [{'name': 'sftoblobscopyactivity', 'description': 'copies data from sf table to azure blobs', 'type': 'copy', 'inputs': [{'name': \"[variables('sfdataset')]\"}], 'outputs': [{'name': \"[variables('storagedataset')]\"}], 'typeproperties': {'source': {'type': 'relationalsource'}, 'sink': {'type': 'blobsink'}}, 'policy': {'retry': 3, 'timeout': '00:30:00'}}], 'start': '2016-10-01t00:00:00z', 'end': '2016-10-01t00:00:00z'}}]} END"}
{"prompt": "\n\n###\n\nDeploy an HDInsight cluster running Linux (with Azure Storage) with an SSH public key\n\n===\n\n", "completion": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('storageaccountname'))]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': \"[parameters('clustertype')]\", 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(concat(reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').primaryendpoints.blob),'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'sshprofile': {'publickeys': [{'certificatedata': \"[parameters('sshpublickey')]\"}]}}}}, {'name': 'workernode', 'targetinstancecount': \"[parameters('clusterworkernodecount')]\", 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'sshprofile': {'publickeys': [{'certificatedata': \"[parameters('sshpublickey')]\"}]}}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy an empty edge node and add it to an existing HDInsight cluster\n\n===\n\n", "completion": " {'name': \"[concat(parameters('clustername'),'/', variables('applicationname'))]\", 'type': 'microsoft.hdinsight/clusters/applications', 'apiversion': '2021-06-01', 'properties': {'marketplaceidentifier': 'emptynode', 'computeprofile': {'roles': [{'name': 'edgenode', 'targetinstancecount': 1, 'hardwareprofile': {'vmsize': \"[parameters('edgenodevirtualmachinesize')]\"}}]}, 'installscriptactions': [{'name': \"[concat('emptynode','-' ,uniquestring(variables('applicationname')))]\", 'uri': \"[uri(parameters('_artifactslocation'), concat(parameters('installscriptactionfolder'), '/', parameters('installscriptaction'), parameters('_artifactslocationsastoken')))]\", 'roles': ['edgenode']}], 'sshendpoints': [{'location': \"[concat(variables('applicationname'),'.',parameters('clustername'),'-ssh.azurehdinsight.net')]\", 'destinationport': 22, 'publicport': 22}], 'applicationtype': 'customapplication'}} END"}
{"prompt": "\n\n###\n\nDeploy two HBase clustes with each in its own VNet in the same region\n\n===\n\n", "completion": " {'name': \"[variables('clusternode1').name]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('clusternode1').defaultstorageaccount.name)]\", \"[resourceid('microsoft.network/virtualnetworks/',variables('vnet1').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hbase', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('clusternode1').defaultstorageaccount.name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[variables('clusternode1').name]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('clusternode1').defaultstorageaccount.name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet1').name, variables('vnet1').subnetname)]\"}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet1').name, variables('vnet1').subnetname)]\"}}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet1').name, variables('vnet1').subnetname)]\"}}]}}}{'name': \"[variables('clusternode2').name]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('clusternode2').defaultstorageaccount.name)]\", \"[resourceid('microsoft.network/virtualnetworks/',variables('vnet2').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hbase', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('clusternode2').defaultstorageaccount.name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[variables('clusternode2').name]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('clusternode2').defaultstorageaccount.name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet2').name, variables('vnet2').subnetname)]\"}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet2').name, variables('vnet2').subnetname)]\"}}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet2').name, variables('vnet2').subnetname)]\"}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure VNet and an HDInsight Spark cluster within the VNet\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('defaultstorageaccount').name)]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('vnet').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'spark', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[variables('vnet').id]\", 'subnet': \"[variables('vnet').subnet]\"}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[variables('vnet').id]\", 'subnet': \"[variables('vnet').subnet]\"}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy a HDInsight cluster and a SQL Database\n\n===\n\n", "completion": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2021-04-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy a Linux-based HBase cluster with enhanced writes in Azure HDInsight\n\n===\n\n", "completion": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hbase', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2018-07-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2018-07-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'datadisksgroups': [{'diskspernode': 1}]}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy an Linux-based Interative Hive cluster in HDInsight.\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'apiversion': '2018-06-01-preview', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'interactivehive', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(concat(reference(resourceid('microsoft.storage/storageaccounts/', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob),'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'mininstancecount': 1, 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'mininstancecount': 1, 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'zookeepernode', 'mininstancecount': 1, 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy a Linux-based HBase cluster in Azure HDInsight\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'apiversion': '2021-06-01', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hbase', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy an HDInsight cluster running Linux (with Azure Storage) with an SSH password\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'apiversion': '2021-06-01', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': \"[parameters('clustertype')]\", 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(concat(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name)).primaryendpoints.blob),'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy two HBase clustes with each in its own VNet across two different regions.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nDeploy an Azure VNet and two HDInsight Linux-based HBase clusters within the VNet\n\n===\n\n", "completion": " {'name': \"[variables('clusternode1').name]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('clusternode1').defaultstorageaccount.name)]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hbase', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('clusternode1').defaultstorageaccount.name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[variables('clusternode1').name]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('clusternode1').defaultstorageaccount.name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet').name, variables('vnet').subnetname)]\"}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet').name, variables('vnet').subnetname)]\"}}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet').name, variables('vnet').subnetname)]\"}}]}}}{'name': \"[variables('clusternode2').name]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('clusternode2').defaultstorageaccount.name)]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hbase', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('clusternode2').defaultstorageaccount.name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[variables('clusternode2').name]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('clusternode2').defaultstorageaccount.name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet').name, variables('vnet').subnetname)]\"}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet').name, variables('vnet').subnetname)]\"}}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet').name)]\", 'subnet': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet').name, variables('vnet').subnetname)]\"}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy a Linux-based Spark cluster in Azure HDInsight\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'apiversion': '2018-06-01-preview', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'spark', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', format('storage{0}', uniquestring(resourcegroup().id)))).primaryendpoints.blob, 'https://', ''), '/', '')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', format('storage{0}', uniquestring(resourcegroup().id))), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', format('storage{0}', uniquestring(resourcegroup().id)))]\"]} END"}
{"prompt": "\n\n###\n\nDeploy an HDInsight cluster with an existing linked storage account\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'properties': {'clusterversion': \"[parameters('clusterversion')]\", 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': \"[parameters('clustertype')]\", 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts/', parameters('defaultstorageaccountname')), '2021-04-01').primaryendpoints.blob,'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', parameters('defaultstorageaccountname')), '2021-04-01').keys[0].value]\"}, {'name': \"[replace(replace(reference(resourceid(parameters('storageaccountresourcegroup'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2021-04-01').primaryendpoints.blob,'https:',''),'/','')]\", 'isdefault': false, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid(parameters('storageaccountresourcegroup'), 'microsoft.storage/storageaccounts', parameters('storageaccountname')), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy a new Linux HDInsight cluster with new Data Lake Store and Storage accounts.\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2021-06-01', 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts/', variables('defaultstorageaccount').name), '2021-08-01').primaryendpoints.blob,'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2021-08-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nHDInsight cluster with TLS version 1.2 or newer\n\n===\n\n", "completion": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'properties': {'clusterversion': \"[parameters('clusterversion')]\", 'ostype': 'linux', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid(parameters('existingclusterstorageresourcegroup'), 'microsoft.storage/storageaccounts/', parameters('existingclusterstorageaccountname')), '2019-06-01').primaryendpoints.blob,'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('neworexistingclusterstoragecontainername')]\", 'key': \"[listkeys(resourceid(parameters('existingclusterstorageresourcegroup'), 'microsoft.storage/storageaccounts', parameters('existingclusterstorageaccountname')), '2019-06-01').keys[0].value]\"}]}, 'minsupportedtlsversion': '1.2', 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks', parameters('existingvirtualnetworkname'))]\", 'subnet': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('existingvirtualnetworkname'), parameters('existingvirtualnetworksubnetname'))]\"}}, {'name': 'workernode', 'targetinstancecount': \"[parameters('workernodecount')]\", 'hardwareprofile': {'vmsize': \"[parameters('workernodesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks', parameters('existingvirtualnetworkname'))]\", 'subnet': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('existingvirtualnetworkname'), parameters('existingvirtualnetworksubnetname'))]\"}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy a Linux-based HDInsight cluster with a schema registry edge node\n\n===\n\n", "completion": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('clstgacnt'))]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'kafka', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('clstgacnt')), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('clstgacnt')), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 4, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'datadisksgroups': [{'diskspernode': 2}], 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}}{'name': \"[concat(parameters('clustername'),'/', variables('applicationname'))]\", 'type': 'microsoft.hdinsight/clusters/applications', 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.hdinsight/clusters',parameters('clustername'))]\"], 'properties': {'computeprofile': {'roles': [{'name': 'edgenode', 'targetinstancecount': 1, 'hardwareprofile': {'vmsize': 'standard_e4_v3'}}]}, 'installscriptactions': [{'name': \"[concat('schemaregistry','-' ,uniquestring(variables('applicationname')))]\", 'uri': \"[uri(parameters('_artifactslocation'), concat(parameters('installscriptactionfolder'), '/', parameters('installscriptaction'), parameters('_artifactslocationsastoken')))]\", 'roles': ['edgenode']}], 'sshendpoints': [{'location': \"[concat(variables('applicationname'),'.',parameters('clustername'),'-ssh.azurehdinsight.net')]\", 'destinationport': 22, 'publicport': 22}], 'applicationtype': 'customapplication'}} END"}
{"prompt": "\n\n###\n\nDeploy an HDInsight cluster using an existing default storage account\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'properties': {'clusterversion': \"[parameters('clusterversion')]\", 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': \"[parameters('clustertype')]\", 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid(parameters('clusterstorageresourcegroup'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2021-04-01').primaryendpoints.blob,'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid(parameters('clusterstorageresourcegroup'), 'microsoft.storage/storageaccounts', parameters('storageaccountname')), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure VNet and an HDInsight Linux-based HBase cluster within the VNet\n\n===\n\n", "completion": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('defaultstorageaccount').name)]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('vnet').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hbase', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2016-01-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2016-01-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[variables('vnet').id]\", 'subnet': \"[variables('vnet').subnet]\"}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[variables('vnet').id]\", 'subnet': \"[variables('vnet').subnet]\"}}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[variables('vnet').id]\", 'subnet': \"[variables('vnet').subnet]\"}}]}}} END"}
{"prompt": "\n\n###\n\nCreates an HDInsight cluster in an existing virtual network with a new SQL DB for Ambari+Hive Metastore. You must have an existing SQL Sever, storage account, and VNET.\n\n===\n\n", "completion": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': ['sqldbdeployment'], 'properties': {'clusterversion': \"[parameters('clusterversion')]\", 'ostype': 'linux', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}, 'hive-site': {'javax.jdo.option.connectiondrivername': 'com.microsoft.sqlserver.jdbc.sqlserverdriver', 'javax.jdo.option.connectionurl': \"[concat('jdbc:sqlserver://', reference(resourceid(parameters('existingsqlserverresourcegroup'), 'microsoft.sql/servers', parameters('existingsqlservername')), '2020-02-02-preview').fullyqualifieddomainname, ';database=',parameters('newmetastoredbname'),';encrypt=true;trustservercertificate=true;create=false;logintimeout=300')]\", 'javax.jdo.option.connectionusername': \"[parameters('existingsqlserverusername')]\", 'javax.jdo.option.connectionpassword': \"[parameters('existingsqlserverpassword')]\"}, 'hive-env': {'hive_database': 'existing mssql server database with sql authentication', 'hive_database_name': \"[parameters('newmetastoredbname')]\", 'hive_database_type': 'mssql', 'hive_existing_mssql_server_database': \"[parameters('newmetastoredbname')]\", 'hive_existing_mssql_server_host': \"[reference(resourceid(parameters('existingsqlserverresourcegroup'),'microsoft.sql/servers',parameters('existingsqlservername')), '2020-02-02-preview').fullyqualifieddomainname]\", 'hive_hostname': \"[reference(resourceid(parameters('existingsqlserverresourcegroup'),'microsoft.sql/servers',parameters('existingsqlservername')), '2020-02-02-preview').fullyqualifieddomainname]\"}, 'ambari-conf': {'database-server': \"[reference(resourceid(parameters('existingsqlserverresourcegroup'),'microsoft.sql/servers',parameters('existingsqlservername')), '2020-02-02-preview').fullyqualifieddomainname]\", 'database-name': \"[parameters('newmetastoredbname')]\", 'database-user-name': \"[parameters('existingsqlserverusername')]\", 'database-user-password': \"[parameters('existingsqlserverpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid(parameters('existingclusterstorageresourcegroup'), 'microsoft.storage/storageaccounts/', parameters('existingclusterstorageaccountname')), '2021-04-01').primaryendpoints.blob,'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('neworexistingclusterstoragecontainername')]\", 'key': \"[listkeys(resourceid(parameters('existingclusterstorageresourcegroup'), 'microsoft.storage/storageaccounts', parameters('existingclusterstorageaccountname')), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks', parameters('existingvirtualnetworkname'))]\", 'subnet': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('existingvirtualnetworkname'), parameters('existingvirtualnetworksubnetname'))]\"}}, {'name': 'workernode', 'targetinstancecount': \"[parameters('workernodecount')]\", 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks', parameters('existingvirtualnetworkname'))]\", 'subnet': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('existingvirtualnetworkname'), parameters('existingvirtualnetworksubnetname'))]\"}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy a Linux-based HDInsight cluster with an empty edge node\n\n===\n\n", "completion": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/',variables('clusterstorageaccountname'))]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('clusterstorageaccountname')), '2021-04-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('clusterstorageaccountname')), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}}{'name': \"[concat(parameters('clustername'),'/', variables('applicationname'))]\", 'type': 'microsoft.hdinsight/clusters/applications', 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.hdinsight/clusters/',parameters('clustername'))]\"], 'properties': {'marketplaceidentifier': 'emptynode', 'computeprofile': {'roles': [{'name': 'edgenode', 'targetinstancecount': 1, 'hardwareprofile': {'vmsize': \"[parameters('edgenodevirtualmachinesize')]\"}}]}, 'installscriptactions': [{'name': \"[concat('emptynode','-' ,uniquestring(variables('applicationname')))]\", 'uri': \"[uri(parameters('_artifactslocation'), concat(parameters('installscriptactionfolder'), '/', parameters('installscriptaction'), parameters('_artifactslocationsastoken')))]\", 'roles': ['edgenode']}], 'sshendpoints': [{'location': \"[concat(variables('applicationname'),'.',parameters('clustername'),'-ssh.azurehdinsight.net')]\", 'destinationport': 22, 'publicport': 22}], 'applicationtype': 'customapplication'}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure VNet and an HDInsight Linux-based Hadoop cluster within the VNet\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2018-06-01-preview', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('defaultstorageaccount').name)]\", \"[resourceid('microsoft.network/virtualnetworks',variables('vnet').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(concat(reference(resourceid('microsoft.storage/storageaccounts/', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob),'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': 'standard_e4_v3'}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks',variables('vnet').name)]\", 'subnet': \"[variables('vnet').subnet]\"}}, {'name': 'workernode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': 'standard_e4_v3'}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid('microsoft.network/virtualnetworks',variables('vnet').name)]\", 'subnet': \"[variables('vnet').subnet]\"}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy a Kafka on HDInsight cluster in an Azure Virtual Network\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'apiversion': '2018-06-01-preview', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts',variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'clusterdefinition': {'kind': 'kafka', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(concat(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob),'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 4, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'datadisksgroups': [{'diskspernode': 2}], 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'zookeepernode', 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nCreates an HDInsight cluster with Load-based Autoscale Enabled. Your cluster will scale up and down based on cluster resource need\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'apiversion': '2021-06-01', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '4.0', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'spark', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').primaryendpoints.blob,'https://',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 3, 'autoscale': {'capacity': {'mininstancecount': 3, 'maxinstancecount': 10}}, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy an HDInsight cluster running Linux with R Server (with Azure Storage) with an SSH password\n\n===\n\n", "completion": " {'type': 'microsoft.hdinsight/clusters', 'apiversion': '2018-06-01-preview', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name)]\"], 'properties': {'clusterversion': '3.6', 'ostype': 'linux', 'tier': 'standard', 'clusterdefinition': {'kind': 'rserver', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}, 'rserver': {'rstudio': true}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(reference(variables('defaultstorageaccount').name).primaryendpoints.blob, 'https:', ''), '/' ,'')]\", 'isdefault': true, 'container': \"[parameters('clustername')]\", 'key': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('defaultstorageaccount').name), '2019-06-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'workernode', 'targetinstancecount': 4, 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'zookeepernode', 'mininstancecount': 1, 'targetinstancecount': 3, 'hardwareprofile': {'vmsize': \"[parameters('zookeepernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}, {'name': 'edgenode', 'mininstancecount': 1, 'targetinstancecount': 1, 'hardwareprofile': {'vmsize': \"[parameters('edgenodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}}]}}} END"}
{"prompt": "\n\n###\n\nDeploy an HDInsight cluster (running Linux) on an existing Hive metastore and virtual network. The SSH authentication method for the cluster is username / password.\n\n===\n\n", "completion": " {'name': \"[parameters('clustername')]\", 'type': 'microsoft.hdinsight/clusters', 'location': \"[parameters('location')]\", 'apiversion': '2021-06-01', 'properties': {'clusterversion': \"[parameters('clusterversion')]\", 'ostype': 'linux', 'clusterdefinition': {'kind': 'hadoop', 'configurations': {'gateway': {'restauthcredential.isenabled': true, 'restauthcredential.username': \"[parameters('clusterloginusername')]\", 'restauthcredential.password': \"[parameters('clusterloginpassword')]\"}, 'hive-site': {'javax.jdo.option.connectiondrivername': 'com.microsoft.sqlserver.jdbc.sqlserverdriver', 'javax.jdo.option.connectionurl': \"[concat('jdbc:sqlserver://', reference(resourceid(parameters('existinghivemetastoreserverresourcegroupname'), 'microsoft.sql/servers',parameters('existinghivemetastoreservername')), '2021-02-01-preview').fullyqualifieddomainname, ';database=',parameters('existinghivemetastoredatabasename'),';encrypt=true;trustservercertificate=true;create=false;logintimeout=300')]\", 'javax.jdo.option.connectionusername': \"[parameters('existinghivemetastoreusername')]\", 'javax.jdo.option.connectionpassword': \"[parameters('existinghivemetastorepassword')]\"}, 'hive-env': {'hive_database': 'existing mssql server database with sql authentication', 'hive_database_name': \"[parameters('existinghivemetastoredatabasename')]\", 'hive_database_type': 'mssql', 'hive_existing_mssql_server_database': \"[parameters('existinghivemetastoredatabasename')]\", 'hive_existing_mssql_server_host': \"[reference(resourceid(parameters('existinghivemetastoreserverresourcegroupname'),'microsoft.sql/servers',parameters('existinghivemetastoreservername')), '2021-02-01-preview').fullyqualifieddomainname]\", 'hive_hostname': \"[reference(resourceid(parameters('existinghivemetastoreserverresourcegroupname'),'microsoft.sql/servers',parameters('existinghivemetastoreservername')), '2021-02-01-preview').fullyqualifieddomainname]\"}}}, 'storageprofile': {'storageaccounts': [{'name': \"[replace(replace(concat(reference(resourceid(parameters('existingclusterstorageresourcegroup'), 'microsoft.storage/storageaccounts/', parameters('existingclusterstorageaccountname')), '2021-04-01').primaryendpoints.blob),'https:',''),'/','')]\", 'isdefault': true, 'container': \"[parameters('neworexistingclusterstoragecontainername')]\", 'key': \"[listkeys(resourceid(parameters('existingclusterstorageresourcegroup'), 'microsoft.storage/storageaccounts', parameters('existingclusterstorageaccountname')), '2021-04-01').keys[0].value]\"}]}, 'computeprofile': {'roles': [{'name': 'headnode', 'targetinstancecount': 2, 'hardwareprofile': {'vmsize': \"[parameters('headnodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks', parameters('existingvirtualnetworkname'))]\", 'subnet': \"[concat(resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks', parameters('existingvirtualnetworkname')), '/subnets/', parameters('existingvirtualnetworksubnetname'))]\"}}, {'name': 'workernode', 'targetinstancecount': \"[parameters('workernodecount')]\", 'hardwareprofile': {'vmsize': \"[parameters('workernodevirtualmachinesize')]\"}, 'osprofile': {'linuxoperatingsystemprofile': {'username': \"[parameters('sshusername')]\", 'password': \"[parameters('sshpassword')]\"}}, 'virtualnetworkprofile': {'id': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks', parameters('existingvirtualnetworkname'))]\", 'subnet': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('existingvirtualnetworkname'), parameters('existingvirtualnetworksubnetname'))]\"}}]}}} END"}
{"prompt": "\n\n###\n\nCreate a Logic App using a template.\n\n===\n\n", "completion": " {'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[parameters('logicappname')]\"}, 'properties': {'definition': {'$schema': \"[variables('workflowschema')]\", 'contentversion': '1.0.0.0', 'parameters': {'testuri': {'type': 'string', 'defaultvalue': \"[parameters('testuri')]\"}}, 'triggers': {'recurrence': {'type': \"[variables('type')]\", 'recurrence': {'frequency': \"[variables('frequency')]\", 'interval': \"[variables('interval')]\"}}}, 'actions': {'actiontype': {'type': \"[variables('actiontype')]\", 'inputs': {'method': \"[variables('method')]\", 'uri': \"[parameters('testuri')]\"}}}}}} END"}
{"prompt": "\n\n###\n\nCall an Azure Function from a Logic App\n\n===\n\n", "completion": " {'name': \"[parameters('logicappname')]\", 'type': 'microsoft.logic/workflows', 'location': \"[variables('logicapplocation')]\", 'apiversion': '2019-05-01', 'dependson': [\"[resourceid('microsoft.web/sites/sourcecontrols', parameters('functionappname'), 'web')]\"], 'tags': {'displayname': 'logicapp'}, 'properties': {'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'azure_function': {'type': 'function', 'inputs': {'body': '@triggerbody()', 'function': {'id': \"[resourceid('microsoft.web/sites/functions', parameters('functionappname'), variables('functionname'))]\"}}}, 'response': {'type': 'response', 'inputs': {'statuscode': 200, 'body': \"@body('azure_function')\"}, 'runafter': {'azure_function': ['succeeded']}}}, 'parameters': {}, 'triggers': {'request': {'type': 'request', 'kind': 'http', 'inputs': {}}}, 'contentversion': '1.0.0.0', 'outputs': {}}, 'parameters': {}}} END"}
{"prompt": "\n\n###\n\nCreates a request-response Logic Apps which perform XSLT based transformation using parameters.\n\n===\n\n", "completion": " {'properties': {}, 'sku': {'name': 'standard'}, 'name': \"[parameters('integrationaccountname')]\", 'type': 'microsoft.logic/integrationaccounts', 'location': \"[parameters('location')]\", 'apiversion': '2019-05-01'}{'properties': {'maptype': 'xslt', 'content': '<?xml version=\"1.0\" encoding=\"utf-16\"?><xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/xsl/transform\" xmlns:input=\"urn:my-input-variables\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:var=\"https://schemas.microsoft.com/biztalk/2003/var\" exclude-result-prefixes=\"msxsl var s0 usercsharp\" version=\"1.0\" xmlns:ns0=\"https://integration.destination\" xmlns:s0=\"https://integration.source\" xmlns:usercsharp=\"https://schemas.microsoft.com/biztalk/2003/usercsharp\"><xsl:import href=\"https://az818438.vo.msecnd.net/functoids/functoidsscript.xslt\" /><xsl:output omit-xml-declaration=\"yes\" method=\"xml\" version=\"1.0\" />  <xsl:param name=\"input:x\"></xsl:param><xsl:param name=\"input:y\"></xsl:param><xsl:template match=\"/\"><xsl:apply-templates select=\"/s0:root\" /></xsl:template><xsl:template match=\"/s0:root\"><ns0:root><sum><xsl:value-of select=\"usercsharp:mathadd($input:x, $input:y)\" /></sum><diff><xsl:value-of select=\"usercsharp:mathsubtract($input:x, $input:y)\" /></diff><product><xsl:value-of select=\"usercsharp:mathmultiply($input:x, $input:y)\" /></product><division><xsl:value-of select=\"usercsharp:mathdivide($input:x, $input:y)\" /></division></ns0:root></xsl:template></xsl:stylesheet>', 'contenttype': 'application/xml'}, 'name': \"[concat(parameters('integrationaccountname'), '/map-with-params')]\", 'type': 'microsoft.logic/integrationaccounts/maps', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('integrationaccountname')]\"]}{'name': \"[parameters('logicappname')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'logicapp'}, 'apiversion': '2016-06-01', 'properties': {'state': 'enabled', 'integrationaccount': {'id': \"[resourceid('microsoft.logic/integrationaccounts', parameters('integrationaccountname'))]\"}, 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'response': {'inputs': {'body': \"@body('transform_xml')\", 'statuscode': 200}, 'runafter': {'transform_xml': ['succeeded']}, 'type': 'response'}, 'transform_xml': {'inputs': {'content': '@{triggerbody()}', 'integrationaccount': {'map': {'name': 'map-with-params'}}, 'xsltparameters': {'input:x': '20', 'input:y': '10'}}, 'type': 'xslt'}}, 'contentversion': '1.0.0.0', 'outputs': {}, 'parameters': {}, 'triggers': {'manual': {'inputs': {}, 'kind': 'http', 'type': 'request'}}}}, 'dependson': [\"[parameters('integrationaccountname')]\"]} END"}
{"prompt": "\n\n###\n\nCreate unbounded Logic Apps timer jobs\n\n===\n\n", "completion": " {'name': \"[parameters('createtimerjoblogicappname')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'logicapp'}, 'apiversion': '2019-05-01', 'dependson': [\"[resourceid('microsoft.logic/workflows', parameters('timerjoblogicappname'))]\"], 'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'triggers': {'manual': {'correlation': {'clienttrackingid': \"@triggerbody()['timerjobid']\"}, 'type': 'request', 'kind': 'http', 'inputs': {'schema': {'properties': {'jobrecurrence': {'properties': {'count': {'minimum': -1, 'title': 'count (jobrecurrence)', 'type': 'integer'}, 'endtime': {'title': 'endtime (jobrecurrence)', 'type': 'string'}, 'frequency': {'enum': ['second', 'minute', 'hour', 'day', 'week', 'month'], 'title': 'frequency (jobrecurrence)', 'type': 'string'}, 'interval': {'title': 'interval (jobrecurrence)', 'type': 'integer'}}, 'required': ['frequency', 'interval'], 'type': 'object'}, 'jobstatus': {'properties': {'executioncount': {'title': 'executioncount (jobstatus)', 'type': 'integer'}, 'faultedcount': {'title': 'faultedcount (jobstatus)', 'type': 'integer'}, 'lastexecutiontime': {'title': 'lastexecutiontime (jobstatus)', 'type': 'string'}, 'nextexecutiontime': {'title': 'nextexecutiontime (jobstatus)', 'type': 'string'}}, 'type': 'object'}, 'starttime': {'type': 'string'}, 'timerjobid': {'type': 'string'}}, 'required': ['jobrecurrence', 'timerjobid'], 'type': 'object'}}}}, 'actions': {'if_not_past_endtime_or_exceeds_count': {'actions': {'catch_timerjob_error': {'actions': {'terminate_failed_to_create_job': {'runafter': {'timer_job_failed_response': ['succeeded']}, 'type': 'terminate', 'inputs': {'runerror': {'message': 'failed to create timer job'}, 'runstatus': 'failed'}}, 'timer_job_failed_response': {'type': 'response', 'kind': 'http', 'inputs': {'body': 'failed to create timer job', 'statuscode': 400}}}, 'runafter': {'timerjob': ['failed', 'timedout']}, 'type': 'scope'}, 'created_response': {'runafter': {'timerjob': ['succeeded']}, 'type': 'response', 'kind': 'http', 'inputs': {'body': \"next execution time will be at @{variables('nexttime')}\", 'statuscode': 201}}, 'timerjob': {'type': 'workflow', 'inputs': {'body': {'jobrecurrence': {'count': \"@triggerbody()?['jobrecurrence']?['count']\", 'endtime': \"@triggerbody()?['jobrecurrence']?['endtime']\", 'frequency': \"@triggerbody()?['jobrecurrence']?['frequency']\", 'interval': \"@triggerbody()?['jobrecurrence']?['interval']\"}, 'jobstatus': {'executioncount': \"@triggerbody()?['jobstatus']?['executioncount']\", 'faultedcount': \"@triggerbody()?['jobstatus']?['faultedcount']\", 'lastexecutiontime': \"@triggerbody()?['jobstatus']?['lastexecutiontime']\", 'nextexecutiontime': \"@variables('nexttime')\"}, 'starttime': \"@triggerbody()?['starttime']\", 'timerjobid': \"@triggerbody()['timerjobid']\"}, 'host': {'triggername': 'manual', 'workflow': {'id': \"[resourceid('microsoft.logic/workflows',parameters('timerjoblogicappname'))]\"}}}}}, 'runafter': {'initialize_nexttime': ['succeeded']}, 'else': {'actions': {'cancelled': {'runafter': {'exceeded_criteria_response': ['succeeded']}, 'type': 'terminate', 'inputs': {'runstatus': 'cancelled'}}, 'exceeded_criteria_response': {'type': 'response', 'kind': 'http', 'inputs': {'body': \"job completion criteria met.\\ndetails: \\neither\\nendtime(@{triggerbody()?['jobrecurrence']?['endtime']}) < next execution time(@{variables('nexttime')})\\nor\\ncount(@{triggerbody()?['jobrecurrence']?['count']}) > execution count (@{triggerbody()?['jobstatus']?['executioncount']})\", 'statuscode': 409}}}}, 'expression': {'and': [{'or': [{'equals': [\"@coalesce(triggerbody()?['jobrecurrence']?['endtime'],-1)\", -1]}, {'less': [\"@variables('nexttime')\", \"@{triggerbody()?['jobrecurrence']?['endtime']}\"]}]}, {'or': [{'equals': [\"@coalesce(triggerbody()?['jobrecurrence']?['count'],-1)\", -1]}, {'greater': [\"@coalesce(triggerbody()?['jobrecurrence']?['count'],1)\", \"@coalesce(triggerbody()?['jobstatus']?['executioncount'],0)\"]}]}]}, 'type': 'if'}, 'initialize_nexttime': {'runafter': {'initialize_starttime': ['succeeded']}, 'type': 'initializevariable', 'inputs': {'variables': [{'name': 'nexttime', 'type': 'string', 'value': \"@{addtotime(coalesce(triggerbody()?['jobstatus']?['lastexecutiontime'],variables('starttime')),triggerbody()['jobrecurrence']['interval'],triggerbody()['jobrecurrence']['frequency'])}\"}]}}, 'initialize_starttime': {'type': 'initializevariable', 'inputs': {'variables': [{'name': 'starttime', 'type': 'string', 'value': \"@{if(less(coalesce(triggerbody()?['starttime'],utcnow()),utcnow()),utcnow(),coalesce(triggerbody()?['starttime'],utcnow()))}\"}]}}}}}}{'name': \"[parameters('timerjoblogicappname')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'logicapp'}, 'apiversion': '2019-05-01', 'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'triggers': {'manual': {'correlation': {'clienttrackingid': \"@triggerbody()['timerjobid']\"}, 'type': 'request', 'kind': 'http', 'inputs': {'schema': {'properties': {'jobrecurrence': {'properties': {'count': {'minimum': -1, 'title': 'count (jobrecurrence)', 'type': 'integer'}, 'endtime': {'title': 'endtime (jobrecurrence)', 'type': 'string'}, 'frequency': {'enum': ['second', 'minute', 'hour', 'day', 'week', 'month'], 'title': 'frequency (jobrecurrence)', 'type': 'string'}, 'interval': {'title': 'interval (jobrecurrence)', 'type': 'integer'}}, 'required': ['frequency', 'interval'], 'type': 'object'}, 'jobstatus': {'properties': {'executioncount': {'title': 'executioncount (jobstatus)', 'type': 'integer'}, 'faultedcount': {'title': 'faultedcount (jobstatus)', 'type': 'integer'}, 'lastexecutiontime': {'title': 'lastexecutiontime (jobstatus)', 'type': 'string'}, 'nextexecutiontime': {'title': 'nextexecutiontime (jobstatus)', 'type': 'string'}}, 'required': ['nextexecutiontime'], 'type': 'object'}, 'starttime': {'type': 'string'}, 'timerjobid': {'type': 'string'}}, 'required': ['timerjobid', 'jobrecurrence', 'jobstatus'], 'type': 'object'}}}}}}} END"}
{"prompt": "\n\n###\n\nSend email with Logic app\n\n===\n\n", "completion": " {'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/connections', parameters('sendgridname'))]\"], 'properties': {'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'manual': {'type': 'request', 'kind': 'http', 'inputs': {'schema': {'$schema': 'http://json-schema.org/draft-04/schema#', 'properties': {'emailbody': {'type': 'string'}, 'from': {'type': 'string'}, 'subject': {'type': 'string'}, 'to': {'type': 'string'}}, 'required': ['from', 'to', 'subject', 'emailbody'], 'type': 'object'}}}}, 'actions': {'send_email': {'type': 'apiconnection', 'inputs': {'body': {'body': \"@{triggerbody()['emailbody']}\", 'from': \"@{triggerbody()['from']}\", 'ishtml': false, 'subject': \"@{triggerbody()['subject']}\", 'to': \"@{triggerbody()['to']}\"}, 'host': {'connection': {'name': \"@parameters('$connections')['sendgrid']['connectionid']\"}}, 'method': 'post', 'path': '/api/mail.send.json'}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'sendgrid': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'sendgrid')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('sendgridname'))]\"}}}}}} END"}
{"prompt": "\n\n###\n\nDemonstrates AS2 Send Receive scenario using Azure Logic Apps\n\n===\n\n", "completion": " {'properties': {}, 'sku': {'name': 'standard'}, 'tags': {'displayname': 'contoso integration account'}, 'name': \"[parameters('contosointegrationaccountname')]\", 'type': 'microsoft.logic/integrationaccounts', 'location': \"[parameters('location')]\", 'apiversion': '2019-05-01'}{'properties': {}, 'sku': {'name': 'standard'}, 'tags': {'displayname': 'fabrikam integration account'}, 'name': \"[parameters('fabrikamintegrationaccountname')]\", 'type': 'microsoft.logic/integrationaccounts', 'location': \"[parameters('location')]\", 'apiversion': '2019-05-01'}{'properties': {'partnertype': 'b2b', 'content': {'b2b': {'businessidentities': [{'qualifier': 'zz', 'value': '99'}, {'qualifier': 'as2identity', 'value': 'contoso'}]}}}, 'name': \"[concat(parameters('contosointegrationaccountname'), '/contoso')]\", 'type': 'microsoft.logic/integrationaccounts/partners', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('contosointegrationaccountname')]\"]}{'properties': {'partnertype': 'b2b', 'content': {'b2b': {'businessidentities': [{'qualifier': 'zz', 'value': '99'}, {'qualifier': 'as2identity', 'value': 'contoso'}]}}}, 'name': \"[concat(parameters('fabrikamintegrationaccountname'), '/contoso')]\", 'type': 'microsoft.logic/integrationaccounts/partners', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('fabrikamintegrationaccountname')]\"]}{'properties': {'partnertype': 'b2b', 'content': {'b2b': {'businessidentities': [{'qualifier': 'zz', 'value': '98'}, {'qualifier': 'as2identity', 'value': 'fabrikamsales'}]}}}, 'name': \"[concat(parameters('contosointegrationaccountname'), '/fabrikamsales')]\", 'type': 'microsoft.logic/integrationaccounts/partners', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('contosointegrationaccountname')]\"]}{'properties': {'partnertype': 'b2b', 'content': {'b2b': {'businessidentities': [{'qualifier': 'zz', 'value': '98'}, {'qualifier': 'as2identity', 'value': 'fabrikamsales'}]}}}, 'name': \"[concat(parameters('fabrikamintegrationaccountname'), '/fabrikamsales')]\", 'type': 'microsoft.logic/integrationaccounts/partners', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('fabrikamintegrationaccountname')]\"]}{'properties': {'partnertype': 'b2b', 'content': {'b2b': {'businessidentities': [{'qualifier': 'zz', 'value': '97'}, {'qualifier': 'as2identity', 'value': 'fabrikamfinance'}]}}}, 'name': \"[concat(parameters('contosointegrationaccountname'), '/fabrikamfinance')]\", 'type': 'microsoft.logic/integrationaccounts/partners', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('contosointegrationaccountname')]\"]}{'properties': {'partnertype': 'b2b', 'content': {'b2b': {'businessidentities': [{'qualifier': 'zz', 'value': '97'}, {'qualifier': 'as2identity', 'value': 'fabrikamfinance'}]}}}, 'name': \"[concat(parameters('fabrikamintegrationaccountname'), '/fabrikamfinance')]\", 'type': 'microsoft.logic/integrationaccounts/partners', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('fabrikamintegrationaccountname')]\"]}{'properties': {'hostpartner': 'contoso', 'guestpartner': 'fabrikamsales', 'hostidentity': {'qualifier': 'as2identity', 'value': 'contoso'}, 'guestidentity': {'qualifier': 'as2identity', 'value': 'fabrikamsales'}, 'agreementtype': 'as2', 'content': {'as2': {'receiveagreement': {'protocolsettings': {'messageconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': true, 'keephttpconnectionalive': true, 'unfoldhttpheaders': true}, 'acknowledgementconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': false, 'keephttpconnectionalive': false, 'unfoldhttpheaders': false}, 'mdnsettings': {'needmdn': false, 'signmdn': false, 'sendmdnasynchronously': false, 'dispositionnotificationto': 'http://localhost', 'signoutboundmdnifoptional': false, 'sendinboundmdntomessagebox': true, 'michashingalgorithm': 'sha2256'}, 'securitysettings': {'overridegroupsigningcertificate': false, 'enablenrrforinboundencodedmessages': false, 'enablenrrforinbounddecodedmessages': false, 'enablenrrforoutboundmdn': false, 'enablenrrforoutboundencodedmessages': false, 'enablenrrforoutbounddecodedmessages': false, 'enablenrrforinboundmdn': false}, 'validationsettings': {'overridemessageproperties': false, 'encryptmessage': false, 'signmessage': false, 'compressmessage': false, 'checkduplicatemessage': false, 'interchangeduplicatesvaliditydays': 5, 'checkcertificaterevocationlistonsend': false, 'checkcertificaterevocationlistonreceive': false, 'encryptionalgorithm': 'des3'}, 'envelopesettings': {'messagecontenttype': 'text/plain', 'transmitfilenameinmimeheader': false, 'filenametemplate': '%file().receivedfilename%', 'suspendmessageonfilenamegenerationerror': true, 'autogeneratefilename': false}, 'errorsettings': {'suspendduplicatemessage': false, 'resendifmdnnotreceived': false}}, 'senderbusinessidentity': {'qualifier': 'as2identity', 'value': 'fabrikamsales'}, 'receiverbusinessidentity': {'qualifier': 'as2identity', 'value': 'contoso'}}, 'sendagreement': {'protocolsettings': {'messageconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': true, 'keephttpconnectionalive': true, 'unfoldhttpheaders': true}, 'acknowledgementconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': false, 'keephttpconnectionalive': false, 'unfoldhttpheaders': false}, 'mdnsettings': {'needmdn': false, 'signmdn': false, 'sendmdnasynchronously': false, 'dispositionnotificationto': 'http://localhost', 'signoutboundmdnifoptional': false, 'sendinboundmdntomessagebox': true, 'michashingalgorithm': 'sha2256'}, 'securitysettings': {'overridegroupsigningcertificate': false, 'enablenrrforinboundencodedmessages': false, 'enablenrrforinbounddecodedmessages': false, 'enablenrrforoutboundmdn': false, 'enablenrrforoutboundencodedmessages': false, 'enablenrrforoutbounddecodedmessages': false, 'enablenrrforinboundmdn': false}, 'validationsettings': {'overridemessageproperties': false, 'encryptmessage': false, 'signmessage': false, 'compressmessage': false, 'checkduplicatemessage': false, 'interchangeduplicatesvaliditydays': 5, 'checkcertificaterevocationlistonsend': false, 'checkcertificaterevocationlistonreceive': false, 'encryptionalgorithm': 'des3'}, 'envelopesettings': {'messagecontenttype': 'text/plain', 'transmitfilenameinmimeheader': false, 'filenametemplate': '%file().receivedfilename%', 'suspendmessageonfilenamegenerationerror': true, 'autogeneratefilename': false}, 'errorsettings': {'suspendduplicatemessage': false, 'resendifmdnnotreceived': false}}, 'senderbusinessidentity': {'qualifier': 'as2identity', 'value': 'contoso'}, 'receiverbusinessidentity': {'qualifier': 'as2identity', 'value': 'fabrikamsales'}}}}}, 'name': \"[concat(parameters('contosointegrationaccountname'), '/contoso-fabrikamsales')]\", 'type': 'microsoft.logic/integrationaccounts/agreements', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('contosointegrationaccountname')]\"]}{'properties': {'hostpartner': 'fabrikamsales', 'guestpartner': 'contoso', 'hostidentity': {'qualifier': 'as2identity', 'value': 'fabrikamsales'}, 'guestidentity': {'qualifier': 'as2identity', 'value': 'contoso'}, 'agreementtype': 'as2', 'content': {'as2': {'receiveagreement': {'protocolsettings': {'messageconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': true, 'keephttpconnectionalive': true, 'unfoldhttpheaders': true}, 'acknowledgementconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': false, 'keephttpconnectionalive': false, 'unfoldhttpheaders': false}, 'mdnsettings': {'needmdn': false, 'signmdn': false, 'sendmdnasynchronously': false, 'dispositionnotificationto': 'http://localhost', 'signoutboundmdnifoptional': false, 'sendinboundmdntomessagebox': true, 'michashingalgorithm': 'sha2256'}, 'securitysettings': {'overridegroupsigningcertificate': false, 'enablenrrforinboundencodedmessages': false, 'enablenrrforinbounddecodedmessages': false, 'enablenrrforoutboundmdn': false, 'enablenrrforoutboundencodedmessages': false, 'enablenrrforoutbounddecodedmessages': false, 'enablenrrforinboundmdn': false}, 'validationsettings': {'overridemessageproperties': false, 'encryptmessage': false, 'signmessage': false, 'compressmessage': false, 'checkduplicatemessage': false, 'interchangeduplicatesvaliditydays': 5, 'checkcertificaterevocationlistonsend': false, 'checkcertificaterevocationlistonreceive': false, 'encryptionalgorithm': 'des3'}, 'envelopesettings': {'messagecontenttype': 'text/plain', 'transmitfilenameinmimeheader': false, 'filenametemplate': '%file().receivedfilename%', 'suspendmessageonfilenamegenerationerror': true, 'autogeneratefilename': false}, 'errorsettings': {'suspendduplicatemessage': false, 'resendifmdnnotreceived': false}}, 'senderbusinessidentity': {'qualifier': 'as2identity', 'value': 'contoso'}, 'receiverbusinessidentity': {'qualifier': 'as2identity', 'value': 'fabrikamsales'}}, 'sendagreement': {'protocolsettings': {'messageconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': true, 'keephttpconnectionalive': true, 'unfoldhttpheaders': true}, 'acknowledgementconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': false, 'keephttpconnectionalive': false, 'unfoldhttpheaders': false}, 'mdnsettings': {'needmdn': true, 'signmdn': false, 'sendmdnasynchronously': false, 'dispositionnotificationto': 'http://localhost', 'signoutboundmdnifoptional': false, 'sendinboundmdntomessagebox': true, 'michashingalgorithm': 'sha2256'}, 'securitysettings': {'overridegroupsigningcertificate': false, 'enablenrrforinboundencodedmessages': false, 'enablenrrforinbounddecodedmessages': false, 'enablenrrforoutboundmdn': false, 'enablenrrforoutboundencodedmessages': false, 'enablenrrforoutbounddecodedmessages': false, 'enablenrrforinboundmdn': false}, 'validationsettings': {'overridemessageproperties': false, 'encryptmessage': false, 'signmessage': false, 'compressmessage': false, 'checkduplicatemessage': false, 'interchangeduplicatesvaliditydays': 5, 'checkcertificaterevocationlistonsend': false, 'checkcertificaterevocationlistonreceive': false, 'encryptionalgorithm': 'des3'}, 'envelopesettings': {'messagecontenttype': 'text/plain', 'transmitfilenameinmimeheader': false, 'filenametemplate': '%file().receivedfilename%', 'suspendmessageonfilenamegenerationerror': true, 'autogeneratefilename': false}, 'errorsettings': {'suspendduplicatemessage': false, 'resendifmdnnotreceived': false}}, 'senderbusinessidentity': {'qualifier': 'as2identity', 'value': 'fabrikamsales'}, 'receiverbusinessidentity': {'qualifier': 'as2identity', 'value': 'contoso'}}}}}, 'name': \"[concat(parameters('fabrikamintegrationaccountname'), '/fabrikamsales-contoso')]\", 'type': 'microsoft.logic/integrationaccounts/agreements', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('fabrikamintegrationaccountname')]\"]}{'properties': {'hostpartner': 'contoso', 'guestpartner': 'fabrikamfinance', 'hostidentity': {'qualifier': 'as2identity', 'value': 'contoso'}, 'guestidentity': {'qualifier': 'as2identity', 'value': 'fabrikamfinance'}, 'agreementtype': 'as2', 'content': {'as2': {'receiveagreement': {'protocolsettings': {'messageconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': true, 'keephttpconnectionalive': true, 'unfoldhttpheaders': true}, 'acknowledgementconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': false, 'keephttpconnectionalive': false, 'unfoldhttpheaders': false}, 'mdnsettings': {'needmdn': false, 'signmdn': false, 'sendmdnasynchronously': false, 'dispositionnotificationto': 'http://localhost', 'signoutboundmdnifoptional': false, 'sendinboundmdntomessagebox': true, 'michashingalgorithm': 'sha2256'}, 'securitysettings': {'overridegroupsigningcertificate': false, 'enablenrrforinboundencodedmessages': false, 'enablenrrforinbounddecodedmessages': false, 'enablenrrforoutboundmdn': false, 'enablenrrforoutboundencodedmessages': false, 'enablenrrforoutbounddecodedmessages': false, 'enablenrrforinboundmdn': false}, 'validationsettings': {'overridemessageproperties': false, 'encryptmessage': false, 'signmessage': false, 'compressmessage': false, 'checkduplicatemessage': false, 'interchangeduplicatesvaliditydays': 5, 'checkcertificaterevocationlistonsend': false, 'checkcertificaterevocationlistonreceive': false, 'encryptionalgorithm': 'des3'}, 'envelopesettings': {'messagecontenttype': 'text/plain', 'transmitfilenameinmimeheader': false, 'filenametemplate': '%file().receivedfilename%', 'suspendmessageonfilenamegenerationerror': true, 'autogeneratefilename': false}, 'errorsettings': {'suspendduplicatemessage': false, 'resendifmdnnotreceived': false}}, 'senderbusinessidentity': {'qualifier': 'as2identity', 'value': 'fabrikamfinance'}, 'receiverbusinessidentity': {'qualifier': 'as2identity', 'value': 'contoso'}}, 'sendagreement': {'protocolsettings': {'messageconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': true, 'keephttpconnectionalive': true, 'unfoldhttpheaders': true}, 'acknowledgementconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': false, 'keephttpconnectionalive': false, 'unfoldhttpheaders': false}, 'mdnsettings': {'needmdn': false, 'signmdn': false, 'sendmdnasynchronously': false, 'dispositionnotificationto': 'http://localhost', 'signoutboundmdnifoptional': false, 'sendinboundmdntomessagebox': true, 'michashingalgorithm': 'sha2256'}, 'securitysettings': {'overridegroupsigningcertificate': false, 'enablenrrforinboundencodedmessages': false, 'enablenrrforinbounddecodedmessages': false, 'enablenrrforoutboundmdn': false, 'enablenrrforoutboundencodedmessages': false, 'enablenrrforoutbounddecodedmessages': false, 'enablenrrforinboundmdn': false}, 'validationsettings': {'overridemessageproperties': false, 'encryptmessage': false, 'signmessage': false, 'compressmessage': false, 'checkduplicatemessage': false, 'interchangeduplicatesvaliditydays': 5, 'checkcertificaterevocationlistonsend': false, 'checkcertificaterevocationlistonreceive': false, 'encryptionalgorithm': 'des3'}, 'envelopesettings': {'messagecontenttype': 'text/plain', 'transmitfilenameinmimeheader': false, 'filenametemplate': '%file().receivedfilename%', 'suspendmessageonfilenamegenerationerror': true, 'autogeneratefilename': false}, 'errorsettings': {'suspendduplicatemessage': false, 'resendifmdnnotreceived': false}}, 'senderbusinessidentity': {'qualifier': 'as2identity', 'value': 'contoso'}, 'receiverbusinessidentity': {'qualifier': 'as2identity', 'value': 'fabrikamfinance'}}}}}, 'name': \"[concat(parameters('contosointegrationaccountname'), '/contoso-fabrikamfinance')]\", 'type': 'microsoft.logic/integrationaccounts/agreements', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('contosointegrationaccountname')]\"]}{'name': \"[parameters('contosoas2receivelogicappname')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'contoso as2 receive'}, 'apiversion': '2019-05-01', 'properties': {'state': 'enabled', 'integrationaccount': {'id': \"[resourceid('microsoft.logic/integrationaccounts', parameters('contosointegrationaccountname'))]\"}, 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'check_mdn_expected': {'type': 'if', 'expression': \"@equals(body('decode_as2_message')?['as2message']?['mdnexpected'], 'expected')\", 'actions': {'check_mdn_type': {'type': 'if', 'expression': \"@equals(body('decode_as2_message')?['outgoingmdn']?['mdntype'], 'async')\", 'actions': {'send_200_ok_for_async_mdn': {'type': 'response', 'inputs': {'statuscode': 200}}, 'send_async_mdn': {'type': 'http', 'inputs': {'method': 'post', 'uri': \"@{body('decode_as2_message')?['outgoingmdn']?['receiptdeliveryoption']}\", 'headers': \"@body('decode_as2_message')?['outgoingmdn']?['outboundheaders']\", 'body': \"@base64tobinary(body('decode_as2_message')?['outgoingmdn']?['content'])\"}, 'runafter': {'send_200_ok_for_async_mdn': ['succeeded']}}}, 'else': {'actions': {'send_sync_mdn': {'type': 'response', 'inputs': {'statuscode': 200, 'headers': \"@body('decode_as2_message')?['outgoingmdn']?['outboundheaders']\", 'body': \"@base64tobinary(body('decode_as2_message')?['outgoingmdn']?['content'])\"}}}}}}, 'runafter': {'decode_as2_message': ['succeeded']}, 'else': {'actions': {'send_200_ok': {'type': 'response', 'inputs': {'statuscode': 200}}}}}, 'decode_as2_message': {'type': 'apiconnection', 'inputs': {'host': {'api': {'runtimeurl': \"[concat('https://logic-apis-', parameters('location'), '.azure-apim.net/apim/as2')]\"}, 'connection': {'name': \"@parameters('$connections')['as2']['connectionid']\"}}, 'method': 'post', 'body': '@triggerbody()', 'path': '/decode', 'headers': \"@triggeroutputs()['headers']\"}}}, 'parameters': {'$connections': {'type': 'object'}}, 'triggers': {'manual': {'type': 'request', 'kind': 'http'}}, 'contentversion': '1.0.0.0'}, 'parameters': {'$connections': {'value': {'as2': {'id': \"[variables('as2id')]\", 'connectionid': \"[concat(resourcegroup().id, '/providers/microsoft.web/connections/', parameters('contoso_as2_connection_name'))]\", 'connectionname': \"[parameters('contoso_as2_connection_name')]\"}}}}}, 'dependson': [\"[parameters('contosointegrationaccountname')]\", \"[resourceid('microsoft.web/connections', parameters('contoso_as2_connection_name'))]\"]}{'name': \"[parameters('fabrikamsalesas2sendlogicappname')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'fabrikam sales as2 send'}, 'apiversion': '2019-05-01', 'properties': {'state': 'enabled', 'integrationaccount': {'id': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\"}, 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'http': {'inputs': {'method': 'post', 'uri': \"[listcallbackurl(resourceid('microsoft.logic/workflows', parameters('contosoas2receivelogicappname')), '2019-05-01').value]\", 'headers': {'as2-from': 'fabrikamsales', 'as2-to': 'contoso', 'message-id': '@guid()', 'content-type': 'text/plain'}, 'body': 'fabrikam sales - sample message'}, 'type': 'http'}}, 'parameters': {'$connections': {'type': 'object'}}, 'triggers': {'recurrence': {'recurrence': {'frequency': 'hour', 'interval': 1}, 'type': 'recurrence'}}, 'contentversion': '1.0.0.0'}, 'parameters': {'$connections': {'value': {'as2': {'id': \"[variables('as2id')]\", 'connectionid': \"[concat(resourcegroup().id, '/providers/microsoft.web/connections/', parameters('fabrikam_as2_connection_name'))]\", 'connectionname': \"[parameters('fabrikam_as2_connection_name')]\"}}}}}, 'dependson': [\"[parameters('fabrikamintegrationaccountname')]\", \"[resourceid('microsoft.web/connections', parameters('fabrikam_as2_connection_name'))]\", \"[parameters('contosoas2receivelogicappname')]\"]}{'name': \"[parameters('fabrikamfinanceas2sendlogicappname')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'fabrikam finance as2 send'}, 'apiversion': '2019-05-01', 'properties': {'state': 'enabled', 'integrationaccount': {'id': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\"}, 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'encode_to_as2_message': {'inputs': {'body': 'fabrikam finance - sample message', 'host': {'api': {'runtimeurl': \"[concat('https://logic-apis-', parameters('location'), '.azure-apim.net/apim/as2')]\"}, 'connection': {'name': \"@parameters('$connections')['as2']['connectionid']\"}}, 'method': 'post', 'path': '/encode', 'queries': {'as2from': 'fabrikamfinance', 'as2to': 'contoso'}}, 'type': 'apiconnection'}, 'http': {'inputs': {'body': \"@base64tobinary(body('encode_to_as2_message')?['as2message']?['content'])\", 'headers': \"@body('encode_to_as2_message')?['as2message']?['outboundheaders']\", 'method': 'post', 'uri': \"[listcallbackurl(resourceid('microsoft.logic/workflows', parameters('contosoas2receivelogicappname')), '2019-05-01').value]\"}, 'runafter': {'encode_to_as2_message': ['succeeded']}, 'type': 'http'}}, 'parameters': {'$connections': {'type': 'object'}}, 'triggers': {'recurrence': {'recurrence': {'frequency': 'hour', 'interval': 1}, 'type': 'recurrence'}}, 'contentversion': '1.0.0.0'}, 'parameters': {'$connections': {'value': {'as2': {'id': \"[variables('as2id')]\", 'connectionid': \"[concat(resourcegroup().id, '/providers/microsoft.web/connections/', parameters('fabrikam_as2_connection_name'))]\", 'connectionname': \"[parameters('fabrikam_as2_connection_name')]\"}}}}}, 'dependson': [\"[parameters('fabrikamintegrationaccountname')]\", \"[resourceid('microsoft.web/connections', parameters('fabrikam_as2_connection_name'))]\", \"[parameters('contosoas2receivelogicappname')]\"]}{'name': \"[parameters('fabrikamfinanceas2receivemdnlogicappname')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'fabrikam finance as2 receive mdn'}, 'apiversion': '2019-05-01', 'properties': {'state': 'enabled', 'integrationaccount': {'id': \"[resourceid('microsoft.logic/integrationaccounts', parameters('fabrikamintegrationaccountname'))]\"}, 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'decode_as2_message': {'type': 'apiconnection', 'inputs': {'host': {'api': {'runtimeurl': \"[concat('https://logic-apis-', parameters('location'), '.azure-apim.net/apim/as2')]\"}, 'connection': {'name': \"@parameters('$connections')['as2']['connectionid']\"}}, 'method': 'post', 'body': '@triggerbody()', 'path': '/decode', 'headers': \"@triggeroutputs()['headers']\"}}, 'response': {'inputs': {'statuscode': 200}, 'runafter': {'decode_as2_message': ['succeeded']}, 'type': 'response'}}, 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'manual': {'type': 'request', 'kind': 'http'}}, 'contentversion': '1.0.0.0'}, 'parameters': {'$connections': {'value': {'as2': {'id': \"[variables('as2id')]\", 'connectionid': \"[concat(resourcegroup().id, '/providers/microsoft.web/connections/', parameters('fabrikam_as2_connection_name'))]\", 'connectionname': \"[parameters('fabrikam_as2_connection_name')]\"}}}}}, 'dependson': [\"[parameters('fabrikamintegrationaccountname')]\", \"[resourceid('microsoft.web/connections', parameters('fabrikam_as2_connection_name'))]\", \"[parameters('contosoas2receivelogicappname')]\"]}{'properties': {'hostpartner': 'fabrikamfinance', 'guestpartner': 'contoso', 'hostidentity': {'qualifier': 'as2identity', 'value': 'fabrikamfinance'}, 'guestidentity': {'qualifier': 'as2identity', 'value': 'contoso'}, 'agreementtype': 'as2', 'content': {'as2': {'receiveagreement': {'protocolsettings': {'messageconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': true, 'keephttpconnectionalive': true, 'unfoldhttpheaders': true}, 'acknowledgementconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': false, 'keephttpconnectionalive': false, 'unfoldhttpheaders': false}, 'mdnsettings': {'needmdn': false, 'signmdn': false, 'sendmdnasynchronously': false, 'dispositionnotificationto': 'http://localhost', 'signoutboundmdnifoptional': false, 'sendinboundmdntomessagebox': true, 'michashingalgorithm': 'sha2256'}, 'securitysettings': {'overridegroupsigningcertificate': false, 'enablenrrforinboundencodedmessages': false, 'enablenrrforinbounddecodedmessages': false, 'enablenrrforoutboundmdn': false, 'enablenrrforoutboundencodedmessages': false, 'enablenrrforoutbounddecodedmessages': false, 'enablenrrforinboundmdn': false}, 'validationsettings': {'overridemessageproperties': false, 'encryptmessage': false, 'signmessage': false, 'compressmessage': false, 'checkduplicatemessage': false, 'interchangeduplicatesvaliditydays': 5, 'checkcertificaterevocationlistonsend': false, 'checkcertificaterevocationlistonreceive': false, 'encryptionalgorithm': 'des3'}, 'envelopesettings': {'messagecontenttype': 'text/plain', 'transmitfilenameinmimeheader': false, 'filenametemplate': '%file().receivedfilename%', 'suspendmessageonfilenamegenerationerror': true, 'autogeneratefilename': false}, 'errorsettings': {'suspendduplicatemessage': false, 'resendifmdnnotreceived': false}}, 'senderbusinessidentity': {'qualifier': 'as2identity', 'value': 'contoso'}, 'receiverbusinessidentity': {'qualifier': 'as2identity', 'value': 'fabrikamfinance'}}, 'sendagreement': {'protocolsettings': {'messageconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': true, 'keephttpconnectionalive': true, 'unfoldhttpheaders': true}, 'acknowledgementconnectionsettings': {'ignorecertificatenamemismatch': false, 'supporthttpstatuscodecontinue': false, 'keephttpconnectionalive': false, 'unfoldhttpheaders': false}, 'mdnsettings': {'needmdn': true, 'signmdn': false, 'sendmdnasynchronously': true, 'receiptdeliveryurl': \"[listcallbackurl(resourceid('microsoft.logic/workflows', parameters('fabrikamfinanceas2receivemdnlogicappname')), '2019-05-01').value]\", 'dispositionnotificationto': 'http://localhost', 'signoutboundmdnifoptional': false, 'sendinboundmdntomessagebox': true, 'michashingalgorithm': 'sha2256'}, 'securitysettings': {'overridegroupsigningcertificate': false, 'enablenrrforinboundencodedmessages': false, 'enablenrrforinbounddecodedmessages': false, 'enablenrrforoutboundmdn': false, 'enablenrrforoutboundencodedmessages': false, 'enablenrrforoutbounddecodedmessages': false, 'enablenrrforinboundmdn': false}, 'validationsettings': {'overridemessageproperties': false, 'encryptmessage': false, 'signmessage': false, 'compressmessage': false, 'checkduplicatemessage': false, 'interchangeduplicatesvaliditydays': 5, 'checkcertificaterevocationlistonsend': false, 'checkcertificaterevocationlistonreceive': false, 'encryptionalgorithm': 'des3'}, 'envelopesettings': {'messagecontenttype': 'text/plain', 'transmitfilenameinmimeheader': false, 'filenametemplate': '%file().receivedfilename%', 'suspendmessageonfilenamegenerationerror': true, 'autogeneratefilename': false}, 'errorsettings': {'suspendduplicatemessage': false, 'resendifmdnnotreceived': false}}, 'senderbusinessidentity': {'qualifier': 'as2identity', 'value': 'fabrikamfinance'}, 'receiverbusinessidentity': {'qualifier': 'as2identity', 'value': 'contoso'}}}}}, 'name': \"[concat(parameters('fabrikamintegrationaccountname'), '/fabrikamfinance-contoso')]\", 'type': 'microsoft.logic/integrationaccounts/agreements', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('fabrikamintegrationaccountname')]\", \"[parameters('fabrikamfinanceas2receivemdnlogicappname')]\"]} END"}
{"prompt": "\n\n###\n\nCreates a VETER (Validate, Extract, Transform) pipeline using Logic Apps\n\n===\n\n", "completion": " {'properties': {}, 'sku': {'name': 'standard'}, 'name': \"[parameters('integrationaccountname')]\", 'type': 'microsoft.logic/integrationaccounts', 'location': \"[parameters('location')]\", 'apiversion': '2019-05-01'}{'properties': {'schematype': 'xml', 'content': '<?xml version=\"1.0\" encoding=\"utf-8\"?><xs:schema xmlns=\"http://integration.order\" xmlns:b=\"https://schemas.microsoft.com/biztalk/2003\" targetnamespace=\"http://integration.order\" xmlns:xs=\"http://www.w3.org/2001/xmlschema\"><xs:element name=\"order\"><xs:complextype><xs:sequence><xs:element name=\"orderheader\"><xs:complextype><xs:sequence><xs:element name=\"orderdate\" type=\"xs:string\" /><xs:element name=\"estimateddeliverydate\" type=\"xs:string\" /><xs:element name=\"ordernumber\" type=\"xs:string\" /></xs:sequence></xs:complextype></xs:element><xs:element name=\"customdetails\"><xs:complextype><xs:sequence><xs:element name=\"name\" type=\"xs:string\" /><xs:element name=\"address\" type=\"xs:string\" /></xs:sequence></xs:complextype></xs:element><xs:element name=\"orderdetails\"><xs:complextype><xs:sequence><xs:element name=\"itemdescription\" type=\"xs:string\" /><xs:element name=\"itemcustomercode\" type=\"xs:string\" /><xs:element name=\"totalamount\" type=\"xs:string\" /><xs:element name=\"unittype\" type=\"xs:string\" /></xs:sequence></xs:complextype></xs:element></xs:sequence></xs:complextype></xs:element></xs:schema>', 'contenttype': 'application/xml'}, 'name': \"[concat(parameters('integrationaccountname'), '/', 'order')]\", 'type': 'microsoft.logic/integrationaccounts/schemas', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('integrationaccountname')]\"]}{'properties': {'maptype': 'xslt', 'content': '<?xml version=\"1.0\" encoding=\"utf-8\"?><xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/xsl/transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:var=\"https://schemas.microsoft.com/biztalk/2003/var\" exclude-result-prefixes=\"msxsl var s0 usercsharp\" version=\"1.0\" xmlns:ns0=\"http://integration.saporder\" xmlns:s0=\"http://integration.order\" xmlns:usercsharp=\"https://schemas.microsoft.com/biztalk/2003/usercsharp\"><xsl:import href=\"https://az818438.vo.msecnd.net/functoids/functoidsscript.xslt\" /><xsl:output omit-xml-declaration=\"yes\" method=\"xml\" version=\"1.0\" /><xsl:template match=\"/\"><xsl:apply-templates select=\"/s0:order\" /></xsl:template><xsl:template match=\"/s0:order\"><xsl:variable name=\"var:v1\" select=\"usercsharp:datecurrentdatetime()\" /><ns0:saporder><orderid><xsl:value-of select=\"orderheader/ordernumber/text()\" /></orderid><clientid><xsl:text>1</xsl:text></clientid><dates><processdate><xsl:value-of select=\"$var:v1\" /></processdate><orderdate><xsl:value-of select=\"orderheader/orderdate/text()\" /></orderdate><estimateddeliverydate><xsl:value-of select=\"orderheader/estimateddeliverydate/text()\" /></estimateddeliverydate></dates><details><itemid><xsl:value-of select=\"orderdetails/itemcustomercode/text()\" /></itemid><units><xsl:value-of select=\"orderdetails/totalamount/text()\" /></units><unittype><xsl:value-of select=\"orderdetails/unittype/text()\" /></unittype></details></ns0:saporder></xsl:template></xsl:stylesheet>', 'contenttype': 'application/xml'}, 'name': \"[concat(parameters('integrationaccountname'), '/sapordermap')]\", 'type': 'microsoft.logic/integrationaccounts/maps', 'apiversion': '2016-06-01', 'dependson': [\"[parameters('integrationaccountname')]\"]}{'name': \"[parameters('logicappname')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'logicapp'}, 'apiversion': '2016-06-01', 'properties': {'state': 'enabled', 'integrationaccount': {'id': \"[resourceid('microsoft.logic/integrationaccounts', parameters('integrationaccountname'))]\"}, 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'condition': {'actions': {'response': {'inputs': {'body': \"@body('transform_xml')\", 'statuscode': 200}, 'type': 'response'}}, 'expression': \"@equals(xpath(xml(body('transform_xml')), 'string(count(/.))'), '1')\", 'runafter': {'transform_xml': ['succeeded']}, 'type': 'if'}, 'transform_xml': {'inputs': {'content': '@{triggerbody()}', 'integrationaccount': {'map': {'name': 'sapordermap'}}}, 'runafter': {'xml_validation': ['succeeded']}, 'type': 'xslt'}, 'xml_validation': {'inputs': {'content': '@{triggerbody()}', 'integrationaccount': {'schema': {'name': 'order'}}}, 'type': 'xmlvalidation'}}, 'contentversion': '1.0.0.0', 'outputs': {}, 'parameters': {}, 'triggers': {'manual': {'inputs': {}, 'kind': 'http', 'type': 'request'}}}}, 'dependson': [\"[parameters('integrationaccountname')]\"]} END"}
{"prompt": "\n\n###\n\nDemonstrates B2B Disaster Recovery replication using Logic Apps\n\n===\n\n", "completion": " {'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'add_or_update_mic_contents': {'type': 'apiconnection', 'inputs': {'body': '@triggerbody()', 'host': {'connection': {'name': \"@parameters('$connections')['as2-secondary']['connectionid']\"}}, 'method': 'put', 'path': '/createorupdatemicvalues'}}}, 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'when_a_mic_value_is_created': {'recurrence': {'frequency': 'minute', 'interval': 1}, 'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['as2-primary']['connectionid']\"}}, 'method': 'get', 'path': '/triggers/oncreatedmicvalues'}}}, 'contentversion': '1.0.0.0', 'outputs': {}}, 'parameters': {'$connections': {'value': {'as2-primary': {'id': \"[variables('as2id')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('as2_primary_connection_name'))]\", 'connectionname': \"[parameters('as2_primary_connection_name')]\"}, 'as2-secondary': {'id': \"[variables('as2id')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('as2_secondary_connection_name'))]\", 'connectionname': \"[parameters('as2_secondary_connection_name')]\"}}}}}, 'name': \"[parameters('as2_dr_logicapp_name')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'apiversion': '2019-05-01', 'dependson': [\"[resourceid('microsoft.web/connections', parameters('as2_primary_connection_name'))]\", \"[resourceid('microsoft.web/connections', parameters('as2_secondary_connection_name'))]\"]}{'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'add_or_update_control_numbers': {'type': 'apiconnection', 'inputs': {'body': '@triggerbody()', 'host': {'connection': {'name': \"@parameters('$connections')['edifact-secondary']['connectionid']\"}}, 'method': 'put', 'path': '/controlnumbers'}}}, 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'when_a_control_number_is_modified': {'recurrence': {'frequency': 'minute', 'interval': 1}, 'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['edifact-primary']['connectionid']\"}}, 'method': 'get', 'path': '/triggers/onmodifiedcontrolnumber'}}}, 'contentversion': '1.0.0.0', 'outputs': {}}, 'parameters': {'$connections': {'value': {'edifact-primary': {'id': \"[variables('edifactid')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('edifact_primary_connection_name'))]\", 'connectionname': \"[parameters('edifact_primary_connection_name')]\"}, 'edifact-secondary': {'id': \"[variables('edifactid')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('edifact_secondary_connection_name'))]\", 'connectionname': \"[parameters('edifact_secondary_connection_name')]\"}}}}}, 'name': \"[parameters('edifact_dr_logicapp_name')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'apiversion': '2019-05-01', 'dependson': [\"[resourceid('microsoft.web/connections', parameters('edifact_primary_connection_name'))]\", \"[resourceid('microsoft.web/connections', parameters('edifact_secondary_connection_name'))]\"]}{'name': \"[parameters('primary_integrationaccountname')]\", 'type': 'microsoft.logic/integrationaccounts', 'apiversion': '2016-06-01', 'location': \"[parameters('location')]\", 'properties': {}, 'sku': {'name': 'standard'}}{'name': \"[parameters('secondary_integrationaccountname')]\", 'type': 'microsoft.logic/integrationaccounts', 'apiversion': '2016-06-01', 'location': \"[parameters('location')]\", 'properties': {}, 'sku': {'name': 'standard'}}{'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'actions': {'add_or_update_control_numbers': {'type': 'apiconnection', 'inputs': {'body': '@triggerbody()', 'host': {'connection': {'name': \"@parameters('$connections')['x12-secondary']['connectionid']\"}}, 'method': 'put', 'path': '/controlnumbers'}}}, 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'when_a_control_number_is_modified': {'recurrence': {'frequency': 'minute', 'interval': 1}, 'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['x12-primary']['connectionid']\"}}, 'method': 'get', 'path': '/triggers/onmodifiedcontrolnumber'}}}, 'contentversion': '1.0.0.0', 'outputs': {}}, 'parameters': {'$connections': {'value': {'x12-secondary': {'id': \"[variables('x12id')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('x12_secondary_connection_name'))]\", 'connectionname': \"[parameters('x12_secondary_connection_name')]\"}, 'x12-primary': {'id': \"[variables('x12id')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('x12_primary_connection_name'))]\", 'connectionname': \"[parameters('x12_primary_connection_name')]\"}}}}}, 'name': \"[parameters('x12_dr_logicapp_name')]\", 'type': 'microsoft.logic/workflows', 'location': \"[parameters('location')]\", 'apiversion': '2019-05-01', 'dependson': [\"[resourceid('microsoft.web/connections', parameters('x12_primary_connection_name'))]\", \"[resourceid('microsoft.web/connections', parameters('x12_secondary_connection_name'))]\"]} END"}
{"prompt": "\n\n###\n\nRun a SQL stored procedure on a schedule\n\n===\n\n", "completion": " {'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/connections', parameters('sqlconnectionname'))]\"], 'properties': {'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'recurrence': {'recurrence': {'frequency': 'hour', 'interval': 1}, 'type': 'recurrence'}}, 'actions': {'execute_stored_procedure': {'type': 'apiconnection', 'inputs': {'host': {'api': {'runtimeurl': \"[concat('https://logic-apis-', parameters('location'), '.azure-apim.net/apim/sql')]\"}, 'connection': {'name': \"@parameters('$connections')['sql']['connectionid']\"}}, 'method': 'post', 'path': \"[concat('/datasets/default/procedures/@{encodeuricomponent(encodeuricomponent(', variables('singlequote'), parameters('sqlprocedure'), variables('singlequote'), '))}')]\"}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'sql': {'connectionid': \"[resourceid('microsoft.web/connections', parameters('sqlconnectionname'))]\", 'connectionname': \"[parameters('sqlconnectionname')]\", 'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'sql')]\"}}}}}, 'resources': []} END"}
{"prompt": "\n\n###\n\nA template that creates a virtual network and subnets then deploys an Integration Service Environment (ISE) including non-native connectors.\n\n===\n\n", "completion": " {'type': 'microsoft.logic/integrationserviceenvironments', 'apiversion': '2019-05-01', 'name': \"[parameters('integrationserviceenvironmentname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('vnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnet1name'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnet2name'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnet3name'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnet4name'))]\"], 'sku': {'name': \"[parameters('integrationserviceenvironmentsku')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'properties': {'networkconfiguration': {'accessendpoint': {'type': \"[parameters('accessendpointtype')]\"}, 'subnets': [{'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnet1name'))]\"}, {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnet2name'))]\"}, {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnet3name'))]\"}, {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnet4name'))]\"}]}}}{'apiversion': '2019-05-01', 'type': 'microsoft.logic/integrationserviceenvironments/managedapis', 'name': \"[concat(parameters('integrationserviceenvironmentname'), '/', parameters('managedconnectors')[copyindex()])]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.logic/integrationserviceenvironments/', parameters('integrationserviceenvironmentname'))]\"], 'copy': {'name': 'queuecopy', 'count': \"[length(parameters('managedconnectors'))]\"}, 'properties': {}} END"}
{"prompt": "\n\n###\n\nCopy files from an FTP server to Azure Blob\n\n===\n\n", "completion": " {'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/connections', parameters('azureblobconnectionname'))]\", \"[resourceid('microsoft.web/connections', parameters('ftpconnectionname'))]\"], 'properties': {'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'when_a_file_is_added_or_modified': {'recurrence': {'frequency': 'minute', 'interval': 1}, 'metadata': {\"[base64(parameters('ftpfolderpath'))]\": \"[parameters('ftpfolderpath')]\"}, 'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['ftp']['connectionid']\"}}, 'method': 'get', 'path': '/datasets/default/triggers/onupdatedfile', 'queries': {'folderid': \"[base64(parameters('ftpfolderpath'))]\"}}}}, 'actions': {'create_file': {'type': 'apiconnection', 'inputs': {'body': '@triggerbody()', 'host': {'connection': {'name': \"@parameters('$connections')['azureblob']['connectionid']\"}}, 'method': 'post', 'path': '/datasets/default/files', 'queries': {'folderpath': \"[parameters('blobcontainerpath')]\", 'name': \"@{triggeroutputs()['headers']['x-ms-file-name']}\"}}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'azureblob': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'azureblob')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('azureblobconnectionname'))]\"}, 'ftp': {'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'ftp')]\", 'connectionid': \"[resourceid('microsoft.web/connections', parameters('ftpconnectionname'))]\"}}}}}} END"}
{"prompt": "\n\n###\n\nCall custom APIs hosted on Azure App Service and protected by Azure Active Directory (Azure AD)\n\n===\n\n", "completion": " {'type': 'microsoft.logic/workflows', 'apiversion': '2019-05-01', 'name': \"[parameters('logicappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('webappname'))]\"], 'properties': {'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'clientsecret': {'type': 'securestring', 'defaultvalue': \"<<specify the secret for this logic app's application identity in the parameters>>\"}}, 'triggers': {'recurrence': {'type': 'recurrence', 'recurrence': {'frequency': 'hour', 'interval': 1}}}, 'actions': {'pingsite': {'type': 'http', 'inputs': {'uri': \"[concat('https://', reference(resourceid('microsoft.web/sites', parameters('webappname'))).hostnames[0])]\", 'method': 'get', 'authentication': {'type': 'activedirectoryoauth', 'tenant': \"[parameters('tenantid')]\", 'audience': \"[parameters('webappclientid')]\", 'clientid': \"[parameters('logicappclientid')]\", 'secret': \"@parameters('clientsecret')\"}}}}, 'outputs': {'result': {'type': 'string', 'value': \"@actions('pingsite').code\"}}}, 'parameters': {'clientsecret': {'value': \"[parameters('logicappclientsecret')]\"}}}} END"}
{"prompt": "\n\n###\n\nwhich shows how we can correlate messages over Logic Apps using Azure Service Bus\n\n===\n\n", "completion": " {'type': 'microsoft.logic/workflows', 'name': \"[parameters('backendlogicapp')]\", 'apiversion': '2019-05-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/connections', parameters('servicebusconnection'))]\"], 'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'when_a_message_is_received_in_a_topic_subscription_(peek-lock)': {'recurrence': {'frequency': 'second', 'interval': 30}, 'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'get', 'path': \"[concat('/@{encodeuricomponent(encodeuricomponent(''messagerouting''))}/subscriptions/@{encodeuricomponent(''to', parameters('backendlogicapp'),''')}/messages/head/peek')]\", 'queries': {'sessionid': 'next available', 'subscriptiontype': 'main'}}}}, 'actions': {'complete_the_message_in_a_topic_subscription': {'runafter': {'send_message': ['succeeded']}, 'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'delete', 'path': \"[concat('/@{encodeuricomponent(encodeuricomponent(''messagerouting''))}/subscriptions/@{encodeuricomponent(''to', parameters('backendlogicapp'),''')}/messages/complete')]\", 'queries': {'locktoken': \"@triggerbody()?['locktoken']\", 'sessionid': \"@triggerbody()?['sessionid']\", 'subscriptiontype': 'main'}}}, 'http': {'type': 'http', 'inputs': {'body': \"@base64tostring(triggerbody()?['contentdata'])\", 'headers': {'content-type': 'application/json'}, 'method': 'post', 'uri': 'https://demo5633756.mockable.io/order'}}, 'send_message': {'runafter': {'http': ['succeeded']}, 'type': 'apiconnection', 'inputs': {'body': {'contentdata': '@{base64(concat(\\'{\\',\\'\\n\\',\\'    \"content\":\\',body(\\'http\\'),\\',\\',\\'\\n\\',\\'    \"statuscode\":\\',outputs(\\'http\\')[\\'statuscode\\'],\\'\\n\\',\\'}\\'))}', 'contenttype': 'application/json', 'properties': {'source': \"[parameters('backendlogicapp')]\"}, 'sessionid': \"@triggerbody()?['sessionid']\"}, 'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'post', 'path': \"/@{encodeuricomponent(encodeuricomponent('messagerouting'))}/messages\", 'queries': {'systemproperties': 'none'}}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'servicebus': {'connectionid': \"[resourceid('microsoft.web/connections', parameters('servicebusconnection'))]\", 'connectionname': 'servicebus', 'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'servicebus')]\"}}}}}}{'type': 'microsoft.logic/workflows', 'name': \"[parameters('clientlogicapp')]\", 'apiversion': '2019-05-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/connections', parameters('servicebusconnection'))]\"], 'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'manual': {'type': 'request', 'kind': 'http', 'inputs': {'schema': {'properties': {'amount': {'type': 'string'}, 'customer': {'type': 'string'}, 'product': {'type': 'string'}}, 'type': 'object'}}}}, 'actions': {'for_each': {'foreach': \"@body('get_messages_from_a_topic_subscription_(peek-lock)')\", 'actions': {'complete_the_message_in_a_topic_subscription': {'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'delete', 'path': \"[concat('/@{encodeuricomponent(encodeuricomponent(''messagerouting''))}/subscriptions/@{encodeuricomponent(''to', parameters('clientlogicapp'),''')}/messages/complete')]\", 'queries': {'locktoken': \"@items('for_each')?['locktoken']\", 'sessionid': \"@items('for_each')?['sessionid']\", 'subscriptiontype': 'main'}}}}, 'runafter': {'response': ['succeeded']}, 'type': 'foreach'}, 'get_messages_from_a_topic_subscription_(peek-lock)': {'runafter': {'send_message': ['succeeded']}, 'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'get', 'path': \"[concat('/@{encodeuricomponent(encodeuricomponent(''messagerouting''))}/subscriptions/@{encodeuricomponent(''to', parameters('clientlogicapp'),''')}/messages/batch/peek')]\", 'queries': {'maxmessagecount': 1, 'sessionid': \"@variables('myuniqueidentifier')\", 'subscriptiontype': 'main'}}}, 'initialize_variable': {'type': 'initializevariable', 'inputs': {'variables': [{'name': 'myuniqueidentifier', 'type': 'string', 'value': '@{guid()}'}]}}, 'parse_json': {'runafter': {'get_messages_from_a_topic_subscription_(peek-lock)': ['succeeded']}, 'type': 'parsejson', 'inputs': {'content': \"@base64tostring(body('get_messages_from_a_topic_subscription_(peek-lock)')?[0]?['contentdata'])\", 'schema': {'properties': {'content': {'properties': {'mybackendresponse': {'type': 'string'}}, 'type': 'object'}, 'statuscode': {'type': 'integer'}}, 'type': 'object'}}}, 'response': {'runafter': {'parse_json': ['succeeded']}, 'type': 'response', 'kind': 'http', 'inputs': {'body': \"@body('parse_json')?['content']\", 'statuscode': \"@body('parse_json')?['statuscode']\"}}, 'send_message': {'runafter': {'initialize_variable': ['succeeded']}, 'type': 'apiconnection', 'inputs': {'body': {'contentdata': '@{base64(triggerbody())}', 'contenttype': 'application/json', 'properties': {'source': \"[parameters('clientlogicapp')]\"}, 'sessionid': \"@variables('myuniqueidentifier')\"}, 'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'post', 'path': \"/@{encodeuricomponent(encodeuricomponent('messagerouting'))}/messages\", 'queries': {'systemproperties': 'none'}}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'servicebus': {'connectionid': \"[resourceid('microsoft.web/connections', parameters('servicebusconnection'))]\", 'connectionname': 'servicebus', 'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'servicebus')]\"}}}}}}{'type': 'microsoft.logic/workflows', 'name': \"[parameters('transformationlogicapp')]\", 'apiversion': '2019-05-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/connections', parameters('servicebusconnection'))]\"], 'properties': {'state': 'enabled', 'definition': {'$schema': 'https://schema.management.azure.com/providers/microsoft.logic/schemas/2016-06-01/workflowdefinition.json#', 'contentversion': '1.0.0.0', 'parameters': {'$connections': {'defaultvalue': {}, 'type': 'object'}}, 'triggers': {'when_a_message_is_received_in_a_topic_subscription_(peek-lock)': {'recurrence': {'frequency': 'second', 'interval': 30}, 'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'get', 'path': \"[concat('/@{encodeuricomponent(encodeuricomponent(''messagerouting''))}/subscriptions/@{encodeuricomponent(''to', parameters('transformationlogicapp'),''')}/messages/head/peek')]\", 'queries': {'sessionid': 'next available', 'subscriptiontype': 'main'}}}}, 'actions': {'complete_the_message_in_a_topic_subscription': {'runafter': {'send_message': ['succeeded']}, 'type': 'apiconnection', 'inputs': {'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'delete', 'path': \"[concat('/@{encodeuricomponent(encodeuricomponent(''messagerouting''))}/subscriptions/@{encodeuricomponent(''to', parameters('transformationlogicapp'),''')}/messages/complete')]\", 'queries': {'locktoken': \"@triggerbody()?['locktoken']\", 'sessionid': \"@triggerbody()?['sessionid']\", 'subscriptiontype': 'main'}}}, 'compose': {'runafter': {'parse_json': ['succeeded']}, 'type': 'compose', 'inputs': {'amountordered': \"@{body('parse_json')?['amount']}\", 'customername': \"@{body('parse_json')?['customer']}\", 'orderedproduct': \"@{body('parse_json')?['product']}\"}}, 'parse_json': {'type': 'parsejson', 'inputs': {'content': \"@base64tostring(triggerbody()?['contentdata'])\", 'schema': {'properties': {'amount': {'type': 'string'}, 'customer': {'type': 'string'}, 'product': {'type': 'string'}}, 'type': 'object'}}}, 'send_message': {'runafter': {'compose': ['succeeded']}, 'type': 'apiconnection', 'inputs': {'body': {'contentdata': \"@{base64(outputs('compose'))}\", 'contenttype': 'application/json', 'properties': {'source': \"[parameters('transformationlogicapp')]\"}, 'sessionid': \"@triggerbody()?['sessionid']\"}, 'host': {'connection': {'name': \"@parameters('$connections')['servicebus']['connectionid']\"}}, 'method': 'post', 'path': \"/@{encodeuricomponent(encodeuricomponent('messagerouting'))}/messages\", 'queries': {'systemproperties': 'none'}}}}, 'outputs': {}}, 'parameters': {'$connections': {'value': {'servicebus': {'connectionid': \"[resourceid('microsoft.web/connections', parameters('servicebusconnection'))]\", 'connectionname': 'servicebus', 'id': \"[subscriptionresourceid('microsoft.web/locations/managedapis', parameters('location'), 'servicebus')]\"}}}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys and Azure Maps account and lists the primary key.\n\n===\n\n", "completion": " {'name': \"[parameters('accountname')]\", 'type': 'microsoft.maps/accounts', 'apiversion': '2021-02-01', 'location': 'global', 'sku': {'name': \"[parameters('pricingtier')]\"}, 'kind': \"[parameters('kind')]\"} END"}
{"prompt": "\n\n###\n\nThis template deploys and Azure Maps account and lists a Sas token and creates an Azure Key Vault secret with the sas token as the value.\n\n===\n\n", "completion": " {'type': 'microsoft.maps/accounts', 'apiversion': '2021-12-01-preview', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('pricingtier')]\"}, 'kind': \"[parameters('kind')]\", 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[parameters('userassignedidentityresourceid')]\": {}}}, 'properties': {'cors': {'corsrules': [{'allowedorigins': \"[parameters('allowedorigins')]\"}]}}}{'type': 'microsoft.maps/accounts/providers/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[concat(parameters('accountname'), '/microsoft.authorization/', guid(parameters('userassignedidentityprincipalid'), variables('azuremapsdatareader'), resourceid('microsoft.maps/accounts', parameters('accountname'))))]\", 'dependson': [\"[parameters('accountname')]\"], 'properties': {'roledefinitionid': \"[variables('azuremapsdatareader')]\", 'principalid': \"[parameters('userassignedidentityprincipalid')]\", 'principaltype': 'serviceprincipal'}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Windows VM and then apply the Azure secure baseline configuration to the machine.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-07-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'zones': [\"[parameters('zone')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('osversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('osdiskstorageaccounttype')]\"}}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', format('{0}-nic', parameters('vmname')))]\"}]}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'enableautomaticupdates': true}}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true}}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', format('{0}-nic', parameters('vmname')))]\"]}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2021-07-01', 'name': \"[format('{0}/{1}', parameters('vmname'), 'azurepolicyforwindows')]\", 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.guestconfiguration', 'type': 'configurationforwindows', 'typehandlerversion': '1.0', 'autoupgrademinorversion': true, 'enableautomaticupgrade': true}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('vmname'))]\"]} END"}
{"prompt": "\n\n###\n\nDeploy a single Windows VM with Open SSH enabled so that you can connect through SSH using key-based authentication.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/disks', 'apiversion': '2020-09-30', 'name': 'datadisk', 'location': \"[parameters('location')]\", 'properties': {'disksizegb': \"[parameters('disksizegb')]\", 'creationdata': {'createoption': 'empty'}}, 'sku': {'name': \"[parameters('disksku')]\"}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-07-01', 'name': 'sshhost', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'windows server with ssh'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': 'sshhost', 'adminusername': \"[parameters('adminuser')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('vmsku')]\", 'version': 'latest'}, 'osdisk': {'name': 'osdisk', 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'createoption': 'attach', 'lun': 0, 'manageddisk': {'id': \"[resourceid('microsoft.compute/disks', 'datadisk')]\"}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', 'nic')]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', tolower(parameters('storagename')))).primaryendpoints.blob]\"}}}, 'dependson': [\"[resourceid('microsoft.compute/disks', 'datadisk')]\", \"[resourceid('microsoft.network/networkinterfaces', 'nic')]\", \"[resourceid('microsoft.storage/storageaccounts', tolower(parameters('storagename')))]\"]}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2021-07-01', 'name': \"[format('{0}/{1}', 'sshhost', 'setupscript')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'setup script for ssh'}, 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.10', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('initscripturl')]\", \"[variables('sshdconfigurl')]\"]}, 'protectedsettings': {'commandtoexecute': '[format(\\'powershell -executionpolicy bypass -file initialize.ps1 -publicsshkey \"{0}\"\\', parameters(\\'publicsshkey\\'))]'}}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', 'sshhost')]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a VMSS placed in separate Availability Zones with a load balancer.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2020-12-01', 'name': \"[concat('myscaleset','-zone', variables('myzones')[copyindex()])]\", 'location': \"[parameters('location')]\", 'zones': [\"[variables('myzones')[copyindex()]]\"], 'copy': {'name': 'vmsscount', 'count': \"[length(variables('myzones'))]\"}, 'dependson': [\"[variables('virtualnetworkname')]\", \"[variables('lbname')]\", \"[variables('networksecuritygroupname')]\"], 'sku': {'name': \"[parameters('vmsssku')]\", 'capacity': \"[parameters('numberofvms')]\"}, 'properties': {'singleplacementgroup': true, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage'}, 'imagereference': \"[variables('linuximage')]\", 'datadisks': [{'lun': 1, 'createoption': 'empty', 'disksizegb': 50}]}, 'osprofile': {'computernameprefix': 'vm', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'customdata': \"[base64(variables('myzones')[copyindex()])]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': 'mynic', 'properties': {'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}, 'primary': true, 'ipconfigurations': [{'name': 'myipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('lbbe'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('lbname'), concat(variables('lbnat'), copyindex(1)))]\"}]}}]}}]}, 'extensionprofile': {'extensions': [{'name': 'appinstall', 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': ['https://raw.githubusercontent.com/azure-samples/compute-automation-configurations/master/automate_nginx.sh'], 'commandtoexecute': 'bash automate_nginx.sh'}}}]}}}} END"}
{"prompt": "\n\n###\n\nCreate an Availability Set with 3 Fault Domains\n\n===\n\n", "completion": " {'type': 'microsoft.compute/availabilitysets', 'name': 'availabilityset1', 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 3, 'platformupdatedomaincount': 20}} END"}
{"prompt": "\n\n###\n\nThis template enables encryption on a running windows vm.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/diskencryption')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"], 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': '2.2', 'autoupgrademinorversion': true, 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[variables('keyvaulturl')]\", 'keyvaultresourceid': \"[resourceid('microsoft.keyvault/vaults/', parameters('keyvaultname'))]\", 'volumetype': 'all'}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Ubuntu VM and installs the DSCForLinux extension 2.70 or latest\n\n===\n\n", "completion": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('username')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/enabledsc')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('vmname'))]\"], 'properties': {'publisher': 'microsoft.ostcextensions', 'type': 'dscforlinux', 'typehandlerversion': '2.0', 'settings': {'mode': \"[parameters('mode')]\", 'fileuri': \"[parameters('fileuri')]\"}, 'protectedsettings': {'storageaccountname': \"[parameters('storageaccountname')]\", 'storageaccountkey': \"[parameters('storageaccountkey')]\", 'registrationurl': \"[parameters('registrationurl')]\", 'registrationkey': \"[parameters('registrationkey')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set into an exsisting vnet.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'sku': {'name': \"[parameters('vmsku')]\", 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': false, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': 'nic', 'properties': {'primary': true, 'ipconfigurations': [{'name': 'ipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('existingvnetname'), parameters('existingsubnetname'))]\"}}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Shared Image Gallery resource.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/galleries', 'name': \"[parameters('galleryname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'description': 'my private gallery'}} END"}
{"prompt": "\n\n###\n\nLoad balanced SUSE GlassFish cluster\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'location': \"[variables('location')]\", 'name': \"[variables('availabilitysetname')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}, 'type': 'microsoft.compute/availabilitysets'}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('nameprefix'), 'vm-', copyindex())]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[parameters('numberofinstances')]\"}, 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('nameprefix'),'nic-', copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('nameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[variables('sshkeypath')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'storageprofile': {'imagereference': {'publisher': 'suse', 'offer': 'opensuse-leap', 'sku': '15-2', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('nameprefix'), 'vm-', copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nameprefix'), 'nic-', copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'),'2021-02-01').primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nInstall and register a gateway on a Windows virtual machine using the custom script extension\n\n===\n\n", "completion": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('virtualmachinename')]\", 'location': \"[parameters('existingvnetlocation')]\", 'tags': {'vmname': \"[variables('virtualmachinename')]\"}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': 'standard_a3'}, 'osprofile': {'computername': \"[variables('virtualmachinename')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('virtualmachinename'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}, 'datadisks': [{'name': \"[concat(variables('virtualmachinename'),'_datadisk1')]\", 'disksizegb': 128, 'lun': 0, 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))).primaryendpoints.blob]\"}}}, 'resources': [{'type': 'extensions', 'name': \"[concat(variables('virtualmachinename'),'installgw')]\", 'apiversion': '2015-06-15', 'location': \"[parameters('existingvnetlocation')]\", 'tags': {'vmname': \"[variables('virtualmachinename')]\"}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/',variables('virtualmachinename'))]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.7', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[variables('scripturl')]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('powershell.exe -executionpolicy unrestricted -file gatewayinstall.ps1 ', listauthkeys(resourceid('microsoft.datafactory/datafactories/gateways', parameters('existingdatafactoryname'), parameters('gatewayname')), '2015-10-01').key1, ' ', reference(variables('nsgtemplatename')).outputs.hostname.value, ' ', parameters('enabletosetdatastorefrominternet'))]\"}}}]} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Linux VMs behind a load balancer with NAT rules for ssh connections and Auto scale integrated\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools/', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a new ultra managed disk allowing the user to specify a sector size of either 512 or 4096.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/disks', 'apiversion': '2020-09-30', 'name': \"[parameters('manageddiskname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'ultrassd_lrs'}, 'properties': {'creationdata': {'createoption': 'empty', 'logicalsectorsize': \"[parameters('logicalsectorsize')]\"}, 'disksizegb': \"[parameters('disksizeingib')]\", 'diskiopsreadwrite': \"[parameters('diskiopsreadwrite')]\", 'diskmbpsreadwrite': \"[parameters('diskmbpsreadwrite')]\"}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Linux VMs behind an internal load balancer with NAT rules for ssh connections.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('jumpboxname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('jumpboxsaname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('jumpboxnicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsku')]\"}, 'osprofile': {'computername': \"[variables('jumpboxname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[concat(variables('jumpboxosdiskname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('jumpboxnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('jumpboxsaname'), '2020-08-01-preview').primaryendpoints.blob]\"}}}}{'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy multiple VM Scale Sets of Windows VMs.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy a Linux VMSS in master slave architecture\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'sku': {'name': \"[parameters('masternodesku')]\", 'tier': 'standard', 'capacity': \"[parameters('masternodecount')]\"}, 'name': \"[concat(variables('vmssname'), '-master-node')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'properties': {'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': {'publisher': \"[parameters('osimagepublisher')]\", 'offer': \"[parameters('osimageoffer')]\", 'sku': \"[parameters('osimagesku')]\", 'version': 'latest'}}, 'osprofile': {'computernameprefix': \"[variables('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': 'nic', 'properties': {'primary': true, 'ipconfigurations': [{'name': 'ipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnetmaster'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('masternodeloadbalancername'), variables('masternodeloadbalancerbackendname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('masternodeloadbalancername'), variables('masternodeloadbalancernatpoolname'))]\"}]}}]}}]}, 'extensionprofile': {'extensions': [{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmssname'),'-linuxcustomscriptextension')]\", 'properties': {'publisher': 'microsoft.ostcextensions', 'type': 'customscriptforlinux', 'typehandlerversion': '1.3', 'autoupgrademinorversion': true, 'settings': {'commandtoexecute': 'touch test1.txt'}}}]}}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\", \"[resourceid('microsoft.network/loadbalancers', variables('masternodeloadbalancername'))]\"]}{'type': 'microsoft.compute/virtualmachinescalesets', 'sku': {'name': \"[parameters('datanodesku')]\", 'tier': 'standard', 'capacity': \"[parameters('datanodecount')]\"}, 'name': \"[concat(variables('vmssname'), '-data-node')]\", 'apiversion': '2017-12-01', 'location': \"[parameters('location')]\", 'properties': {'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': {'publisher': \"[parameters('osimagepublisher')]\", 'offer': \"[parameters('osimageoffer')]\", 'sku': \"[parameters('osimagesku')]\", 'version': 'latest'}}, 'osprofile': {'computernameprefix': \"[variables('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': 'nic', 'properties': {'primary': true, 'ipconfigurations': [{'name': 'ipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnetdata'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('datanodeloadbalancername'), variables('datanodeloadbalancerbackendname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('datanodeloadbalancername'), variables('datanodeloadbalancernatpoolname'))]\"}]}}]}}]}, 'extensionprofile': {'extensions': [{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmssname'),'-linuxcustomscriptextension')]\", 'properties': {'publisher': 'microsoft.ostcextensions', 'type': 'customscriptforlinux', 'typehandlerversion': '1.3', 'autoupgrademinorversion': true, 'settings': {'commandtoexecute': 'touch test2.txt'}}}]}}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\", \"[resourceid('microsoft.network/loadbalancers', variables('datanodeloadbalancername'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate VMs in Availability Sets using Resource Loops\n\n===\n\n", "completion": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[concat(variables('availabilitysetname'), '-', copyindex())]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'copy': {'name': 'asloop', 'count': 2}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}, 'sku': {'name': 'aligned'}}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat('myvm', copyindex())]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[parameters('numberofinstances')]\"}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', concat('nic', copyindex()))]\", 'asloop'], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', concat(variables('availabilitysetname'), '-', mod(copyindex(),2)))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat('vm', copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')[parameters('os')]]\", 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat('nic', copyindex()))]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template will deploy RedHat (RHEL) VM, using the Pay-As-You-Go RHEL VM image. Additional charges apply.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'tags': {'tag1': 'managedvm'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'datadisks': [{'name': \"[variables('datadisk1name')]\", 'disksizegb': 100, 'lun': 0, 'createoption': 'empty'}, {'name': \"[variables('datadisk2name')]\", 'disksizegb': 100, 'lun': 1, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Linux VM to show how to dynamically assign a static IP address.\n\n===\n\n", "completion": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': ['updateip'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}}} END"}
{"prompt": "\n\n###\n\n2 VMs in a Load Balancer and Load Balancer rules\n\n===\n\n", "completion": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}, 'sku': {'name': 'aligned'}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(parameters('nicnameprefix'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('nicnameprefix'),copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(parameters('storageaccountname'), '2019-06-01').primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with N Empty Data Disks\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-07-01', 'name': \"[parameters('virtualmachinename')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('virtualmachinesize')]\"}, 'osprofile': {'computername': \"[parameters('virtualmachinename')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'copy': [{'name': 'datadisks', 'count': \"[length(range(0, parameters('datadiskscount')))]\", 'input': {'name': \"[format('{0}-datadisk{1}', parameters('virtualmachinename'), range(0, parameters('datadiskscount'))[copyindex('datadisks')])]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[range(0, parameters('datadiskscount'))[copyindex('datadisks')]]\", 'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('disktype')]\"}}}], 'osdisk': {'ostype': 'windows', 'name': \"[variables('osdiskname')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('disktype')]\"}, 'disksizegb': 128}, 'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template disables data disk encryption on a running Linux VM which was encrypted without AAD\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/','azurediskencryptionforlinux')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryptionforlinux', 'typehandlerversion': '1.1', 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': 'disableencryption', 'volumetype': \"[parameters('volumetype')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Windows Server VM and also deploys Visual Studio Community 2019.\n\n===\n\n", "completion": " {'name': \"[parameters('vmname')]\", 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('networkinterfacename'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}}, 'imagereference': {'publisher': 'microsoftvisualstudio', 'offer': 'visualstudio2019latest', 'sku': 'vs-2019-comm-latest-ws2019', 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'enableautomaticupdates': true, 'provisionvmagent': true}}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a trusted launch capable Linux virtual machine, using the latest patched version.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-12-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', parameters('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}, 'imagereference': \"[variables('imagereference')[parameters('os')]]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}]}, 'securityprofile': {'uefisettings': {'securebootenabled': \"[parameters('secureboot')]\", 'vtpmenabled': \"[parameters('vtpm')]\"}, 'securitytype': 'trustedlaunch'}}}{'condition': \"[and(equals(parameters('vtpm'), 'true'), equals(parameters('secureboot'), 'true'))]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'), '/', variables('extensionname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('vmname'))]\"], 'apiversion': '2020-06-01', 'properties': {'publisher': \"[variables('extensionpublisher')]\", 'type': \"[variables('extensionname')]\", 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'settings': {'attestationendpointcfg': {'maaendpoint': \"[parameters('maaendpoint')]\", 'maatenantname': \"[variables('maatenantname')]\", 'ascreportingendpoint': \"[variables('ascreportingendpoint')]\", 'usealternatetoken': \"[variables('usealternatetoken')]\", 'disablealerts': \"[variables('disablealerts')]\"}}}} END"}
{"prompt": "\n\n###\n\nInstall and register selfhost IR on Windows virtual machines using the custom script extension\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\n2 VMs in VNET - Internal Load Balancer and LB rules\n\n===\n\n", "completion": " {'type': 'microsoft.compute/availabilitysets', 'apiversion': '2020-06-01', 'name': \"[variables('availabilitysetname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformupdatedomaincount': 2, 'platformfaultdomaincount': 2}}{'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'dependson': [\"[variables('storageaccountname')]\", 'nicloop', \"[variables('availabilitysetname')]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('networkinterfacename'), copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname')).primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Linux VMs behind a load balancer with NAT rules for ssh connections.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools/', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a specialized VHD and connect it to a new or existing virtual network\n\n===\n\n", "completion": " {'type': 'microsoft.compute/disks', 'apiversion': '2018-09-30', 'name': \"[variables('diskname')]\", 'location': \"[parameters('location')]\", 'properties': {'creationdata': {'createoption': 'import', 'sourceuri': \"[parameters('osdiskvhduri')]\"}, 'ostype': \"[parameters('ostype')]\"}}{'apiversion': '2018-10-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'virtualmachine'}, 'dependson': [\"[variables('nicname')]\", \"[variables('diskname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'osdisk': {'ostype': \"[parameters('ostype')]\", 'createoption': 'attach', 'manageddisk': {'id': \"[resourceid('microsoft.compute/disks', variables('diskname'))]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagstorageaccountname')).primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nPush a certificate onto a Windows VM\n\n===\n\n", "completion": " {'apiversion': '2019-07-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'secrets': [{'sourcevault': {'id': \"[parameters('vaultresourceid')]\"}, 'vaultcertificates': [{'certificateurl': \"[parameters('secreturlwithversion')]\", 'certificatestore': 'my'}]}]}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template allows deploying a linux VM using new or existing resources for the Virtual Network, Storage and Public IP Address.  It also allows for choosing between SSH and Password authenticate.\n\n===\n\n", "completion": " {'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('storageaccountname')]\", \"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '16.04-lts', 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid(parameters('storageaccountresourcegroupname'), 'microsoft.storage/storageaccounts/', parameters('storageaccountname')), '2020-08-01-preview').primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nEnable data volume encryption on a running Linux VMSS\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2021-04-01', 'sku': {'name': 'standard_d2_v3', 'tier': 'standard', 'capacity': 2}, 'properties': {'virtualmachineprofile': {'extensionprofile': {'extensions': [{'name': \"[variables('extensionname')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': \"[variables('extensionname')]\", 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[variables('keyvaulturl')]\", 'keyvaultresourceid': \"[variables('keyvaultresourceid')]\", 'keyencryptionkeyurl': \"[parameters('keyencryptionkeyurl')]\", 'kekvaultresourceid': \"[if(empty(parameters('keyencryptionkeyurl')),'',variables('keyvaultresourceid'))]\", 'keyencryptionalgorithm': \"[parameters('keyencryptionalgorithm')]\", 'volumetype': \"[parameters('volumetype')]\"}}}]}}}} END"}
{"prompt": "\n\n###\n\nCreate a VM from a EfficientIP VHD and connect it to an existing virtual network\n\n===\n\n", "completion": " {'type': 'microsoft.compute/disks', 'apiversion': '2017-03-30', 'name': \"[concat(parameters('vmname'), '_osdisk')]\", 'location': \"[parameters('location')]\", 'properties': {'creationdata': {'createoption': 'import', 'sourceuri': \"[parameters('osdiskvhduri')]\"}, 'ostype': \"[parameters('ostype')]\"}}{'apiversion': '2017-03-30', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'virtualmachine'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\", \"[resourceid('microsoft.compute/disks', concat(parameters('vmname'), '_osdisk'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'osdisk': {'ostype': \"[parameters('ostype')]\", 'caching': 'readwrite', 'manageddisk': {'id': \"[resourceid('microsoft.compute/disks', concat(parameters('vmname'), '_osdisk'))]\"}, 'createoption': 'attach', 'disksizegb': \"[parameters('vmdisksizegb')]\"}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('diagstorageaccountname')), '2020-08-01-preview').primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a simple VM Scale Set of with instances behind an Azure Load Balancer. THe VM Scale set is in Flexible Orchestration Mode.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nDisables encryption on an existing Linux VMSS\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'sku': {'name': 'standard_d2_v3', 'tier': 'standard', 'capacity': 2}, 'properties': {'virtualmachineprofile': {'extensionprofile': {'extensions': [{'name': \"[variables('extensionname')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': \"[variables('extensionname')]\", 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'volumetype': \"[parameters('volumetype')]\", 'encryptionoperation': \"[variables('encryptionoperation')]\"}}}]}}}} END"}
{"prompt": "\n\n###\n\nCreate a Virtual Machine from a User Image\n\n===\n\n", "completion": " {'type': 'microsoft.compute/images', 'apiversion': '2019-12-01', 'name': \"[variables('imagename')]\", 'location': \"[parameters('location')]\", 'properties': {'storageprofile': {'osdisk': {'ostype': \"[parameters('ostype')]\", 'osstate': 'generalized', 'bloburi': \"[parameters('osdiskvhduri')]\", 'storageaccounttype': 'standard_lrs'}}, 'hypervgeneration': 'v2'}}{'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('storageaccountname')]\", \"[variables('nicname')]\", \"[variables('imagename')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'id': \"[resourceid('microsoft.compute/images', variables('imagename'))]\"}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Linux VMs with a load balancer health probe and automatic instance repairs enabled.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2019-03-01', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'tags': {'vmsstag': 'automaticrepairs'}, 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('lbname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'upgradepolicy': {'mode': 'manual'}, 'automaticrepairspolicy': {'enabled': true, 'graceperiod': 'pt30m'}, 'virtualmachineprofile': {'storageprofile': {'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': 'vmss', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'extensionprofile': {'extensions': [{'name': 'customscripttoinstallapache', 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('install_apache.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': 'sh install_apache.sh'}}}]}, 'networkprofile': {'healthprobe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes/', variables('lbname'), variables('probename'))]\"}, 'networkinterfaceconfigurations': [{'name': 'nic1', 'properties': {'primary': true, 'ipconfigurations': [{'name': 'ip1', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[variables('bepoolid')]\"}], 'publicipaddressconfiguration': {'name': 'pub1', 'properties': {'idletimeoutinminutes': 15}}}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nSQL Server 2014 SP2 Enterprise edition with Auto Backup feature enabled\n\n===\n\n", "completion": " {'name': \"[parameters('virtualmachinename')]\", 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', parameters('networkinterfacename'))]\"], 'properties': {'osprofile': {'computername': \"[parameters('virtualmachinename')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'provisionvmagent': true}}, 'hardwareprofile': {'vmsize': \"[parameters('virtualmachinesize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftsqlserver', 'offer': 'sql2014sp2-ws2012r2', 'sku': 'enterprise', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('storageaccounttype')]\"}}, 'datadisks': [{'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('storageaccounttype')]\"}, 'lun': 0, 'disksizegb': 1023, 'caching': 'readonly'}, {'createoption': 'empty', 'manageddisk': {'storageaccounttype': \"[parameters('storageaccounttype')]\"}, 'lun': 1, 'disksizegb': 1023, 'caching': 'readonly'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('networkinterfacename'))]\"}]}}}{'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('virtualmachinename'), '/sqliaasextension')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('virtualmachinename'))]\"], 'properties': {'type': 'sqliaasagent', 'publisher': 'microsoft.sqlserver.management', 'typehandlerversion': '1.2', 'autoupgrademinorversion': true, 'settings': {'autotelemetrysettings': {'region': \"[parameters('location')]\"}, 'autobackupsettings': {'enable': true, 'retentionperiod': \"[parameters('sqlautobackupretentionperiod')]\", 'enableencryption': true}}, 'protectedsettings': {'storageurl': \"[reference(resourceid('microsoft.storage/storageaccounts', parameters('sqlautobackupstorageaccountname')), '2015-06-15').primaryendpoints['blob']]\", 'storageaccesskey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', parameters('sqlautobackupstorageaccountname')), '2015-06-15').key1]\", 'password': \"[parameters('sqlautobackupencryptionpassword')]\"}}} END"}
{"prompt": "\n\n###\n\nTemplate for deploying VMSS with Public IP Prefix\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2020-06-01', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': false, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readonly', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[format('{0}/subnets/{1}', resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname')), variables('subnetname'))]\"}, 'publicipaddressconfiguration': {'name': 'pub1', 'properties': {'idletimeoutinminutes': 15, 'publicipprefix': {'id': \"[resourceid('microsoft.network/publicipprefixes', variables('publicipprefixname'))]\"}}}, 'loadbalancerbackendaddresspools': [{'id': \"[format('{0}/backendaddresspools/{1}', resourceid('microsoft.network/loadbalancers', variables('loadbalancername')), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[format('{0}/inboundnatpools/{1}', resourceid('microsoft.network/loadbalancers', variables('loadbalancername')), variables('natpoolname'))]\"}]}}]}}]}}}, 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/publicipprefixes', variables('publicipprefixname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"]} END"}
{"prompt": "\n\n###\n\nSQL Server 2014 SP1 Enterprise edition with Azure Key Vault Integration feature enabled\n\n===\n\n", "completion": " {'name': \"[parameters('virtualmachinename')]\", 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', parameters('networkinterfacename'))]\"], 'properties': {'osprofile': {'computername': \"[parameters('virtualmachinename')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'provisionvmagent': true}}, 'hardwareprofile': {'vmsize': \"[parameters('virtualmachinesize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftsqlserver', 'offer': 'sql2014sp3-ws2012r2', 'sku': 'enterprise', 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('virtualmachinename'), '_osdisk')]\", 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[parameters('storageaccounttype')]\"}}, 'datadisks': [{'name': \"[concat(parameters('virtualmachinename'), '_datadisk-1')]\", 'createoption': 'empty', 'lun': 0, 'disksizegb': 1023, 'caching': 'readonly'}, {'name': \"[concat(parameters('virtualmachinename'), '_datadisk-2')]\", 'createoption': 'empty', 'lun': 1, 'disksizegb': 1023, 'caching': 'readonly'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('networkinterfacename'))]\"}]}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('virtualmachinename'), '/sqliaasextension')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"], 'properties': {'type': 'sqliaasagent', 'publisher': 'microsoft.sqlserver.management', 'typehandlerversion': '1.2', 'autoupgrademinorversion': true, 'settings': {'autotelemetrysettings': {'region': \"[parameters('location')]\"}, 'keyvaultcredentialsettings': {'enable': true, 'credentialname': \"[parameters('sqlakvcredentialname')]\"}}, 'protectedsettings': {'privatekeyvaultcredentialsettings': {'azurekeyvaulturl': \"[variables('sqlakvurl')]\", 'serviceprincipalname': \"[parameters('sqlakvprincipalname')]\", 'serviceprincipalsecret': \"[parameters('sqlakvprincipalsecret')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template disables encryption on a running windows vm\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/', variables('extensionname'))]\", 'apiversion': '2016-04-30-preview', 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('sequenceversion')]\", 'settings': {'volumetype': \"[parameters('volumetype')]\", 'encryptionoperation': \"[variables('encryptionoperation')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy a simple VM (Windows or Ubuntu), using the latest patched version.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"], 'zones': [\"[parameters('zone')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}}, 'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}}} END"}
{"prompt": "\n\n###\n\nThis template enables encryption on a running Windows VM Scale Set\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets/extensions', 'name': \"[concat(parameters('vmssname'),'/diskencryption')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"], 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': '2.2', 'autoupgrademinorversion': true, 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[variables('keyvaulturl')]\", 'keyvaultresourceid': \"[resourceid('microsoft.keyvault/vaults/', parameters('keyvaultname'))]\", 'volumetype': 'all'}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM with 3 IP configurations, two of which have public IP addresses associated with them.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('osversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\", 'properties': {'primary': true}}]}}} END"}
{"prompt": "\n\n###\n\nDiscover Private IP dynamically\n\n===\n\n", "completion": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2}, 'sku': {'name': 'aligned'}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmname'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'foo', 'count': \"[parameters('scalenumber')]\"}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('nicname'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmname'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicname'), copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(parameters('newstorageaccountname'), '2021-02-01').primaryendpoints['blob']]\"}}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'), '1/', variables('vmextensionname'))]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', concat(parameters('vmname'), '1'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(variables('nicname'), '0'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('privateip.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat(parameters('customscriptcommandtoexecute'), reference(resourceid('microsoft.network/networkinterfaces', concat(variables('nicname'), '0'))).ipconfigurations[0].properties.privateipaddress)]\"}}} END"}
{"prompt": "\n\n###\n\nSetup or Update Existing SQL Server with Auto Patching\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('existingvirtualmachinename'), '/sqliaasextension')]\", 'location': \"[parameters('location')]\", 'properties': {'type': 'sqliaasagent', 'publisher': 'microsoft.sqlserver.management', 'typehandlerversion': '1.2', 'autoupgrademinorversion': 'true', 'settings': {'autopatchingsettings': {'patchcategory': 'windowsmandatoryupdates', 'enable': true, 'dayofweek': \"[parameters('sqlautopatchingdayofweek')]\", 'maintenancewindowstartinghour': \"[parameters('sqlautopatchingstarthour')]\", 'maintenancewindowduration': \"[parameters('sqlautopatchingwindowduration')]\"}}}} END"}
{"prompt": "\n\n###\n\n2 VMs in a Load Balancer and NAT rules\n\n===\n\n", "completion": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('availabilitysetname')]\", 'apiversion': '2016-04-30-preview', 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 2, 'managed': true}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[variables('numberofinstances')]\"}, 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('nicnameprefix'), copyindex()))]\", \"[resourceid('microsoft.compute/availabilitysets', variables('availabilitysetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets',variables('availabilitysetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('vmnameprefix'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('nicnameprefix'),copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), '2021-01-01').primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Custom Windows Image behind a load balancer with HTTP load balancing rules\n\n===\n\n", "completion": " {'type': 'microsoft.compute/images', 'apiversion': '2017-03-30', 'name': \"[variables('imagename')]\", 'location': '[resourcegroup().location]', 'properties': {'storageprofile': {'osdisk': {'ostype': 'windows', 'osstate': 'generalized', 'bloburi': \"[parameters('sourceimagevhduri')]\", 'storageaccounttype': 'standard_lrs'}}}}{'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2017-03-30', 'name': \"[parameters('vmssname')]\", 'location': '[resourcegroup().location]', 'dependson': [\"[concat('microsoft.network/loadbalancers/',variables('lbname'))]\", \"[concat('microsoft.network/virtualnetworks/',variables('virtualnetworkname'))]\", \"[concat('microsoft.compute/images/',variables('imagename'))]\"], 'sku': {'name': \"[parameters('vmsize')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'imagereference': {'id': \"[resourceid('microsoft.compute/images', variables('imagename'))]\"}}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': 'nic1', 'properties': {'primary': true, 'ipconfigurations': [{'name': 'ip1', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[variables('lbbeaddresspoolid')]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Windows VM with tags, using the latest patched version.\n\n===\n\n", "completion": " {'apiversion': '2019-07-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'tags': {'department': \"[parameters('departmentname')]\", 'application': \"[parameters('applicationname')]\", 'created by': \"[parameters('createdby')]\"}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname')).primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template enables encryption on a running windows VM\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/', variables('extensionname'))]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'properties': {'publisher': 'microsoft.azure.security', 'type': \"[variables('extensionname')]\", 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[reference(variables('keyvaultresourceid'), '2019-09-01').vaulturi]\", 'keyvaultresourceid': \"[variables('keyvaultresourceid')]\", 'keyencryptionkeyurl': \"[parameters('keyencryptionkeyurl')]\", 'kekvaultresourceid': \"[variables('keyvaultresourceid')]\", 'keyencryptionalgorithm': \"[variables('keyencryptionalgorithm')]\", 'volumetype': \"[parameters('volumetype')]\", 'resizeosdisk': \"[parameters('resizeosdisk')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a FreeBSD VM, using the latest patched version.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('freebsdosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2020-08-01-preview').primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nThis sample shows how to get output from a custom script extension for use in deployment.  Additionally, it shows applying the custom script a second time in the same deployment.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template creates a VNet with multiple subnets and deploys a Ubuntu VM with multiple NICs\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nic1name'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nic2name'))]\"], 'location': \"[parameters('location')]\", 'name': \"[parameters('vmname')]\", 'properties': {'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname')), '2019-06-01').primaryendpoints.blob]\"}}, 'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nic1name'))]\", 'properties': {'primary': true}}, {'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nic2name'))]\", 'properties': {'primary': false}}]}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[variables('sshkeypath')]\", 'keydata': \"[parameters('sshkeydata')]\"}]}}}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}}} END"}
{"prompt": "\n\n###\n\nCreates a virtual machine with RDP port\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', concat(parameters('vmname'), '-nic'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(parameters('vmname'),'-nic'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), '2020-08-01-preview').primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template takes deploys a VM by retrieving the password securely from a Key Vault\n\n===\n\n", "completion": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('storageaccountname')]\", \"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname')).primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nVMs distributed across Availability Zones with a Load Balancer and NAT rules\n\n===\n\n", "completion": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('dnsname'), copyindex())]\", 'zones': \"[split(string(add(mod(copyindex(),3),1)), ',')]\", 'copy': {'name': 'virtualmachineloop', 'count': \"[parameters('numberofvms')]\"}, 'location': \"[parameters('location')]\", 'dependson': ['nicloop'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(parameters('dnsname'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[if(equals(parameters('windowsorubuntu'), 'windows'), variables('windowsimage'), variables('linuximage'))]\", 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',concat(variables('nicname'),copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))).primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy multiple VM Scale Sets of Linux VMs.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nillustrates how to Store SSL certs from a 3rd party CA securely in Key Vault and deploy to a VMSS\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2016-04-30-preview', 'dependson': [\"[concat('microsoft.network/loadbalancers/', variables('lbname'))]\", \"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'secrets': [{'sourcevault': {'id': \"[resourceid(parameters('vaultresourcegroup'), 'microsoft.keyvault/vaults', parameters('vaultname'))]\"}, 'vaultcertificates': [{'certificateurl': \"[parameters('httpssecreturlwithversion')]\"}, {'certificateurl': \"[parameters('httpssecretcaurlwithversion')]\"}]}], 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid( 'microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid( 'microsoft.network/loadbalancers/inboundnatpools', variables('lbname'), variables('natpoolname'))]\"}]}}]}}]}, 'extensionprofile': {'extensions': [{'name': 'lapextension', 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': false, 'settings': {'fileuris': [\"[concat(parameters('_artifactslocation'), '/', parameters('scriptfilename'), parameters('_artifactslocationsastoken'))]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('bash ', parameters('scriptfilename'), ' ', parameters('certthumbprint'), ' ', parameters('cacertthumbprint'))]\"}}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a new encrypted managed disks windows vm using the server 2k12 gallery image.\n\n===\n\n", "completion": " {'apiversion': '2019-07-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ossku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': 512, 'lun': 1, 'name': 'datadisk-01', 'createoption': 'empty', 'caching': 'none'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/diskencryption')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"], 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': '2.2', 'autoupgrademinorversion': true, 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[variables('keyvaulturl')]\", 'keyvaultresourceid': \"[variables('keyvaultresourceid')]\", 'volumetype': 'all'}}} END"}
{"prompt": "\n\n###\n\nThis template enables encryption on a running windows vm using AAD client cert thumbprint.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/', variables('extensionname'))]\", 'apiversion': '2016-04-30-preview', 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('sequenceversion')]\", 'settings': {'aadclientid': \"[parameters('aadclientid')]\", 'aadclientcertthumbprint': \"[parameters('aadclientcertthumbprint')]\", 'keyvaulturl': \"[variables('keyvaulturl')]\", 'keyencryptionkeyurl': \"[parameters('keyencryptionkeyurl')]\", 'keyencryptionalgorithm': \"[variables('keyencryptionalgorithm')]\", 'volumetype': \"[parameters('volumetype')]\", 'encryptionoperation': \"[variables('encryptionoperation')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template joins a VM to an existing domain\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-03-01', 'name': \"[parameters('dnslabelprefix')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('dnslabelprefix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[format('{0}-osdisk', parameters('dnslabelprefix'))]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[format('{0}-datadisk', parameters('dnslabelprefix'))]\", 'caching': 'none', 'createoption': 'empty', 'disksizegb': 1024, 'lun': 0}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))).primaryendpoints.blob]\"}}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2021-03-01', 'name': \"[format('{0}/{1}', parameters('dnslabelprefix'), 'joindomain')]\", 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.compute', 'type': 'jsonaddomainextension', 'typehandlerversion': '1.3', 'autoupgrademinorversion': true, 'settings': {'name': \"[parameters('domaintojoin')]\", 'oupath': \"[parameters('oupath')]\", 'user': \"[format('{0}\\\\{1}', parameters('domaintojoin'), parameters('domainusername'))]\", 'restart': true, 'options': \"[parameters('domainjoinoptions')]\"}, 'protectedsettings': {'password': \"[parameters('domainpassword')]\"}}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('dnslabelprefix'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Premium Windows VM, using the latest patched version.\n\n===\n\n", "completion": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Linux VMs behind a load balancer with NAT rules, and direct public IPv4 connections.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'false', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readonly', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'publicipaddressconfiguration': {'name': 'pub1', 'properties': {'idletimeoutinminutes': 15}}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools/', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nDeploys a Windows VM and install a file on that VM using the Custom Script Extension\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}, 'resources': [{'type': 'extensions', 'name': 'customscriptextension', 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmname')]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.8', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat(variables('scriptfolder'),'/',variables('scriptfilename'), parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('powershell -executionpolicy unrestricted -file ', variables('scriptfolder'), '/', variables('scriptfilename'), ' ', variables('scriptparameters'))]\"}}}]} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Linux VM with Accelerated Networking, using the latest patched version.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': 1023, 'lun': 0, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2020-08-01-preview').primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template enables encryption on a running linux vm using AAD client secret.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('vmname'),'/diskencryption')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': \"[variables('extensionname')]\", 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[variables('keyvaulturl')]\", 'keyvaultresourceid': \"[variables('keyvaultresourceid')]\", 'keyencryptionkeyurl': \"[parameters('keyencryptionkeyurl')]\", 'kekvaultresourceid': \"[if(empty(parameters('keyencryptionkeyurl')),'',variables('keyvaultresourceid'))]\", 'keyencryptionalgorithm': \"[parameters('keyencryptionalgorithm')]\", 'volumetype': \"[parameters('volumetype')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Windows VMs behind a load balancer with NAT rules for RDP connections and Auto scale integrated\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2021-03-01', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}, 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template disables encryption on a running Windows VM Scale Set\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets/extensions', 'name': \"[concat(parameters('vmssname'),'/', 'azurediskencryption')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': '2.2', 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': 'disableencryption', 'volumetype': \"[parameters('volumetype')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Jupyter server on a Ubuntu Linux VM.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-07-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('networkinterfacename'))]\", \"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[variables('vmsize')[parameters('cpu-gpu')]]\"}, 'storageprofile': {'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}, 'datadisks': [{'lun': 0, 'name': \"[concat('datadisk', parameters('vmname'))]\", 'createoption': 'empty', 'disksizegb': \"[parameters('disksizegb')]\"}], 'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[concat(reference(variables('storageaccountname')).primaryendpoints.blob)]\"}}}, 'resources': [{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2019-07-01', 'name': \"[concat(variables('vmname'),'/installscript')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'tags': {'displayname': 'execute my custom script'}, 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': \"[concat('bash install.sh ', parameters('adminusername'))]\", 'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/install.sh', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('scripts/bootstrap.py', parameters('_artifactslocationsastoken')))]\"]}}}]} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Windows VMs behind a load balancer with NAT rules for rdp connections.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': '[resourcegroup().location]', 'apiversion': '2017-03-30', 'dependson': ['storageloop', \"[concat('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[concat('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[concat('/subscriptions/', subscription().subscriptionid,'/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/virtualnetworks/', variables('virtualnetworkname'), '/subnets/', variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[concat('/subscriptions/', subscription().subscriptionid,'/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/backendaddresspools/', variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[concat('/subscriptions/', subscription().subscriptionid,'/resourcegroups/', resourcegroup().name, '/providers/microsoft.network/loadbalancers/', variables('loadbalancername'), '/inboundnatpools/', variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template uses a property copy loop to deploy a VM with a variable number of data disks determined by the parameter passed to the template.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('osversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numberofdatadisks')]\", 'input': {'disksizegb': 1023, 'lun': \"[copyindex('datadisks')]\", 'createoption': 'empty'}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Ubuntu VM and installs the DSCForLinux extension 2.70 or latest\n\n===\n\n", "completion": " {'apiversion': '2015-05-01-preview', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('username')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': 'osdisk1', 'vhd': {'uri': \"[uri(reference(resourceid('microsoft.storage/storageaccounts', parameters('newstorageaccountname')), '2021-01-01').primaryendpoints['blob'], concat('/', variables('vmstorageaccountcontainername'),'/',variables('osdiskname'),'.vhd'))]\"}, 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'apiversion': '2015-05-01-preview', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/enabledsc')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('vmname'))]\"], 'properties': {'publisher': 'microsoft.ostcextensions', 'type': 'dscforlinux', 'typehandlerversion': '2.0', 'settings': {'mode': \"[parameters('mode')]\", 'fileuri': \"[parameters('fileuri')]\"}, 'protectedsettings': {'registrationurl': \"[parameters('registrationurl')]\", 'registrationkey': \"[parameters('registrationkey')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template disables encryption on a running windows VM which was encrypted without AAD\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/','azurediskencryption')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-12-01', 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': '2.2', 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': 'disableencryption', 'volumetype': \"[parameters('volumetype')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set into an exsisting vnet.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2019-12-01', 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '16.04-lts', 'version': 'latest'}}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': 'nic', 'properties': {'primary': true, 'ipconfigurations': [{'name': 'ipconfig', 'properties': {'subnet': {'id': \"[resourceid(parameters('existingvnetresourcegroupname'), 'microsoft.network/virtualnetworks/subnets', parameters('existingvnetname'), parameters('existingsubnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('loadbalancerbackendname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('loadbalancername'), variables('loadbalancernatpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Premium Windows VM, using the latest patched version.\n\n===\n\n", "completion": " {'apiversion': '2016-04-30-preview', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('vmdiagnosticsstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[concat('http://',parameters('vmdiagnosticsstorageaccountname'), '.blob.', environment().suffixes.storage)]\"}}}, 'resources': [{'type': 'extensions', 'name': 'microsoft.insights.vmdiagnosticssettings', 'apiversion': '2015-05-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.diagnostics', 'type': 'iaasdiagnostics', 'typehandlerversion': '1.4', 'autoupgrademinorversion': true, 'settings': {'xmlcfg': \"[base64(variables('wadcfgx'))]\", 'storageaccount': \"[parameters('vmdiagnosticsstorageaccountname')]\"}, 'protectedsettings': {'storageaccountname': \"[parameters('vmdiagnosticsstorageaccountname')]\", 'storageaccountkey': \"[listkeys(variables('accountid'),'2015-05-01-preview').key1]\", 'storageaccountendpoint': \"[parameters('storageaccountendpoint')]\"}}}]} END"}
{"prompt": "\n\n###\n\nThis template enables encryption on a running Linux VM\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/', variables('extensionname'))]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'properties': {'publisher': 'microsoft.azure.security', 'type': \"[variables('extensionname')]\", 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[reference(variables('keyvaultresourceid'),'2016-10-01').vaulturi]\", 'keyvaultresourceid': \"[variables('keyvaultresourceid')]\", 'keyencryptionkeyurl': \"[parameters('keyencryptionkeyurl')]\", 'kekvaultresourceid': \"[if(empty(parameters('keyencryptionkeyurl')),'',variables('keyvaultresourceid'))]\", 'keyencryptionalgorithm': \"[variables('keyencryptionalgorithm')]\", 'volumetype': \"[parameters('volumetype')]\"}}} END"}
{"prompt": "\n\n###\n\nDeploy a Virtual Machine with Custom Data\n\n===\n\n", "completion": " {'apiversion': '2016-04-30-preview', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'customdata': \"[base64(parameters('customdata'))]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), variables('apiversion')).primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template will deploy SUSE Linux Enterprise Server VM (SLES), using the Pay-As-You-Go SLES VM image. Additional charges apply.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-12-01', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('storageaccountname')]\", \"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': 'suse', 'offer': \"[parameters('suseosversion')]\", 'sku': 'gen1', 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'disksizegb': 100, 'lun': 0, 'name': \"[concat(variables('vmname'),'_datadisk1')]\", 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname')), '2019-06-01').primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a linux VM with an MSI that has access to a storage account in a different resource group.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2019-03-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('networkinterfacename'))]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}}, 'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Linux VMs behind a load balancer with NAT rules for ssh connections.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'zones': ['1'], 'apiversion': '2017-12-01', 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"], 'sku': {'name': 'standard_a1_v2', 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}, 'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools/', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys an Image Definition.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/galleries/images', 'name': \"[concat(parameters('galleryname'), '/', parameters('galleryimagedefinitionname'))]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'description': 'sample gallery image description', 'ostype': 'linux', 'osstate': 'generalized', 'endoflifedate': '2030-01-01', 'identifier': {'publisher': 'mypublisher', 'offer': 'myoffer', 'sku': 'mysku'}, 'recommended': {'vcpus': {'min': '1', 'max': '64'}, 'memory': {'min': '2048', 'max': '307720'}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Ubuntu VM and installs the CustomScript extension\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('username')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/installcustomscript')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/hello.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[parameters('commandtoexecute')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a VM in a VNET which is in a different Resource Group\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', parameters('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', tolower(parameters('newstorageaccountname')))).primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nDeploy a Virtual Machine with User Data\n\n===\n\n", "completion": " {'apiversion': '2021-03-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'userdata': \"[base64(parameters('userdata'))]\", 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}} END"}
{"prompt": "\n\n###\n\nShowcase a Virus attack on a Virtual Machine detection & prevention.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmnames')[copyindex(1)],'/malware')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': ['omsextension'], 'copy': {'name': 'copy-extension-malware', 'count': 1}, 'properties': {'publisher': 'microsoft.azure.security', 'type': 'iaasantimalware', 'typehandlerversion': '1.1', 'autoupgrademinorversion': true, 'settings': {'antimalwareenabled': true, 'exclusions': {'processes': 'taskmgr.exe'}, 'realtimeprotectionenabled': 'true', 'scheduledscansettings': {'isenabled': 'true', 'scantype': 'quick', 'day': '7', 'time': '120'}}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a trusted launch capable Windows virtual machine, using the latest patched version.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-12-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')[parameters('sku')]]\", 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', parameters('nicname'))]\"}]}, 'securityprofile': {'uefisettings': {'securebootenabled': \"[parameters('secureboot')]\", 'vtpmenabled': \"[parameters('vtpm')]\"}, 'securitytype': 'trustedlaunch'}}}{'condition': \"[and(equals(parameters('vtpm'), 'true'), equals(parameters('secureboot'), 'true'))]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'), '/', variables('extensionname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('vmname'))]\"], 'apiversion': '2020-06-01', 'properties': {'publisher': \"[variables('extensionpublisher')]\", 'type': \"[variables('extensionname')]\", 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'settings': {'attestationendpointcfg': {'maaendpoint': \"[parameters('maaendpoint')]\", 'maatenantname': \"[variables('maatenantname')]\", 'ascreportingendpoint': \"[variables('ascreportingendpoint')]\", 'usealternatetoken': \"[variables('usealternatetoken')]\", 'disablealerts': \"[variables('disablealerts')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template will create N number of VM's with managed disks, public IPs and network interfaces.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/availabilitysets', 'apiversion': '2020-06-01', 'name': \"[parameters('availabilitysetname')]\", 'location': \"[parameters('location')]\", 'properties': {'platformfaultdomaincount': \"[variables('availabilitysetplatformfaultdomaincount')]\", 'platformupdatedomaincount': \"[variables('availabilitysetplatformupdatedomaincount')]\"}, 'sku': {'name': 'aligned'}}{'copy': {'name': 'virtualmachines', 'count': \"[length(range(0, parameters('virtualmachinecount')))]\"}, 'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[format('{0}{1}', parameters('virtualmachinenameprefix'), add(range(0, parameters('virtualmachinecount'))[copyindex()], 1))]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('virtualmachinesize')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('operatingsystemvalues')[parameters('operatingsystem')].publishervalue]\", 'offer': \"[variables('operatingsystemvalues')[parameters('operatingsystem')].offervalue]\", 'sku': \"[variables('operatingsystemvalues')[parameters('operatingsystem')].skuvalue]\", 'version': 'latest'}, 'osdisk': {'name': \"[format('{0}{1}', parameters('virtualmachinenameprefix'), add(range(0, parameters('virtualmachinecount'))[copyindex()], 1))]\", 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}, 'caching': 'readwrite'}}, 'osprofile': {'computername': \"[format('{0}{1}', parameters('virtualmachinenameprefix'), add(range(0, parameters('virtualmachinecount'))[copyindex()], 1))]\", 'adminusername': \"[parameters('virtualmachineadminusername')]\", 'windowsconfiguration': {'provisionvmagent': true}, 'adminpassword': \"[parameters('virtualmachineadminpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', format('{0}{1}-nic1', parameters('virtualmachinenameprefix'), add(range(0, parameters('virtualmachinecount'))[range(0, parameters('virtualmachinecount'))[copyindex()]], 1)))]\"}]}, 'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', parameters('availabilitysetname'))]\"}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('diagnosticstorageaccountname'))).primaryendpoints.blob]\"}}}, 'dependson': [\"[resourceid('microsoft.compute/availabilitysets', parameters('availabilitysetname'))]\", \"[resourceid('microsoft.network/networkinterfaces', format('{0}{1}-nic1', parameters('virtualmachinenameprefix'), add(range(0, parameters('virtualmachinecount'))[range(0, parameters('virtualmachinecount'))[copyindex()]], 1)))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('diagnosticstorageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nJoins a Windows virtual machine into an AD Domain\n\n===\n\n", "completion": " {'comments': 'join domain - jsonaddomainextension', 'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(trim(variables('vmlistarray')[copyindex()]),'/joindomain')]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'vmdomainjoincopy', 'count': \"[length(variables('vmlistarray'))]\"}, 'properties': {'publisher': 'microsoft.compute', 'type': 'jsonaddomainextension', 'typehandlerversion': '1.3', 'autoupgrademinorversion': true, 'settings': {'name': \"[parameters('domainfqdn')]\", 'user': \"[parameters('domainjoinusername')]\", 'restart': 'true', 'options': \"[variables('domainjoinoptions')]\", 'oupath': \"[parameters('oupath')]\"}, 'protectedsettings': {'password': \"[parameters('domainjoinuserpassword')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template disables encryption on a running Linux vm\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/','azurediskencryptionforlinux')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryptionforlinux', 'typehandlerversion': '1.1', 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': 'disableencryption', 'volumetype': \"[parameters('volumetype')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template will deploy RedHat (RHEL) VM, using the Pay-As-You-Go RHEL VM image. Additional charges apply.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': '7.8', 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('vmname'),'_datadisk1')]\", 'disksizegb': 100, 'lun': 0, 'createoption': 'empty'}, {'name': \"[concat(parameters('vmname'),'_datadisk2')]\", 'disksizegb': 100, 'lun': 1, 'createoption': 'empty'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2020-08-01-preview').primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a mount point on every VM and connects it to an Azure Files SMB share.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': false, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools/', variables('loadbalancername'), variables('natpoolname'))]\"}, {'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('loadbalancername'),'natpool2')]\"}]}}]}}]}, 'extensionprofile': {'extensions': [{'name': 'filesextension', 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('mountazurefiles.sh', parameters('_artifactslocationsastoken')))]\"]}, 'protectedsettings': {'commandtoexecute': \"[concat('bash mountazurefiles.sh ', parameters('storageaccountname'), ' ', parameters('storageaccountkey'), ' ', parameters('sharename'), ' ', parameters('mountpointpath'), ' ', parameters('adminusername'))]\"}}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Windows VMs with incoming web connections balanced by the Azure Application Gateway\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2016-04-30-preview', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/applicationgateways/', variables('appgwname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'singleplacementgroup': 'false', 'upgradepolicy': {'mode': 'automatic'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'applicationgatewaybackendaddresspools': [{'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools/', variables('appgwname'), variables('appgwbepoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nCreate a template with dynamic selection of data disks\n\n===\n\n", "completion": " {'apiversion': '2019-03-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(variables('vmname'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'vmloop', 'count': \"[parameters('numberofvms')]\"}, 'dependson': [\"[variables('storageaccountname')]\", 'nicloop'], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[concat(variables('vmname'), copyindex())]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'), copyindex(),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': 'readwrite', 'disksizegb': \"[parameters('sizeofdatadisksingb')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(variables('vmname'), '-datadisk',copyindex(), copyindex('datadisks'))]\", 'createoption': 'empty'}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(variables('nicname'), copyindex()))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname')).primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Ubuntu VMs with incoming web connections balanced by the Azure Application Gateway\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('naminginfix')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/applicationgateways/', variables('appgwname'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'singleplacementgroup': 'false', 'upgradepolicy': {'mode': 'automatic'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets/', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'applicationgatewaybackendaddresspools': [{'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools/', variables('appgwname'), variables('appgwbepoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template allows you to manually change the number of VMs in a Scale Set.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis is a common template for creating single instance CentOS or UbuntuServer  with configurable number of data disks automounted (configurable sizes)[MDADM RAID0 Array]. Docker 1.12.x is available.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/availabilitysets', 'name': \"[variables('avsetname')]\", 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'aligned'}, 'properties': {'platformfaultdomaincount': 2, 'platformupdatedomaincount': 5}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('mastervmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\", \"[resourceid('microsoft.compute/availabilitysets/', variables('avsetname'))]\"], 'properties': {'availabilityset': {'id': \"[resourceid('microsoft.compute/availabilitysets', variables('avsetname'))]\"}, 'hardwareprofile': {'vmsize': \"[parameters('nodesize')]\"}, 'osprofile': {'computername': \"[parameters('mastervmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'linuxconfiguration': {'disablepasswordauthentication': true, 'ssh': {'publickeys': [{'path': \"[variables('sshkeypath')]\", 'keydata': \"[parameters('sshpublickey')]\"}]}}}, 'storageprofile': {'imagereference': {'publisher': \"[parameters('imagepublisher')]\", 'offer': \"[parameters('imageoffer')]\", 'sku': \"[parameters('imagesku')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('mastervmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'copy': [{'name': 'datadisks', 'count': \"[parameters('numdatadisks')]\", 'input': {'caching': \"[variables('diskcaching')]\", 'disksizegb': \"[parameters('datadisksize')]\", 'lun': \"[copyindex('datadisks')]\", 'name': \"[concat(parameters('mastervmname'),'-datadisk',copyindex('datadisks'))]\", 'createoption': 'empty'}}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('mastervmname'), '/installation')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('mastervmname'))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('azuredeploy.sh', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[variables('installationcli')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Windows VM with Windows Admin Center extension for remote management\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2021-11-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': \"[parameters('osversion')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'standardssd_lrs'}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob]\"}}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"]}{'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2021-11-01', 'name': \"[format('{0}/{1}', parameters('vmname'), 'admincenter')]\", 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.admincenter', 'type': 'admincenter', 'typehandlerversion': '0.0', 'autoupgrademinorversion': true, 'settings': {'port': \"[variables('windowsadmincenterport')]\", 'salt': \"[guid(resourcegroup().id, parameters('vmname'))]\"}}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('vmname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy a Linux or Windows VM with MSI.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nSQL Server 2014 SP1 Enterprise edition with Auto Patching feature enabled\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('virtualmachinename')]\", 'apiversion': '2017-03-30', 'location': \"[parameters('location')]\", 'comments': 'windows vm', 'tags': {'displayname': 'virtual machine'}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('vmnicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('virtualmachinesize')]\"}, 'osprofile': {'computername': 'windowsvm', 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'provisionvmagent': 'true'}}, 'storageprofile': {'imagereference': {'publisher': 'microsoftsqlserver', 'offer': 'sql2014sp2-ws2012r2', 'sku': 'enterprise', 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('virtualmachinename'), '_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}, 'datadisks': [{'name': \"[concat(parameters('virtualmachinename'), '_datadisk1')]\", 'createoption': 'empty', 'lun': 0, 'disksizegb': 1023, 'caching': 'readonly'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('vmnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))).primaryendpoints.blob]\"}}}}{'apiversion': '2015-06-15', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('virtualmachinename'), '/sqliaasextension')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', parameters('virtualmachinename'))]\"], 'properties': {'type': 'sqliaasagent', 'publisher': 'microsoft.sqlserver.management', 'typehandlerversion': '1.2', 'autoupgrademinorversion': 'true', 'settings': {'autotelemetrysettings': {'region': \"[parameters('location')]\"}, 'autopatchingsettings': {'patchcategory': 'windowsmandatoryupdates', 'enable': true, 'dayofweek': 'sunday', 'maintenancewindowstartinghour': '2', 'maintenancewindowduration': '60'}, 'keyvaultcredentialsettings': {'enable': false}, 'serverconfigurationsmanagementsettings': {'sqlconnectivityupdatesettings': {'connectivitytype': 'private', 'port': '1433'}, 'sqlworkloadtypeupdatesettings': {'sqlworkloadtype': 'general'}, 'sqlstorageupdatesettings': {'diskcount': '1', 'numberofcolumns': '1', 'startingdeviceid': '2', 'diskconfigurationtype': 'new'}, 'additionalfeaturesserverconfigurations': {'isrservicesenabled': 'false'}}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Windows VM along with the diagnostics extension\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[parameters('windowsosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'), '_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('storageaccounttype')]\"}}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[concat('http://', parameters('existingdiagnosticsstorageaccountname'), '.blob.', environment().suffixes.storage)]\"}}}, 'resources': [{'name': 'microsoft.insights.vmdiagnosticssettings', 'type': 'extensions', 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"], 'tags': {'displayname': 'azurediagnostics'}, 'properties': {'publisher': 'microsoft.azure.diagnostics', 'type': 'iaasdiagnostics', 'typehandlerversion': '1.5', 'autoupgrademinorversion': true, 'settings': {'xmlcfg': \"[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), variables('wadcfgxend')))]\", 'storageaccount': \"[parameters('existingdiagnosticsstorageaccountname')]\"}, 'protectedsettings': {'storageaccountname': \"[parameters('existingdiagnosticsstorageaccountname')]\", 'storageaccountkey': \"[listkeys(variables('accountid'), '2019-06-01').keys[0].value]\", 'storageaccountendpoint': \"[concat('https://', environment().suffixes.storage)]\"}}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a new encrypted windows vm using the server 2k12 gallery image.\n\n===\n\n", "completion": " {'apiversion': '2019-07-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ossku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('vmname'),'/diskencryption')]\", 'apiversion': '2019-03-01', 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"], 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': '2.2', 'autoupgrademinorversion': true, 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[variables('keyvaulturl')]\", 'keyvaultresourceid': \"[variables('keyvaultresourceid')]\", 'volumetype': 'all'}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Windows VM Scale Set with custom script extension behind a load balancer with NAT rules for rdp connections.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/loadbalancers', variables('loadbalancername'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': 'true', 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage', 'caching': 'readwrite'}, 'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': 'nic', 'properties': {'primary': true, 'ipconfigurations': [{'name': 'ipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('loadbalancerbackendname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('loadbalancername'), variables('loadbalancernatpoolname'))]\"}]}}]}}]}, 'extensionprofile': {'extensions': [{'name': 'customscript', 'properties': {'publisher': 'microsoft.compute', 'settings': {'fileuris': [\"[variables('scriptlocation')]\"]}, 'typehandlerversion': '1.8', 'autoupgrademinorversion': true, 'protectedsettings': {'commandtoexecute': 'powershell -executionpolicy unrestricted -file scripts/helloworld.ps1'}, 'type': 'customscriptextension'}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template will create N number of VM's with managed disks, public IPs and network interfaces in a VMSS in Flexible Orchestration Mode..\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('virtualmachinescalesetname')]\", 'apiversion': '2021-07-01', 'location': \"[parameters('location')]\", 'properties': {'singleplacementgroup': false, 'platformfaultdomaincount': \"[variables('virtualmachinescalesetplatformfaultdomaincount')]\"}, 'zones': \"[variables('selectedzone')]\"}{'type': 'microsoft.compute/virtualmachines', 'name': \"[concat(parameters('virtualmachinenameprefix'), copyindex(1))]\", 'apiversion': '2021-07-01', 'location': \"[parameters('location')]\", 'copy': {'name': 'vmcopy', 'count': \"[parameters('virtualmachinecount')]\"}, 'dependson': [\"[resourceid('microsoft.compute/virtualmachinescalesets/', parameters('virtualmachinescalesetname'))]\", \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('virtualmachinenameprefix'), copyindex(1), '-nic1'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('virtualmachinesize')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('operatingsystemvalues')[parameters('operatingsystem')].publishervalue]\", 'offer': \"[variables('operatingsystemvalues')[parameters('operatingsystem')].offervalue]\", 'sku': \"[variables('operatingsystemvalues')[parameters('operatingsystem')].skuvalue]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(parameters('virtualmachinenameprefix'),copyindex(1))]\", 'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': 'premium_lrs'}, 'caching': 'readwrite'}}, 'osprofile': {'computername': \"[concat(parameters('virtualmachinenameprefix'),copyindex(1))]\", 'adminusername': \"[parameters('virtualmachineadminusername')]\", 'adminpassword': \"[parameters('virtualmachineadminpassword')]\"}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', concat(parameters('virtualmachinenameprefix'), copyindex(1), '-nic1'))]\"}]}, 'virtualmachinescaleset': {'id': \"[resourceid('microsoft.compute/virtualmachinescalesets', parameters('virtualmachinescalesetname'))]\"}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true}}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Windows VMs behind a load balancer with NAT rules for RDP connections.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachinescalesets', 'apiversion': '2020-12-01', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'zones': ['1'], 'dependson': [\"[variables('loadbalancername')]\", \"[variables('virtualnetworkname')]\"], 'sku': {'name': 'standard_a1_v2', 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[parameters('vmssname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}, 'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('loadbalancername'), variables('natpoolname'))]\"}]}}]}}]}}}} END"}
{"prompt": "\n\n###\n\nThis template create a single and simple Linux VM with console and serial output turned on.\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), variables('apiversion')).primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Windows VM and runs a PowerShell script using the custom script extension. It also discovers the Storage Account keys\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2016-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}, 'resources': [{'type': 'extensions', 'name': 'customscriptextension', 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmname')]\"], 'properties': {'publisher': 'microsoft.compute', 'type': 'customscriptextension', 'typehandlerversion': '1.8', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat(variables('scriptfolder'),'/',variables('scriptfilename'), parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': \"[concat('powershell -executionpolicy unrestricted -file ', variables('scriptfolder'), '/', variables('scriptfilename'), ' ', variables('scriptparameters'))]\"}, 'protectedsettings': {'storageaccountname': \"[parameters('customscriptstorageaccountname')]\", 'storageaccountkey': \"[listkeys(variables('accountid'),'2021-01-01').keys[0].value]\"}}}]} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy a Terraform workstation as a Linux VM with MSI.\n\n===\n\n", "completion": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('nicname'))]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': '18.04-lts', 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('infrastorageaccountname')).primaryendpoints.blob]\"}}}}{'name': \"[concat(variables('vmname'),'/customscriptextension')]\", 'type': 'microsoft.compute/virtualmachines/extensions', 'apiversion': '2019-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.authorization/roleassignments', guid(resourcegroup().id, variables('contributor')))]\"], 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/infra.sh', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('scripts/install.sh', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('scripts/desktop.sh', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('scripts/azureproviderandcreds.tf', parameters('_artifactslocationsastoken')))]\"]}}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a simple Linux VM, using the latest patched version.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'osdisk': {'createoption': 'fromimage', 'manageddisk': {'storageaccounttype': \"[variables('osdisktype')]\"}}, 'imagereference': {'publisher': 'canonical', 'offer': 'ubuntuserver', 'sku': \"[parameters('ubuntuosversion')]\", 'version': 'latest'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"}]}, 'osprofile': {'computername': \"[parameters('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), null(), variables('linuxconfiguration'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces', variables('networkinterfacename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template deploys a new Linux VMSS and jumpbox and enables encryption on the data volumes of the Linux VMSS instances.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('jumpboxname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[variables('jumpboxsaname')]\", \"[variables('jumpboxnicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsku')]\"}, 'osprofile': {'computername': \"[variables('jumpboxname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces', variables('jumpboxnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('jumpboxsaname')).primaryendpoints.blob]\"}}}}{'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[variables('virtualnetworkname')]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'automatic'}, 'virtualmachineprofile': {'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'createoption': 'fromimage'}, 'copy': [{'name': 'datadisks', 'count': 4, 'input': {'lun': \"[copyindex('datadisks')]\", 'disksizegb': 10, 'createoption': 'empty', 'caching': 'none'}}]}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'customdata': \"[variables('customdata')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[variables('subnetid')]\"}}}]}}]}, 'extensionprofile': {'extensions': [{'name': \"[variables('extensionname')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': \"[variables('extensionname')]\", 'typehandlerversion': \"[variables('extensionversion')]\", 'autoupgrademinorversion': true, 'forceupdatetag': \"[parameters('forceupdatetag')]\", 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[reference(variables('keyvaultresourceid'),'2016-10-01').vaulturi]\", 'keyvaultresourceid': \"[variables('keyvaultresourceid')]\", 'kekvaultresourceid': \"[variables('keyvaultresourceid')]\", 'keyencryptionkeyurl': \"[parameters('keyencryptionkeyurl')]\", 'keyencryptionalgorithm': \"[parameters('keyencryptionalgorithm')]\", 'volumetype': \"[parameters('volumetype')]\"}}}]}}}} END"}
{"prompt": "\n\n###\n\nCreate a VM with multiple network interfaces and RDP accessible\n\n===\n\n", "completion": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmnameprefix')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nic1nameprefix'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nic2nameprefix'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmnameprefix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'properties': {'primary': true}, 'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nic1nameprefix'))]\"}, {'properties': {'primary': false}, 'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nic2nameprefix'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(parameters('storageaccountname'), '2019-06-01').primaryendpoints.blob]\"}}}} END"}
{"prompt": "\n\n###\n\nSetup or Update Existing SQL Server with credentials using Azure Key Vault\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('existingvirtualmachinename'), '/sqliaasextension')]\", 'location': \"[parameters('location')]\", 'properties': {'type': 'sqliaasagent', 'publisher': 'microsoft.sqlserver.management', 'typehandlerversion': '1.2', 'autoupgrademinorversion': 'true', 'settings': {'keyvaultcredentialsettings': {'enable': true, 'credentialname': \"[parameters('sqlcredentialname')]\"}}, 'protectedsettings': {'privatekeyvaultcredentialsettings': {'azurekeyvaulturl': \"[variables('sqlakvurl')]\", 'serviceprincipalname': \"[parameters('serviceprincipalname')]\", 'serviceprincipalsecret': \"[parameters('serviceprincipalsecret')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Ubuntu VM and installs the OSPatching extension\n\n===\n\n", "completion": " {'apiversion': '2019-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('newstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('username')]\", 'adminpassword': \"[parameters('adminpasswordorkey')]\", 'linuxconfiguration': \"[if(equals(parameters('authenticationtype'), 'password'), json('null'), variables('linuxconfiguration'))]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('ubuntuosversion')]\", 'version': 'latest'}, 'osdisk': {'name': \"[concat(variables('vmname'),'_osdisk')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}}}{'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(variables('vmname'),'/installospatching')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines/', variables('vmname'))]\"], 'properties': {'publisher': 'microsoft.ostcextensions', 'type': 'ospatchingforlinux', 'typehandlerversion': '2.0', 'settings': {'disabled': false, 'stop': false, 'rebootafterpatch': \"[parameters('rebootafterpatch')]\", 'category': \"[parameters('category')]\", 'installduration': \"[parameters('installduration')]\", 'oneoff': \"[parameters('oneoff')]\", 'intervalofweeks': '1', 'dayofweek': \"[parameters('dayofweek')]\", 'starttime': \"[parameters('starttime')]\", 'vmstatustest': {'local': false, 'idletestscript': \"[parameters('idletestscript')]\", 'healthytestscript': \"[parameters('healthytestscript')]\"}}, 'protectedsettings': {'storageaccountname': \"[parameters('storageaccountname')]\", 'storageaccountkey': \"[listkeys(parameters('storageaccountresourceid'), '2021-04-01').keys[0].value]\"}}} END"}
{"prompt": "\n\n###\n\nShowcase topologies available with dedicated hosts spanning fault domains and availability zones.\n\n===\n\n", "completion": " {'name': \"[concat(parameters('dhgnameprefix'),copyindex())]\", 'type': 'microsoft.compute/hostgroups', 'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'zones': \"[if(equals(parameters('numberofzoness'), 0), json('null'),array(copyindex(1)))]\", 'copy': {'name': \"[parameters('dhgnameprefix')]\", 'count': \"[if(equals(parameters('numberofzoness'), 0), 1, parameters('numberofzoness'))]\"}, 'properties': {'platformfaultdomaincount': \"[parameters('numberoffds')]\"}}{'name': \"[concat(parameters('dhgnameprefix'),div(copyindex(), parameters('numberofhostsperzone')),'/', parameters('dhnameprefix'),div(copyindex(), parameters('numberofhostsperzone')),mod(copyindex(), parameters('numberofhostsperzone')))]\", 'type': 'microsoft.compute/hostgroups/hosts', 'apiversion': '2018-10-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/hostgroups',parameters('dhgnameprefix'), copyindex(2))]\"], 'sku': {'name': \"[parameters('dhsku')]\"}, 'copy': {'name': \"[parameters('dhgnameprefix')]\", 'count': \"[variables('numberofhosts')]\"}, 'properties': {'platformfaultdomain': \"[mod(copyindex(), parameters('numberoffds'))]\"}} END"}
{"prompt": "\n\n###\n\nThis template allows you to create an encrypted managed disk using an existing encrypted VHD and encryption settings.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set of Windows VMs with a jumpbox, enables encryption on VMSS.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('jumpboxname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[variables('jumpboxnicname')]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsku')]\"}, 'osprofile': {'computername': \"[variables('jumpboxname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': \"[variables('imagereference')]\", 'osdisk': {'name': \"[variables('jumpboxosdiskname')]\", 'caching': 'readwrite', 'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('jumpboxnicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('jumpboxsaname')).primaryendpoints.blob]\"}}}}{'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[parameters('vmssname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2017-03-30', 'dependson': [\"[variables('virtualnetworkname')]\"], 'identity': {'type': 'systemassigned'}, 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('instancecount')]\"}, 'properties': {'overprovision': true, 'upgradepolicy': {'mode': 'automatic'}, 'virtualmachineprofile': {'storageprofile': {'osdisk': {'createoption': 'fromimage'}, 'imagereference': \"[variables('imagereference')]\"}, 'osprofile': {'computernameprefix': \"[variables('naminginfix')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}]}}]}}}}{'type': 'microsoft.compute/virtualmachinescalesets/extensions', 'name': \"[concat(parameters('vmssname'),'/diskencryption')]\", 'apiversion': '2019-03-01', 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"], 'location': \"[parameters('location')]\", 'properties': {'publisher': 'microsoft.azure.security', 'type': 'azurediskencryption', 'typehandlerversion': '2.2', 'autoupgrademinorversion': true, 'settings': {'encryptionoperation': \"[variables('encryptionoperation')]\", 'keyvaulturl': \"[variables('keyvaulturl')]\", 'keyvaultresourceid': \"[variables('keyvaultresourceid')]\", 'volumetype': 'all'}}} END"}
{"prompt": "\n\n###\n\nSetup or Update Existing SQL Server with Auto Backup\n\n===\n\n", "completion": " {'apiversion': '2021-07-01', 'type': 'microsoft.compute/virtualmachines/extensions', 'name': \"[concat(parameters('existingvirtualmachinename'), '/sqliaasextension')]\", 'location': \"[parameters('location')]\", 'properties': {'type': 'sqliaasagent', 'publisher': 'microsoft.sqlserver.management', 'typehandlerversion': '1.2', 'autoupgrademinorversion': true, 'settings': {'autobackupsettings': {'enable': true, 'retentionperiod': \"[parameters('sqlautobackupretentionperiod')]\", 'enableencryption': true}}, 'protectedsettings': {'storageurl': \"[reference(resourceid('microsoft.storage/storageaccounts', parameters('sqlautobackupstorageaccountname')), '2021-04-01').primaryendpoints['blob']]\", 'storageaccesskey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', parameters('sqlautobackupstorageaccountname')), '2021-04-01').keys[0].value]\", 'password': \"[parameters('sqlautobackupencryptionpassword')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template deploys a VM Scale Set and registers the virtual machines in Azure Automation DSC.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys an Image Version.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/galleries/images/versions', 'apiversion': '2020-09-30', 'name': \"[concat(parameters('existinggalleryname'), '/', parameters('existinggalleryimagedefinitionname'), '/', parameters('galleryimageversionname'))]\", 'location': \"[parameters('location')]\", 'properties': {'publishingprofile': {'replicacount': 1, 'targetregions': [{'name': \"[parameters('location')]\"}]}, 'storageprofile': {'source': {'id': \"[parameters('existingmanagedimageid')]\"}, 'osdiskimage': {'hostcaching': 'readwrite'}}}} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy a Linux or Windows VM Scale Set with MSI.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template deploys a Custom Linux Image behind a load balancer with HTTP load balancing rules and an update script for deploying and updating an app.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/images', 'apiversion': '2020-06-01', 'name': \"[variables('imagename')]\", 'location': \"[parameters('location')]\", 'properties': {'hypervgeneration': 'v1', 'storageprofile': {'osdisk': {'ostype': 'linux', 'osstate': 'generalized', 'bloburi': \"[parameters('sourceimagevhduri')]\", 'storageaccounttype': 'standard_lrs'}}}}{'type': 'microsoft.compute/virtualmachinescalesets', 'name': \"[variables('vmssuniquename')]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.compute/images',variables('imagename'))]\"], 'sku': {'name': \"[parameters('vmsku')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'properties': {'upgradepolicy': {'mode': 'manual'}, 'virtualmachineprofile': {'storageprofile': {'imagereference': {'id': \"[resourceid('microsoft.compute/images', variables('imagename'))]\"}}, 'osprofile': {'computernameprefix': \"[variables('vmssuniquename')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'networkprofile': {'networkinterfaceconfigurations': [{'name': \"[variables('nicname')]\", 'properties': {'primary': true, 'ipconfigurations': [{'name': \"[variables('ipconfigname')]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('bepoolname'))]\"}], 'loadbalancerinboundnatpools': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatpools', variables('lbname'), variables('natpoolname'))]\"}]}}]}}]}, 'extensionprofile': {'extensions': [{'name': 'updatescriptextension', 'properties': {'publisher': 'microsoft.azure.extensions', 'type': 'customscript', 'typehandlerversion': '2.0', 'autoupgrademinorversion': true, 'settings': {'fileuris': [\"[uri(parameters('_artifactslocation'), concat('scripts/updateapp.sh', parameters('_artifactslocationsastoken')))]\", \"[uri(parameters('_artifactslocation'), concat('app/package.tar.gz', parameters('_artifactslocationsastoken')))]\"], 'commandtoexecute': '[format(\\'sudo bash {0} \"{1}\" {2} {3}\\', \\'updateapp.sh\\', \\'package.tar.gz\\', \\'/nodeserver\\', \\'mainsite.service\\')]'}}}]}}}} END"}
{"prompt": "\n\n###\n\nCreate VM from VHDs(OS+data disk) and connect it to an existing virtual network\n\n===\n\n", "completion": " {'type': 'microsoft.compute/disks', 'apiversion': '2017-03-30', 'name': \"[concat(parameters('vmname'), '_osdisk')]\", 'location': \"[parameters('location')]\", 'properties': {'creationdata': {'createoption': 'import', 'sourceuri': \"[parameters('osdiskvhduri')]\"}, 'ostype': \"[parameters('ostype')]\"}}{'type': 'microsoft.compute/disks', 'apiversion': '2017-03-30', 'name': \"[concat(parameters('vmname'), '_datadisk')]\", 'location': \"[parameters('location')]\", 'properties': {'creationdata': {'createoption': 'import', 'sourceuri': \"[parameters('datadisk0vhduri')]\"}}}{'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[parameters('vmname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'virtualmachine'}, 'dependson': [\"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\", \"[resourceid('microsoft.compute/disks', concat(parameters('vmname'), '_osdisk'))]\", \"[resourceid('microsoft.compute/disks', concat(parameters('vmname'), '_datadisk'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'storageprofile': {'osdisk': {'ostype': \"[parameters('ostype')]\", 'caching': 'readwrite', 'createoption': 'attach', 'manageddisk': {'id': \"[resourceid('microsoft.compute/disks', concat(parameters('vmname'), '_osdisk'))]\"}}, 'datadisks': [{'lun': 0, 'manageddisk': {'id': \"[resourceid('microsoft.compute/disks', concat(parameters('vmname'), '_datadisk'))]\"}, 'caching': 'readonly', 'createoption': 'attach'}]}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('diagstorageaccountname'), '2021-02-01').primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nCreates a new VM with two NICs which connect to two different subnets within the same VNet.\n\n===\n\n", "completion": " {'type': 'microsoft.compute/virtualmachines', 'apiversion': '2020-06-01', 'name': \"[variables('virtualmachinename')]\", 'location': \"[parameters('location')]\", 'properties': {'osprofile': {'computername': \"[variables('virtualmachinename')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\", 'windowsconfiguration': {'provisionvmagent': true}}, 'hardwareprofile': {'vmsize': \"[parameters('virtualmachinesize')]\"}, 'storageprofile': {'imagereference': {'publisher': 'microsoftwindowsserver', 'offer': 'windowsserver', 'sku': '2019-datacenter', 'version': 'latest'}, 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'properties': {'primary': true}, 'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nic1name'))]\"}, {'properties': {'primary': false}, 'id': \"[resourceid('microsoft.network/networkinterfaces', variables('nic2name'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(resourceid('microsoft.storage/storageaccounts', variables('diagstorageaccountname'))).primaryendpoints.blob]\"}}}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('diagstorageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('nic1name'))]\", \"[resourceid('microsoft.network/networkinterfaces', variables('nic2name'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a VM from a Windows Image with 4 Empty Data Disks\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'type': 'microsoft.compute/virtualmachines', 'name': \"[variables('vmname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/networkinterfaces/', variables('nicname'))]\"], 'properties': {'hardwareprofile': {'vmsize': \"[parameters('vmsize')]\"}, 'osprofile': {'computername': \"[variables('vmname')]\", 'adminusername': \"[parameters('adminusername')]\", 'adminpassword': \"[parameters('adminpassword')]\"}, 'storageprofile': {'imagereference': {'publisher': \"[variables('imagepublisher')]\", 'offer': \"[variables('imageoffer')]\", 'sku': \"[variables('imagesku')]\", 'version': \"[variables('imageversion')]\"}, 'datadisks': [{'disksizegb': \"[parameters('sizeofeachdatadiskingb')]\", 'lun': 0, 'createoption': 'empty'}, {'disksizegb': \"[parameters('sizeofeachdatadiskingb')]\", 'lun': 1, 'createoption': 'empty'}, {'disksizegb': \"[parameters('sizeofeachdatadiskingb')]\", 'lun': 2, 'createoption': 'empty'}, {'disksizegb': \"[parameters('sizeofeachdatadiskingb')]\", 'lun': 3, 'createoption': 'empty'}], 'osdisk': {'createoption': 'fromimage'}}, 'networkprofile': {'networkinterfaces': [{'id': \"[resourceid('microsoft.network/networkinterfaces',variables('nicname'))]\"}]}, 'diagnosticsprofile': {'bootdiagnostics': {'enabled': true, 'storageuri': \"[reference(variables('storageaccountname'), '2019-06-01').primaryendpoints['blob']]\"}}}} END"}
{"prompt": "\n\n###\n\nCreate a PowerBI Workspace Collection in Azure.\n\n===\n\n", "completion": " {'apiversion': '2016-01-29', 'type': 'microsoft.powerbi/workspacecollections', 'name': \"[parameters('powerbiworkspacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'tags': {'objectname': \"[parameters('powerbiworkspacename')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Event Grid custom topic and a webhook subscription. Template originally authored by John Downs.\n\n===\n\n", "completion": " {'type': 'microsoft.eventgrid/topics', 'apiversion': '2020-06-01', 'name': \"[parameters('eventgridtopicname')]\", 'location': \"[parameters('location')]\"}{'type': 'microsoft.eventgrid/eventsubscriptions', 'apiversion': '2020-06-01', 'scope': \"[format('microsoft.eventgrid/topics/{0}', parameters('eventgridtopicname'))]\", 'name': \"[parameters('eventgridsubscriptionname')]\", 'properties': {'destination': {'endpointtype': 'webhook', 'properties': {'endpointurl': \"[parameters('eventgridsubscriptionurl')]\"}}}, 'dependson': [\"[resourceid('microsoft.eventgrid/topics', parameters('eventgridtopicname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Event Grid custom topic and a service bus queue subscription. Template originally authored by Markus Meyer.\n\n===\n\n", "completion": " {'type': 'microsoft.eventgrid/topics', 'apiversion': '2020-06-01', 'name': \"[parameters('eventgridtopicname')]\", 'location': \"[parameters('location')]\"}{'type': 'microsoft.eventgrid/eventsubscriptions', 'apiversion': '2020-06-01', 'scope': \"[format('microsoft.eventgrid/topics/{0}', parameters('eventgridtopicname'))]\", 'name': \"[parameters('eventgridsubscriptionname')]\", 'properties': {'destination': {'endpointtype': 'servicebusqueue', 'properties': {'resourceid': \"[resourceid('microsoft.servicebus/namespaces/queues', split(format('{0}/{1}', parameters('servicebusnamespacename'), parameters('servicebusqueuename')), '/')[0], split(format('{0}/{1}', parameters('servicebusnamespacename'), parameters('servicebusqueuename')), '/')[1])]\"}}, 'eventdeliveryschema': 'eventgridschema', 'filter': {'issubjectcasesensitive': false}}, 'dependson': [\"[resourceid('microsoft.eventgrid/topics', parameters('eventgridtopicname'))]\", \"[resourceid('microsoft.servicebus/namespaces/queues', split(format('{0}/{1}', parameters('servicebusnamespacename'), parameters('servicebusqueuename')), '/')[0], split(format('{0}/{1}', parameters('servicebusnamespacename'), parameters('servicebusqueuename')), '/')[1])]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Event Grid custom topic and Azure Event Hubs. The event subscription sends events from the custom topic to the event hub.\n\n===\n\n", "completion": " {'type': 'microsoft.eventgrid/topics', 'apiversion': '2020-06-01', 'name': \"[parameters('topicname')]\", 'location': \"[parameters('location')]\"}{'scope': \"[format('microsoft.eventgrid/topics/{0}', parameters('topicname'))]\", 'type': 'microsoft.eventgrid/eventsubscriptions', 'apiversion': '2020-06-01', 'name': \"[parameters('subscriptionname')]\", 'dependson': [\"[resourceid('microsoft.eventgrid/topics', parameters('topicname'))]\", \"[resourceid('microsoft.eventhub/namespaces/eventhubs', parameters('eventhubnamespace'), parameters('eventhubname'))]\"], 'properties': {'destination': {'endpointtype': 'eventhub', 'properties': {'resourceid': \"[resourceid('microsoft.eventhub/namespaces/eventhubs', parameters('eventhubnamespace'), parameters('eventhubname'))]\"}}, 'filter': {'issubjectcasesensitive': false}}} END"}
{"prompt": "\n\n###\n\nThis template creates a custom Azure Event Grid topic, a webhook subscription having CloudEvents schema, and a Logic App as an event handler. Template originally authored by Justin Yoo.\n\n===\n\n", "completion": " {'comments': '### resource - custom event grid topic ###', 'apiversion': '2020-06-01', 'type': 'microsoft.eventgrid/topics', 'name': \"[variables('eventgridtopic').name]\", 'location': \"[variables('eventgridtopic').location]\", 'tags': \"[variables('tags')]\", 'properties': {'inputschema': 'cloudeventv01schema'}}{'comments': '### resource - event grid subscription ###', 'scope': \"[format('microsoft.eventgrid/topics/{0}', variables('eventgridtopic').name)]\", 'type': 'microsoft.eventgrid/eventsubscriptions', 'apiversion': '2019-06-01', 'name': \"[variables('eventgridsubscription').name]\", 'location': \"[variables('eventgridsubscription').location]\", 'tags': \"[variables('tags')]\", 'dependson': [\"[variables('logicapp').name]\", \"[variables('eventgridtopic').name]\"], 'properties': {'eventdeliveryschema': 'cloudeventv01schema', 'destination': {'endpointtype': 'webhook', 'properties': {'endpointurl': \"[listcallbackurl(variables('logicapp').triggerid, '2019-05-01').value]\"}}, 'filter': {'issubjectcasesensitive': false}}} END"}
{"prompt": "\n\n###\n\nThis template creates Event Grid subscription for resource events. It sends the events to a WebHook. The template can be deployed to either a resource group or Azure subscription.\n\n===\n\n", "completion": " {'type': 'microsoft.eventgrid/eventsubscriptions', 'name': \"[parameters('eventsubname')]\", 'apiversion': '2020-06-01', 'properties': {'destination': {'endpointtype': 'webhook', 'properties': {'endpointurl': \"[parameters('endpoint')]\"}}, 'filter': {'issubjectcasesensitive': false}}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Event Grid custom topic and a service bus topic subscription. Template originally authored by Markus Meyer.\n\n===\n\n", "completion": " {'name': \"[parameters('eventgridtopicname')]\", 'type': 'microsoft.eventgrid/topics', 'location': \"[parameters('location')]\", 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespacename'))]\"]}{'scope': \"[concat('microsoft.eventgrid/topics/', parameters('eventgridtopicname'))]\", 'type': 'microsoft.eventgrid/eventsubscriptions', 'name': \"[parameters('eventgridsubscriptionname')]\", 'apiversion': '2020-01-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.eventgrid/topics', parameters('eventgridtopicname'))]\"], 'properties': {'destination': {'endpointtype': 'servicebustopic', 'properties': {'resourceid': \"[resourceid('microsoft.servicebus/namespaces/topics', parameters('servicebusnamespacename'),  parameters('servicebustopicname'))]\"}}, 'eventdeliveryschema': 'eventgridschema', 'filter': {'issubjectcasesensitive': false}}} END"}
{"prompt": "\n\n###\n\nThis template creates Azure Blob Storage account and then creates an Event Grid subscription to that Blob.\n\n===\n\n", "completion": " {'type': 'microsoft.eventgrid/systemtopics', 'apiversion': '2020-04-01-preview', 'name': \"[parameters('systemtopicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('storagename')]\"], 'properties': {'source': \"[resourceid('microsoft.storage/storageaccounts', parameters('storagename'))]\", 'topictype': 'microsoft.storage.storageaccounts'}}{'type': 'microsoft.eventgrid/systemtopics/eventsubscriptions', 'apiversion': '2020-04-01-preview', 'name': \"[concat(parameters('systemtopicname'), '/', parameters('eventsubname'))]\", 'dependson': [\"[resourceid('microsoft.eventgrid/systemtopics', parameters('systemtopicname'))]\"], 'properties': {'destination': {'properties': {'endpointurl': \"[parameters('endpoint')]\"}, 'endpointtype': 'webhook'}, 'filter': {'includedeventtypes': ['microsoft.storage.blobcreated', 'microsoft.storage.blobdeleted']}}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Migrate project that will be used for discovering, assessing and migrating servers, apps, data\n\n===\n\n", "completion": " {'type': 'microsoft.migrate/migrateprojects', 'apiversion': '2020-05-01', 'name': \"[parameters('migrateprojectname')]\", 'location': \"[parameters('location')]\", 'tags': {'migrate project': \"[parameters('migrateprojectname')]\"}, 'properties': {}}{'type': 'microsoft.migrate/migrateprojects/solutions', 'apiversion': '2020-05-01', 'name': \"[concat(parameters('migrateprojectname'), '/servers-assessment-serverassessment')]\", 'dependson': [\"[resourceid('microsoft.migrate/migrateprojects', parameters('migrateprojectname'))]\"], 'properties': {'tool': 'serverassessment', 'purpose': 'assessment', 'goal': 'servers', 'status': 'active'}}{'type': 'microsoft.migrate/migrateprojects/solutions', 'apiversion': '2020-05-01', 'name': \"[concat(parameters('migrateprojectname'), '/servers-discovery-serverdiscovery')]\", 'dependson': [\"[resourceid('microsoft.migrate/migrateprojects', parameters('migrateprojectname'))]\"], 'properties': {'tool': 'serverdiscovery', 'purpose': 'discovery', 'goal': 'servers', 'status': 'inactive'}}{'type': 'microsoft.migrate/migrateprojects/solutions', 'apiversion': '2020-05-01', 'name': \"[concat(parameters('migrateprojectname'), '/servers-migration-servermigration')]\", 'dependson': [\"[resourceid('microsoft.migrate/migrateprojects', parameters('migrateprojectname'))]\"], 'properties': {'tool': 'servermigration', 'purpose': 'migration', 'goal': 'servers', 'status': 'active'}} END"}
{"prompt": "\n\n###\n\nThis template creates a budget to track cost or usage and get notified whenever a specified threshold is met. There are multiple notification thresholds that are available to configure.\n\n===\n\n", "completion": " {'type': 'microsoft.consumption/budgets', 'apiversion': '2021-10-01', 'name': \"[parameters('budgetname')]\", 'properties': {'timeperiod': {'startdate': \"[parameters('startdate')]\", 'enddate': \"[parameters('enddate')]\"}, 'timegrain': \"[parameters('timegrain')]\", 'amount': \"[parameters('amount')]\", 'category': 'cost', 'notifications': {'notificationforexceededbudget1': {'enabled': true, 'operator': 'greaterthan', 'threshold': \"[parameters('firstthreshold')]\", 'contactemails': \"[parameters('contactemails')]\"}, 'notificationforexceededbudget2': {'enabled': true, 'operator': 'greaterthan', 'threshold': \"[parameters('secondthreshold')]\", 'contactemails': \"[parameters('contactemails')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a budget to track cost or usage and get notified whenever a specified threshold is met. There are multiple notification thresholds that are available to configure.\n\n===\n\n", "completion": " {'type': 'microsoft.consumption/budgets', 'apiversion': '2021-10-01', 'name': \"[parameters('budgetname')]\", 'properties': {'timeperiod': {'startdate': \"[parameters('startdate')]\", 'enddate': \"[parameters('enddate')]\"}, 'timegrain': \"[parameters('timegrain')]\", 'amount': \"[parameters('amount')]\", 'category': 'cost', 'notifications': {'notificationforexceededbudget1': {'enabled': true, 'operator': 'greaterthan', 'threshold': \"[parameters('firstthreshold')]\", 'contactemails': \"[parameters('contactemails')]\"}, 'notificationforexceededbudget2': {'enabled': true, 'operator': 'greaterthan', 'threshold': \"[parameters('secondthreshold')]\", 'contactemails': \"[parameters('contactemails')]\"}}, 'filter': {'dimensions': {'name': 'resourcegroupname', 'operator': 'in', 'values': \"[parameters('resourcegroupfiltervalues')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a budget to track cost or usage and get notified whenever a specified threshold is met. There are multiple notification thresholds that are available to configure.\n\n===\n\n", "completion": " {'type': 'microsoft.consumption/budgets', 'apiversion': '2021-10-01', 'name': \"[parameters('budgetname')]\", 'properties': {'timeperiod': {'startdate': \"[parameters('startdate')]\", 'enddate': \"[parameters('enddate')]\"}, 'timegrain': \"[parameters('timegrain')]\", 'amount': \"[parameters('amount')]\", 'category': 'cost', 'notifications': {'notificationforexceededbudget1': {'enabled': true, 'operator': 'greaterthan', 'threshold': \"[parameters('firstthreshold')]\", 'contactemails': \"[parameters('contactemails')]\", 'contactroles': \"[parameters('contactroles')]\", 'contactgroups': \"[parameters('contactgroups')]\"}, 'notificationforexceededbudget2': {'enabled': true, 'operator': 'greaterthan', 'threshold': \"[parameters('secondthreshold')]\", 'contactemails': \"[parameters('contactemails')]\", 'contactroles': \"[parameters('contactroles')]\", 'contactgroups': \"[parameters('contactgroups')]\"}}, 'filter': {'and': [{'dimensions': {'name': 'resourcegroupname', 'operator': 'in', 'values': \"[parameters('resourcegroupfiltervalues')]\"}}, {'dimensions': {'name': 'metercategory', 'operator': 'in', 'values': \"[parameters('metercategoryfiltervalues')]\"}}]}}} END"}
{"prompt": "\n\n###\n\nAzure Synapse Proof-of-Concept\n\n===\n\n", "completion": " {'type': 'microsoft.synapse/workspaces', 'apiversion': '2019-06-01-preview', 'name': \"[variables('workspacename')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[variables('dlsname')]\", \"[variables('dlsfsname')]\"], 'properties': {'defaultdatalakestorage': {'accounturl': \"[reference(variables('dlsname')).primaryendpoints.dfs]\", 'filesystem': \"[variables('dlsfsname')]\"}, 'sqladministratorlogin': \"[parameters('sqladministratorlogin')]\", 'sqladministratorloginpassword': \"[parameters('sqladministratorloginpassword')]\", 'managedvirtualnetwork': 'default'}, 'resources': [{'condition': \"[equals(parameters('allowallconnections'),'true')]\", 'type': 'firewallrules', 'apiversion': '2019-06-01-preview', 'name': 'allowall', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('workspacename')]\"], 'properties': {'startipaddress': '0.0.0.0', 'endipaddress': '255.255.255.255'}}, {'type': 'firewallrules', 'apiversion': '2019-06-01-preview', 'name': 'allowallwindowsazureips', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('workspacename')]\"], 'properties': {'startipaddress': '0.0.0.0', 'endipaddress': '0.0.0.0'}}, {'type': 'managedidentitysqlcontrolsettings', 'apiversion': '2019-06-01-preview', 'name': 'default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('workspacename')]\"], 'properties': {'grantsqlcontroltomanagedidentity': {'desiredstate': 'enabled'}}}]}{'type': 'microsoft.synapse/workspaces/sqlpools', 'apiversion': '2019-06-01-preview', 'name': \"[concat(variables('workspacename'), '/', variables('sqlpoolname'))]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'dependson': [\"[variables('workspacename')]\"], 'properties': {'createmode': 'default', 'collation': 'sql_latin1_general_cp1_ci_as'}, 'resources': [{'condition': \"[parameters('metadatasync')]\", 'type': 'metadatasync', 'apiversion': '2019-06-01-preview', 'name': 'config', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('sqlpoolname')]\"], 'properties': {'enabled': \"[parameters('metadatasync')]\"}}]}{'condition': \"[equals(parameters('sparkdeployment'),'true')]\", 'type': 'microsoft.synapse/workspaces/bigdatapools', 'apiversion': '2019-06-01-preview', 'name': \"[concat(variables('workspacename'), '/', variables('sparkpoolname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('workspacename')]\"], 'properties': {'nodecount': 5, 'nodesizefamily': 'memoryoptimized', 'nodesize': \"[parameters('sparknodesize')]\", 'autoscale': {'enabled': true, 'minnodecount': 3, 'maxnodecount': 40}, 'autopause': {'enabled': true, 'delayinminutes': 15}, 'sparkversion': '2.4'}} END"}
{"prompt": "\n\n###\n\nThis template configures Service Bus Geo-disaster recovery alias on premium SKU Namespaces.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacenamesecondary')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('locationsecondarynamepsace')]\", 'sku': {'name': 'premium', 'tier': 'premium', 'capacity': 4}, 'tags': {'tag1': 'value1', 'tag2': 'value2'}}{'apiversion': '2018-01-01-preview', 'type': 'microsoft.servicebus/namespaces', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespacenamesecondary'))]\"], 'name': \"[parameters('servicebusnamespacenameprimary')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'premium', 'tier': 'premium', 'capacity': 4}, 'tags': {'tag1': 'value1', 'tag2': 'value2'}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('aliasname')]\", 'type': 'disasterrecoveryconfigs', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespacenameprimary'))]\"], 'properties': {'partnernamespace': \"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespacenamesecondary'))]\"}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus Basic/Standard namespace.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('servicebussku')]\"}, 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Service Bus namespace, a topic, a subscription and a rule.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'maxsizeinmegabytes': '1024', 'requiresduplicatedetection': 'false', 'duplicatedetectionhistorytimewindow': 'pt10m', 'enablebatchedoperations': 'false', 'supportordering': 'false', 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': 'false', 'enableexpress': 'false'}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebussubscriptionname')]\", 'type': 'subscriptions', 'dependson': [\"[parameters('servicebustopicname')]\"], 'properties': {'lockduration': 'pt1m', 'requiressession': 'false', 'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'deadletteringonmessageexpiration': 'false', 'maxdeliverycount': '10', 'enablebatchedoperations': 'false', 'autodeleteonidle': 'p10675199dt2h48m5.4775807s'}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebusrulename')]\", 'type': 'rules', 'dependson': [\"[parameters('servicebussubscriptionname')]\"], 'properties': {'filtertype': 'sqlfilter', 'sqlfilter': {'sqlexpression': \"filtertag = 'true'\", 'requirespreprocessing': 'false'}}}]}]}]} END"}
{"prompt": "\n\n###\n\nThis template deploys a Service Bus namespace, a topic, and a subscription.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname1')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname1')]\"}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname2')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname2')]\"}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebussubscriptionname')]\", 'type': 'subscriptions', 'dependson': [\"[parameters('servicebustopicname1')]\", \"[parameters('servicebustopicname2')]\"], 'properties': {'forwardto': \"[parameters('servicebustopicname1')]\", 'forwarddeadletteredmessagesto': \"[parameters('servicebustopicname1')]\"}}]}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus namespace and 2 queues and sets auto forwarding.\n\n===\n\n", "completion": " {'apiversion': '2017-04-01', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebusqueuename1')]\", 'type': 'queues', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespacename'))]\"], 'properties': {'lockduration': 'pt5m', 'maxsizeinmegabytes': '1024', 'requiresduplicatedetection': 'false', 'requiressession': 'false', 'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'deadletteringonmessageexpiration': 'false', 'duplicatedetectionhistorytimewindow': 'pt10m', 'maxdeliverycount': '10', 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': 'false', 'enableexpress': 'false'}}, {'apiversion': '2017-04-01', 'name': \"[parameters('servicebusqueuename2')]\", 'type': 'queues', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespacename'))]\", \"[resourceid('microsoft.servicebus/namespaces/queues/', parameters('servicebusnamespacename'),parameters('servicebusqueuename1'))]\"], 'properties': {'lockduration': 'pt5m', 'maxsizeinmegabytes': '1024', 'requiresduplicatedetection': 'false', 'requiressession': 'false', 'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'deadletteringonmessageexpiration': 'false', 'duplicatedetectionhistorytimewindow': 'pt10m', 'maxdeliverycount': '10', 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': 'false', 'enableexpress': 'false', 'forwardto': \"[parameters('servicebusqueuename1')]\", 'forwarddeadletteredmessagesto': \"[parameters('servicebusqueuename1')]\"}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus Namespace and Topic with a Subscription that has a SQL Filter defined.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname')]\"}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicsubscriptionname')]\", 'type': 'subscriptions', 'dependson': [\"[parameters('servicebustopicname')]\"], 'resources': [{'apiversion': '2017-04-01', 'name': \"[concat(parameters('servicebustopicsubscriptionname'), '-filter')]\", 'type': 'rules', 'dependson': [\"[parameters('servicebustopicsubscriptionname')]\"], 'properties': {'filter': {'sqlexpression': \"[parameters('servicebustopicsubscriptionsqlfilter')]\"}}}]}]}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus namespace and virtual network rule\n\n===\n\n", "completion": " {'type': 'microsoft.servicebus/namespaces', 'apiversion': '2017-04-01', 'name': \"[parameters('servicebusnamespacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'premium', 'tier': 'premium'}, 'properties': {}}{'type': 'microsoft.servicebus/namespaces/virtualnetworkrules', 'apiversion': '2018-01-01-preview', 'name': \"[format('{0}/{1}', parameters('servicebusnamespacename'), parameters('vnetrulename'))]\", 'properties': {'virtualnetworksubnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', format('{0}-vn', parameters('vnetrulename')), parameters('subnetname'))]\"}, 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespacename'))]\", \"[resourceid('microsoft.network/virtualnetworks', format('{0}-vn', parameters('vnetrulename')))]\"]} END"}
{"prompt": "\n\n###\n\nThis template deploys a Service Bus namespace, a topic, and a subscription.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('service_busnamespace_name')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('service_busnamespace_name'))]\"], 'properties': {'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'maxsizeinmegabytes': 1024, 'requiresduplicatedetection': false, 'duplicatedetectionhistorytimewindow': 'pt10m', 'enablebatchedoperations': false, 'supportordering': false, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': false, 'enableexpress': false}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebussubscriptionname')]\", 'type': 'subscriptions', 'dependson': [\"[parameters('servicebustopicname')]\"], 'properties': {'lockduration': 'pt1m', 'requiressession': false, 'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'deadletteringonmessageexpiration': false, 'maxdeliverycount': 10, 'enablebatchedoperations': false, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s'}}]}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus Namespace.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'properties': {}, 'resources': []} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus namespace, and authorization rules for the namespace and a queue.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebusqueuename')]\", 'type': 'queues', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'lockduration': 'pt5m', 'maxsizeinmegabytes': '1024', 'requiresduplicatedetection': 'false', 'requiressession': 'false', 'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'deadletteringonmessageexpiration': 'false', 'duplicatedetectionhistorytimewindow': 'pt10m', 'maxdeliverycount': '10', 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': 'false', 'enableexpress': 'false'}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('queueauthorizationrulename')]\", 'type': 'authorizationrules', 'dependson': [\"[parameters('servicebusqueuename')]\"], 'properties': {'rights': ['listen']}}]}]}{'apiversion': '2017-04-01', 'name': \"[variables('namespaceauthrulename')]\", 'type': 'microsoft.servicebus/namespaces/authorizationrules', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'location': \"[parameters('location')]\", 'properties': {'rights': ['send']}} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus queue and an Azure Scheduler job job that will post a message into the Service Bus queue at a regular interval.\n\n===\n\n", "completion": " {'name': \"[variables('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'apiversion': '2021-01-01-preview', 'location': \"[parameters('location')]\", 'properties': {}, 'resources': [{'name': \"[parameters('queuename')]\", 'type': 'queues', 'apiversion': '2018-01-01-preview', 'resources': [{'name': \"[variables('queuesendonlykeyname')]\", 'type': 'authorizationrules', 'apiversion': '2018-01-01-preview', 'properties': {'rights': ['send']}, 'dependson': [\"[parameters('queuename')]\"]}], 'dependson': [\"[variables('servicebusnamespacename')]\"]}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus namespace and a queue.\n\n===\n\n", "completion": " {'type': 'microsoft.servicebus/namespaces', 'apiversion': '2017-04-01', 'name': \"[parameters('servicebusnamespacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {}}{'type': 'microsoft.servicebus/namespaces/queues', 'apiversion': '2017-04-01', 'name': \"[format('{0}/{1}', parameters('servicebusnamespacename'), parameters('servicebusqueuename'))]\", 'properties': {'lockduration': 'pt5m', 'maxsizeinmegabytes': 1024, 'requiresduplicatedetection': false, 'requiressession': false, 'defaultmessagetimetolive': 'p10675199dt2h48m5.4775807s', 'deadletteringonmessageexpiration': false, 'duplicatedetectionhistorytimewindow': 'pt10m', 'maxdeliverycount': 10, 'autodeleteonidle': 'p10675199dt2h48m5.4775807s', 'enablepartitioning': false, 'enableexpress': false}, 'dependson': [\"[resourceid('microsoft.servicebus/namespaces', parameters('servicebusnamespacename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus namespace and IP Filter rule\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'premium', 'tier': 'premium'}, 'properties': {}}{'apiversion': '2018-01-01-preview', 'name': \"[concat(parameters('servicebusnamespacename'),'/', parameters('ipfilterrulename'))]\", 'type': 'microsoft.servicebus/namespaces/ipfilterrules', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'filtername': \"[parameters('ipfilterrulename')]\", 'action': \"[parameters('ipfilteraction')]\", 'ipmask': \"[parameters('ipmask')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a vnet and a subnet hosting a Linux virtual machine that accesses a Service Bus namespace with a private endpoint.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'premium', 'tier': 'premium', 'capacity': \"[parameters('servicebusnamespacecapacity')]\"}, 'properties': {'zoneredundant': \"[parameters('servicebusnamespacezoneredundant')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus Premium Namespace and a namespace AuthorizationRule\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('premiumnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'kind': 'messaging', 'sku': {'name': 'premium', 'tier': 'premium', 'capacity': \"[parameters('skucapacity')]\"}, 'properties': {'createacsnamespace': true}}{'apiversion': '2017-04-01', 'name': \"[variables('customsaskeyname')]\", 'type': 'microsoft.servicebus/namespaces/authorizationrules', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('premiumnamespacename'))]\"], 'location': \"[parameters('location')]\", 'properties': {'rights': ['send', 'listen', 'manage']}} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus Namespace and Topic.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('servicebusnamespacename')]\", 'type': 'microsoft.servicebus/namespaces', 'location': \"[parameters('location')]\", 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('servicebustopicname')]\", 'type': 'topics', 'dependson': [\"[resourceid('microsoft.servicebus/namespaces/', parameters('servicebusnamespacename'))]\"], 'properties': {'path': \"[parameters('servicebustopicname')]\"}, 'resources': []}]} END"}
{"prompt": "\n\n###\n\nCreate a cluster and a database\n\n===\n\n", "completion": " {'name': \"[concat(parameters('clusters_kustocluster_name'), '/', parameters('databases_kustodb_name'))]\", 'type': 'microsoft.kusto/clusters/databases', 'apiversion': '2020-06-14', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.kusto/clusters', parameters('clusters_kustocluster_name'))]\"], 'properties': {'softdeleteperiodindays': 365, 'hotcacheperiodindays': 31}}{'name': \"[parameters('clusters_kustocluster_name')]\", 'type': 'microsoft.kusto/clusters', 'sku': {'name': 'standard_d8_v3', 'tier': 'standard', 'capacity': 2}, 'apiversion': '2020-06-14', 'location': \"[parameters('location')]\", 'tags': {'created by': 'github quickstart template'}} END"}
{"prompt": "\n\n###\n\nDeploy Azure Data Explorer cluster into your VNet.\n\n===\n\n", "completion": " {'type': 'microsoft.kusto/clusters', 'sku': {'name': \"[parameters('skuname')]\", 'tier': \"[parameters('skutier')]\"}, 'name': \"[parameters('clustername')]\", 'apiversion': '2020-06-14', 'dependson': [\"[variables('enginepublicipid')]\", \"[variables('datamanagementpublicipid')]\", \"[variables('vnetid')]\"], 'location': \"[parameters('location')]\", 'properties': {'virtualnetworkconfiguration': {'subnetid': \"[variables('subnetid')]\", 'enginepublicipid': \"[variables('enginepublicipid')]\", 'datamanagementpublicipid': \"[variables('datamanagementpublicipid')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Machine Learning service workspace with public network connectivity.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces', 'apiversion': '2020-03-01', 'identity': {'type': 'systemassigned'}, 'name': \"[variables('workspacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('storageaccount')]\", \"[variables('keyvault')]\", \"[variables('applicationinsights')]\", \"[variables('containerregistry')]\"], 'properties': {'friendlyname': \"[variables('workspacename')]\", 'storageaccount': \"[variables('storageaccount')]\", 'keyvault': \"[variables('keyvault')]\", 'applicationinsights': \"[variables('applicationinsights')]\", 'containerregistry': \"[variables('containerregistry')]\", 'hbiworkspace': \"[parameters('hbi_workspace')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a ADLS datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', parameters('datastorename'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'datastoretype': 'adls', 'skipvalidation': \"[parameters('skipvalidation')]\", 'clientid': \"[parameters('clientid')]\", 'clientsecret': \"[parameters('clientsecret')]\", 'storename': \"[parameters('adlsstorename')]\", 'tenantid': \"[parameters('tenantid')]\", 'resourceurl': \"[parameters('resourceurl')]\", 'authorityurl': \"[parameters('authorityurl')]\", 'adlssubscriptionid': \"[parameters('adlsstoresubscriptionid')]\", 'adlsresourcegroup': \"[parameters('adlsstoreresourcegroup')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a LinkedService in an existing Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/linkedservices', 'apiversion': '2020-09-01-preview', 'name': \"[concat(parameters('amlworkspacename'), '/', parameters('linkname'))]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'properties': {'linkedserviceresourceid': \"[parameters('synapseworkspaceresourceid')]\"}}{'type': 'microsoft.machinelearningservices/workspaces/computes', 'apiversion': '2018-11-19', 'name': \"[concat(parameters('amlworkspacename'), '/', parameters('sparkpools')[copyindex()].computename)]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'poolcopy', 'count': \"[length(parameters('sparkpools'))]\"}, 'properties': {'resourceid': \"[resourceid(reference(parameters('synapseworkspaceresourceid'), '2019-06-01-preview', 'full').subscriptionid, reference(parameters('synapseworkspaceresourceid'), '2019-06-01-preview', 'full').resourcegroupname, 'microsoft.synapse/workspaces/bigdatapools', variables('synapseworkspacename'), parameters('sparkpools')[copyindex()].poolname)]\", 'computetype': 'synapsespark'}} END"}
{"prompt": "\n\n###\n\nThis template creates a file share datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', parameters('datastorename'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'datastoretype': 'file', 'skipvalidation': \"[parameters('skipvalidation')]\", 'accountname': \"[parameters('storageaccountname')]\", 'sharename': \"[parameters('filesharename')]\", 'accountkey': \"[if(equals(parameters('authenticationtype'), 'account key'), parameters('sastokenoraccountkey'), json('null'))]\", 'sastoken': \"[if(equals(parameters('authenticationtype'), 'sas token'), parameters('sastokenoraccountkey'), json('null'))]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a ADLS Gen2 datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', parameters('datastorename'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'datastoretype': 'adls-gen2', 'skipvalidation': \"[parameters('skipvalidation')]\", 'clientid': \"[parameters('clientid')]\", 'clientsecret': \"[parameters('clientsecret')]\", 'filesystem': \"[parameters('filesystem')]\", 'accountname': \"[parameters('accountname')]\", 'tenantid': \"[parameters('tenantid')]\", 'resourceurl': \"[parameters('resourceurl')]\", 'authorityurl': \"[parameters('authorityurl')]\", 'subscriptionid': \"[parameters('storageaccountsubscriptionid')]\", 'resourcegroupname': \"[parameters('storageaccountresourcegroup')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Machine Learning service workspace with public network connectivity.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces', 'apiversion': '2020-03-01', 'identity': {'type': 'systemassigned'}, 'name': \"[variables('workspacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('storageaccount')]\", \"[variables('keyvault')]\", \"[variables('applicationinsights')]\", \"[variables('containerregistry')]\"], 'properties': {'friendlyname': \"[variables('workspacename')]\", 'storageaccount': \"[variables('storageaccount')]\", 'keyvault': \"[variables('keyvault')]\", 'applicationinsights': \"[variables('applicationinsights')]\", 'containerregistry': \"[variables('containerregistry')]\", 'hbiworkspace': \"[parameters('hbi_workspace')]\", 'encryption': {'status': \"[parameters('encryption_status')]\", 'keyvaultproperties': {'keyvaultarmid': \"[parameters('cmk_keyvault_id')]\", 'keyidentifier': \"[parameters('cmk_keyvault_key_uri')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Machine Learning Service HDInsight cluster\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/computes', 'apiversion': '2020-01-01', 'name': \"[concat(parameters('workspacename'), '/', parameters('computename'))]\", 'location': \"[parameters('location')]\", 'properties': {'computetype': 'hdinsight', 'resourceid': \"[resourceid('microsoft.hdinsight/clusters', parameters('clustername'))]\", 'properties': {'sshport': \"[parameters('sshport')]\", 'administratoraccount': {'username': \"[parameters('username')]\", 'password': \"[parameters('password')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a tabular dataset from Web URL in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datasets', 'name': \"[concat(parameters('workspacename'), '/', parameters('datasetname'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'skipvalidation': \"[parameters('skipvalidation')]\", 'datasettype': 'tabular', 'parameters': {'header': \"[parameters('header')]\", 'includepath': \"[parameters('includepath')]\", 'path': {'httpurl': \"[parameters('httpurl')]\"}, 'separator': \"[parameters('separator')]\", 'sourcetype': \"[parameters('sourcetype')]\"}, 'registration': {'description': \"[parameters('datasetdescription')]\", 'tags': \"[parameters('tags')]\"}, 'timeseries': {'finegraintimestamp': \"[parameters('finegraintimestamp')]\", 'coarsegraintimestamp': \"[parameters('coarsegraintimestamp')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a SQL datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', parameters('datastorename'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'datastoretype': 'sqldb', 'skipvalidation': \"[parameters('skipvalidation')]\", 'databasename': \"[parameters('databasename')]\", 'servername': \"[parameters('sqlservername')]\", 'username': \"[if(equals(parameters('authenticationtype'), 'sql authentication'), parameters('usernameorclientid'), json('null'))]\", 'password': \"[if(equals(parameters('authenticationtype'), 'sql authentication'), parameters('passwordorclientsecret'), json('null'))]\", 'tenantid': \"[if(equals(parameters('authenticationtype'), 'service principal'), parameters('tenantid'), json('null'))]\", 'clientid': \"[if(equals(parameters('authenticationtype'), 'service principal'), parameters('usernameorclientid'), json('null'))]\", 'clientsecret': \"[if(equals(parameters('authenticationtype'), 'service principal'), parameters('passwordorclientsecret'), json('null'))]\", 'authorityurl': \"[parameters('authorityurl')]\", 'resourceurl': \"[parameters('resourceurl')]\", 'endpoint': \"[parameters('endpoint')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a tabular dataset from SQL query in SQL/PostgreSQL/MySQL datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datasets', 'name': \"[concat(parameters('workspacename'), '/', parameters('datasetname'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'skipvalidation': \"[parameters('skipvalidation')]\", 'datasettype': 'tabular', 'parameters': {'query': {'query': \"[parameters('sqlquery')]\", 'datastorename': \"[parameters('datastorename')]\"}, 'sourcetype': 'sql_query'}, 'registration': {'description': \"[parameters('datasetdescription')]\", 'tags': \"[parameters('tags')]\"}, 'timeseries': {'finegraintimestamp': \"[parameters('finegraintimestamp')]\", 'coarsegraintimestamp': \"[parameters('coarsegraintimestamp')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Machine Learning service.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/services', 'apiversion': '2020-05-01-preview', 'name': \"[concat(parameters('workspacename'), '/', parameters('webservicename'))]\", 'location': \"[parameters('location')]\", 'properties': {'environmentimagerequest': {'models': \"[ variables('models')]\", 'driverprogram': \"[if(empty(variables('driverprogramfilename')), json('null'), variables('driverprogramfilename'))]\", 'assets': \"[if(empty(variables('driverprogramfilename')), json('null'), variables('assets'))]\", 'environmentreference': \"[if(not(or(empty(parameters('environmentname')), empty(parameters('environmentversion')))), createobject('name', parameters('environmentname'), 'version', parameters('environmentversion')), json('null'))]\"}, 'scoringtimeoutms': \"[parameters('scoringtimeoutmilliseconds')]\", 'appinsightsenabled': \"[parameters('appinsightsenabled')]\", 'authenabled': \"[parameters('authenabled')]\", 'aadauthenabled': \"[parameters('tokenauthenabled')]\", 'keys': \"[if(not(or(empty(parameters('primarykey')), empty(parameters('secondarykey')))), createobject('primarykey', parameters('primarykey'), 'secondarykey', parameters('secondarykey')), json('null'))]\", 'containerresourcerequirements': {'cpu': \"[parameters('cpu')]\", 'cpulimit': \"[parameters('cpulimit')]\", 'gpu': \"[parameters('gpu')]\", 'memoryingb': \"[parameters('memoryingb')]\"}, 'computetype': 'aci'}} END"}
{"prompt": "\n\n###\n\nThis template creates a Machine Learning Service DSVM Compute.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/computes', 'apiversion': '2021-04-01', 'name': \"[concat(parameters('workspacename'), '/', parameters('computename'))]\", 'location': \"[parameters('location')]\", 'properties': {'computetype': 'virtualmachine', 'resourceid': \"[resourceid('microsoft.compute/virtualmachines', parameters('vmname'))]\", 'properties': {'sshport': \"[parameters('sshport')]\", 'administratoraccount': {'username': \"[parameters('username')]\", 'password': \"[parameters('password')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a file dataset from Web URL in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datasets', 'name': \"[concat(parameters('workspacename'), '/', parameters('datasetname'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'skipvalidation': \"[parameters('skipvalidation')]\", 'datasettype': 'file', 'parameters': {'path': {'httpurl': \"[parameters('httpurl')]\"}}, 'registration': {'description': \"[parameters('datasetdescription')]\", 'tags': \"[parameters('tags')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a PostgreSQL datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', parameters('datastorename'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'datastoretype': 'psqldb', 'skipvalidation': \"[parameters('skipvalidation')]\", 'databasename': \"[parameters('databasename')]\", 'password': \"[parameters('password')]\", 'servername': \"[parameters('servername')]\", 'userid': \"[parameters('userid')]\", 'port': \"[parameters('port')]\", 'endpoint': \"[parameters('endpoint')]\", 'enforcessl': \"[parameters('enforcessl')]\"}} END"}
{"prompt": "\n\n###\n\nDemonstrates What role assignment are needed on the dependent resources of Azure Machine Learning user assigned identity enabled workspace to make the workspace functions as expected.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template creates an AKS compute target in AML with a private IP address.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces', 'apiversion': '2021-04-01', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.keyvault/vaults', variables('keyvaultname'))]\", \"[resourceid('microsoft.insights/components', variables('applicationinsightsname'))]\", \"[resourceid('microsoft.containerregistry/registries', variables('containerregistryname'))]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'friendlyname': \"[parameters('workspacename')]\", 'keyvault': \"[resourceid('microsoft.keyvault/vaults',variables('keyvaultname'))]\", 'applicationinsights': \"[resourceid('microsoft.insights/components',variables('applicationinsightsname'))]\", 'containerregistry': \"[resourceid('microsoft.containerregistry/registries',variables('containerregistryname'))]\", 'storageaccount': \"[resourceid('microsoft.storage/storageaccounts/',variables('storageaccountname'))]\"}}{'type': 'microsoft.machinelearningservices/workspaces/computes', 'apiversion': '2021-04-01', 'name': \"[concat(parameters('workspacename'),'/compute-with-ilb')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.machinelearningservices/workspaces', parameters('workspacename'))]\"], 'properties': {'computetype': 'aks', 'computelocation': \"[parameters('location')]\", 'properties': {'agentvmsize': \"[parameters('vmsize')]\", 'agentcount': \"[parameters('agentcount')]\", 'loadbalancertype': 'internalloadbalancer'}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Machine Learning Service Aks Compute.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/computes', 'apiversion': '2021-01-01', 'name': \"[concat(parameters('workspacename'), '/', parameters('computename'))]\", 'location': \"[parameters('location')]\", 'properties': {'computetype': 'aks', 'resourceid': \"[resourceid('microsoft.containerservice/managedclusters', parameters('clustername'))]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Machine Learning service.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/services', 'apiversion': '2020-05-01-preview', 'name': \"[concat(parameters('workspacename'), '/', parameters('webservicename'))]\", 'location': \"[parameters('location')]\", 'properties': {'environmentimagerequest': {'models': \"[ variables('models')]\", 'driverprogram': \"[if(empty(variables('driverprogramfilename')), json('null'), variables('driverprogramfilename'))]\", 'assets': \"[if(empty(variables('driverprogramfilename')), json('null'), variables('assets'))]\", 'environmentreference': \"[if(not(or(empty(parameters('environmentname')), empty(parameters('environmentversion')))), createobject('name', parameters('environmentname'), 'version', parameters('environmentversion')), json('null'))]\"}, 'scoringtimeoutms': \"[parameters('scoringtimeoutmilliseconds')]\", 'appinsightsenabled': \"[parameters('appinsightsenabled')]\", 'authenabled': \"[parameters('authenabled')]\", 'aadauthenabled': \"[parameters('tokenauthenabled')]\", 'keys': \"[if(not(or(empty(parameters('primarykey')), empty(parameters('secondarykey')))), createobject('primarykey', parameters('primarykey'), 'secondarykey', parameters('secondarykey')), json('null'))]\", 'containerresourcerequirements': {'cpu': \"[parameters('cpu')]\", 'cpulimit': \"[parameters('cpulimit')]\", 'gpu': \"[parameters('gpu')]\", 'memoryingb': \"[parameters('memoryingb')]\"}, 'computetype': 'aks', 'computename': \"[parameters('computetarget')]\", 'numreplicas': \"[parameters('numreplicas')]\", 'autoscaler': \"[if(parameters('autoscaleenabled'), createobject('autoscaleenabled', parameters('autoscaleenabled'), 'minreplicas', int(parameters('autoscaleminreplicas')), 'maxreplicas', int(parameters('autoscalemaxreplicas')), 'targetutilization', int(parameters('autoscaletargetutilization')), 'refreshperiodinseconds', int(parameters('autoscalerefreshseconds'))), json('null'))]\", 'namespace': \"[parameters('namespace')]\", 'livenessproberequirements': \"[createobject('periodseconds', parameters('periodseconds'), 'initialdelayseconds', parameters('initialdelayseconds'), 'timeoutseconds' , parameters('timeoutseconds'), 'failurethreshold', parameters('failurethreshold'), 'successthreshold', parameters('successthreshold'))]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Machine Learning service workspace while allowing for various security configuraitons.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces', 'apiversion': '2020-09-01-preview', 'name': \"[parameters('workspacename')]\", 'location': \"[parameters('location')]\", 'identity': {'type': \"[parameters('identitytype')]\", 'userassignedidentities': \"[if(or(equals(parameters('identitytype'), 'userassigned'), equals(parameters('identitytype'), 'systemassigned,userassigned')), variables('userassignedidentities'), json('null'))]\"}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\", \"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\", \"[resourceid('microsoft.insights/components', parameters('applicationinsightsname'))]\", \"[resourceid('microsoft.containerregistry/registries', parameters('containerregistryname'))]\"], 'tags': \"[parameters('tagvalues')]\", 'properties': {'friendlyname': \"[parameters('workspacename')]\", 'storageaccount': \"[variables('storageaccount')]\", 'keyvault': \"[variables('keyvault')]\", 'applicationinsights': \"[variables('applicationinsights')]\", 'containerregistry': \"[if(not(equals(parameters('containerregistryoption'), 'none')), variables('containerregistry'), json('null'))]\", 'adbworkspace': \"[if(empty(parameters('adbworkspace')), json('null'), parameters('adbworkspace'))]\", 'primaryuserassignedidentity': \"[if(equals(parameters('identitytype'), 'userassigned'), variables('primaryuserassignedidentity'), json('null'))]\", 'encryption': {'status': \"[parameters('encryption_status')]\", 'identity': \"[variables('encryptionidentity')]\", 'keyvaultproperties': {'keyvaultarmid': \"[parameters('cmk_keyvault')]\", 'keyidentifier': \"[parameters('resource_cmk_uri')]\"}, 'cosmosdbarmid': \"[parameters('encryption_cosmosdb_armid')]\", 'storageaccountarmid': \"[parameters('encryption_storage_armid')]\", 'searchaccountarmid': \"[parameters('encryption_search_armid')]\"}, 'hbiworkspace': \"[parameters('confidential_data')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an AML dashboard using existing Log Analytics diagnostics data.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis set of Bicep templates demonstrates how to set up Azure Machine Learning end-to-end in a secure set up.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Machine Learning aks compute.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/computes', 'apiversion': '2021-01-01', 'name': \"[concat(parameters('workspacename'), '/', parameters('computename'))]\", 'location': \"[parameters('location')]\", 'properties': {'computetype': 'aks', 'properties': {'agentvmsize': \"[parameters('agentvmsize')]\", 'agentcount': \"[parameters('agentcount')]\", 'sslconfiguration': \"[if(equals(parameters('sslstatus'),'disabled'), json('null'), variables('sslconfiguration'))]\", 'aksnetworkingconfiguration': \"[if(and(not(empty(parameters('vnetresourcegroupname'))),not(empty(parameters('vnetname'))),not(empty(parameters('subnetname'))),not(empty(parameters('servicecidr'))),not(empty(parameters('dnsserviceip'))),not(empty(parameters('dockerbridgecidr')))), variables('aksnetworkingconfiguration'), json('null'))]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Databricks File System datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', parameters('datastorename'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'datastoretype': 'dbfs', 'skipvalidation': \"[parameters('skipvalidation')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Machine Learning compute instance on behalf of another user with a sample inline setup script\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/computes', 'name': \"[concat(parameters('workspacename'), '/', parameters('computename'))]\", 'apiversion': '2021-07-01', 'location': \"[parameters('location')]\", 'properties': {'computetype': 'computeinstance', 'properties': {'vmsize': \"[parameters('vmsize')]\", 'subnet': \"[if(and(not(empty(parameters('vnetresourcegroupname'))),not(empty(parameters('vnetname'))),not(empty(parameters('subnetname')))), variables('subnet'), json('null'))]\", 'personalcomputeinstancesettings': {'assigneduser': {'objectid': \"[parameters('objectid')]\", 'tenantid': \"[parameters('tenantid')]\"}}, 'setupscripts': {'scripts': {'creationscript': {'scriptsource': 'inline', 'scriptdata': \"[base64(parameters('inlinecommand'))]\", 'scriptarguments': \"[parameters('creationscript.cmdarguments')]\"}}}, 'schedules': \"[parameters('schedules')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a MySQL datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', parameters('datastorename'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'datastoretype': 'mysqldb', 'skipvalidation': \"[parameters('skipvalidation')]\", 'databasename': \"[parameters('databasename')]\", 'password': \"[parameters('password')]\", 'servername': \"[parameters('servername')]\", 'userid': \"[parameters('userid')]\", 'port': \"[parameters('port')]\", 'endpoint': \"[parameters('endpoint')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a file dataset from relative path in datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datasets', 'name': \"[concat(parameters('workspacename'), '/', parameters('datasetname'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'skipvalidation': \"[parameters('skipvalidation')]\", 'datasettype': 'file', 'parameters': {'path': {'datapath': {'relativepath': \"[parameters('relativepath')]\", 'datastorename': \"[parameters('datastorename')]\"}}}, 'registration': {'description': \"[parameters('datasetdescription')]\", 'tags': \"[parameters('tags')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Machine Learning compute cluster.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/computes', 'name': \"[concat(parameters('workspacename'), '/', parameters('clustername'))]\", 'apiversion': '2021-01-01', 'location': \"[parameters('location')]\", 'properties': {'computetype': 'amlcompute', 'properties': {'vmsize': \"[parameters('vmsize')]\", 'scalesettings': {'minnodecount': \"[parameters('minnodecount')]\", 'maxnodecount': \"[parameters('maxnodecount')]\"}, 'useraccountcredentials': {'adminusername': \"[parameters('adminusername')]\", 'adminuserpassword': \"[parameters('adminuserpassword')]\"}, 'subnet': \"[if(and(not(empty(parameters('vnetresourcegroupname'))),not(empty(parameters('vnetname'))),not(empty(parameters('subnetname')))), variables('subnet'), json('null'))]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a tabular dataset from relative path in datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datasets', 'name': \"[concat(parameters('workspacename'), '/', parameters('datasetname'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'skipvalidation': \"[parameters('skipvalidation')]\", 'datasettype': 'tabular', 'parameters': {'header': \"[parameters('header')]\", 'includepath': \"[parameters('includepath')]\", 'partitionformat': \"[parameters('partitionformat')]\", 'path': {'datapath': {'relativepath': \"[parameters('relativepath')]\", 'datastorename': \"[parameters('datastorename')]\"}}, 'separator': \"[parameters('separator')]\", 'sourcetype': \"[parameters('sourcetype')]\"}, 'registration': {'description': \"[parameters('datasetdescription')]\", 'tags': \"[parameters('tags')]\"}, 'timeseries': {'finegraintimestamp': \"[parameters('finegraintimestamp')]\", 'coarsegraintimestamp': \"[parameters('coarsegraintimestamp')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a blob storage datastore in Azure Machine Learning workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/datastores', 'name': \"[concat(parameters('workspacename'), '/', parameters('datastorename'))]\", 'apiversion': '2020-05-01-preview', 'location': \"[parameters('location')]\", 'properties': {'datastoretype': 'blob', 'skipvalidation': \"[parameters('skipvalidation')]\", 'accountname': \"[parameters('storageaccountname')]\", 'containername': \"[parameters('containername')]\", 'accountkey': \"[if(equals(parameters('authenticationtype'), 'account key'), parameters('sastokenoraccountkey'), json('null'))]\", 'sastoken': \"[if(equals(parameters('authenticationtype'), 'sas token'), parameters('sastokenoraccountkey'), json('null'))]\", 'storageaccountsubscriptionid': \"[parameters('storageaccountsubscriptionid')]\", 'storageaccountresourcegroup': \"[parameters('storageaccountresourcegroup')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a Machine Learning Service ADLA Compute.\n\n===\n\n", "completion": " {'type': 'microsoft.machinelearningservices/workspaces/computes', 'apiversion': '2018-11-19', 'name': \"[concat(parameters('workspacename'), '/', parameters('computename'))]\", 'location': \"[parameters('location')]\", 'properties': {'computetype': 'datalakeanalytics', 'resourceid': \"[resourceid('microsoft.datalakeanalytics/accounts', parameters('adlanalyticsname'))]\"}} END"}
{"prompt": "\n\n###\n\nCreating a Azure SignalR Service using a template.\n\n===\n\n", "completion": " {'type': 'microsoft.signalrservice/signalr', 'apiversion': '2020-07-01-preview', 'name': \"[parameters('name')]\", 'location': \"[parameters('location')]\", 'sku': {'capacity': \"[parameters('capacity')]\", 'name': \"[parameters('pricingtier')]\"}, 'kind': 'signalr', 'identity': {'type': 'systemassigned'}, 'properties': {'tls': {'clientcertenabled': false}, 'features': [{'flag': 'servicemode', 'value': \"[parameters('servicemode')]\"}, {'flag': 'enableconnectivitylogs', 'value': \"[parameters('enableconnectivitylogs')]\"}, {'flag': 'enablemessaginglogs', 'value': \"[parameters('enablemessaginglogs')]\"}, {'flag': 'enablelivetrace', 'value': \"[parameters('enablelivetrace')]\"}], 'cors': {'allowedorigins': \"[parameters('allowedorigins')]\"}, 'networkacls': {'defaultaction': 'deny', 'publicnetwork': {'allow': ['clientconnection']}, 'privateendpoints': [{'name': 'mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e', 'allow': ['serverconnection']}]}, 'upstream': {'templates': [{'categorypattern': '*', 'eventpattern': 'connect,disconnect', 'hubpattern': '*', 'urltemplate': 'https://example.com/chat/api/connect'}]}}} END"}
{"prompt": "\n\n###\n\nThis template creates an IOT Hub and Virtual Machine Ubuntu edge simulator, using Azure IoT Edge.\n\n===\n\n", "completion": " {'type': 'microsoft.devices/iothubs', 'apiversion': '2020-03-01', 'name': \"[parameters('iothubname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'properties': {}}{'type': 'microsoft.devices/provisioningservices', 'apiversion': '2020-01-01', 'name': \"[parameters('provisioningservicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'dependson': [\"[parameters('iothubname')]\"], 'properties': {'iothubs': [{'connectionstring': \"[concat('hostname=https://', parameters('iothubname'), parameters('iothubdomain'), ';sharedaccesskeyname=', variables('iothubkeyname'), ';sharedaccesskey=', listkeys(resourceid('microsoft.devices/iothubs/iothubkeys', parameters('iothubname'), variables('iothubkeyname')), '2020-03-01').primarykey)]\", 'location': \"[parameters('location')]\", 'name': \"[concat('https://', parameters('iothubname'), parameters('iothubdomain'))]\"}]}} END"}
{"prompt": "\n\n###\n\nThis template creates an IoT Hub and a storage account and shows automatic routing.\n\n===\n\n", "completion": " {'type': 'microsoft.devices/iothubs', 'apiversion': '2021-03-31', 'name': \"[variables('iothubname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'properties': {'eventhubendpoints': {'events': {'retentiontimeindays': 1, 'partitioncount': \"[parameters('d2cpartitions')]\"}}, 'routing': {'endpoints': {'storagecontainers': [{'connectionstring': \"[concat('defaultendpointsprotocol=https;accountname=',variables('storageaccountname'),';endpointsuffix=',environment().suffixes.storage,';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-02-01').keys[0].value)]\", 'containername': \"[variables('storagecontainername')]\", 'filenameformat': '{iothub}/{partition}/{yyyy}/{mm}/{dd}/{hh}/{mm}', 'batchfrequencyinseconds': 100, 'maxchunksizeinbytes': 104857600, 'encoding': 'json', 'name': \"[variables('storageendpoint')]\"}]}, 'routes': [{'name': 'contosostorageroute', 'source': 'devicemessages', 'condition': 'level=\"storage\"', 'endpointnames': [\"[variables('storageendpoint')]\"], 'isenabled': true}], 'fallbackroute': {'name': '$fallback', 'source': 'devicemessages', 'condition': 'true', 'endpointnames': ['events'], 'isenabled': true}}, 'messagingendpoints': {'filenotifications': {'lockdurationasiso8601': 'pt1m', 'ttlasiso8601': 'pt1h', 'maxdeliverycount': 10}}, 'enablefileuploadnotifications': false, 'cloudtodevice': {'maxdeliverycount': 10, 'defaultttlasiso8601': 'pt1h', 'feedback': {'lockdurationasiso8601': 'pt1m', 'ttlasiso8601': 'pt1h', 'maxdeliverycount': 10}}}} END"}
{"prompt": "\n\n###\n\nThis template creates an IoT Hub and a device to cloud consumer group.\n\n===\n\n", "completion": " {'type': 'microsoft.devices/iothubs', 'apiversion': '2021-03-31', 'name': \"[parameters('iothubname')]\", 'location': \"[parameters('location')]\", 'properties': {'eventhubendpoints': {'events': {'retentiontimeindays': 1, 'partitioncount': 2}}, 'cloudtodevice': {'defaultttlasiso8601': 'pt1h', 'maxdeliverycount': 10, 'feedback': {'ttlasiso8601': 'pt1h', 'lockdurationasiso8601': 'pt60s', 'maxdeliverycount': 10}}, 'messagingendpoints': {'filenotifications': {'ttlasiso8601': 'pt1h', 'lockdurationasiso8601': 'pt1m', 'maxdeliverycount': 10}}}, 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('capacityunits')]\"}}{'type': 'microsoft.devices/iothubs/eventhubendpoints/consumergroups', 'apiversion': '2021-03-31', 'name': \"[variables('consumergroupname')]\", 'properties': {'name': 'cg1'}, 'dependson': [\"[resourceid('microsoft.devices/iothubs', parameters('iothubname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an IoT hub and an IoT Hub Device Provisioning Service, and link the two services together.\n\n===\n\n", "completion": " {'type': 'microsoft.devices/iothubs', 'apiversion': '2021-03-31', 'name': \"[parameters('iothubname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'properties': {}}{'type': 'microsoft.devices/provisioningservices', 'apiversion': '2020-03-01', 'name': \"[parameters('provisioningservicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skuunits')]\"}, 'dependson': [\"[parameters('iothubname')]\"], 'properties': {'iothubs': [{'connectionstring': \"[concat('hostname=', reference(resourceid('microsoft.devices/iothubs', parameters('iothubname'))).hostname, ';sharedaccesskeyname=', variables('iothubkeyname'), ';sharedaccesskey=', listkeys(resourceid('microsoft.devices/iothubs/iothubkeys', parameters('iothubname'), variables('iothubkeyname')), '2020-03-01').primarykey)]\", 'location': \"[parameters('location')]\", 'name': \"[reference(resourceid('microsoft.devices/iothubs', parameters('iothubname'))).hostname]\"}]}} END"}
{"prompt": "\n\n###\n\nProvision an Azure Cognitive Search service\n\n===\n\n", "completion": " {'type': 'microsoft.search/searchservices', 'apiversion': '2020-08-01', 'name': \"[parameters('name')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'properties': {'replicacount': \"[parameters('replicacount')]\", 'partitioncount': \"[parameters('partitioncount')]\", 'hostingmode': \"[parameters('hostingmode')]\"}} END"}
{"prompt": "\n\n###\n\nDeploy an App Service that supports Python. It gives you the support to deploy your own Flask app.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'name': \"[parameters('webappname')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"], 'properties': {'name': \"[parameters('webappname')]\", 'siteconfig': {'linuxfxversion': \"[variables('linuxfxversion')]\", 'alwayson': \"[variables('alwayson')]\"}, 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'clientaffinityenabled': false}}{'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'kind': 'linux', 'properties': {'name': \"[variables('hostingplanname')]\", 'workersize': \"[variables('workersize')]\", 'workersizeid': \"[variables('workersizeid')]\", 'numberofworkers': \"[variables('numberofworkers')]\", 'reserved': true}, 'sku': {'tier': \"[variables('sku')]\", 'name': \"[variables('skucode')]\"}} END"}
{"prompt": "\n\n###\n\nThis template provides a easy way to deploy a puckel/docker-airflow image (latest tag) on a Linux Web App with Azure database for PostgreSQL.\n\n===\n\n", "completion": " {'comments': 'this is the airflow linux web app running puckel/docker-airflow docker image', 'type': 'microsoft.web/sites', 'name': \"[parameters('sitename')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hostingplanname')]\", \"[variables('databasename')]\"], 'properties': {'siteconfig': {'linuxfxversion': 'docker|puckel/docker-airflow:latest'}, 'name': \"[parameters('sitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'resources': [{'name': 'appsettings', 'type': 'config', 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('sitename'))]\"], 'tags': {'displayname': 'airflowappsettings'}, 'comments': 'this are the generated settings for the airflow sql alchemy connectionstring', 'properties': {'airflow__core__sql_alchemy_conn': \"[concat('postgresql://', variables('airflowusername'),':',parameters('administratorloginpassword'),'@',reference(resourceid('microsoft.dbforpostgresql/servers',variables('servername'))).fullyqualifieddomainname,':5432/',variables('databasename'))]\", 'airflow__core__load_examples': 'true', 'websites_enable_app_service_storage': 'true'}}]}{'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('hostingplanname')]\", 'workersizeid': '1', 'reserved': true, 'numberofworkers': '1'}, 'sku': {'tier': \"[parameters('serviceplantier')]\", 'name': \"[parameters('serviceplansku')]\"}, 'kind': 'linux'} END"}
{"prompt": "\n\n###\n\nThis template Creates an Azure App Service Environment inside A Virtual Network Subnet. This template also adds a Azure Web App inside the App Service Environment.\n\n===\n\n", "completion": " {'apiversion': '2019-08-01', 'type': 'microsoft.web/hostingenvironments', 'name': \"[variables('ase-name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('ase-vnet-name'))]\"], 'tags': {\"[concat('hidden-related:', resourceid('microsoft.web/serverfarms', variables('ase-service-name')))]\": 'resource', \"[concat('hidden-related:', resourceid('microsoft.web/sites', variables('ase-web-app-name')))]\": 'resource', 'displayname': 'ase'}, 'properties': {'name': \"[variables('ase-name')]\", 'location': \"[parameters('location')]\", 'ipssladdresscount': \"[parameters('ase-ipssladdresscount')]\", 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('ase-vnet-name'), variables('ase-vnetsubnet1name'))]\"}, 'multisize': \"[parameters('ase-frontendsize')]\", 'multirolecount': \"[parameters('ase-frontendcount')]\", 'workerpools': [{'workersizeid': 0, 'workersize': \"[parameters('ase-workerpooloneinstancesize')]\", 'workercount': \"[parameters('ase-workerpooloneinstancecount')]\"}, {'workersizeid': 1, 'workersize': \"[parameters('ase-workerpooltwoinstancesize')]\", 'workercount': \"[parameters('ase-workerpooltwoinstancecount')]\"}, {'workersizeid': 2, 'workersize': \"[parameters('ase-workerpoolthreeinstancesize')]\", 'workercount': \"[parameters('ase-workerpoolthreeinstancecount')]\"}]}}{'name': \"[variables('ase-service-name')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'apiversion': '2019-08-01', 'dependson': [\"[resourceid('microsoft.web/hostingenvironments', variables('ase-name'))]\"], 'tags': {'displayname': 'ase-app-service-app'}, 'properties': {'name': \"[variables('ase-service-name')]\", 'hostingenvironment': \"[variables('ase-name')]\", 'hostingenvironmentid': \"[resourceid('microsoft.web/hostingenvironments', variables('ase-name'))]\"}, 'sku': {'name': \"[concat('p', parameters('ase-app-service-workerpool'))]\", 'tier': 'premium', 'size': \"[concat('p', parameters('ase-app-service-workerpool'))]\", 'family': 'p', 'capacity': \"[parameters('ase-app-service-numberofworkersfromworkerpool')]\"}}{'name': \"[variables('ase-web-app-name')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'apiversion': '2019-08-01', 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('ase-service-name'))]\"], 'tags': {\"[concat('hidden-related:', resourceid('microsoft.web/serverfarms', variables('ase-service-name')))]\": 'resource', 'displayname': 'ase-web-app'}, 'properties': {'name': \"[variables('ase-web-app-name')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('ase-service-name'))]\", 'hostingenvironment': \"[variables('ase-name')]\", 'hostingenvironmentid': \"[resourceid('microsoft.web/hostingenvironments', variables('ase-name'))]\"}} END"}
{"prompt": "\n\n###\n\nInstall a Public Certificate in App Service\n\n===\n\n", "completion": " {'apiversion': '2020-10-01', 'name': \"[concat(parameters('exisitngwebappname'), '/', variables('publiccertificatename'))]\", 'type': 'microsoft.web/sites/publiccertificates', 'location': \"[parameters('location')]\", 'properties': {'publiccertificatelocation': \"[parameters('publiccertificatelocation')]\", 'blob': \"[parameters('blob')]\"}} END"}
{"prompt": "\n\n###\n\nIt allows you to deploy an App Service Plan and a Windows app\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanportalname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('webappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanportalname'))]\"], 'properties': {'siteconfig': \"[variables('configreference')[parameters('language')]]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanportalname'))]\"}, 'resources': [{'condition': \"[contains(variables('gitrepourl'),'http')]\", 'type': 'sourcecontrols', 'apiversion': '2020-06-01', 'name': 'web', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('webappname'))]\"], 'properties': {'repourl': \"[variables('gitrepourl')]\", 'branch': 'master', 'ismanualintegration': true}}]} END"}
{"prompt": "\n\n###\n\nProvision a function app on a dedicated hosting plan\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'properties': {'name': \"[variables('hostingplanname')]\", 'workersize': \"[parameters('workersize')]\", 'numberofworkers': 1}}{'apiversion': '2020-06-01', 'type': 'microsoft.web/sites', 'name': \"[variables('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'properties': {'name': \"[variables('functionappname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'clientaffinityenabled': false, 'siteconfig': {'alwayson': true}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'resources': [{'apiversion': '2018-11-01', 'name': 'appsettings', 'type': 'config', 'dependson': [\"[resourceid('microsoft.web/sites', variables('functionappname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'properties': {'azurewebjobsstorage': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\", 'appinsights_instrumentationkey': \"[reference(resourceid('microsoft.insights/components', variables('applicationinsightsname')), '2020-02-02-preview').instrumentationkey]\", 'functions_extension_version': '~3'}}]} END"}
{"prompt": "\n\n###\n\nCreate a Container App Environment with a basic Container App. It also deploys a Log Analytics Workspace to store logs.\n\n===\n\n", "completion": " {'type': 'microsoft.web/kubeenvironments', 'apiversion': '2021-02-01', 'name': \"[parameters('containerappenvname')]\", 'location': \"[parameters('location')]\", 'kind': 'containerenvironment', 'properties': {'type': 'managed', 'internalloadbalancerenabled': false, 'applogsconfiguration': {'destination': 'log-analytics', 'loganalyticsconfiguration': {'customerid': \"[reference(resourceid('microsoft.operationalinsights/workspaces', parameters('containerapploganalyticsname'))).customerid]\", 'sharedkey': \"[listkeys(resourceid('microsoft.operationalinsights/workspaces', parameters('containerapploganalyticsname')), '2020-10-01').primarysharedkey]\"}}}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', parameters('containerapploganalyticsname'))]\"]}{'type': 'microsoft.web/containerapps', 'apiversion': '2021-03-01', 'name': \"[parameters('containerappname')]\", 'location': \"[parameters('location')]\", 'properties': {'kubeenvironmentid': \"[resourceid('microsoft.web/kubeenvironments', parameters('containerappenvname'))]\", 'configuration': {'ingress': {'external': true, 'targetport': \"[parameters('targetport')]\", 'allowinsecure': false, 'traffic': [{'latestrevision': true, 'weight': 100}]}}, 'template': {'revisionsuffix': 'firstrevision', 'containers': [{'name': \"[parameters('containerappname')]\", 'image': \"[parameters('containerimage')]\", 'resources': {'cpu': \"[parameters('cpucore')]\", 'memory': \"[format('{0}gi', parameters('memorysize'))]\"}}], 'scale': {'minreplica': \"[parameters('minreplica')]\", 'maxreplica': \"[parameters('maxreplica')]\"}}}, 'dependson': [\"[resourceid('microsoft.web/kubeenvironments', parameters('containerappenvname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a Web App plus an Application Gateway v2 using a template. Access to the Web App is protected with a Service Endpoint Access Restriction from the Application Gateway subnet.\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'name': \"[variables('webappplanname')]\", 'apiversion': '2020-06-01', 'location': \"[variables('location')]\", 'properties': {'reserved': 'false'}, 'sku': {'name': \"[variables('webappplansku')]\", 'capacity': 1}}{'name': \"[variables('webappname')]\", 'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'location': \"[variables('location')]\", 'dependson': [\"[variables('webappplanid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'serverfarmid': \"[variables('webappplanid')]\", 'reserved': 'false', 'siteconfig': {'http20enabled': 'true', 'mintlsversion': '1.2', 'ipsecurityrestrictions': [{'vnetsubnetresourceid': \"[variables('virtualnetworksubnetid')]\", 'action': 'allow', 'tag': 'default', 'priority': 200, 'name': 'appgatewaysubnet', 'description': 'isolate traffic to subnet containing azure application gateway'}]}, 'httpsonly': 'false'}} END"}
{"prompt": "\n\n###\n\nDeploy two web apps and connect it securely with Private Endpoint and VNet injection\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[parameters('serverfarmname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'tier': \"[variables('sku_tier')]\", 'size': \"[parameters('skusize')]\", 'family': \"[parameters('skufamily')]\", 'capacity': 1}, 'kind': 'app'}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('site1_name')]\", 'location': \"[parameters('location')]\", 'kind': 'app', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('serverfarmname'))]\"}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', parameters('serverfarmname'))]\"]}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('site2_name')]\", 'location': \"[parameters('location')]\", 'kind': 'app', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('serverfarmname'))]\"}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', parameters('serverfarmname'))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('site2_name'), 'appsettings')]\", 'properties': {'website_dns_server': '168.63.129.16', 'website_vnet_route_all': '1'}, 'dependson': [\"[resourceid('microsoft.web/sites', parameters('site2_name'))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('site1_name'), 'web')]\", 'properties': {'ftpsstate': 'allallowed'}, 'dependson': [\"[resourceid('microsoft.web/sites', parameters('site1_name'))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('site2_name'), 'web')]\", 'properties': {'ftpsstate': 'allallowed'}, 'dependson': [\"[resourceid('microsoft.web/sites', parameters('site2_name'))]\"]}{'type': 'microsoft.web/sites/hostnamebindings', 'apiversion': '2019-08-01', 'name': \"[format('{0}/{1}', parameters('site1_name'), format('{0}{1}', parameters('site1_name'), variables('webapp_dns_name')))]\", 'properties': {'sitename': \"[parameters('site1_name')]\", 'hostnametype': 'verified'}, 'dependson': [\"[resourceid('microsoft.web/sites', parameters('site1_name'))]\"]}{'type': 'microsoft.web/sites/hostnamebindings', 'apiversion': '2019-08-01', 'name': \"[format('{0}/{1}', parameters('site2_name'), format('{0}{1}', parameters('site2_name'), variables('webapp_dns_name')))]\", 'properties': {'sitename': \"[parameters('site2_name')]\", 'hostnametype': 'verified'}, 'dependson': [\"[resourceid('microsoft.web/sites', parameters('site2_name'))]\"]}{'type': 'microsoft.web/sites/networkconfig', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('site2_name'), 'virtualnetwork')]\", 'properties': {'subnetresourceid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnet2name'))]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.web/sites', parameters('site2_name'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template provides a easy way to deploy Web App on Linux with Azure database for PostgreSQL\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('hostingplanname')]\", 'workersize': '1', 'numberofworkers': 0}, 'sku': {'tier': 'standard', 'name': 's1'}}{'apiversion': '2018-11-01', 'name': \"[parameters('sitename')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"], 'properties': {'name': \"[parameters('sitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'resources': [{'apiversion': '2018-11-01', 'name': 'connectionstrings', 'type': 'config', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('sitename'))]\"], 'properties': {'defaultconnection': {'value': \"[concat('database=', variables('databasename'), ';server=', reference(resourceid('microsoft.dbforpostgresql/servers',variables('servername'))).fullyqualifieddomainname, ';user id=', parameters('administratorlogin'),'@', variables('servername'),';password=', parameters('administratorloginpassword'))]\", 'type': 'postgresql'}}}]} END"}
{"prompt": "\n\n###\n\nProvision a function app that runs on a Consumption (dynamic hosting) plan\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'y1', 'tier': 'dynamic'}, 'properties': {'name': \"[variables('hostingplanname')]\", 'computemode': 'dynamic'}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[variables('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'siteconfig': {'appsettings': [{'name': 'azurewebjobsstorage', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'website_contentshare', 'value': \"[tolower(variables('functionappname'))]\"}, {'name': 'functions_extension_version', 'value': '~2'}, {'name': 'website_node_default_version', 'value': '~10'}, {'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components', variables('applicationinsightsname')), '2020-02-02-preview').instrumentationkey]\"}, {'name': 'functions_worker_runtime', 'value': \"[variables('functionworkerruntime')]\"}]}}} END"}
{"prompt": "\n\n###\n\nApp Service Environment v2 - ILB with Hosting Plan and Azure WebApp\n\n===\n\n", "completion": " {'type': 'microsoft.web/hostingenvironments', 'apiversion': '2020-12-01', 'name': \"[parameters('asename')]\", 'kind': 'asev2', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'ase environment', 'usage': 'hosting paas applications', 'category': 'environment', 'owner': \"[parameters('owner')]\"}, 'properties': {'ipssladdresscount': 0, 'internalloadbalancingmode': \"[parameters('internalloadbalancingmode')]\", 'dnssuffix': \"[parameters('dnssuffix')]\", 'virtualnetwork': {'id': \"[extensionresourceid(format('/subscriptions/{0}/resourcegroups/{1}', subscription().subscriptionid, parameters('vnetresourcegroupname')), 'microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\"}}}{'type': 'microsoft.web/serverfarms', 'apiversion': '2020-12-01', 'name': \"[parameters('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'ase hosting plan', 'usage': 'hosting plan within ase', 'category': 'hosting', 'owner': \"[parameters('owner')]\"}, 'properties': {'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments', parameters('asename'))]\"}}, 'sku': {'name': \"[format('i{0}', parameters('workerpool'))]\", 'tier': 'isolated', 'size': \"[format('i{0}', parameters('workerpool'))]\", 'family': 'i', 'capacity': \"[parameters('numberofworkers')]\"}, 'dependson': [\"[resourceid('microsoft.web/hostingenvironments', parameters('asename'))]\"]}{'type': 'microsoft.web/sites', 'apiversion': '2020-12-01', 'name': \"[parameters('sitename')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'ase web app', 'usage': 'web app hosted within ase', 'category': 'web app', 'owner': \"[parameters('owner')]\"}, 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('appserviceplanname'))]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments', parameters('asename'))]\"}}, 'dependson': [\"[resourceid('microsoft.web/hostingenvironments', parameters('asename'))]\", \"[resourceid('microsoft.web/serverfarms', parameters('appserviceplanname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate an App Service Environment with an ILB Address\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'type': 'microsoft.web/hostingenvironments', 'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'properties': {'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'ipssladdresscount': \"[parameters('ipssladdresscount')]\", 'internalloadbalancingmode': \"[parameters('internalloadbalancingmode')]\", 'virtualnetwork': {'id': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('existingvnetresourceid'), parameters('subnetname'))]\"}, 'multisize': \"[parameters('frontendsize')]\", 'multirolecount': \"[parameters('frontendcount')]\", 'workerpools': [{'workersizeid': 0, 'workersize': \"[parameters('workerpooloneinstancesize')]\", 'workercount': \"[parameters('workerpooloneinstancecount')]\"}, {'workersizeid': 1, 'workersize': \"[parameters('workerpooltwoinstancesize')]\", 'workercount': \"[parameters('workerpooltwoinstancecount')]\"}, {'workersizeid': 2, 'workersize': \"[parameters('workerpoolthreeinstancesize')]\", 'workercount': \"[parameters('workerpoolthreeinstancecount')]\"}]}} END"}
{"prompt": "\n\n###\n\nCreate an App Service Environment v2 with an ILB Address\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.web/hostingenvironments', 'name': \"[parameters('asename')]\", 'kind': 'asev2', 'location': \"[parameters('location')]\", 'properties': {'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'ipssladdresscount': 0, 'internalloadbalancingmode': \"[parameters('internalloadbalancingmode')]\", 'virtualnetwork': {'id': \"[resourceid(parameters('existingvirtualnetworkresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('existingvirtualnetworkname'), parameters('subnetname'))]\"}}} END"}
{"prompt": "\n\n###\n\nCreate a web app on Azure with Java 13 and Tomcat 9 enabled.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'name': \"[parameters('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'hostingplan'}, 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'properties': {'name': \"[parameters('hostingplanname')]\"}}{'apiversion': '2020-06-01', 'name': \"[parameters('websitename')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'tags': {\"[concat('hidden-related:', resourcegroup().id, '/providers/microsoft.web/serverfarms/', parameters('hostingplanname'))]\": 'resource', 'displayname': 'website'}, 'dependson': [\"[resourceid('microsoft.web/serverfarms/', parameters('hostingplanname'))]\"], 'properties': {'name': \"[parameters('websitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('hostingplanname'))]\"}, 'resources': [{'apiversion': '2020-06-01', 'name': 'web', 'type': 'config', 'dependson': [\"[resourceid('microsoft.web/sites/', parameters('websitename'))]\"], 'properties': {'javaversion': '1.8', 'javacontainer': 'tomcat', 'javacontainerversion': '9.0'}}]} END"}
{"prompt": "\n\n###\n\nThis template provides a easy way to deploy Web App on Linux with Azure database for PostgreSQL(Preview).\n\n===\n\n", "completion": " {'type': 'microsoft.web/sites', 'name': \"[parameters('sitename')]\", 'dependson': [\"[variables('hostingplanname')]\"], 'properties': {'siteconfig': {'linuxfxversion': 'node|6.10', 'connectionstrings': [{'name': 'defaultconnection', 'connectionstring': \"[concat('database=', variables('databasename'), ';server=', reference(resourceid('microsoft.dbforpostgresql/servers',variables('servername'))).fullyqualifieddomainname, ';user id=',parameters('administratorlogin'),'@',variables('servername') ,';password=',parameters('administratorloginpassword'))]\", 'type': 'postgresql'}]}, 'name': \"[parameters('sitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'apiversion': '2019-08-01', 'location': \"[parameters('location')]\"}{'apiversion': '2019-08-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('hostingplanname')]\", 'workersizeid': '1', 'reserved': true, 'numberofworkers': '1'}, 'sku': {'tier': 'standard', 'name': 's1'}, 'kind': 'linux'} END"}
{"prompt": "\n\n###\n\nMonitor your Azure Web Apps with Operations Management Suite - Log Analytics\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreate an AppServicePlan and App in an App Service Environment v2\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'name': \"[parameters('appserviceplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'properties': {'name': \"[parameters('appserviceplanname')]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments', parameters('appserviceenvironmentname'))]\"}}, 'sku': {'name': \"[concat('i',parameters('pricingtier'))]\", 'tier': 'isolated', 'size': \"[concat('i',parameters('pricingtier'))]\", 'family': 'i', 'capacity': \"[parameters('capacity')]\"}}{'apiversion': '2020-06-01', 'name': \"[parameters('sitename')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'properties': {'name': \"[parameters('sitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('appserviceplanname'))]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments', parameters('appserviceenvironmentname'))]\"}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms/', parameters('appserviceplanname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template provides an easy way to deploy a web app with custom deployment slots on Azure Web Apps.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.web/serverfarms', 'kind': 'app', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'comments': 'this app service plan is used for the web app and slots.', 'tags': {'displayname': 'appserviceplan'}, 'properties': {}, 'sku': {'name': \"[if(lessorequals(length(parameters('environments')), variables('standardplanmaxadditionalslots')), 's1', 'p1')]\"}}{'apiversion': '2020-06-01', 'type': 'microsoft.web/sites', 'kind': 'app', 'name': \"[variables('webappportalname')]\", 'location': \"[parameters('location')]\", 'comments': \"this is the web app, also the default 'nameless' slot.\", 'tags': {'displayname': 'webapp'}, 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'siteconfig': {'appsettings': [{'name': \"[parameters('appsettingname')]\", 'value': 'value'}, {'name': \"[variables('stickyappsettingname')]\", 'value': 'value'}]}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"]}{'apiversion': '2020-06-01', 'type': 'microsoft.web/sites/slots', 'name': \"[concat(variables('webappportalname'), '/', parameters('environments')[copyindex()])]\", 'kind': 'app', 'location': \"[parameters('location')]\", 'comments': 'this specifies the web app slots.', 'tags': {'displayname': 'webappslots'}, 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"}, 'dependson': [\"[resourceid('microsoft.web/sites', variables('webappportalname'))]\"], 'copy': {'name': 'webportalslot', 'count': \"[length(parameters('environments'))]\"}}{'apiversion': '2020-06-01', 'name': \"[concat(variables('webappportalname'), '/slotconfignames')]\", 'type': 'microsoft.web/sites/config', 'comments': 'this specifies the sticky (slot setting) application settings.', 'dependson': [\"[resourceid('microsoft.web/sites', variables('webappportalname'))]\"], 'properties': {'appsettingnames': [\"[variables('stickyappsettingname')]\"]}} END"}
{"prompt": "\n\n###\n\nDeploy a Web App certificate from Key Vault secret and use it for creating SSL binding\n\n===\n\n", "completion": " {'type': 'microsoft.web/certificates', 'name': \"[parameters('certificatename')]\", 'apiversion': '2019-08-01', 'location': \"[parameters('location')]\", 'properties': {'keyvaultid': \"[parameters('existingkeyvaultid')]\", 'keyvaultsecretname': \"[parameters('existingkeyvaultsecretname')]\", 'serverfarmid': \"[parameters('existingserverfarmid')]\"}}{'type': 'microsoft.web/sites', 'name': \"[parameters('existingwebappname')]\", 'apiversion': '2019-08-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/certificates', parameters('certificatename'))]\"], 'properties': {'name': \"[parameters('existingwebappname')]\", 'hostnamesslstates': [{'name': \"[parameters('hostname')]\", 'sslstate': 'snienabled', 'thumbprint': \"[reference(resourceid('microsoft.web/certificates', parameters('certificatename'))).thumbprint]\", 'toupdate': true}]}} END"}
{"prompt": "\n\n###\n\nThis template provides a way to deploy Web Apps on Linux with Azure database for MySQL.\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'tier': 'standard', 'name': 's1'}, 'kind': 'linux', 'properties': {'reserved': true}}{'type': 'microsoft.web/sites', 'apiversion': '2021-02-01', 'name': \"[parameters('sitename')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'properties': {'siteconfig': {'linuxfxversion': 'php|7.0', 'ftpsstate': 'ftpsonly', 'mintlsversion': '1.2', 'scmmintlsversion': '1.2', 'connectionstrings': [{'name': 'defaultconnection', 'connectionstring': \"[format('database={0};data source={1};user id={2}@{3};password={4}', variables('databasename'), reference(resourceid('microsoft.dbformysql/servers', variables('mysqlservername'))).fullyqualifieddomainname, parameters('administratorlogin'), variables('mysqlservername'), parameters('administratorloginpassword'))]\", 'type': 'mysql'}]}, 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'httpsonly': true}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.dbformysql/servers', variables('mysqlservername'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Web App with Blob Storage connection string. Template originally authored by Jeff Bowles of Microsoft\n\n===\n\n", "completion": " {'name': \"[parameters('webappsvcplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'tags': {'displayname': 'appsvcplan'}, 'sku': {'name': \"[parameters('webappsvcplansku')]\"}, 'properties': {'name': \"[parameters('webappsvcplanname')]\", 'workersize': \"[parameters('webappsvcplanworkersize')]\", 'numberofworkers': 1}}{'name': \"[parameters('webappname')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.web/serverfarms/', parameters('webappsvcplanname'))]\"], 'tags': {\"[concat('hidden-related:', resourcegroup().id, '/providers/microsoft.web/serverfarms/', parameters('webappsvcplanname'))]\": 'resource', 'displayname': 'webapp'}, 'properties': {'name': \"[parameters('webappname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms/', parameters('webappsvcplanname'))]\"}, 'resources': [{'apiversion': '2020-12-01', 'name': 'web', 'type': 'config', 'dependson': [\"[resourceid('microsoft.web/sites/', parameters('webappname'))]\"], 'tags': {'displayname': 'webappconfig'}, 'properties': {'phpversion': '5.6', 'netframeworkversion': 'v4.6', 'use32bitworkerprocess': false, 'websocketsenabled': true, 'alwayson': false, 'remotedebuggingenabled': true, 'remotedebuggingversion': 'vs2017'}}, {'name': 'msdeploy', 'type': 'extensions', 'location': \"[parameters('location')]\", 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.web/sites/', parameters('webappname'))]\", \"[resourceid('microsoft.web/sites/config',parameters('webappname'), 'web')]\"], 'tags': {'displayname': 'webappmsdeploy'}, 'properties': {'packageuri': \"[variables('packageuri')]\"}}, {'name': 'connectionstrings', 'type': 'config', 'apiversion': '2020-12-01', 'dependson': [\"[resourceid('microsoft.web/sites/', parameters('webappname'))]\", \"[resourceid('microsoft.web/sites/extensions', parameters('webappname'), 'msdeploy')]\"], 'tags': {'displayname': 'webappconnectionstrings'}, 'properties': {'blobconnection': {'value': \"[concat('defaultendpointsprotocol=https;accountname=',parameters('storageaccountname'),';accountkey=',concat(listkeys(variables('storageaccountid'),'2015-05-01-preview').key1))]\", 'type': 'custom'}}}]} END"}
{"prompt": "\n\n###\n\nCreate a Web App plus Redis Cache using a template\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'hostingplan'}, 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'properties': {'name': \"[variables('hostingplanname')]\"}}{'apiversion': '2015-08-01', 'name': \"[variables('websitename')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\", \"[resourceid('microsoft.cache/redis/', variables('cachename'))]\"], 'tags': {\"[concat('hidden-related:', resourcegroup().id, '/providers/microsoft.web/serverfarms/', variables('hostingplanname'))]\": 'empty', 'displayname': 'website'}, 'properties': {'name': \"[variables('websitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'resources': [{'apiversion': '2015-08-01', 'type': 'config', 'name': 'appsettings', 'dependson': [\"[resourceid('microsoft.web/sites/', variables('websitename'))]\", \"[resourceid('microsoft.cache/redis/', variables('cachename'))]\"], 'properties': {'cacheconnection': \"[concat(variables('cachename'),'.redis.cache.windows.net,abortconnect=false,ssl=true,password=', listkeys(resourceid('microsoft.cache/redis', variables('cachename')), '2020-12-01').primarykey)]\"}}]} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy an App Service Plan and a basic Linux web app\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanportalname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'kind': 'linux', 'properties': {'reserved': true}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('webappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanportalname'))]\"], 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanportalname'))]\", 'siteconfig': {'linuxfxversion': \"[parameters('linuxfxversion')]\"}, 'resources': [{'condition': \"[contains(parameters('repourl'),'http')]\", 'type': 'sourcecontrols', 'apiversion': '2020-06-01', 'name': 'web', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('webappname'))]\"], 'properties': {'repourl': \"[parameters('repourl')]\", 'branch': 'master', 'ismanualintegration': true}}]}} END"}
{"prompt": "\n\n###\n\nCreate an AppServicePlan and App in an ASE\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'name': \"[parameters('appserviceplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('existingaselocation')]\", 'properties': {'name': \"[parameters('appserviceplanname')]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments',parameters('appserviceenvironmentname'))]\"}}, 'sku': {'name': \"[concat('p',parameters('workerpool'))]\", 'tier': 'premium', 'size': \"[concat('p',parameters('workerpool'))]\", 'family': 'p', 'capacity': \"[parameters('numberofworkersfromworkerpool')]\"}}{'apiversion': '2020-12-01', 'name': \"[parameters('sitename')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('existingaselocation')]\", 'properties': {'name': \"[parameters('sitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms',parameters('appserviceplanname'))]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments', parameters('appserviceenvironmentname'))]\"}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms/',parameters('appserviceplanname'))]\"]} END"}
{"prompt": "\n\n###\n\nAzure Function app and an HTTP-triggered function\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-12-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'sku': {'name': 'y1'}, 'properties': {}}{'type': 'microsoft.web/sites', 'apiversion': '2020-12-01', 'name': \"[variables('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'siteconfig': {'appsettings': [{'name': 'azurewebjobsstorage', 'value': \"[format('defaultendpointsprotocol=https;accountname={0};endpointsuffix={1};accountkey={2}', variables('storageaccountname'), environment().suffixes.storage, listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-04-01').keys[0].value)]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[format('defaultendpointsprotocol=https;accountname={0};endpointsuffix={1};accountkey={2}', variables('storageaccountname'), environment().suffixes.storage, listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-04-01').keys[0].value)]\"}, {'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components', variables('appinsightsname'))).instrumentationkey]\"}, {'name': 'applicationinsights_connection_string', 'value': \"[format('instrumentationkey={0}', reference(resourceid('microsoft.insights/components', variables('appinsightsname'))).instrumentationkey)]\"}, {'name': 'functions_worker_runtime', 'value': \"[variables('functionruntime')]\"}, {'name': 'functions_extension_version', 'value': '~3'}]}, 'httpsonly': true}, 'dependson': [\"[resourceid('microsoft.insights/components', variables('appinsightsname'))]\", \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"]}{'type': 'microsoft.web/sites/functions', 'apiversion': '2020-12-01', 'name': \"[format('{0}/{1}', variables('functionappname'), variables('functionnamecomputed'))]\", 'properties': {'config': {'disabled': false, 'bindings': [{'name': 'req', 'type': 'httptrigger', 'direction': 'in', 'authlevel': 'function', 'methods': ['get']}, {'name': '$return', 'type': 'http', 'direction': 'out'}]}, 'files': {'run.csx': '#r \"newtonsoft.json\"\\r\\n\\r\\nusing system.net;\\r\\nusing microsoft.aspnetcore.mvc;\\r\\nusing microsoft.extensions.primitives;\\r\\nusing newtonsoft.json;\\r\\n\\r\\npublic static async task<iactionresult> run(httprequest req, ilogger log)\\r\\n{\\r\\n      log.loginformation(\"c# http trigger function processed a request.\");\\r\\n\\r\\n    string name = req.query[\"name\"];\\r\\n\\r\\n    string requestbody = await new streamreader(req.body).readtoendasync();\\r\\n    dynamic data = jsonconvert.deserializeobject(requestbody);\\r\\n    name = name ?? data?.name;\\r\\n\\r\\n    string responsemessage = string.isnullorempty(name)\\r\\n        ? \"this http triggered function executed successfully. pass a name in the query string or in the request body for a personalized response.\"\\r\\n                : $\"hello, {name}. this http triggered function executed successfully.\";\\r\\n\\r\\n            return new okobjectresult(responsemessage);\\r\\n}'}}, 'dependson': [\"[resourceid('microsoft.web/sites', variables('functionappname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy an Azure Function Premium plan with regional virtual network integration enabled to a newly created virtual network.\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'ep1', 'tier': 'elasticpremium'}, 'kind': 'elastic', 'properties': {'maximumelasticworkercount': 20}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[variables('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'siteconfig': {'appsettings': [{'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components', variables('functionappname'))).instrumentationkey]\"}, {'name': 'applicationinsights_connection_string', 'value': \"[format('instrumentationkey={0}', reference(resourceid('microsoft.insights/components', variables('functionappname'))).instrumentationkey)]\"}, {'name': 'azurewebjobsstorage', 'value': \"[format('defaultendpointsprotocol=https;accountname={0};endpointsuffix= {1};accountkey={2}', variables('storageaccountname'), environment().suffixes.storage, listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-04-01').keys[0].value)]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[format('defaultendpointsprotocol=https;accountname={0};endpointsuffix={1};accountkey={2};', variables('storageaccountname'), environment().suffixes.storage, listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-04-01').keys[0].value)]\"}, {'name': 'functions_extension_version', 'value': '~3'}, {'name': 'functions_worker_runtime', 'value': \"[variables('functionworkerruntime')]\"}, {'name': 'website_node_default_version', 'value': '~12'}]}}, 'dependson': [\"[resourceid('microsoft.insights/components', variables('functionappname'))]\", \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]}{'type': 'microsoft.web/sites/networkconfig', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', variables('functionappname'), 'virtualnetwork')]\", 'properties': {'subnetresourceid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('subnetname'))]\", 'swiftsupported': true}, 'dependson': [\"[resourceid('microsoft.web/sites', variables('functionappname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a Web App plus Redis Cache plus SQL Database using a template\n\n===\n\n", "completion": " {'apiversion': '2015-08-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'hostingplan'}, 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'properties': {'name': \"[variables('hostingplanname')]\"}}{'apiversion': '2015-08-01', 'name': \"[variables('websitename')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\", \"[resourceid('microsoft.cache/redis/', variables('cachename'))]\"], 'tags': {\"[concat('hidden-related:', resourcegroup().id, '/providers/microsoft.web/serverfarms/', variables('hostingplanname'))]\": 'empty', 'displayname': 'website'}, 'properties': {'name': \"[variables('websitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'resources': [{'apiversion': '2015-08-01', 'type': 'config', 'name': 'connectionstrings', 'dependson': [\"[resourceid('microsoft.web/sites/', variables('websitename'))]\", \"[resourceid('microsoft.sql/servers/', variables('sqlservername'))]\"], 'properties': {'teamcontext': {'value': \"[concat('data source=tcp:', reference(resourceid('microsoft.sql/servers/', variables('sqlservername'))).fullyqualifieddomainname, ',1433;initial catalog=', parameters('databasename'), ';user id=', parameters('administratorlogin'), '@', variables('sqlservername'), ';password=', parameters('administratorloginpassword'), ';')]\", 'type': 'sqlserver'}}}, {'apiversion': '2015-08-01', 'type': 'config', 'name': 'appsettings', 'dependson': [\"[resourceid('microsoft.web/sites/', variables('websitename'))]\", \"[resourceid('microsoft.cache/redis/', variables('cachename'))]\"], 'properties': {'cacheconnection': \"[concat(variables('cachename'),'.redis.cache.windows.net,abortconnect=false,ssl=true,password=', listkeys(resourceid('microsoft.cache/redis', variables('cachename')), '2020-12-01').primarykey)]\"}}]} END"}
{"prompt": "\n\n###\n\nDeploy an App Service with a Private Endpoint\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2019-08-01', 'name': \"[parameters('serverfarm_name')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku_name')]\", 'tier': \"[parameters('sku_tier')]\", 'size': \"[parameters('sku_size')]\", 'family': \"[parameters('sku_family')]\", 'capacity': 1}, 'kind': 'app'}{'type': 'microsoft.web/sites', 'apiversion': '2019-08-01', 'name': \"[parameters('site_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', parameters('serverfarm_name'))]\"], 'kind': 'app', 'properties': {'enabled': true, 'hostnamesslstates': [{'name': \"[concat(parameters('site_name'), parameters('webapp_dns_name'))]\", 'sslstate': 'disabled', 'hosttype': 'standard'}, {'name': \"[concat(parameters('site_name'), '.scm', parameters('webapp_dns_name'))]\", 'sslstate': 'disabled', 'hosttype': 'repository'}], 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('serverfarm_name'))]\"}}{'type': 'microsoft.web/sites/config', 'apiversion': '2019-08-01', 'name': \"[concat(parameters('site_name'), '/web')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('site_name'))]\"], 'properties': {'ftpsstate': 'allallowed'}}{'type': 'microsoft.web/sites/hostnamebindings', 'apiversion': '2019-08-01', 'name': \"[concat(parameters('site_name'), '/', parameters('site_name'), parameters('webapp_dns_name'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('site_name'))]\"], 'properties': {'sitename': \"[parameters('site_name')]\", 'hostnametype': 'verified'}} END"}
{"prompt": "\n\n###\n\nProvision a function app on a dedicated hosting plan with source code deployed from GitHub\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-12-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'properties': {'workersize': \"[parameters('workersize')]\", 'numberofworkers': 1}}{'apiversion': '2020-12-01', 'type': 'microsoft.web/sites', 'name': \"[variables('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'properties': {'name': \"[variables('functionappname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'clientaffinityenabled': false, 'siteconfig': {'alwayson': true, 'cors': {'allowedorigins': ['*']}, 'appsettings': [{'name': 'functions_extension_version', 'value': '~1'}, {'name': 'azurewebjobsstorage', 'value': \"[concat('defaultendpointsprotocol=https;accountname=',variables('storageaccountname'),';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value,';')]\"}, {'name': 'azurewebjobsdashboard', 'value': \"[concat('defaultendpointsprotocol=https;accountname=',variables('storageaccountname'),';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value,';')]\"}]}}, 'resources': [{'apiversion': '2018-11-01', 'name': 'web', 'type': 'sourcecontrols', 'dependson': [\"[resourceid('microsoft.web/sites', variables('functionappname'))]\"], 'properties': {'repourl': \"[parameters('repourl')]\", 'branch': \"[parameters('branch')]\", 'ismanualintegration': true}}]} END"}
{"prompt": "\n\n###\n\nProvision a function app that runs on a Consumption (dynamic hosting) plan\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'y1', 'tier': 'dynamic'}, 'properties': {'name': \"[variables('hostingplanname')]\", 'computemode': 'dynamic'}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[variables('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'siteconfig': {'appsettings': [{'name': 'azurewebjobsstorage', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'website_contentshare', 'value': \"[tolower(variables('functionappname'))]\"}, {'name': 'functions_extension_version', 'value': '~2'}, {'name': 'website_node_default_version', 'value': '~10'}, {'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components', variables('applicationinsightsname')), '2020-02-02-preview').instrumentationkey]\"}, {'name': 'functions_worker_runtime', 'value': \"[variables('functionworkerruntime')]\"}]}}}{'type': 'microsoft.web/sites/slots', 'apiversion': '2020-06-01', 'name': \"[concat(variables('functionappname'), '/deployment')]\", 'kind': 'functionapp', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', variables('functionappname'))]\"], 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'siteconfig': {'appsettings': [{'name': 'azurewebjobsstorage', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'functions_extension_version', 'value': '~3'}, {'name': 'website_node_default_version', 'value': '~10'}, {'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components', variables('applicationinsightsname')), '2020-02-02-preview').instrumentationkey]\"}, {'name': 'functions_worker_runtime', 'value': \"[variables('functionworkerruntime')]\"}]}}} END"}
{"prompt": "\n\n###\n\nCreate and assign a wildcard App Service Certificate\n\n===\n\n", "completion": " {'type': 'microsoft.web/certificates', 'name': \"[parameters('certificateordername')]\", 'apiversion': '2015-08-01', 'location': \"[parameters('existingapplocation')]\", 'dependson': [\"[resourceid('microsoft.certificateregistration/certificateorders/certificates', parameters('certificateordername'), parameters('certificateordername'))]\"], 'properties': {'keyvaultid': \"[parameters('existingkeyvaultid')]\", 'keyvaultsecretname': \"[parameters('certificateordername')]\"}}{'type': 'microsoft.web/sites', 'name': \"[parameters('existingappname')]\", 'apiversion': '2015-08-01', 'location': \"[parameters('existingapplocation')]\", 'dependson': [\"[resourceid('microsoft.web/certificates', parameters('certificateordername'))]\"], 'properties': {'name': \"[parameters('existingappname')]\", 'hostnamesslstates': [{'name': \"[parameters('roothostname')]\", 'sslstate': 1, 'thumbprint': \"[reference(resourceid('microsoft.certificateregistration/certificateorders', parameters('certificateordername'))).signedcertificate.thumbprint]\", 'toupdate': true}, {'name': \"[variables('wwwhostname')]\", 'sslstate': 1, 'thumbprint': \"[reference(resourceid('microsoft.certificateregistration/certificateorders', parameters('certificateordername'))).signedcertificate.thumbprint]\", 'toupdate': true}]}} END"}
{"prompt": "\n\n###\n\nCreate an App Service Environment v2\n\n===\n\n", "completion": " {'type': 'microsoft.web/hostingenvironments', 'apiversion': '2020-06-01', 'name': \"[parameters('asename')]\", 'kind': 'asev2', 'location': \"[parameters('location')]\", 'properties': {'location': \"[parameters('location')]\", 'name': \"[parameters('asename')]\", 'workerpools': [], 'virtualnetwork': {'id': \"[extensionresourceid(format('/subscriptions/{0}/resourcegroups/{1}', subscription().subscriptionid, parameters('existingvirtualnetworkresourcegroup')), 'microsoft.network/virtualnetworks/subnets', parameters('existingvirtualnetworkname'), parameters('existingsubnetname'))]\"}}} END"}
{"prompt": "\n\n###\n\nDeploy a WebApp Service  liked with a GitHub Repository.\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-12-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('workersize')]\"}, 'properties': {'name': \"[variables('hostingplanname')]\"}}{'type': 'microsoft.web/sites', 'apiversion': '2020-12-01', 'name': \"[parameters('sitename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"], 'properties': {'id': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'resources': [{'type': 'sourcecontrols', 'apiversion': '2020-12-01', 'name': 'web', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('sitename'))]\"], 'properties': {'repourl': \"[parameters('repourl')]\", 'branch': \"[parameters('branch')]\", 'ismanualintegration': true}}]} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy an app service plan and a basic Windows web app, with regional VNet integration enabled to a newly created virtual network\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('appserviceplansku')]\"}, 'kind': 'app'}{'type': 'microsoft.web/sites', 'apiversion': '2021-01-01', 'name': \"[parameters('appname')]\", 'location': \"[parameters('location')]\", 'kind': 'app', 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'virtualnetworksubnetid': \"[reference(resourceid('microsoft.network/virtualnetworks', variables('vnetname'))).subnets[0].id]\", 'httpsonly': true, 'siteconfig': {'vnetrouteallenabled': true, 'http20enabled': true}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"]} END"}
{"prompt": "\n\n###\n\nSimple example to deploy Azure infrastructure for app + data + managed identity + monitoring\n\n===\n\n", "completion": " {'type': 'microsoft.web/sites/config', 'apiversion': '2020-12-01', 'name': \"[format('{0}/{1}', format('website{0}', uniquestring(resourcegroup().id)), 'connectionstrings')]\", 'properties': {'defaultconnection': {'value': \"[format('data source=tcp:{0},1433;initial catalog={1};user id={2}@{3};password={4};', reference(resourceid('microsoft.sql/servers', format('sqlserver{0}', uniquestring(resourcegroup().id)))).fullyqualifieddomainname, variables('databasename'), reference(resourceid('microsoft.sql/servers', format('sqlserver{0}', uniquestring(resourcegroup().id)))).administratorlogin, reference(resourceid('microsoft.sql/servers', format('sqlserver{0}', uniquestring(resourcegroup().id)))).fullyqualifieddomainname, parameters('sqladministratorpassword'))]\", 'type': 'sqlazure'}}, 'dependson': [\"[resourceid('microsoft.sql/servers/databases', format('sqlserver{0}', uniquestring(resourcegroup().id)), variables('databasename'))]\", \"[resourceid('microsoft.sql/servers', format('sqlserver{0}', uniquestring(resourcegroup().id)))]\", \"[resourceid('microsoft.web/sites', format('website{0}', uniquestring(resourcegroup().id)))]\"]}{'type': 'microsoft.web/serverfarms', 'apiversion': '2020-12-01', 'name': \"[format('hostingplan{0}', uniquestring(resourcegroup().id))]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skucapacity')]\"}}{'type': 'microsoft.web/sites', 'apiversion': '2020-12-01', 'name': \"[format('website{0}', uniquestring(resourcegroup().id))]\", 'location': \"[parameters('location')]\", 'tags': {\"[format('hidden-related:{0}', resourceid('microsoft.web/serverfarms', format('hostingplan{0}', uniquestring(resourcegroup().id))))]\": 'empty', 'displayname': 'website'}, 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', format('hostingplan{0}', uniquestring(resourcegroup().id)))]\"}, 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('managedidentityname'))]\": {}}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', format('hostingplan{0}', uniquestring(resourcegroup().id)))]\", \"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('managedidentityname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy an app service plan and a basic Linux web app\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'kind': 'linux', 'properties': {'reserved': true}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[variables('webappportalname')]\", 'location': \"[parameters('location')]\", 'kind': 'app', 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"], 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\", 'siteconfig': {'linuxfxversion': \"[parameters('linuxfxversion')]\"}}} END"}
{"prompt": "\n\n###\n\nCreate Managed Certificate (Free) APEX (root domain) for WebApp\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('subjectname'), '-', parameters('appserviceplanname'))]\", 'type': 'microsoft.web/certificates', 'properties': {'serverfarmid': \"[resourceid(parameters('resourcegroupname'),'microsoft.web/serverfarms/', parameters('appserviceplanname'))]\", 'canonicalname': \"[parameters('subjectname')]\", 'domainvalidationmethod': 'http-token'}} END"}
{"prompt": "\n\n###\n\nThis template creates a VM with webdeploy enabled, and deploys the Web Application using DSC extension\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template creates an App Service Environment with an Azure SQL backend along with private endpoints along with associated resources typically used in an private/isolated environment.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.web/hostingenvironments', 'name': \"[parameters('stackname')]\", 'kind': 'asev2', 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets',variables('vnetname'), parameters('frontendsubnet'))]\"], 'properties': {'internalloadbalancingmode': 3, 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), parameters('frontendsubnet'))]\"}}}{'apiversion': '2020-06-01', 'name': \"[parameters('stackname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.web/hostingenvironments',parameters('stackname'))]\"], 'properties': {'name': \"[parameters('stackname')]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments',parameters('stackname'))]\"}}, 'sku': {'name': \"[concat('i',variables('workerpool'))]\", 'tier': 'isolated', 'size': \"[concat('i',variables('workerpool'))]\", 'family': 'i', 'capacity': \"[variables('numberofworkersfromworkerpool')]\"}}{'apiversion': '2020-06-01', 'name': \"[parameters('stackname')]\", 'type': 'microsoft.web/sites', 'location': \"[variables('location')]\", 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.web/serverfarms/',parameters('stackname'))]\", \"[resourceid('microsoft.insights/components/', parameters('stackname'))]\"], 'properties': {'name': \"[parameters('stackname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms',parameters('stackname'))]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments', parameters('stackname'))]\"}, 'siteconfig': {'appsettings': [{'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components/', parameters('stackname')), '2018-05-01-preview').instrumentationkey]\"}, {'name': 'applicationinsightsagent_extension_version', 'value': '~2'}, {'name': 'xdt_microsoftapplicationinsights_mode', 'value': 'default'}, {'name': 'diagnosticservices_extension_version', 'value': 'disabled'}, {'name': 'appinsights_profilerfeature_version', 'value': 'disabled'}, {'name': 'appinsights_snapshotfeature_version', 'value': 'disabled'}, {'name': 'instrumentationengine_extension_version', 'value': 'disabled'}, {'name': 'snapshotdebugger_extension_version', 'value': 'disabled'}, {'name': 'xdt_microsoftapplicationinsights_baseextensions', 'value': 'disabled'}]}}}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('stackname'), '/web')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('stackname'))]\"], 'properties': {'netframeworkversion': 'v5.0'}} END"}
{"prompt": "\n\n###\n\nDeploy a Web App with diagnostics logging to Storage Account Blob Container enabled.\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'type': 'microsoft.web/serverfarms', 'name': \"[parameters('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('appserviceplanskuname')]\"}}{'apiversion': '2020-12-01', 'type': 'microsoft.web/sites', 'name': \"[parameters('webappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', parameters('appserviceplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"], 'properties': {'name': \"[parameters('webappname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms/', parameters('appserviceplanname'))]\"}, 'resources': [{'apiversion': '2020-12-01', 'type': 'config', 'name': 'logs', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('webappname'))]\"], 'properties': {'applicationlogs': {'azureblobstorage': {'level': \"[parameters('diagnosticslogslevel')]\", 'sasurl': \"[concat(reference(resourceid('microsoft.storage/storageaccounts/', parameters('storageaccountname'))).primaryendpoints.blob, variables('blobcontainername'), '?', listaccountsas(parameters('storageaccountname'), '2018-02-01', variables('listaccountsasrequestcontent')).accountsastoken)]\", 'retentionindays': \"[parameters('diagnosticslogsretentionindays')]\"}}}}]} END"}
{"prompt": "\n\n###\n\nDeploy an App Service that supports ASP.NET v4.0. It gives you the support to deploy your own ASP.NET app.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'name': \"[parameters('webappname')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.insights/components/', variables('appinsight'))]\", \"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"], 'properties': {'name': \"[parameters('webappname')]\", 'siteconfig': {'appsettings': [{'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components/', variables('appinsight')), '2020-02-02').instrumentationkey]\"}, {'name': 'applicationinsightsagent_extension_version', 'value': '~2'}, {'name': 'xdt_microsoftapplicationinsights_mode', 'value': 'default'}, {'name': 'diagnosticservices_extension_version', 'value': 'disabled'}, {'name': 'appinsights_profilerfeature_version', 'value': 'disabled'}, {'name': 'appinsights_snapshotfeature_version', 'value': 'disabled'}, {'name': 'instrumentationengine_extension_version', 'value': 'disabled'}, {'name': 'snapshotdebugger_extension_version', 'value': 'disabled'}, {'name': 'xdt_microsoftapplicationinsights_baseextensions', 'value': 'disabled'}], 'metadata': [{'name': 'current_stack', 'value': \"[variables('currentstack')]\"}], 'netframeworkversion': \"[variables('netframeworkversion')]\", 'alwayson': \"[variables('alwayson')]\"}, 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'clientaffinityenabled': true}}{'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('hostingplanname')]\", 'workersize': \"[variables('workersize')]\", 'workersizeid': \"[variables('workersizeid')]\", 'numberofworkers': \"[variables('numberofworkers')]\"}, 'sku': {'tier': \"[variables('sku')]\", 'name': \"[variables('skucode')]\"}} END"}
{"prompt": "\n\n###\n\nConfigures the default SSL certificate for an ILB ASE or an ILB ASE v2\n\n===\n\n", "completion": " {'apiversion': '2015-08-01', 'type': 'microsoft.web/certificates', 'name': \"[parameters('certificatename')]\", 'location': \"[parameters('existingaselocation')]\", 'properties': {'pfxblob': \"[parameters('pfxblobstring')]\", 'password': \"[parameters('password')]\", 'hostingenvironmentprofile': {'id': \"[resourceid('microsoft.web/hostingenvironments',parameters('appserviceenvironmentname'))]\"}}}{'apiversion': '2015-08-01', 'type': 'microsoft.web/hostingenvironments', 'name': \"[parameters('appserviceenvironmentname')]\", 'location': \"[parameters('existingaselocation')]\", 'properties': {'clustersettings': [{'name': 'defaultsslcertificatethumbprint', 'value': \"[parameters('certificatethumbprint')]\"}]}, 'dependson': [\"[concat('microsoft.web/certificates/',parameters('certificatename'))]\"]} END"}
{"prompt": "\n\n###\n\nDeploy an App Service that supports Node. It gives you the support to deploy your own Node app.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'name': \"[parameters('webappname')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"], 'properties': {'name': \"[parameters('webappname')]\", 'siteconfig': {'linuxfxversion': \"[variables('linuxfxversion')]\", 'alwayson': \"[variables('alwayson')]\"}, 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'clientaffinityenabled': false}}{'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'kind': 'linux', 'sku': {'tier': \"[variables('sku')]\", 'name': \"[variables('skucode')]\"}, 'properties': {'name': \"[variables('hostingplanname')]\", 'workersize': \"[variables('workersize')]\", 'workersizeid': \"[variables('workersizeid')]\", 'numberofworkers': \"[variables('numberofworkers')]\", 'reserved': true}} END"}
{"prompt": "\n\n###\n\nCreate a web app with aa custom domain and optional SSL binding\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2019-08-01', 'name': \"[variables('appserviceplanname')]\", 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('appserviceplanname')]\"}, 'sku': {'name': 'p1', 'tier': 'premium', 'size': '1', 'family': 'p', 'capacity': '1'}}{'type': 'microsoft.web/sites', 'apiversion': '2019-08-01', 'name': \"[parameters('webappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"], 'properties': {'name': \"[parameters('webappname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"}}{'condition': \"[variables('enablessl')]\", 'type': 'microsoft.web/certificates', 'apiversion': '2019-08-01', 'name': \"[variables('certificatename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('webappname'))]\"], 'properties': {'keyvaultid': \"[parameters('existingkeyvaultid')]\", 'keyvaultsecretname': \"[parameters('existingkeyvaultsecretname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanname'))]\"}}{'type': 'microsoft.web/sites/hostnamebindings', 'name': \"[concat(parameters('webappname'), '/', parameters('customhostname'))]\", 'apiversion': '2019-08-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/certificates', variables('certificatename'))]\"], 'properties': {'sslstate': \"[if(variables('enablessl'), 'snienabled', json('null'))]\", 'thumbprint': \"[if(variables('enablessl'), reference(resourceid('microsoft.web/certificates', variables('certificatename'))).thumbprint, json('null'))]\"}} END"}
{"prompt": "\n\n###\n\nCreates a webhook based C# azure function with transform capabilites\n\n===\n\n", "completion": " {'apiversion': '2019-08-01', 'name': \"[concat(parameters('existingfunctionappname'),'/', parameters('functionname'))]\", 'type': 'microsoft.web/sites/functions', 'properties': {'config': {'bindings': [{'name': 'req', 'webhooktype': 'genericjson', 'direction': 'in', 'type': 'httptrigger'}, {'name': 'res', 'direction': 'out', 'type': 'http'}]}, 'files': {'integrationxsltexception.csx': '//-----------------------------------------------------------------------\\r\\n// <copyright file=\"integrationxsltexception.csx\" company=\"microsoft\">\\r\\n//      all rights reserved.\\r\\n// </copyright>\\r\\n//-----------------------------------------------------------------------\\r\\n\\r\\nusing system;\\r\\nusing system.net;\\r\\n\\r\\n[system.diagnostics.codeanalysis.suppressmessage(\"microsoft.design\", \"ca1032:implementstandardexceptionconstructors\", justification = \"not needed.\")]\\r\\n[system.diagnostics.codeanalysis.suppressmessage(\"microsoft.usage\", \"ca2237:markiserializabletypeswithserializable\", justification = \"not needed.\")]\\r\\npublic class integrationxsltexception : exception\\r\\n{\\r\\n    public integrationxsltexception()\\r\\n    {\\r\\n    }\\r\\n\\r\\n    public integrationxsltexception(string message) : base(message, null)\\r\\n    {\\r\\n        this.statuscode = httpstatuscode.internalservererror;\\r\\n    }\\r\\n\\r\\n    public integrationxsltexception(httpstatuscode statuscode, string message)\\r\\n        : base(message)\\r\\n    {\\r\\n        this.statuscode = statuscode;\\r\\n    }\\r\\n\\r\\n    public integrationxsltexception(httpstatuscode statuscode, string message, exception innerexception)\\r\\n        : base(message, innerexception)\\r\\n    {\\r\\n        this.statuscode = statuscode;\\r\\n    }\\r\\n\\r\\n    public httpstatuscode statuscode { get; set; }\\r\\n}', 'contenthash.csx': '//-----------------------------------------------------------------------\\r\\n// <copyright file=\"contenthash.csx\" company=\"microsoft\">\\r\\n//      all rights reserved.\\r\\n// </copyright>\\r\\n//-----------------------------------------------------------------------\\r\\n\\r\\nusing newtonsoft.json;\\r\\n\\r\\npublic class contenthash\\r\\n{\\r\\n    public string algorithm { get; set; }\\r\\n\\r\\n    public string value { get; set; }\\r\\n}\\r\\n', 'xslthelper.csx': '//-----------------------------------------------------------------------\\r\\n// <copyright file=\"xslthelper.csx\" company=\"microsoft\">\\r\\n//      all rights reserved.\\r\\n// </copyright>\\r\\n//-----------------------------------------------------------------------\\r\\n\\r\\n#load \"contentenvelope.csx\"\\r\\n#load \"contenthash.csx\"\\r\\n#load \"contentlinkdefinition.csx\"\\r\\n#load \"httprequestmessageextensions.csx\"\\r\\n#load \"integrationxsltexception.csx\"\\r\\n#load \"validation.csx\"\\r\\n#load \"xsltinput.csx\"\\r\\n\\r\\nusing system;\\r\\nusing system.collections.generic;\\r\\nusing system.globalization;\\r\\nusing system.io;\\r\\nusing system.linq;\\r\\nusing system.net;\\r\\nusing system.net.http;\\r\\nusing system.runtime.caching;\\r\\nusing system.text;\\r\\nusing system.threading;\\r\\nusing system.threading.tasks;\\r\\nusing system.xml;\\r\\nusing system.xml.linq;\\r\\nusing system.xml.xsl;\\r\\nusing newtonsoft.json;\\r\\nusing newtonsoft.json.linq;\\r\\n\\r\\npublic static class xslthelper\\r\\n{\\r\\n\\tprivate static readonly memorycache compiledtransformcache = new memorycache(\"compiledtransformcache\");\\r\\n\\r\\n\\tprivate static readonly cacheitempolicy cachepolicy = new cacheitempolicy()\\r\\n\\t{\\r\\n\\t\\tslidingexpiration = new timespan(24, 0, 0)\\r\\n\\t};\\r\\n\\r\\n\\tpublic static async task<httpresponsemessage> transform(httprequestmessage request, cancellationtoken cancellationtoken)\\r\\n\\t{\\r\\n\\t\\tvar transformrequest = await xslthelper.getxsltinput(request, cancellationtoken).configureawait(continueoncapturedcontext: false);\\r\\n\\r\\n\\t\\tvalidation.xsltransformrequest(transformrequest);\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\tusing (var mapcontent = await xslthelper.getmapcontent(transformrequest.mapcontentlink.uri, cancellationtoken).configureawait(continueoncapturedcontext: false))\\r\\n\\t\\t\\tusing (var seekablemapcontent = new memorystream())\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tawait mapcontent.copytoasync(seekablemapcontent).configureawait(continueoncapturedcontext: false);\\r\\n\\r\\n\\t\\t\\t\\tseekablemapcontent.position = 0;\\r\\n\\r\\n\\t\\t\\t\\t// note(rarayudu): using stream readers to take care of encoding issues.\\r\\n\\t\\t\\t\\t// in logic apps rp, we are always storing the schema/map contents using utf8 encdoing. this will create problems for xmls which have encoding of type other than utf8.\\r\\n\\t\\t\\t\\t// another possibility is to read the content as string and use the stringreader. - not following that as don\\'t want to load the entire string incase if the schema is large.\\r\\n\\t\\t\\t\\tusing (var transformstreamreader = new streamreader(stream: seekablemapcontent, detectencodingfrombyteordermarks: true))\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tvar arguments = xslthelper.getxsltarguments(\\r\\n\\t\\t\\t\\t\\t\\txsltparameters: transformrequest.xsltparameters,\\r\\n\\t\\t\\t\\t\\t\\ttransformstreamreader: transformstreamreader);\\r\\n\\r\\n\\t\\t\\t\\t\\tvar inputxmlcontent = transformrequest.content.type == jtokentype.string\\r\\n\\t\\t\\t\\t\\t\\t? encoding.utf8.getbytes(transformrequest.content.toobject<string>())\\r\\n\\t\\t\\t\\t\\t\\t: transformrequest.content.toobject<contentenvelope>().decodeasbytes();\\r\\n\\r\\n\\t\\t\\t\\t\\tvar settings = new xsltsettings(enabledocumentfunction: true, enablescript: true);\\r\\n\\r\\n\\t\\t\\t\\t\\t// note(rarayudu): set the transform stream reader stream postion to start for the xslcompiledtransform.\\r\\n\\t\\t\\t\\t\\ttransformstreamreader.basestream.position = 0;\\r\\n\\r\\n\\t\\t\\t\\t\\tusing (var inputxmlstream = new memorystream(inputxmlcontent))\\r\\n\\t\\t\\t\\t\\tusing (var inputxmlstreamreader = new streamreader(stream: inputxmlstream, detectencodingfrombyteordermarks: true))\\r\\n\\t\\t\\t\\t\\tusing (var inputxmlreader = xmlreader.create(inputxmlstreamreader))\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\tvar xsltcompiler = getcompiledtransformfromcache(mapabsolutepath: transformrequest.mapcontentlink.uri.absolutepath, mapversion: transformrequest.mapcontentlink.contentversion);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (xsltcompiler == null)\\r\\n\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\tusing (var transformxmlreader = xmlreader.create(transformstreamreader))\\r\\n\\t\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\txsltcompiler = new xslcompiledtransform();\\r\\n\\t\\t\\t\\t\\t\\t\\t\\txsltcompiler.load(transformxmlreader, settings, new xmlurlresolver());\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\txslthelper.compiledtransformcache.set(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tkey: transformrequest.mapcontentlink.uri.absolutepath,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvalue: new transformcacheditem(mapversion: transformrequest.mapcontentlink.contentversion, compiledtransform: xsltcompiler),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpolicy: cachepolicy);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tusing (var outputstream = new memorystream())\\r\\n\\t\\t\\t\\t\\t\\tusing (var outputxmlwriter = xmlwriter.create(outputstream))\\r\\n\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\txsltcompiler.transform(inputxmlreader, arguments, outputxmlwriter);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\treturn httprequestmessageextensions.createxmlresponse(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\trequest: request,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tstatuscode: httpstatuscode.ok,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcontent: new bytearraycontent(outputstream.toarray()));\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tcatch (xmlexception ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tthrow new integrationxsltexception(\\r\\n\\t\\t\\t\\tstatuscode: httpstatuscode.badrequest,\\r\\n\\t\\t\\t\\tmessage: string.format(cultureinfo.invariantculture, \"an error occurred while processing input xml. \\'{0}\\'\", ex.message),\\r\\n\\t\\t\\t\\tinnerexception: ex);\\r\\n\\t\\t}\\r\\n\\t\\tcatch (xsltexception ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tthrow new integrationxsltexception(\\r\\n\\t\\t\\t\\tstatuscode: httpstatuscode.badrequest,\\r\\n\\t\\t\\t\\tmessage: string.format(cultureinfo.invariantculture, \"an error occurred while processing map. \\'{0}\\'\", ex.message),\\r\\n\\t\\t\\t\\tinnerexception: ex);\\r\\n\\t\\t}\\r\\n\\t\\tcatch (integrationxsltexception)\\r\\n\\t\\t{\\r\\n\\t\\t\\txslthelper.compiledtransformcache.remove(key: transformrequest.mapcontentlink.uri.absolutepath);\\r\\n\\r\\n\\t\\t\\tthrow;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tprivate static async task<xsltinput> getxsltinput(httprequestmessage request, cancellationtoken cancellationtoken)\\r\\n\\t{\\r\\n\\t\\ttry\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn await request.content.readasasync<xsltinput>(cancellationtoken).configureawait(continueoncapturedcontext: false);\\r\\n\\t\\t}\\r\\n\\t\\tcatch (exception ex)\\r\\n\\t\\t{\\r\\n\\t\\t\\tif (ex is formatexception || ex is argumentexception || ex is jsonexception)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tthrow new integrationxsltexception(\\r\\n\\t\\t\\t\\t\\tstatuscode: httpstatuscode.badrequest,\\r\\n\\t\\t\\t\\t\\tmessage: string.format(cultureinfo.invariantculture, \"the request content is not valid and could not be deserialized: \\'{0}\\'\", ex.message),\\r\\n\\t\\t\\t\\t\\tinnerexception: ex);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthrow;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tprivate static async task<stream> getmapcontent(uri mapcontentlink, cancellationtoken cancellationtoken)\\r\\n\\t{\\r\\n\\t\\tvar httpclient = new httpclient();\\r\\n\\t\\tvar response = await httpclient.getasync(mapcontentlink, cancellationtoken).configureawait(continueoncapturedcontext: false);\\r\\n\\r\\n\\t\\tif (response.statuscode != httpstatuscode.ok)\\r\\n\\t\\t{\\r\\n\\t\\t\\tvar responsecontent = response.content != null\\r\\n\\t\\t\\t\\t? await response.content.readasstringasync().configureawait(continueoncapturedcontext: false)\\r\\n\\t\\t\\t\\t: string.empty;\\r\\n\\r\\n\\t\\t\\tthrow new integrationxsltexception(\\r\\n\\t\\t\\t\\tstatuscode: response.statuscode,\\r\\n\\t\\t\\t\\tmessage: string.format(cultureinfo.invariantculture, \"an error occurred while fetching the map content using the content link: \\'{0}\\'. error: \\'{1}\\'\", mapcontentlink, responsecontent));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn await response.content.readasstreamasync().configureawait(continueoncapturedcontext: false);\\r\\n\\t}\\r\\n\\r\\n\\tprivate static xsltargumentlist getxsltarguments(idictionary<string, string> xsltparameters, streamreader transformstreamreader)\\r\\n\\t{\\r\\n\\t\\tvar arguments = new xsltargumentlist();\\r\\n\\t\\tif (xsltparameters != null)\\r\\n\\t\\t{\\r\\n\\t\\t\\tforeach (keyvaluepair<string, string> parameter in xsltparameters)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tif (parameter.key.contains(\\':\\'))\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tvar splitargument = parameter.key.split(\\':\\');\\r\\n\\t\\t\\t\\t\\tif (splitargument.length == 2)\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t    transformstreamreader.basestream.position = 0;\\r\\n\\t\\t\\t\\t\\t\\targuments.addparam(splitargument[1], getparameternamespace(splitargument[0], transformstreamreader), parameter.value ?? string.empty);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\targuments.addparam(parameter.key, string.empty, parameter.value ?? string.empty);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\targuments.addparam(parameter.key, string.empty, parameter.value ?? string.empty);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn arguments;\\r\\n\\t}\\r\\n\\r\\n\\tprivate static string getparameternamespace(string namespaceprefix, textreader transformstreamreader)\\r\\n\\t{\\r\\n\\t\\tvar xsltdocument = xdocument.load(transformstreamreader);\\r\\n\\t\\tif (xsltdocument.root != null)\\r\\n\\t\\t{\\r\\n\\t\\t\\tvar namespaceofprefix = xsltdocument.root.getnamespaceofprefix(namespaceprefix);\\r\\n\\t\\t\\treturn namespaceofprefix != null ? namespaceofprefix.namespacename : string.empty;\\r\\n\\t\\t}\\r\\n\\t\\telse\\r\\n\\t\\t{\\r\\n\\t\\t\\tthrow new integrationxsltexception(httpstatuscode.badrequest, \"the provided map is not valid.\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tprivate static xslcompiledtransform getcompiledtransformfromcache(string mapabsolutepath, string mapversion)\\r\\n\\t{\\r\\n\\t\\tif (compiledtransformcache.contains(mapabsolutepath))\\r\\n\\t\\t{\\r\\n\\t\\t\\tvar cacheddata = (transformcacheditem)compiledtransformcache.get(key: mapabsolutepath);\\r\\n\\r\\n\\t\\t\\tif (cacheddata.mapversion == mapversion)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\treturn cacheddata.compiledtransform;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn null;\\r\\n\\t}\\r\\n\\r\\n\\tprivate class transformcacheditem\\r\\n\\t{\\r\\n\\t\\tpublic transformcacheditem(string mapversion, xslcompiledtransform compiledtransform)\\r\\n\\t\\t{\\r\\n\\t\\t\\tthis.mapversion = mapversion;\\r\\n\\t\\t\\tthis.compiledtransform = compiledtransform;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic string mapversion { get; set; }\\r\\n\\r\\n\\t\\tpublic xslcompiledtransform compiledtransform { get; set; }\\r\\n\\t}\\r\\n}', 'httprequestmessageextensions.csx': '//-----------------------------------------------------------------------\\r\\n// <copyright file=\"httprequestmessageextensions.csx\" company=\"microsoft\">\\r\\n//      all rights reserved.\\r\\n// </copyright>\\r\\n//-----------------------------------------------------------------------\\r\\n\\r\\nusing system.collections.generic;\\r\\nusing system.diagnostics.codeanalysis;\\r\\nusing system.linq;\\r\\nusing system.net;\\r\\nusing system.net.http;\\r\\nusing system.net.http.headers;\\r\\n\\r\\npublic static class httprequestmessageextensions\\r\\n{\\r\\n    public static readonly string headerclientrequestid = \"x-ms-client-request-id\";\\r\\n\\r\\n    [suppressmessage(\"microsoft.design\", \"ca1062:validate arguments of public methods\", justification = \"by design. as this is a extension method caller has to take care of it.\")]\\r\\n    public static string getclientrequestid(httprequestmessage request)\\r\\n    {\\r\\n        return httprequestmessageextensions.getfirstordefaultheader(request: request, name: httprequestmessageextensions.headerclientrequestid, defaultvalue: string.empty);\\r\\n    }\\r\\n\\r\\n    [suppressmessage(\"microsoft.design\", \"ca1026:defaultparametersshouldnotbeused\", justification = \"by design\")]\\r\\n    [suppressmessage(\"microsoft.design\", \"ca1062:validate arguments of public methods\", justification = \"by design. as this is a extension method caller has to take care of it.\")]\\r\\n    public static string getfirstordefaultheader(httprequestmessage request, string name, string defaultvalue = null)\\r\\n    {\\r\\n        ienumerable<string> values = (ienumerable<string>)null;\\r\\n\\r\\n        if (request.headers.trygetvalues(name, out values) && values.any<string>())\\r\\n        {\\r\\n            return values.first<string>();\\r\\n        }\\r\\n\\r\\n        return defaultvalue;\\r\\n    }\\r\\n\\r\\n    [suppressmessage(\"microsoft.design\", \"ca1062:validate arguments of public methods\", justification = \"by design. as this is a extension method caller has to take care of it.\")]\\r\\n    public static httpresponsemessage createxmlresponse(httprequestmessage request, httpstatuscode statuscode, httpcontent content)\\r\\n    {\\r\\n        var response = request.createresponse(statuscode);\\r\\n\\r\\n        try\\r\\n        {\\r\\n            if (content != null)\\r\\n            {\\r\\n                response.content = content;\\r\\n                response.content.headers.contenttype = new mediatypeheadervalue(\"application/xml\");\\r\\n            }\\r\\n        }\\r\\n        catch\\r\\n        {\\r\\n            response.dispose();\\r\\n            response = null;\\r\\n            throw;\\r\\n        }\\r\\n\\r\\n        return response;\\r\\n    }\\r\\n}\\r\\n', 'run.csx': '#r \"newtonsoft.json\"\\r\\n#r \"system.xml.linq\"\\r\\n#r \"system.runtime.caching\"\\r\\n\\r\\n#load \"xslthelper.csx\"\\r\\n#load \"httprequestmessageextensions.csx\"\\r\\n#load \"integrationxsltexception.csx\"\\r\\n\\r\\nusing system;\\r\\nusing system.collections.generic;\\r\\nusing system.globalization;\\r\\nusing system.io;\\r\\nusing system.linq;\\r\\nusing system.net;\\r\\nusing system.net.http;\\r\\nusing system.net.http.headers;\\r\\nusing system.text;\\r\\nusing system.threading;\\r\\nusing system.threading.tasks;\\r\\nusing system.xml;\\r\\nusing system.xml.linq;\\r\\nusing system.xml.xsl;\\r\\nusing newtonsoft.json;\\r\\nusing newtonsoft.json.linq;\\r\\n\\r\\npublic static async task<httpresponsemessage> run(httprequestmessage req, tracewriter log, cancellationtoken token)\\r\\n{\\r\\n    var clientrequestid = string.empty;\\r\\n\\r\\n    try\\r\\n    {\\r\\n        clientrequestid = httprequestmessageextensions.getclientrequestid(request: req);\\r\\n        log.info(string.format(\"executing transform operation. client request id: \\'{0}\\'\", clientrequestid));\\r\\n        return await xslthelper.transform(req, token).configureawait(continueoncapturedcontext: false);\\r\\n    }\\r\\n    catch (integrationxsltexception ex)\\r\\n    {\\r\\n        log.info(string.format(\"an exception occurred while performing transform. client request id: \\'{0}\\' and exception: \\'{1}\\'\", clientrequestid, ex.tostring()));\\r\\n        return req.createerrorresponse(ex.statuscode, ex.message);\\r\\n    }\\r\\n    catch (exception ex)\\r\\n    {\\r\\n        log.info(string.format(\"an exception occurred while performing transform. client request id: \\'{0}\\' and exception: \\'{1}\\'\", clientrequestid, ex.tostring()));\\r\\n        throw;\\r\\n    }\\r\\n}\\r\\n', 'xsltinput.csx': '//-----------------------------------------------------------------------\\r\\n// <copyright file=\"xsltinput.csx\" company=\"microsoft\">\\r\\n//      all rights reserved.\\r\\n// </copyright>\\r\\n//-----------------------------------------------------------------------\\r\\n\\r\\nusing system;\\r\\nusing system.collections.generic;\\r\\nusing newtonsoft.json.linq;\\r\\n\\r\\npublic class xsltinput\\r\\n{\\r\\n    public jtoken content { get; set; }\\r\\n\\r\\n    [system.diagnostics.codeanalysis.suppressmessage(\"microsoft.usage\", \"ca2227:collectionpropertiesshouldbereadonly\", justification = \"by design\")]\\r\\n    public idictionary<string, string> xsltparameters { get; set; }\\r\\n\\r\\n    public contentlinkdefinition mapcontentlink { get; set; }\\r\\n}', 'validation.csx': '//-----------------------------------------------------------------------\\r\\n// <copyright file=\"validation.csx\" company=\"microsoft\">\\r\\n//      all rights reserved.\\r\\n// </copyright>\\r\\n//-----------------------------------------------------------------------\\r\\n\\r\\nusing system.globalization;\\r\\nusing system.net;\\r\\n\\r\\npublic static class validation\\r\\n{\\r\\n    public static void xsltransformrequest(xsltinput xsltinput)\\r\\n    {\\r\\n        if (xsltinput == null || xsltinput.content == null)\\r\\n        {\\r\\n            throw new integrationxsltexception(\\r\\n                statuscode: httpstatuscode.badrequest,\\r\\n                message: \"the provided xml content to transform is null or empty.\");\\r\\n        }\\r\\n\\r\\n        if (xsltinput.mapcontentlink == null)\\r\\n        {\\r\\n            throw new integrationxsltexception(\\r\\n                statuscode: httpstatuscode.badrequest,\\r\\n                message: \"the provided content link for the map is null or empty.\");\\r\\n        }\\r\\n\\r\\n        if (xsltinput.mapcontentlink.uri == null)\\r\\n        {\\r\\n            throw new integrationxsltexception(\\r\\n                statuscode: httpstatuscode.badrequest,\\r\\n                message: \"the provided uri in the content link for the map is null or empty.\");\\r\\n        }\\r\\n\\r\\n        if (!xsltinput.mapcontentlink.uri.isabsoluteuri)\\r\\n        {\\r\\n            throw new integrationxsltexception(\\r\\n                statuscode: httpstatuscode.badrequest,\\r\\n                message: string.format(cultureinfo.invariantculture, \"the provided uri \\'{0}\\' in the content link for the map is not a valid uri.\", xsltinput.mapcontentlink.uri));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n', 'contentenvelope.csx': '//-----------------------------------------------------------------------\\r\\n// <copyright file=\"contentenvelope.csx\" company=\"microsoft\">\\r\\n//      all rights reserved.\\r\\n// </copyright>\\r\\n//-----------------------------------------------------------------------\\r\\n\\r\\nusing system;\\r\\nusing system.net.mime;\\r\\nusing system.text;\\r\\nusing newtonsoft.json;\\r\\n\\r\\npublic class contentenvelope\\r\\n{\\r\\n    [jsonproperty(propertyname = \"$content-encoding\", required = required.default)]\\r\\n    public string contentencoding { get; set; }\\r\\n\\r\\n    [jsonproperty(propertyname = \"$content-type\", required = required.always)]\\r\\n    public string contenttype { get; set; }\\r\\n\\r\\n    [jsonproperty(propertyname = \"$content\", required = required.always)]\\r\\n    public string content { get; set; }\\r\\n\\r\\n    public string decodeasstring()\\r\\n    {\\r\\n        var contenttype = new contenttype(this.contenttype);\\r\\n        var encoding = contenttype.charset != null ? encoding.getencoding(contenttype.charset) : encoding.utf8;\\r\\n\\r\\n        return encoding.getstring(convert.frombase64string(this.content));\\r\\n    }\\r\\n\\r\\n    public byte[] decodeasbytes()\\r\\n    {\\r\\n        return convert.frombase64string(this.content);\\r\\n    }\\r\\n}', 'contentlinkdefinition.csx': '//-----------------------------------------------------------------------\\r\\n// <copyright file=\"contentlinkdefinition.csx\" company=\"microsoft\">\\r\\n//      all rights reserved.\\r\\n// </copyright>\\r\\n//-----------------------------------------------------------------------\\r\\n\\r\\n#load \"contenthash.csx\"\\r\\n\\r\\nusing system;\\r\\nusing newtonsoft.json;\\r\\nusing newtonsoft.json.linq;\\r\\n\\r\\npublic class contentlinkdefinition\\r\\n{\\r\\n    [jsonproperty(required = required.always)]\\r\\n    public uri uri { get; set; }\\r\\n\\r\\n    public string contentversion { get; set; }\\r\\n\\r\\n    public long? contentsize { get; set; }\\r\\n\\r\\n    public contenthash contenthash { get; set; }\\r\\n\\r\\n    public jtoken metadata { get; set; }\\r\\n}'}}} END"}
{"prompt": "\n\n###\n\nCreate an App Service Environment\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.web/hostingenvironments', 'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'properties': {'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'ipssladdresscount': \"[parameters('ipssladdresscount')]\", 'virtualnetwork': {'id': \"[parameters('subnetid')]\", 'subnet': \"[parameters('subnetname')]\"}, 'multisize': \"[parameters('frontendsize')]\", 'multirolecount': \"[parameters('frontendcount')]\", 'workerpools': [{'workersizeid': 0, 'workersize': \"[parameters('workerpooloneinstancesize')]\", 'workercount': \"[parameters('workerpooloneinstancecount')]\"}, {'workersizeid': 1, 'workersize': \"[parameters('workerpooltwoinstancesize')]\", 'workercount': \"[parameters('workerpooltwoinstancecount')]\"}, {'workersizeid': 2, 'workersize': \"[parameters('workerpoolthreeinstancesize')]\", 'workercount': \"[parameters('workerpoolthreeinstancecount')]\"}]}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account, an App Service Plan, and a Web App.\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2021-02-01', 'name': \"[parameters('appsvcplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('svcplansize')]\", 'tier': \"[parameters('svcplansku')]\", 'capacity': 1}}{'type': 'microsoft.web/sites', 'apiversion': '2021-02-01', 'name': \"[parameters('webappname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'systemassigned'}, 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('appsvcplanname'))]\", 'httpsonly': true, 'siteconfig': {'ftpsstate': 'ftpsonly', 'phpversion': 'off', 'mintlsversion': '1.2', 'appsettings': [{'name': 'documentdb_endpoint', 'value': \"[reference(resourceid('microsoft.documentdb/databaseaccounts', parameters('databaseaccountname'))).documentendpoint]\"}, {'name': 'documentdb_primary_key', 'value': \"[listkeys(resourceid('microsoft.documentdb/databaseaccounts', parameters('databaseaccountname')), '2021-10-15').primarymasterkey]\"}]}}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', parameters('appsvcplanname'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts', parameters('databaseaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nProvision a Web App with a SQL Database\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-12-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'hostingplan'}, 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skucapacity')]\"}}{'type': 'microsoft.web/sites', 'apiversion': '2020-12-01', 'name': \"[variables('websitename')]\", 'location': \"[parameters('location')]\", 'tags': {\"[format('hidden-related:{0}', resourceid('microsoft.web/serverfarms', variables('hostingplanname')))]\": 'empty', 'displayname': 'website'}, 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-12-01', 'name': \"[format('{0}/{1}', variables('websitename'), 'connectionstrings')]\", 'properties': {'defaultconnection': {'value': \"[format('data source=tcp:{0},1433;initial catalog={1};user id={2}@{3};password={4};', reference(resourceid('microsoft.sql/servers', variables('sqlservername'))).fullyqualifieddomainname, variables('databasename'), parameters('sqladministratorlogin'), reference(resourceid('microsoft.sql/servers', variables('sqlservername'))).fullyqualifieddomainname, parameters('sqladministratorloginpassword'))]\", 'type': 'sqlazure'}}, 'dependson': [\"[resourceid('microsoft.sql/servers', variables('sqlservername'))]\", \"[resourceid('microsoft.web/sites', variables('websitename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template provides a easy way to deploy web app on Azure App Service Web Apps with Azure database for MySQL.\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'properties': {'reserved': true}, 'sku': {'tier': 'standard', 'name': 's1'}}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('sitename')]\", 'location': \"[parameters('location')]\", 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('sitename'), 'connectionstrings')]\", 'properties': {'defaultconnection': {'value': \"[format('database={0};data source={1};user id={2}@{3};password={4}', variables('databasename'), reference(resourceid('microsoft.dbformysql/servers', variables('servername'))).fullyqualifieddomainname, parameters('administratorlogin'), variables('servername'), parameters('administratorloginpassword'))]\", 'type': 'mysql'}}, 'dependson': [\"[resourceid('microsoft.dbformysql/servers', variables('servername'))]\", \"[resourceid('microsoft.web/sites', parameters('sitename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template deploys Sonarqube in an Azure App Service web app Linux container using the official Sonarqube image and backed by an Azure SQL Server.\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('serviceplanname')]\", 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('serviceplanname')]\", 'workersizeid': '1', 'reserved': true, 'numberofworkers': '1'}, 'sku': {'name': \"[parameters('serviceplanpricingtier')]\", 'tier': \"[variables('serviceplanpricingtiers')[parameters('serviceplanpricingtier')].tier]\", 'capacity': \"[parameters('serviceplancapacity')]\"}, 'kind': 'linux'}{'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('sitename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('serviceplanname')]\", \"[variables('sqlservername')]\"], 'properties': {'siteconfig': {'linuxfxversion': \"[concat('docker|sonarqube',':',parameters('sonarqubeimageversion'))]\"}, 'name': \"[parameters('sitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('serviceplanname'))]\"}, 'resources': [{'type': 'config', 'apiversion': '2020-06-01', 'name': 'appsettings', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('sitename'))]\"], 'tags': {'displayname': 'sonarappsettings'}, 'properties': {'sonarqube_jdbc_url': \"[concat('jdbc:sqlserver://', reference(resourceid('microsoft.sql/servers',variables('sqlservername'))).fullyqualifieddomainname, ';databasename=', variables('databasename'), ';encrypt=true;trustservercertificate=false;hostnameincertificate=', replace(reference(resourceid('microsoft.sql/servers', variables('sqlservername'))).fullyqualifieddomainname, concat(variables('sqlservername'), '.'), '*.'), ';logintimeout=30;')]\", 'sonarqube_jdbc_username': \"[parameters('sqlserveradministratorusername')]\", 'sonarqube_jdbc_password': \"[parameters('sqlserveradministratorpassword')]\", 'sonar.path.data': '/home/sonarqube/data'}}]} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy an Azure Function App that communicates with Azure Storage over private endpoints.\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2021-01-01', 'name': \"[parameters('functionappplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('functionappplansku')]\", 'tier': 'elasticpremium', 'size': \"[parameters('functionappplansku')]\", 'family': 'ep'}, 'kind': 'elastic', 'properties': {'maximumelasticworkercount': 20, 'reserved': \"[variables('isreserved')]\"}}{'type': 'microsoft.web/sites', 'apiversion': '2021-01-01', 'name': \"[parameters('functionappname')]\", 'location': \"[parameters('location')]\", 'kind': \"[if(variables('isreserved'), 'functionapp,linux', 'functionapp')]\", 'properties': {'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('functionappplanname'))]\", 'reserved': \"[variables('isreserved')]\", 'siteconfig': {'functionsruntimescalemonitoringenabled': true, 'linuxfxversion': \"[if(variables('isreserved'), 'dotnet|3.1', json('null'))]\", 'appsettings': [{'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components', variables('applicationinsightsname'))).instrumentationkey]\"}, {'name': 'azurewebjobsstorage', 'value': \"[format('defaultendpointsprotocol=https;accountname={0};accountkey={1}', parameters('functionstorageaccountname'), listkeys(resourceid('microsoft.storage/storageaccounts', parameters('functionstorageaccountname')), '2021-02-01').keys[0].value)]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[format('defaultendpointsprotocol=https;accountname={0};accountkey={1}', parameters('functionstorageaccountname'), listkeys(resourceid('microsoft.storage/storageaccounts', parameters('functionstorageaccountname')), '2021-02-01').keys[0].value)]\"}, {'name': 'functions_extension_version', 'value': '~3'}, {'name': 'functions_worker_runtime', 'value': 'dotnet'}, {'name': 'website_vnet_route_all', 'value': '1'}, {'name': 'website_contentovervnet', 'value': '1'}, {'name': 'website_contentshare', 'value': \"[variables('functioncontentsharename')]\"}]}}, 'dependson': [\"[resourceid('microsoft.insights/components', variables('applicationinsightsname'))]\", \"[resourceid('microsoft.storage/storageaccounts/fileservices/shares', split(format('{0}/default/{1}', parameters('functionstorageaccountname'), variables('functioncontentsharename')), '/')[0], split(format('{0}/default/{1}', parameters('functionstorageaccountname'), variables('functioncontentsharename')), '/')[1], split(format('{0}/default/{1}', parameters('functionstorageaccountname'), variables('functioncontentsharename')), '/')[2])]\", \"[resourceid('microsoft.web/serverfarms', parameters('functionappplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('functionstorageaccountname'))]\", \"[resourceid('microsoft.network/privatednszones/virtualnetworklinks', variables('privatestorageblobdnszonename'), format('{0}-link', variables('privatestorageblobdnszonename')))]\", \"[resourceid('microsoft.network/privateendpoints/privatednszonegroups', variables('privateendpointstorageblobname'), 'blobprivatednszonegroup')]\", \"[resourceid('microsoft.network/privateendpoints/privatednszonegroups', variables('privateendpointstoragefilename'), 'fileprivatednszonegroup')]\", \"[resourceid('microsoft.network/privatednszones/virtualnetworklinks', variables('privatestoragequeuednszonename'), format('{0}-link', variables('privatestoragequeuednszonename')))]\", \"[resourceid('microsoft.network/privateendpoints/privatednszonegroups', variables('privateendpointstoragequeuename'), 'tableprivatednszonegroup')]\", \"[resourceid('microsoft.network/privatednszones/virtualnetworklinks', variables('privatestoragetablednszonename'), format('{0}-link', variables('privatestoragetablednszonename')))]\", \"[resourceid('microsoft.network/privateendpoints/privatednszonegroups', variables('privateendpointstoragetablename'), 'tableprivatednszonegroup')]\"]}{'type': 'microsoft.web/sites/networkconfig', 'apiversion': '2021-01-01', 'name': \"[format('{0}/{1}', parameters('functionappname'), 'virtualnetwork')]\", 'properties': {'subnetresourceid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), parameters('functionsubnetname'))]\", 'swiftsupported': true}, 'dependson': [\"[resourceid('microsoft.web/sites', parameters('functionappname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template deploys an empty Function App and a hosting plan.\n\n===\n\n", "completion": " {'type': 'microsoft.web/sites', 'apiversion': '2019-08-01', 'name': \"[parameters('sitename')]\", 'kind': 'functionapp,linux', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"], 'properties': {'name': \"[parameters('sitename')]\", 'siteconfig': {'appsettings': [{'name': 'functions_worker_runtime', 'value': 'python'}, {'name': 'functions_extension_version', 'value': '~2'}, {'name': 'azurewebjobsstorage', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', parameters('storageaccountname'), ';accountkey=', listkeys(variables('storageaccountid'),'2019-06-01').keys[0].value)]\"}]}, 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", 'clientaffinityenabled': false}}{'type': 'microsoft.web/serverfarms', 'apiversion': '2019-08-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'kind': 'linux', 'properties': {'reserved': true}, 'sku': {'tier': 'standard', 'name': 's1'}} END"}
{"prompt": "\n\n###\n\nIt allows you to deploy an App Service Plan and a Windows app\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'type': 'microsoft.web/serverfarms', 'name': \"[variables('appserviceplanportalname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}}{'apiversion': '2020-06-01', 'type': 'microsoft.web/sites', 'name': \"[parameters('webappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('appserviceplanportalname'))]\"], 'properties': {'siteconfig': \"[variables('configreference')[parameters('language')]]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('appserviceplanportalname'))]\"}, 'resources': [{'type': 'sourcecontrols', 'apiversion': '2020-06-01', 'name': 'web', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('webappname'))]\"], 'properties': {'repourl': \"[variables('gitrepourl')]\", 'branch': 'master', 'ismanualintegration': true}}]} END"}
{"prompt": "\n\n###\n\nCreates a function app with managed service identity.\n\n===\n\n", "completion": " {'name': \"[parameters('functionappname')]\", 'type': 'microsoft.web/sites', 'apiversion': '2019-08-01', 'location': \"[parameters('location')]\", 'kind': 'functionapp', 'dependson': [\"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", \"[resourceid('microsoft.insights/components', parameters('functionappname'))]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'siteconfig': {'appsettings': [{'name': 'functions_worker_runtime', 'value': \"[parameters('runtimestack')]\"}, {'name': 'azurewebjobsstorage', 'value': \"[concat('defaultendpointsprotocol=https;accountname=',variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=',listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value)]\"}, {'name': 'functions_extension_version', 'value': '~2'}, {'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components', parameters('functionappname')), '2018-05-01-preview').instrumentationkey]\"}, {'name': 'website_contentazurefileconnectionstring', 'value': \"[concat('defaultendpointsprotocol=https;accountname=', variables('storageaccountname'), ';endpointsuffix=', environment().suffixes.storage, ';accountkey=', listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')),'2019-06-01').keys[0].value)]\"}, {'name': 'website_contentshare', 'value': \"[tolower(parameters('functionappname'))]\"}, {'name': 'website_time_zone', 'value': \"[parameters('timezone')]\"}]}, 'name': \"[parameters('functionappname')]\", 'clientaffinityenabled': false, 'serverfarmid': \"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"}}{'type': 'microsoft.web/serverfarms', 'apiversion': '2019-08-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('hostingplanname')]\"}, 'sku': {'name': 'y1', 'tier': 'dynamic', 'size': 'y1', 'family': 'y', 'capacity': 0}} END"}
{"prompt": "\n\n###\n\nCreate and assign a standard App Service Certificate\n\n===\n\n", "completion": " {'type': 'microsoft.web/sites/domainownershipidentifiers', 'name': \"[concat(parameters('existingappname'), concat('/', parameters('certificateordername')))]\", 'apiversion': '2016-08-01', 'location': \"[parameters('existingapplocation')]\", 'dependson': [\"[resourceid('microsoft.certificateregistration/certificateorders', parameters('certificateordername'))]\"], 'properties': {'id': \"[reference(resourceid('microsoft.certificateregistration/certificateorders', parameters('certificateordername'))).domainverificationtoken]\"}}{'type': 'microsoft.web/certificates', 'name': \"[parameters('certificateordername')]\", 'apiversion': '2015-08-01', 'location': \"[parameters('existingapplocation')]\", 'dependson': [\"[resourceid('microsoft.certificateregistration/certificateorders/certificates', parameters('certificateordername'), parameters('certificateordername'))]\"], 'properties': {'keyvaultid': \"[parameters('existingkeyvaultid')]\", 'keyvaultsecretname': \"[parameters('certificateordername')]\"}}{'type': 'microsoft.web/sites', 'name': \"[parameters('existingappname')]\", 'apiversion': '2015-08-01', 'location': \"[parameters('existingapplocation')]\", 'dependson': [\"[resourceid('microsoft.web/certificates', parameters('certificateordername'))]\"], 'properties': {'name': \"[parameters('existingappname')]\", 'hostnamesslstates': [{'name': \"[parameters('roothostname')]\", 'sslstate': 1, 'thumbprint': \"[reference(resourceid('microsoft.certificateregistration/certificateorders', parameters('certificateordername'))).signedcertificate.thumbprint]\", 'toupdate': true}, {'name': \"[variables('wwwhostname')]\", 'sslstate': 1, 'thumbprint': \"[reference(resourceid('microsoft.certificateregistration/certificateorders', parameters('certificateordername'))).signedcertificate.thumbprint]\", 'toupdate': true}]}} END"}
{"prompt": "\n\n###\n\nCreate an AppServicePlan and App in an ASEv3\n\n===\n\n", "completion": " {'type': 'microsoft.web/hostingenvironments', 'apiversion': '2020-12-01', 'name': \"[parameters('asename')]\", 'location': \"[parameters('location')]\", 'kind': 'asev3', 'properties': {'dedicatedhostcount': \"[parameters('dedicatedhostcount')]\", 'zoneredundant': \"[parameters('zoneredundant')]\", 'internalloadbalancingmode': \"[parameters('internalloadbalancingmode')]\", 'virtualnetwork': {'id': \"[variables('subnetid')]\"}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a web app on Azure with Python enabled.\n\n===\n\n", "completion": " {'apiversion': '2020-06-01', 'name': \"[parameters('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'hostingplan'}, 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'properties': {'name': \"[parameters('hostingplanname')]\", 'reserved': true}}{'apiversion': '2020-06-01', 'name': \"[parameters('websitename')]\", 'type': 'microsoft.web/sites', 'location': \"[parameters('location')]\", 'tags': {\"[concat('hidden-related:', resourcegroup().id, '/providers/microsoft.web/serverfarms/', parameters('hostingplanname'))]\": 'resource', 'displayname': 'website'}, 'dependson': [\"[resourceid('microsoft.web/serverfarms/', parameters('hostingplanname'))]\"], 'properties': {'name': \"[parameters('websitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', parameters('hostingplanname'))]\", 'siteconfig': {'linuxfxversion': 'python|3.7'}}} END"}
{"prompt": "\n\n###\n\nThis template provides a easy way to deploy a Sonarqube docker image (alpine tag) on a Linux Web App with Azure database for PostgreSQL(Preview).\n\n===\n\n", "completion": " {'comments': 'this is the linux web app with the sonarquebe docker image', 'type': 'microsoft.web/sites', 'name': \"[parameters('sitename')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hostingplanname')]\", \"[variables('databasename')]\"], 'properties': {'siteconfig': {'linuxfxversion': 'docker|sonarqube'}, 'name': \"[parameters('sitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'resources': [{'name': 'appsettings', 'type': 'config', 'apiversion': '2020-06-01', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('sitename'))]\"], 'tags': {'displayname': 'sonarappsettings'}, 'comments': 'this are the generated settings for the sonar jdbc connectionstring', 'properties': {'sonarqube_jdbc_url': \"[concat('jdbc:postgresql://', reference(resourceid('microsoft.dbforpostgresql/servers',variables('servername'))).fullyqualifieddomainname ,':5432/',variables('databasename'),'?user=', variables('jdbcsonarusername'), '&password=',parameters('administratorloginpassword'), '&ssl=true')]\", 'sonarqube_jdbc_username': \"[variables('jdbcsonarusername')]\", 'sonarqube_jdbc_password': \"[parameters('administratorloginpassword')]\"}}]}{'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('hostingplanname')]\", 'workersizeid': '1', 'reserved': true, 'numberofworkers': '1'}, 'sku': {'tier': \"[parameters('serviceplantier')]\", 'name': \"[parameters('serviceplansku')]\"}, 'kind': 'linux'} END"}
{"prompt": "\n\n###\n\nThis template provides a easy way to deploy a Sonarqube docker image (alpine tag) on a Linux Web App with Azure database for MySQL.\n\n===\n\n", "completion": " {'comments': 'this is the linux web app with the sonarquebe docker image and the db', 'type': 'microsoft.web/sites', 'name': \"[parameters('sitename')]\", 'apiversion': '2019-08-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hostingplanname')]\", \"[variables('databasename')]\"], 'properties': {'siteconfig': {'linuxfxversion': 'docker|sonarqube'}, 'name': \"[parameters('sitename')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'resources': [{'comments': 'this are the generated settings for the sonar jdbc connectionstring', 'name': 'appsettings', 'type': 'config', 'apiversion': '2019-08-01', 'dependson': [\"[resourceid('microsoft.web/sites', parameters('sitename'))]\"], 'tags': {'displayname': 'sonarappsettings'}, 'properties': {'sonarqube_jdbc_url': \"[concat('jdbc:mysql://',  reference(resourceid('microsoft.dbformysql/servers',variables('servername'))).fullyqualifieddomainname , ':3306/',variables('databasename'),'?verifyservercertificate=true&usessl=true&requiressl=false&useunicode=true&characterencoding=utf8')]\", 'sonarqube_jdbc_username': \"[variables('jdbcsonarusername')]\", 'sonarqube_jdbc_password': \"[parameters('administratorloginpassword')]\"}}]}{'apiversion': '2019-08-01', 'name': \"[variables('hostingplanname')]\", 'type': 'microsoft.web/serverfarms', 'location': \"[parameters('location')]\", 'properties': {'name': \"[variables('hostingplanname')]\", 'workersizeid': '1', 'reserved': true, 'numberofworkers': '1'}, 'sku': {'tier': \"[parameters('serviceplantier')]\", 'name': \"[parameters('serviceplansku')]\"}, 'kind': 'linux'} END"}
{"prompt": "\n\n###\n\nProvision a Mobile App with a SQL Database\n\n===\n\n", "completion": " {'type': 'microsoft.web/serverfarms', 'apiversion': '2019-08-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('hostingplansettings').skuname]\", 'tier': \"[parameters('hostingplansettings').tier]\", 'capacity': \"[parameters('hostingplansettings').capacity]\"}, 'properties': {'numberofworkers': 1}}{'apiversion': '2019-08-01', 'type': 'microsoft.web/sites', 'name': \"[variables('uniqueappname')]\", 'location': \"[parameters('location')]\", 'kind': 'mobileapp', 'properties': {'name': \"[variables('uniqueappname')]\", 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', variables('hostingplanname'))]\"}, 'dependson': [\"[variables('hostingplanname')]\"], 'resources': [{'apiversion': '2019-08-01', 'name': 'appsettings', 'type': 'config', 'dependson': [\"[variables('uniqueappname')]\"], 'properties': {'ms_mobileservicename': \"[variables('uniqueappname')]\", 'ms_notificationhubname': \"[variables('notificationhubname')]\"}}, {'apiversion': '2019-08-01', 'name': 'connectionstrings', 'type': 'config', 'dependson': [\"[variables('uniqueappname')]\", \"[variables('notificationhubname')]\", \"[variables('databasename')]\"], 'properties': {'ms_tableconnectionstring': {'value': \"[concat('data source=tcp:', reference(resourceid('microsoft.sql/servers', variables('databaseservername'))).fullyqualifieddomainname, ',1433;initial catalog=', variables('databasename'), ';user id=', parameters('sqlserveradminlogin'), '@', variables('databaseservername'), ';password=', parameters('sqlserveradminpassword'), ';')]\", 'type': 'sqlserver'}, 'ms_notificationhubconnectionstring': {'value': \"[listkeys(resourceid('microsoft.notificationhubs/namespaces/notificationhubs/authorizationrules', variables('notificationhubnamespace'), variables('notificationhubname'), 'defaultfullsharedaccesssignature'), '2017-04-01').primaryconnectionstring]\", 'type': 'custom'}}}, {'apiversion': '2019-08-01', 'type': 'providers/links', 'name': 'microsoft.resources/sitetohub', 'dependson': [\"[variables('uniqueappname')]\", \"[variables('notificationhubname')]\"], 'properties': {'targetid': \"[resourceid('microsoft.notificationhubs/namespaces/notificationhubs', variables('notificationhubnamespace'), variables('notificationhubname'))]\"}}]} END"}
{"prompt": "\n\n###\n\nDeploy an App Service that supports Python. It gives you the support to deploy your own Django app.\n\n===\n\n", "completion": " {'type': 'microsoft.web/sites', 'apiversion': '2020-06-01', 'name': \"[parameters('webappname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\", \"[resourceid('microsoft.insights/components', variables('appinsights'))]\"], 'properties': {'siteconfig': {'appsettings': [{'name': 'websites_enable_app_service_storage', 'value': 'false'}, {'name': 'appinsights_instrumentationkey', 'value': \"[reference(resourceid('microsoft.insights/components/', variables('appinsights'))).instrumentationkey]\"}, {'name': 'xdt_microsoftapplicationinsights_mode', 'value': 'default'}, {'name': 'applicationinsightsagent_extension_version', 'value': '~2'}], 'linuxfxversion': 'docker|appsvcorg/django-python:0.1'}, 'name': \"[parameters('webappname')]\", 'clientaffinityenabled': false, 'serverfarmid': \"[resourceid('microsoft.web/serverfarms/', variables('hostingplanname'))]\"}}{'type': 'microsoft.web/serverfarms', 'apiversion': '2020-06-01', 'name': \"[variables('hostingplanname')]\", 'location': \"[parameters('location')]\", 'sku': {'tier': \"[variables('sku')]\", 'name': \"[variables('skucode')]\"}, 'kind': 'linux', 'properties': {'name': \"[variables('hostingplanname')]\", 'workersizeid': \"[variables('workersize')]\", 'reserved': true, 'numberofworkers': '1'}} END"}
{"prompt": "\n\n###\n\nApplication Gateway routing Internet traffic to a virtual network (internal mode) API Management instance which services a web API hosted in an Azure Web App.\n\n===\n\n", "completion": " {'type': 'microsoft.web/sites/config', 'apiversion': '2020-12-01', 'name': \"[format('{0}/{1}', variables('webappname'), 'web')]\", 'properties': {'ftpsstate': 'disabled', 'mintlsversion': '1.2', 'detailederrorloggingenabled': true, 'httploggingenabled': true, 'requesttracingenabled': true, 'remotedebuggingenabled': false}, 'dependson': [\"[resourceid('microsoft.web/sites', variables('webappname'))]\"]}{'type': 'microsoft.web/serverfarms', 'apiversion': '2021-01-01', 'name': \"[format('plan-{0}', variables('basename'))]\", 'location': \"[parameters('location')]\", 'kind': 'app', 'sku': {'name': \"[parameters('webappskuname')]\", 'capacity': 1}, 'properties': {}}{'type': 'microsoft.web/sites', 'apiversion': '2020-12-01', 'name': \"[variables('webappname')]\", 'location': \"[parameters('location')]\", 'kind': 'app', 'properties': {'httpsonly': true, 'serverfarmid': \"[resourceid('microsoft.web/serverfarms', format('plan-{0}', variables('basename')))]\", 'virtualnetworksubnetid': \"[variables('appserviceintegrationsubnetid')]\", 'siteconfig': {'vnetrouteallenabled': true}}, 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.web/serverfarms', format('plan-{0}', variables('basename')))]\"]}{'type': 'microsoft.web/sites/config', 'apiversion': '2021-01-15', 'name': \"[format('{0}/appsettings', variables('webappname'))]\", 'properties': {'appinsights_instrumentationkey': \"[format('@microsoft.keyvault(secreturi={0})', reference(resourceid('microsoft.keyvault/vaults/secrets', variables('keyvaultname'), format('kvs-{0}-aikey', variables('basename')))).secreturi)]\"}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults/secrets', variables('keyvaultname'), format('kvs-{0}-aikey', variables('basename')))]\", \"[resourceid('microsoft.web/sites', variables('webappname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Notification Hub. Template originally authored by John Downs.\n\n===\n\n", "completion": " {'type': 'microsoft.notificationhubs/namespaces', 'apiversion': '2017-04-01', 'name': \"[parameters('namespacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'free'}, 'kind': 'notificationhub', 'resources': [{'type': 'microsoft.notificationhubs/namespaces/notificationhubs', 'apiversion': '2017-04-01', 'name': \"[concat(parameters('namespacename'), '/', variables('hubname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('namespacename')]\"]}]} END"}
{"prompt": "\n\n###\n\nDeploys a Log Analytics workspace with VM Insights, Container Insights solutions and diagnostics.\n\n===\n\n", "completion": " {'type': 'microsoft.insights/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'scope': \"[format('microsoft.operationalinsights/workspaces/{0}', parameters('loganalyticsworkspacename'))]\", 'name': 'diagnosticsettings', 'properties': {'workspaceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('loganalyticsworkspacename'))]\", 'logs': [{'category': 'audit', 'enabled': true, 'retentionpolicy': {'days': 7, 'enabled': true}}], 'metrics': [{'category': 'allmetrics', 'enabled': true, 'retentionpolicy': {'days': 7, 'enabled': true}}]}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', parameters('loganalyticsworkspacename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Application Insights availability test along with a metric alert rule that monitors it.\n\n===\n\n", "completion": " {'name': \"[variables('pingtestname')]\", 'type': 'microsoft.insights/webtests', 'apiversion': '2015-05-01', 'location': \"[parameters('location')]\", 'tags': {\"[concat('hidden-link:', parameters('appinsightsresource'))]\": 'resource'}, 'properties': {'name': \"[variables('pingtestname')]\", 'description': 'basic ping test', 'enabled': true, 'frequency': 300, 'timeout': 120, 'kind': 'ping', 'retryenabled': true, 'locations': [{'id': \"[parameters('webtestlocations')]\"}], 'configuration': {'webtest': '[concat(\\'<webtest   name=\"\\', variables(\\'pingtestname\\'), \\'\"   enabled=\"true\"         cssprojectstructure=\"\"    cssiteration=\"\"  timeout=\"120\"  workitemids=\"\"         xmlns=\"http://microsoft.com/schemas/visualstudio/teamtest/2010\"         description=\"\"  credentialusername=\"\"  credentialpassword=\"\"         preauthenticate=\"true\"  proxy=\"default\"  stoponerror=\"false\"         recordedresultfile=\"\"  resultslocale=\"\">  <items>  <request method=\"get\"    version=\"1.1\"  url=\"\\', parameters(\\'pingurl\\'),   \\'\" thinktime=\"0\"  timeout=\"300\" parsedependentrequests=\"true\"         followredirects=\"true\" recordresult=\"true\" cache=\"false\"         responsetimegoal=\"0\"  encoding=\"utf-8\"  expectedhttpstatuscode=\"200\"         expectedresponseurl=\"\" reportingname=\"\" ignorehttpstatuscode=\"false\" />        </items>  <validationrules> <validationrule  classname=\"microsoft.visualstudio.testtools.webtesting.rules.validationrulefindtext, microsoft.visualstudio.qualitytools.webtestframework, version=10.0.0.0, culture=neutral, publickeytoken=b03f5f7f11d50a3a\" displayname=\"find text\"         description=\"verifies the existence of the specified text in the response.\"         level=\"high\"  executionorder=\"beforedependents\">  <ruleparameters>        <ruleparameter name=\"findtext\" value=\"\\',   parameters(\\'pingtext\\'), \\'\" />  <ruleparameter name=\"ignorecase\" value=\"false\" />  <ruleparameter name=\"useregularexpression\" value=\"false\" />  <ruleparameter name=\"passiftextfound\" value=\"true\" />  </ruleparameters> </validationrule>  </validationrules>  </webtest>\\')]'}, 'syntheticmonitorid': \"[variables('pingtestname')]\"}}{'name': \"[variables('pingalertrulename')]\", 'type': 'microsoft.insights/metricalerts', 'apiversion': '2018-03-01', 'location': 'global', 'dependson': [\"[resourceid('microsoft.insights/webtests', variables('pingtestname'))]\"], 'tags': {\"[concat('hidden-link:', parameters('appinsightsresource'))]\": 'resource', \"[concat('hidden-link:', resourceid('microsoft.insights/webtests', variables('pingtestname')))]\": 'resource'}, 'properties': {'description': 'alert for web test', 'severity': 1, 'enabled': true, 'scopes': [\"[resourceid('microsoft.insights/webtests',variables('pingtestname'))]\", \"[parameters('appinsightsresource')]\"], 'evaluationfrequency': 'pt1m', 'windowsize': 'pt5m', 'criteria': {'odata.type': 'microsoft.azure.monitor.webtestlocationavailabilitycriteria', 'webtestid': \"[resourceid('microsoft.insights/webtests', variables('pingtestname'))]\", 'componentid': \"[parameters('appinsightsresource')]\", 'failedlocationcount': 2}}} END"}
{"prompt": "\n\n###\n\nThis template creates a metric alert rule that monitors the CPU Percentage metric of a virtual machine using a dynamic threshold condition type.\n\n===\n\n", "completion": " {'name': \"[parameters('alertname')]\", 'type': 'microsoft.insights/metricalerts', 'location': 'global', 'apiversion': '2018-03-01', 'properties': {'description': \"[parameters('alertdescription')]\", 'severity': \"[parameters('alertseverity')]\", 'enabled': \"[parameters('isenabled')]\", 'scopes': [\"[parameters('resourceid')]\"], 'evaluationfrequency': \"[parameters('evaluationfrequency')]\", 'windowsize': \"[parameters('windowsize')]\", 'criteria': {'odata.type': 'microsoft.azure.monitor.multipleresourcemultiplemetriccriteria', 'allof': [{'criteriontype': 'dynamicthresholdcriterion', 'name': '1st criterion', 'metricname': \"[parameters('metricname')]\", 'operator': \"[parameters('operator')]\", 'alertsensitivity': \"[parameters('alertsensitivity')]\", 'failingperiods': {'numberofevaluationperiods': \"[parameters('numberofevaluationperiods')]\", 'minfailingperiodstoalert': \"[parameters('minfailingperiodstoalert')]\"}, 'ignoredatabefore': \"[parameters('ignoredatabefore')]\", 'timeaggregation': \"[parameters('timeaggregation')]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template creates a metric alert rule that monitors the CPU Percentage metric of a virtual machine using a static threshold condition type.\n\n===\n\n", "completion": " {'name': \"[parameters('alertname')]\", 'type': 'microsoft.insights/metricalerts', 'location': 'global', 'apiversion': '2018-03-01', 'properties': {'description': \"[parameters('alertdescription')]\", 'severity': \"[parameters('alertseverity')]\", 'enabled': \"[parameters('isenabled')]\", 'scopes': [\"[parameters('resourceid')]\"], 'evaluationfrequency': \"[parameters('evaluationfrequency')]\", 'windowsize': \"[parameters('windowsize')]\", 'criteria': {'odata.type': 'microsoft.azure.monitor.singleresourcemultiplemetriccriteria', 'allof': [{'name': '1st criterion', 'metricname': \"[parameters('metricname')]\", 'operator': \"[parameters('operator')]\", 'threshold': \"[parameters('threshold')]\", 'timeaggregation': \"[parameters('timeaggregation')]\"}]}}} END"}
{"prompt": "\n\n###\n\nDeploys a Log Analytics workspace with specified solutions and data sources\n\n===\n\n", "completion": " {'condition': \"[parameters('enablediagnostics')]\", 'type': 'microsoft.insights/diagnosticsettings', 'apiversion': '2021-05-01-preview', 'scope': \"[format('microsoft.operationalinsights/workspaces/{0}', parameters('name'))]\", 'name': \"[variables('diagnosticsname')]\", 'properties': {'workspaceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('name'))]\", 'storageaccountid': \"[resourceid(parameters('diagnosticstorageaccountresourcegroup'), 'microsoft.storage/storageaccounts', parameters('diagnosticstorageaccountname'))]\", 'logs': [{'category': 'audit', 'enabled': true}], 'metrics': [{'category': 'allmetrics', 'enabled': true}]}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', parameters('name'))]\"]} END"}
{"prompt": "\n\n###\n\nCreates an Azure service health alert that emails service administrators and others during certain Azure service incidents.\n\n===\n\n", "completion": " {'type': 'microsoft.insights/activitylogalerts', 'apiversion': '2017-04-01', 'name': \"[parameters('alertname')]\", 'location': 'global', 'properties': {'enabled': true, 'scopes': ['[subscription().id]'], 'condition': {'allof': [{'field': 'category', 'equals': 'resourcehealth'}, {'field': 'status', 'equals': \"[parameters('status')]\"}]}, 'actions': {'actiongroups': [{'actiongroupid': \"[resourceid('microsoft.insights/actiongroups','emailactiongroup')]\"}]}}}{'name': 'emailactiongroup', 'type': 'microsoft.insights/actiongroups', 'apiversion': '2019-06-01', 'location': 'global', 'properties': {'groupshortname': 'string', 'enabled': true, 'emailreceivers': [{'name': \"[parameters('emailname')]\", 'emailaddress': \"[parameters('emailaddress')]\", 'usecommonalertschema': true}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a data collection rule defining the data source (Syslog) and the destination workspace.\n\n===\n\n", "completion": " {'type': 'microsoft.insights/datacollectionrules', 'apiversion': '2019-11-01-preview', 'name': \"[parameters('dcrname')]\", 'location': \"[parameters('location')]\", 'kind': 'linux', 'properties': {'datasources': {'syslog': [{'streams': ['microsoft-syslog'], 'facilitynames': ['auth', 'authpriv', 'cron', 'daemon', 'mark', 'kern', 'local0', 'local1', 'local2', 'local3', 'local4', 'local5', 'local6', 'local7', 'lpr', 'mail', 'news', 'syslog', 'user', 'uucp'], 'loglevels': ['debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency'], 'name': 'syslogsdatasource'}]}, 'destinations': {'loganalytics': [{'workspaceresourceid': \"[parameters('workspaceresourceid')]\", 'name': 'la-data-destination'}]}, 'dataflows': [{'streams': ['microsoft-syslog'], 'destinations': ['la-data-destination']}]}} END"}
{"prompt": "\n\n###\n\nThis template grants applicable role based access to an existing VM in a existing Resource Group\n\n===\n\n", "completion": " {'scope': \"[concat('microsoft.compute/virtualmachines/', parameters('virtualmachinename'))]\", 'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[variables('role')[parameters('builtinroletype')]]\", 'principalid': \"[parameters('principalid')]\"}} END"}
{"prompt": "\n\n###\n\nAssign a role-based access control role to an existing Resource Manager group.\n\n===\n\n", "completion": " {'type': 'microsoft.authorization/roleassignments', 'apiversion': '2021-04-01-preview', 'name': \"[variables('roleassignmentname')]\", 'properties': {'roledefinitionid': \"[resourceid('microsoft.authorization/roledefinitions', parameters('roledefinitionid'))]\", 'principalid': \"[parameters('principalid')]\"}} END"}
{"prompt": "\n\n###\n\nAssign a built-in policy to an existing resource group\n\n===\n\n", "completion": " {'type': 'microsoft.authorization/policyassignments', 'name': \"[parameters('policyassignmentname')]\", 'apiversion': '2019-09-01', 'properties': {'scope': \"[subscriptionresourceid('microsoft.resources/resourcegroups', resourcegroup().name)]\", 'policydefinitionid': \"[parameters('policydefinitionid')]\"}} END"}
{"prompt": "\n\n###\n\nThis template grants applicable role based access to an multiple existing VMs in a existing Resource Group\n\n===\n\n", "completion": " {'scope': \"[concat('microsoft.compute/virtualmachines/', parameters('virtualmachinename1'))]\", 'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname1')]\", 'properties': {'roledefinitionid': \"[variables('role')[parameters('builtinroletype')]]\", 'principalid': \"[parameters('principalid')]\"}}{'scope': \"[concat('microsoft.compute/virtualmachines/', parameters('virtualmachinename2'))]\", 'type': 'microsoft.authorization/roleassignments', 'apiversion': '2020-04-01-preview', 'name': \"[variables('roleassignmentname2')]\", 'properties': {'roledefinitionid': \"[variables('role')[parameters('builtinroletype')]]\", 'principalid': \"[parameters('principalid')]\"}} END"}
{"prompt": "\n\n###\n\nThis template uses Azure Managed Identity to assign access to Azure Maps. See more at https://aka.ms/amauth\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nA template for creating a new Cognitive Services Translation API. Use this template as the framework for your custom deployment.\n\n===\n\n", "completion": " {'type': 'microsoft.cognitiveservices/accounts', 'apiversion': '2017-04-18', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('translatelocation')]\", 'kind': 'texttranslation', 'sku': {'name': \"[parameters('sku')]\"}, 'properties': {}} END"}
{"prompt": "\n\n###\n\nA template for creating a new Cognitive Services Computer Vision API. Use this template as the framework for your custom deployment. This template was originally created by Marco Mansi (@olandese).\n\n===\n\n", "completion": " {'type': 'microsoft.cognitiveservices/accounts', 'apiversion': '2017-04-18', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'kind': 'computervision', 'sku': {'name': \"[parameters('sku')]\"}, 'properties': {}} END"}
{"prompt": "\n\n###\n\nDeploy a cognitive service with an universal key.\n\n===\n\n", "completion": " {'type': 'microsoft.cognitiveservices/accounts', 'apiversion': '2017-04-18', 'name': \"[parameters('cognitiveservicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'kind': 'cognitiveservices', 'properties': {'statisticsenabled': false}} END"}
{"prompt": "\n\n###\n\nCreate a Redis Cache using a template. Diagnostics data for the cache is kept in a storage account.\n\n===\n\n", "completion": " {'type': 'microsoft.cache/redis', 'apiversion': '2020-06-01', 'name': \"[parameters('rediscachename')]\", 'location': \"[parameters('location')]\", 'properties': {'enablenonsslport': \"[parameters('enablenonsslport')]\", 'minimumtlsversion': '1.2', 'sku': {'capacity': \"[parameters('rediscachecapacity')]\", 'family': \"[parameters('rediscachefamily')]\", 'name': \"[parameters('rediscachesku')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template provides two Azure Cache for Redis instances with the benefits of Virtual Network and geo-replication support.\n\n===\n\n", "completion": " {'type': 'microsoft.cache/redis', 'apiversion': '2020-06-01', 'name': \"[parameters('newprimarycachename')]\", 'location': \"[parameters('location')]\", 'properties': {'sku': {'name': 'premium', 'family': 'p', 'capacity': 1}, 'subnetid': \"[variables('primarysubnetid')]\"}, 'comments': 'create a premium cache in the primary location in the primary virtual network.'}{'type': 'microsoft.cache/redis', 'apiversion': '2020-06-01', 'name': \"[parameters('newsecondarycachename')]\", 'location': \"[parameters('secondarylocation')]\", 'comments': 'create a premium cache in the secondary location in the secondary virtual network.', 'properties': {'sku': {'name': 'premium', 'family': 'p', 'capacity': 1}, 'subnetid': \"[variables('secondarysubnetid')]\"}}{'type': 'microsoft.cache/redis/linkedservers', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('newprimarycachename'), '/', parameters('newsecondarycachename'))]\", 'dependson': [\"[resourceid('microsoft.cache/redis', parameters('newprimarycachename'))]\", \"[resourceid('microsoft.cache/redis', parameters('newsecondarycachename'))]\"], 'comments': 'create a geo-replication link. this resource is created as a nested resource of the primary cache. its name is fixed and cannot be changed. its properties identifies the secondary cache and labels it as the secondary.', 'properties': {'linkedrediscacheid': \"[resourceid('microsoft.cache/redis', parameters('newsecondarycachename'))]\", 'linkedrediscachelocation': \"[parameters('secondarylocation')]\", 'serverrole': 'secondary'}} END"}
{"prompt": "\n\n###\n\nThis template creates a Redis cluster on Ubuntu virtual machines\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nClustering provides the ability to split your dataset among multiple nodes, to continue operations when a subset of the nodes has problems, more throughput, and more memory size.\n\n===\n\n", "completion": " {'type': 'microsoft.cache/redis', 'apiversion': '2020-06-01', 'name': \"[parameters('rediscachename')]\", 'location': \"[parameters('location')]\", 'properties': {'enablenonsslport': \"[parameters('enablenonsslport')]\", 'minimumtlsversion': '1.2', 'sku': {'capacity': \"[parameters('rediscachecapacity')]\", 'family': \"[parameters('rediscachefamily')]\", 'name': \"[parameters('rediscachesku')]\"}}} END"}
{"prompt": "\n\n###\n\nCreate and configre persistence in premium Redis Cache using a template. Redis persistence enables you to take snapshots and back up the data which you can load in case of a hardware failure.\n\n===\n\n", "completion": " {'type': 'microsoft.cache/redis', 'apiversion': '2020-06-01', 'name': \"[parameters('rediscachename')]\", 'location': \"[parameters('location')]\", 'properties': {'enablenonsslport': \"[parameters('enablenonsslport')]\", 'minimumtlsversion': '1.2', 'sku': {'capacity': \"[parameters('rediscachecapacity')]\", 'family': \"[parameters('rediscachefamily')]\", 'name': \"[parameters('rediscachesku')]\"}, 'redisconfiguration': {'rdb-backup-enabled': 'true', 'rdb-backup-frequency': '60', 'rdb-backup-max-snapshot-count': '1', 'rdb-storage-connection-string': \"[format('defaultendpointsprotocol=https;blobendpoint=https://{0}.blob.{1};accountname={2};accountkey={3}', parameters('storageaccountname'), environment().suffixes.storage, parameters('storageaccountname'), listkeys(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2021-04-01').keys[0].value)]\"}}} END"}
{"prompt": "\n\n###\n\nThis template provides a Redis Cache with the benefit of Virtual Network support.\n\n===\n\n", "completion": " {'type': 'microsoft.cache/redis', 'apiversion': '2020-12-01', 'name': \"[parameters('rediscachename')]\", 'location': \"[parameters('location')]\", 'properties': {'enablenonsslport': \"[parameters('enablenonsslport')]\", 'minimumtlsversion': \"[parameters('minimumtlsversion')]\", 'sku': {'capacity': \"[parameters('rediscachecapacity')]\", 'family': 'p', 'name': 'premium'}, 'subnetid': \"[extensionresourceid(format('/subscriptions/{0}/resourcegroups/{1}', subscription().subscriptionid, parameters('existingvirtualnetworkresourcegroupname')), 'microsoft.network/virtualnetworks/subnets', split(format('{0}/{1}', parameters('existingvirtualnetworkname'), parameters('existingsubnetname')), '/')[0], split(format('{0}/{1}', parameters('existingvirtualnetworkname'), parameters('existingsubnetname')), '/')[1])]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a Time Series Insights environment, a child event source that reads events from an Event Hub, and optionally a source Event Hub.\n\n===\n\n", "completion": " {'type': 'microsoft.timeseriesinsights/environments', 'name': \"[parameters('environmentname')]\", 'apiversion': '2017-11-15', 'location': \"[parameters('location')]\", 'properties': {'dataretentiontime': \"[parameters('environmentdataretentiontime')]\"}, 'sku': {'name': \"[parameters('environmentskuname')]\", 'capacity': \"[parameters('environmentskucapacity')]\"}, 'tags': \"[variables('environmenttagsvalue')]\", 'resources': [{'type': 'eventsources', 'name': \"[parameters('eventsourcename')]\", 'apiversion': '2017-11-15', 'location': \"[parameters('location')]\", 'kind': 'microsoft.eventhub', 'dependson': [\"[resourceid('microsoft.timeseriesinsights/environments/', parameters('environmentname'))]\", \"[resourceid('microsoft.eventhub/namespaces', parameters('eventhubnamespacename'))]\", \"[resourceid('microsoft.eventhub/namespaces/eventhubs/consumergroups', parameters('eventhubnamespacename'), parameters('eventhubname'), parameters('consumergroupname'))]\", \"[resourceid('microsoft.eventhub/namespaces/eventhubs/authorizationrules', parameters('eventhubnamespacename'), parameters('eventhubname'), parameters('eventsourcekeyname'))]\"], 'properties': {'eventsourceresourceid': \"[variables('eventsourceresourceid')]\", 'eventhubname': \"[parameters('eventhubname')]\", 'servicebusnamespace': \"[parameters('eventhubnamespacename')]\", 'consumergroupname': \"[parameters('consumergroupname')]\", 'keyname': \"[parameters('eventsourcekeyname')]\", 'sharedaccesskey': \"[listkeys(resourceid(parameters('eventhubresourcegroup'), 'microsoft.eventhub/namespaces/eventhubs/authorizationrules', parameters('eventhubnamespacename'), parameters('eventhubname'), parameters('eventsourcekeyname')), '2021-01-01-preview').primarykey]\", 'timestamppropertyname': \"[parameters('eventsourcetimestamppropertyname')]\"}, 'tags': \"[variables('eventsourcetagsvalue')]\"}]}{'condition': \"[not(empty(parameters('accesspolicyreaderobjectids')))]\", 'type': 'microsoft.timeseriesinsights/environments/accesspolicies', 'name': \"[concat(parameters('environmentname'), '/', 'readeraccesspolicy', copyindex())]\", 'copy': {'name': 'accesspolicyreadercopy', 'count': \"[if(empty(parameters('accesspolicyreaderobjectids')), 1, length(parameters('accesspolicyreaderobjectids')))]\"}, 'apiversion': '2017-11-15', 'dependson': [\"[resourceid('microsoft.timeseriesinsights/environments/', parameters('environmentname'))]\"], 'properties': {'principalobjectid': \"[parameters('accesspolicyreaderobjectids')[copyindex()]]\", 'roles': ['reader']}}{'condition': \"[not(empty(parameters('accesspolicycontributorobjectids')))]\", 'type': 'microsoft.timeseriesinsights/environments/accesspolicies', 'name': \"[concat(parameters('environmentname'), '/', 'contributoraccesspolicy', copyindex())]\", 'copy': {'name': 'accesspolicycontributorcopy', 'count': \"[if(empty(parameters('accesspolicycontributorobjectids')), 1, length(parameters('accesspolicycontributorobjectids')))]\"}, 'apiversion': '2017-11-15', 'dependson': [\"[resourceid('microsoft.timeseriesinsights/environments/', parameters('environmentname'))]\"], 'properties': {'principalobjectid': \"[parameters('accesspolicycontributorobjectids')[copyindex()]]\", 'roles': ['contributor']}} END"}
{"prompt": "\n\n###\n\nThis template creates a Pay As You Go (PAYG) Time Series Insights environment, a child event source that reads events from an IoT Hub, and optionally a source IoT Hub.\n\n===\n\n", "completion": " {'type': 'microsoft.timeseriesinsights/environments', 'apiversion': '2018-08-15-preview', 'name': \"[parameters('environmentname')]\", 'location': \"[parameters('location')]\", 'kind': \"[parameters('environmentkind')]\", 'tags': \"[variables('environmenttagsvalue')]\", 'properties': {'storageconfiguration': {'accountname': \"[variables('storageaccountname')]\", 'managementkey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2019-06-01').keys[0].value]\"}, 'timeseriesidproperties': \"[parameters('environmenttimeseriesidproperties')]\", 'warmstoreconfiguration': {'dataretention': \"[parameters('warmstoredataretention')]\"}}, 'sku': {'name': \"[parameters('environmentskuname')]\", 'capacity': \"[parameters('environmentskucapacity')]\"}, 'resources': [{'type': 'eventsources', 'apiversion': '2018-08-15-preview', 'name': \"[parameters('eventsourcename')]\", 'location': \"[parameters('location')]\", 'kind': 'microsoft.iothub', 'dependson': [\"[resourceid('microsoft.timeseriesinsights/environments', parameters('environmentname'))]\", \"[resourceid('microsoft.devices/iothubs', parameters('iothubname'))]\", \"[resourceid('microsoft.devices/iothubs/eventhubendpoints/consumergroups', parameters('iothubname'), 'events', parameters('consumergroupname'))]\"], 'tags': \"[variables('eventsourcetagsvalue')]\", 'properties': {'eventsourceresourceid': \"[variables('eventsourceresourceid')]\", 'iothubname': \"[parameters('iothubname')]\", 'consumergroupname': \"[parameters('consumergroupname')]\", 'keyname': \"[parameters('eventsourcekeyname')]\", 'sharedaccesskey': \"[listkeys(resourceid('microsoft.devices/iothubs/iothubkeys', parameters('iothubname'), parameters('eventsourcekeyname')), '2020-03-01').primarykey]\", 'timestamppropertyname': \"[parameters('eventsourcetimestamppropertyname')]\"}}]}{'condition': \"[not(empty(parameters('accesspolicyreaderobjectids')))]\", 'type': 'microsoft.timeseriesinsights/environments/accesspolicies', 'apiversion': '2018-08-15-preview', 'name': \"[concat(parameters('environmentname'), '/', 'readeraccesspolicy', copyindex())]\", 'dependson': [\"[resourceid('microsoft.timeseriesinsights/environments', parameters('environmentname'))]\"], 'copy': {'name': 'accesspolicyreadercopy', 'count': \"[if(empty(parameters('accesspolicyreaderobjectids')), 1, length(parameters('accesspolicyreaderobjectids')))]\"}, 'properties': {'principalobjectid': \"[parameters('accesspolicyreaderobjectids')[copyindex()]]\", 'roles': ['reader']}}{'condition': \"[not(empty(parameters('accesspolicycontributorobjectids')))]\", 'type': 'microsoft.timeseriesinsights/environments/accesspolicies', 'apiversion': '2018-08-15-preview', 'name': \"[concat(parameters('environmentname'), '/', 'contributoraccesspolicy', copyindex())]\", 'dependson': [\"[resourceid('microsoft.timeseriesinsights/environments', parameters('environmentname'))]\"], 'copy': {'name': 'accesspolicycontributorcopy', 'count': \"[if(empty(parameters('accesspolicycontributorobjectids')), 1, length(parameters('accesspolicycontributorobjectids')))]\"}, 'properties': {'principalobjectid': \"[parameters('accesspolicycontributorobjectids')[copyindex()]]\", 'roles': ['contributor']}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Disk pool into an exsisting vnet.\n\n===\n\n", "completion": " {'type': 'microsoft.storagepool/diskpools', 'apiversion': '2021-08-01', 'name': \"[parameters('diskpoolname')]\", 'sku': {'name': \"[parameters('diskpoolsku')]\"}, 'location': \"[parameters('diskpoollocation')]\", 'properties': {'availabilityzones': [\"[parameters('diskpoolavailabilityzone')]\"], 'subnetid': \"[variables('subnetid')]\", 'disks': [{'id': \"[variables('diskid')]\"}]}}{'type': 'microsoft.storagepool/diskpools/iscsitargets', 'apiversion': '2021-08-01', 'name': \"[format('{0}/{1}', parameters('diskpoolname'), parameters('targetname'))]\", 'properties': {'targetiqn': 'iqn.2021-04.org.microsoft.com:target', 'aclmode': 'dynamic', 'luns': [{'manageddiskazureresourceid': \"[variables('diskid')]\", 'name': 'lun0'}]}, 'dependson': [\"[resourceid('microsoft.storagepool/diskpools', parameters('diskpoolname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate an Azure Security Center Automation which will be triggered by any Security Center Alert(including all severities)\n\n===\n\n", "completion": " {'apiversion': '2019-01-01-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('automationname')]\", 'type': 'microsoft.security/automations', 'properties': {'description': \"[format(variables('automationdescription'),'{0}', parameters('subscriptionid'))]\", 'isenabled': true, 'actions': [{'actiontype': 'logicapp', 'logicappresourceid': \"[resourceid('microsoft.logic/workflows', parameters('logicappname'))]\", 'uri': \"[listcallbackurl(resourceid(parameters('subscriptionid'), parameters('logicappresourcegroupname'), 'microsoft.logic/workflows/triggers', parameters('logicappname'), 'manual'), '2019-05-01').value]\"}], 'scopes': [{'description': \"[format(variables('scopedescription'),'{0}', parameters('subscriptionid'))]\", 'scopepath': '[subscription().id]'}], 'sources': [{'eventsource': 'alerts', 'eventversiontype': 'api', 'copy': [{'name': 'rulesets', 'count': \"[length(parameters('alertsettings').alertseveritymapping)]\", 'input': {'rules': [{'propertyjpath': \"[parameters('alertsettings').alertseveritymapping[copyindex('rulesets')].jpath]\", 'propertytype': 'string', 'expectedvalue': \"[parameters('alertsettings').alertseveritymapping[copyindex('rulesets')].expectedvalue]\", 'operator': \"[parameters('alertsettings').alertseveritymapping[copyindex('rulesets')].operator]\"}, {'propertyjpath': 'severity', 'propertytype': 'string', 'expectedvalue': \"[parameters('alertsettings').alertseveritymapping[copyindex('rulesets')].severity]\", 'operator': 'equals'}]}}]}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Security Center Automation which will be triggered by a specific Security Center Recommendation and unhealthy state\n\n===\n\n", "completion": " {'apiversion': '2019-01-01-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('automationname')]\", 'type': 'microsoft.security/automations', 'properties': {'description': \"[format(variables('automationdescription'),'{0}', parameters('subscriptionid'))]\", 'isenabled': true, 'actions': [{'actiontype': 'logicapp', 'logicappresourceid': \"[resourceid('microsoft.logic/workflows', parameters('logicappname'))]\", 'uri': \"[listcallbackurl(resourceid(parameters('subscriptionid'), parameters('logicappresourcegroupname'), 'microsoft.logic/workflows/triggers', parameters('logicappname'), 'manual'), '2019-05-01').value]\"}], 'scopes': [{'description': \"[format(variables('scopedescription'),'{0}', parameters('subscriptionid'))]\", 'scopepath': '[subscription().id]'}], 'sources': [{'eventsource': 'assessments', 'eventversiontype': 'api', 'copy': [{'name': 'rulesets', 'count': \"[length(parameters('assessmentsettings').assessmentseveritymapping)]\", 'input': {'rules': [{'propertyjpath': \"[parameters('assessmentsettings').assessmentseveritymapping[copyindex('rulesets')].jpath]\", 'propertytype': 'string', 'expectedvalue': \"[parameters('assessmentsettings').assessmentseveritymapping[copyindex('rulesets')].assessmentname]\", 'operator': \"[parameters('assessmentsettings').assessmentseveritymapping[copyindex('rulesets')].operator]\"}, {'propertyjpath': 'properties.status.code', 'propertytype': 'string', 'expectedvalue': \"[parameters('assessmentsettings').assessmentseveritymapping[copyindex('rulesets')].state]\", 'operator': 'contains'}]}}]}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Security Center Automation which will be triggered by any Security Center Recommendation and state\n\n===\n\n", "completion": " {'apiversion': '2019-01-01-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('automationname')]\", 'type': 'microsoft.security/automations', 'properties': {'description': \"[format(variables('automationdescription'),'{0}', parameters('subscriptionid'))]\", 'isenabled': true, 'actions': [{'actiontype': 'logicapp', 'logicappresourceid': \"[resourceid('microsoft.logic/workflows', parameters('logicappname'))]\", 'uri': \"[listcallbackurl(resourceid(parameters('subscriptionid'), parameters('logicappresourcegroupname'), 'microsoft.logic/workflows/triggers', parameters('logicappname'), 'manual'), '2019-05-01').value]\"}], 'scopes': [{'description': \"[format(variables('scopedescription'),'{0}', parameters('subscriptionid'))]\", 'scopepath': '[subscription().id]'}], 'sources': [{'eventsource': 'assessments', 'eventversiontype': 'api', 'copy': [{'name': 'rulesets', 'count': \"[length(parameters('assessmentsettings').assessmentseveritymapping)]\", 'input': {'rules': [{'propertyjpath': \"[parameters('assessmentsettings').assessmentseveritymapping[copyindex('rulesets')].jpath]\", 'propertytype': 'string', 'expectedvalue': \"[parameters('assessmentsettings').assessmentseveritymapping[copyindex('rulesets')].assessmentname]\", 'operator': \"[parameters('assessmentsettings').assessmentseveritymapping[copyindex('rulesets')].operator]\"}, {'propertyjpath': 'properties.status.code', 'propertytype': 'string', 'expectedvalue': \"[parameters('assessmentsettings').assessmentseveritymapping[copyindex('rulesets')].state]\", 'operator': 'contains'}]}}]}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Security Center Automation which will be triggered by specific Security Center Alert (including all severities)\n\n===\n\n", "completion": " {'type': 'microsoft.security/automations', 'apiversion': '2019-01-01-preview', 'name': \"[parameters('automationname')]\", 'location': \"[parameters('location')]\", 'properties': {'description': \"[format(variables('automationdescription'),'{0}', parameters('subscriptionid'))]\", 'isenabled': true, 'actions': [{'actiontype': 'logicapp', 'logicappresourceid': \"[resourceid('microsoft.logic/workflows', parameters('logicappname'))]\", 'uri': \"[listcallbackurl(resourceid(parameters('subscriptionid'), parameters('logicappresourcegroupname'), 'microsoft.logic/workflows/triggers', parameters('logicappname'), 'manual'), '2019-05-01').value]\"}], 'scopes': [{'description': \"[format(variables('scopedescription'),'{0}', parameters('subscriptionid'))]\", 'scopepath': '[subscription().id]'}], 'sources': [{'eventsource': 'alerts', 'eventversiontype': 'api', 'copy': [{'name': 'rulesets', 'count': \"[length(parameters('alertsettings').alertseveritymapping)]\", 'input': {'rules': [{'propertyjpath': \"[parameters('alertsettings').alertseveritymapping[copyindex('rulesets')].jpath]\", 'propertytype': 'string', 'expectedvalue': \"[parameters('alertsettings').alertseveritymapping[copyindex('rulesets')].expectedvalue]\", 'operator': \"[parameters('alertsettings').alertseveritymapping[copyindex('rulesets')].operator]\"}, {'propertyjpath': 'severity', 'propertytype': 'string', 'expectedvalue': \"[parameters('alertsettings').alertseveritymapping[copyindex('rulesets')].severity]\", 'operator': 'equals'}]}}]}]}} END"}
{"prompt": "\n\n###\n\nThis template provides a way to deploy an Azure database for PostgreSQL with VNet integration.\n\n===\n\n", "completion": " {'type': 'microsoft.dbforpostgresql/servers/virtualnetworkrules', 'apiversion': '2017-12-01', 'name': \"[format('{0}/{1}', parameters('servername'), parameters('virtualnetworkrulename'))]\", 'properties': {'virtualnetworksubnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'ignoremissingvnetserviceendpoint': true}, 'dependson': [\"[resourceid('microsoft.dbforpostgresql/servers', parameters('servername'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\"]}{'type': 'microsoft.dbforpostgresql/servers', 'apiversion': '2017-12-01', 'name': \"[parameters('servername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'tier': \"[parameters('skutier')]\", 'capacity': \"[parameters('skucapacity')]\", 'size': \"[format('{0}', parameters('skusizemb'))]\", 'family': \"[parameters('skufamily')]\"}, 'properties': {'createmode': 'default', 'version': \"[parameters('postgresqlversion')]\", 'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'storageprofile': {'storagemb': \"[parameters('skusizemb')]\", 'backupretentiondays': \"[parameters('backupretentiondays')]\", 'georedundantbackup': \"[parameters('georedundantbackup')]\"}}}{'copy': {'name': 'firewallrules', 'count': \"[length(variables('firewallrules'))]\", 'mode': 'serial', 'batchsize': 1}, 'type': 'microsoft.dbforpostgresql/servers/firewallrules', 'apiversion': '2017-12-01', 'name': \"[format('{0}/{1}', parameters('servername'), variables('firewallrules')[copyindex()].name)]\", 'properties': {'startipaddress': \"[variables('firewallrules')[copyindex()].startipaddress]\", 'endipaddress': \"[variables('firewallrules')[copyindex()].endipaddress]\"}, 'dependson': [\"[resourceid('microsoft.dbforpostgresql/servers', parameters('servername'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Azure Key Vault Managed HSM.\n\n===\n\n", "completion": " {'type': 'microsoft.keyvault/managedhsms', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('managedhsmname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_b1', 'family': 'b'}, 'properties': {'enablesoftdelete': \"[greater(parameters('softretentionindays'), 0)]\", 'softdeleteretentionindays': \"[if(equals(parameters('softretentionindays'), 0), null(), parameters('softretentionindays'))]\", 'enablepurgeprotection': false, 'tenantid': \"[parameters('tenantid')]\", 'initialadminobjectids': \"[parameters('initialadminobjectids')]\", 'publicnetworkaccess': 'enabled', 'networkacls': {'bypass': 'none', 'defaultaction': 'allow'}}} END"}
{"prompt": "\n\n###\n\nCreates a Key Vault with a list of secrets\n\n===\n\n", "completion": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'tenantid': \"[parameters('tenantid')]\", 'accesspolicies': [{'objectid': \"[parameters('objectid')]\", 'tenantid': \"[parameters('tenantid')]\", 'permissions': {'keys': \"[parameters('keyspermissions')]\", 'secrets': \"[parameters('secretspermissions')]\"}}], 'sku': {'name': \"[parameters('skuname')]\", 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}}{'copy': {'name': 'secrets', 'count': \"[length(parameters('secretsobject').secrets)]\"}, 'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2021-04-01-preview', 'name': \"[format('{0}/{1}', parameters('keyvaultname'), parameters('secretsobject').secrets[copyindex()].secretname)]\", 'properties': {'value': \"[parameters('secretsobject').secrets[copyindex()].secretvalue]\"}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Key Vault and assigns permissions to the supplied objectId (principal).\n\n===\n\n", "completion": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'tenantid': \"[parameters('tenantid')]\", 'accesspolicies': [{'objectid': \"[parameters('objectid')]\", 'tenantid': \"[parameters('tenantid')]\", 'permissions': {'keys': \"[parameters('keyspermissions')]\", 'secrets': \"[parameters('secretspermissions')]\"}}], 'sku': {'name': \"[parameters('skuname')]\", 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}}{'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2021-04-01-preview', 'name': \"[format('{0}/{1}', parameters('keyvaultname'), parameters('secretname'))]\", 'properties': {'value': \"[parameters('secretvalue')]\"}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Key Vault and assigns permissions to the supplied objectId (principal) through Azure RBAC.\n\n===\n\n", "completion": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'properties': {'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'enablerbacauthorization': true, 'tenantid': \"[parameters('tenantid')]\", 'sku': {'name': \"[parameters('skuname')]\", 'family': 'a'}, 'networkacls': {'defaultaction': 'allow', 'bypass': 'azureservices'}}}{'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2021-04-01-preview', 'name': \"[format('{0}/{1}', parameters('keyvaultname'), parameters('secretname'))]\", 'properties': {'value': \"[parameters('secretvalue')]\"}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template shows how to add a new access policy to an existing KeyVault without removing all existing policies.\n\n===\n\n", "completion": " {'type': 'microsoft.keyvault/vaults/accesspolicies', 'name': \"[concat(parameters('keyvaultname'), '/add')]\", 'apiversion': '2019-09-01', 'properties': {'accesspolicies': [{'tenantid': \"[parameters('tenantid')]\", 'objectid': \"[parameters('objectid')]\", 'permissions': {'secrets': \"[parameters('secretspermissions')]\"}}]}} END"}
{"prompt": "\n\n###\n\nThe template uses a secret from Key Vault with a reference calculated in the template.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template creates a vnet and a subnet hosting a Linux virtual machine that accesses Key Vault with a private endpoint.\n\n===\n\n", "completion": " {'apiversion': '2019-09-01', 'type': 'microsoft.keyvault/vaults', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmid')]\"], 'properties': {'tenantid': \"[parameters('tenantid')]\", 'sku': {'name': \"[parameters('skuname')]\", 'family': 'a'}, 'enabledfordeployment': \"[parameters('enabledfordeployment')]\", 'enabledfortemplatedeployment': \"[parameters('enabledfortemplatedeployment')]\", 'enabledfordiskencryption': \"[parameters('enabledfordiskencryption')]\", 'enablesoftdelete': \"[parameters('enablesoftdelete')]\", 'softdeleteretentionindays': \"[parameters('softdeleteretentionindays')]\", 'enablerbacauthorization': \"[parameters('enablerbacauthorization')]\", 'accesspolicies': [{'tenantid': \"[parameters('tenantid')]\", 'objectid': \"[reference(variables('vmid'), '2019-12-01', 'full').identity.principalid]\", 'permissions': {'keys': \"[parameters('keyspermissions')]\", 'secrets': \"[parameters('secretspermissions')]\", 'certificates': \"[parameters('certificatespermissions')]\"}}]}}{'apiversion': '2019-09-01', 'type': 'microsoft.keyvault/vaults/secrets', 'name': \"[concat(parameters('keyvaultname'), '/', parameters('secretsarray')[copyindex()].secretname)]\", 'dependson': [\"[variables('keyvaultid')]\"], 'copy': {'name': 'secretscopy', 'count': \"[length(parameters('secretsarray'))]\"}, 'properties': {'value': \"[parameters('secretsarray')[copyindex()].secretvalue]\"}} END"}
{"prompt": "\n\n###\n\nCreates and optionally secures a Key Vault with logging linked to a storage account.\n\n===\n\n", "completion": " {'type': 'microsoft.keyvault/vaults', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('keyvaultname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'key vault with logging'}, 'properties': {'sku': {'name': \"[parameters('vaultsku')]\", 'family': 'a'}, 'tenantid': '[subscription().tenantid]', 'accesspolicies': [{'objectid': \"[parameters('objectid')]\", 'tenantid': '[subscription().tenantid]', 'permissions': {'keys': \"[parameters('keyspermissions')]\", 'secrets': \"[parameters('secretspermissions')]\"}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Analysis Services server.\n\n===\n\n", "completion": " {'type': 'microsoft.analysisservices/servers', 'apiversion': '2017-08-01', 'name': \"[parameters('servername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'capacity': \"[parameters('capacity')]\"}, 'properties': {'ipv4firewallsettings': \"[parameters('firewallsettings')]\", 'backupblobcontaineruri': \"[parameters('backupblobcontaineruri')]\"}} END"}
{"prompt": "\n\n###\n\nCreate an Azure CosmosDB Account with Advanced Threat Protection (preview).\n\n===\n\n", "completion": " {'name': \"[parameters('name')]\", 'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2020-09-01', 'location': \"[parameters('location')]\", 'properties': {'locations': [{'locationname': \"[parameters('location')]\"}], 'databaseaccountoffertype': \"[parameters('tier')]\"}, 'resources': [{'condition': \"[parameters('advancedthreatprotectionenabled')]\", 'type': 'providers/advancedthreatprotectionsettings', 'name': 'microsoft.security/current', 'apiversion': '2019-01-01', 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/', parameters('name'))]\"], 'properties': {'isenabled': true}}]} END"}
{"prompt": "\n\n###\n\nCreate an Azure Cosmos DB Account with a virtual network and a private endpoint\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'consistencypolicy': {'defaultconsistencylevel': 'session'}, 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': false, 'enablemultiplewritelocations': false, 'publicnetworkaccess': \"[parameters('publicnetworkaccess')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos account, injects the Cosmos DB endpoint and keys into Azure Web App settings, then deploys an ASP MVC web app from GitHub.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('cosmosaccountname')]\", 'kind': 'globaldocumentdb', 'location': \"[parameters('location')]\", 'properties': {'consistencypolicy': {'defaultconsistencylevel': 'session'}, 'locations': [{'locationname': \"[parameters('location')]\", 'failoverpriority': 0, 'iszoneredundant': false}], 'databaseaccountoffertype': 'standard'}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for Table API in two regions and a single table with autoscale throughput.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enabletable'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/tables', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var_var'), parameters('tablename'))]\", 'properties': {'resource': {'id': \"[parameters('tablename')]\"}, 'options': {'autoscalesettings': {'maxthroughput': \"[parameters('autoscalemaxthroughput')]\"}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var_var'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate an Azure CosmosDB Account\n\n===\n\n", "completion": " {'name': \"[parameters('name')]\", 'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2020-04-01', 'location': \"[parameters('location')]\", 'properties': {'locations': [{'locationname': \"[parameters('location')]\"}], 'databaseaccountoffertype': \"[parameters('tier')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for MongoDB API (3.2, 3.6 or 4.0) in two regions using shared autoscale database throughput with two collections.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'mongodb', 'properties': {'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'apiproperties': {'serverversion': \"[parameters('serverversion')]\"}}}{'type': 'microsoft.documentdb/databaseaccounts/mongodbdatabases', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('databasename'))]\", 'properties': {'resource': {'id': \"[parameters('databasename')]\"}, 'options': {'autoscalesettings': {'maxthroughput': \"[parameters('autoscalemaxthroughput')]\"}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/mongodbdatabases/collections', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}/{2}', variables('accountname_var'), parameters('databasename'), parameters('collection1name'))]\", 'properties': {'resource': {'id': \"[parameters('collection1name')]\", 'shardkey': {'user_id': 'hash'}, 'indexes': [{'key': {'keys': ['_id']}}, {'key': {'keys': ['$**']}}, {'key': {'keys': ['user_id', 'user_address']}, 'options': {'unique': true}}, {'key': {'keys': ['_ts'], 'options': {'expireafterseconds': 2629746}}}], 'options': {'if-match': '<etag>'}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/mongodbdatabases', variables('accountname_var'), parameters('databasename'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/mongodbdatabases/collections', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}/{2}', variables('accountname_var'), parameters('databasename'), parameters('collection2name'))]\", 'properties': {'resource': {'id': \"[parameters('collection2name')]\", 'shardkey': {'company_id': 'hash'}, 'indexes': [{'key': {'keys': ['_id']}}, {'key': {'keys': ['$**']}}, {'key': {'keys': ['company_id', 'company_address']}, 'options': {'unique': true}}, {'key': {'keys': ['_ts'], 'options': {'expireafterseconds': 2629746}}}], 'options': {'if-match': '<etag>'}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/mongodbdatabases', variables('accountname_var'), parameters('databasename'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a free-tier Azure Cosmos account for Core (SQL) API with a database with shared throughput of 400 RU/s.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'properties': {'enablefreetier': true, 'databaseaccountoffertype': 'standard', 'consistencypolicy': {'defaultconsistencylevel': 'session'}, 'locations': [{'locationname': \"[parameters('location')]\"}]}}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('databasename'))]\", 'properties': {'resource': {'id': \"[parameters('databasename')]\"}, 'options': {'throughput': 400}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate Azure Cosmos container with multiple containers\n\n===\n\n", "completion": " {'name': \"[parameters('accountname')]\", 'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2019-12-12', 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'consistencypolicy': {'defaultconsistencylevel': 'eventual', 'maxstalenessprefix': 1, 'maxintervalinseconds': 5}, 'locations': [{'locationname': \"[parameters('location')]\", 'failoverpriority': 0}], 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': false}}{'type': 'microsoft.documentdb/databaseaccounts/apis/databases', 'name': \"[concat( parameters('accountname'), '/sql/', parameters('databasename'))]\", 'apiversion': '2016-03-31', 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/', parameters('accountname'))]\"], 'properties': {'resource': {'id': \"[parameters('databasename')]\"}, 'options': {'throughput': 400}}}{'type': 'microsoft.documentdb/databaseaccounts/apis/databases/containers', 'name': \"[concat(parameters('accountname'), '/sql/', parameters('databasename'), '/', parameters('containers')[copyindex()].name)]\", 'copy': {'name': 'containercopy', 'count': \"[length(parameters('containers'))]\"}, 'apiversion': '2016-03-31', 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/apis/databases', parameters('accountname'), 'sql', parameters('databasename'))]\"], 'properties': {'resource': {'id': \"[parameters('containers')[copyindex()].name]\", 'partitionkey': {'paths': [\"[parameters('containers')[copyindex()].partitionkey]\"], 'kind': 'hash'}, 'indexingpolicy': {'indexingmode': 'consistent'}}}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos account for Core (SQL) API with a database and container configured with analytical store.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'properties': {'consistencypolicy': {'defaultconsistencylevel': 'session'}, 'databaseaccountoffertype': 'standard', 'locations': \"[variables('locations')]\", 'enableanalyticalstorage': true}}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', parameters('accountname'), parameters('databasename'))]\", 'properties': {'resource': {'id': \"[parameters('databasename')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', parameters('accountname'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases/containers', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}/{2}', parameters('accountname'), parameters('databasename'), parameters('containername'))]\", 'properties': {'resource': {'id': \"[parameters('containername')]\", 'partitionkey': {'paths': [\"[parameters('partitionkeypath')]\"], 'kind': 'hash'}, 'analyticalstoragettl': \"[parameters('analyticalstorettl')]\"}, 'options': \"[variables('throughput_policy')[parameters('throughputpolicy')]]\"}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', parameters('accountname'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases', parameters('accountname'), parameters('databasename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for any API Type with a primary and secondary region with choice of consistency level and options to enable multi-master and Failover Type.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'kind': \"[variables('apitype')[parameters('api')].kind]\", 'properties': {'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\", 'capabilities': \"[variables('apitype')[parameters('api')].capabilities]\", 'enablemultiplewritelocations': \"[parameters('multiplewritelocations')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for Gremlin API in two regions with one database and one graph using dedicated throughput.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enablegremlin'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/gremlindatabases', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('databasename'))]\", 'properties': {'resource': {'id': \"[parameters('databasename')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/gremlindatabases/graphs', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', format('{0}/{1}', variables('accountname_var'), parameters('databasename')), parameters('graphname'))]\", 'properties': {'resource': {'id': \"[parameters('graphname')]\", 'indexingpolicy': {'indexingmode': 'consistent', 'includedpaths': [{'path': '/*'}], 'excludedpaths': [{'path': '/mypathtonotindex/*'}]}, 'partitionkey': {'paths': ['/mypartitionkey'], 'kind': 'hash'}, 'options': {'throughput': \"[parameters('throughput')]\"}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/gremlindatabases', split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[0], split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[1])]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for Table API in two regions and a single table with provisioned throughput.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enabletable'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/tables', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var_var'), parameters('tablename'))]\", 'properties': {'resource': {'id': \"[parameters('tablename')]\"}, 'options': {'throughput': \"[parameters('throughput')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var_var'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for Gremlin API in two regions with one database and one graph using autoscale throughput.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enablegremlin'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/gremlindatabases', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('databasename'))]\", 'properties': {'resource': {'id': \"[parameters('databasename')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/gremlindatabases/graphs', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', format('{0}/{1}', variables('accountname_var'), parameters('databasename')), parameters('graphname'))]\", 'properties': {'resource': {'id': \"[parameters('graphname')]\", 'indexingpolicy': {'indexingmode': 'consistent', 'includedpaths': [{'path': '/*'}], 'excludedpaths': [{'path': '/mypathtonotindex/*'}]}, 'partitionkey': {'paths': ['/mypartitionkey'], 'kind': 'hash'}}, 'options': {'autoscalesettings': {'maxthroughput': \"[parameters('autoscalemaxthroughput')]\"}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/gremlindatabases', split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[0], split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[1])]\"]} END"}
{"prompt": "\n\n###\n\nCreate an Azure Cosmos DB SQL Account with a native Role Definition and Role Assignment\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[parameters('accountname')]\", 'kind': 'globaldocumentdb', 'location': \"[parameters('location')]\", 'properties': {'consistencypolicy': {'defaultconsistencylevel': 'session'}, 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': false, 'enablemultiplewritelocations': false}}{'type': 'microsoft.documentdb/databaseaccounts/sqlroledefinitions', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', parameters('accountname'), variables('roledefinitionid'))]\", 'properties': {'rolename': \"[parameters('roledefinitionname')]\", 'type': 'customrole', 'assignablescopes': [\"[resourceid('microsoft.documentdb/databaseaccounts', parameters('accountname'))]\"], 'permissions': [{'dataactions': \"[parameters('dataactions')]\"}]}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', parameters('accountname'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/sqlroleassignments', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', parameters('accountname'), variables('roleassignmentid'))]\", 'properties': {'roledefinitionid': \"[resourceid('microsoft.documentdb/databaseaccounts/sqlroledefinitions', split(format('{0}/{1}', parameters('accountname'), variables('roledefinitionid')), '/')[0], split(format('{0}/{1}', parameters('accountname'), variables('roledefinitionid')), '/')[1])]\", 'principalid': \"[parameters('principalid')]\", 'scope': \"[resourceid('microsoft.documentdb/databaseaccounts', parameters('accountname'))]\"}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', parameters('accountname'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts/sqlroledefinitions', split(format('{0}/{1}', parameters('accountname'), variables('roledefinitionid')), '/')[0], split(format('{0}/{1}', parameters('accountname'), variables('roledefinitionid')), '/')[1])]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos account for Core (SQL) API with a database and container with autoscale throughput with multiple other options.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-01-15', 'name': \"[variables('accountname_var')]\", 'kind': 'globaldocumentdb', 'location': \"[parameters('location')]\", 'properties': {'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases', 'apiversion': '2021-01-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('databasename'))]\", 'properties': {'resource': {'id': \"[parameters('databasename')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases/containers', 'apiversion': '2021-01-15', 'name': \"[format('{0}/{1}/{2}', variables('accountname_var'), parameters('databasename'), parameters('containername'))]\", 'properties': {'resource': {'id': \"[parameters('containername')]\", 'partitionkey': {'paths': ['/mypartitionkey'], 'kind': 'hash'}, 'indexingpolicy': {'indexingmode': 'consistent', 'includedpaths': [{'path': '/*'}], 'excludedpaths': [{'path': '/mypathtonotindex/*'}], 'compositeindexes': [[{'path': '/name', 'order': 'ascending'}, {'path': '/age', 'order': 'descending'}]], 'spatialindexes': [{'path': '/path/to/geojson/property/?', 'types': ['point', 'polygon', 'multipolygon', 'linestring']}]}, 'defaultttl': 86400, 'uniquekeypolicy': {'uniquekeys': [{'paths': ['/phonenumber']}]}}, 'options': {'autoscalesettings': {'maxthroughput': \"[parameters('autoscalemaxthroughput')]\"}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases', variables('accountname_var'), parameters('databasename'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos account for Core (SQL) API with a database and container with throughput with multiple other options.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('databasename'))]\", 'properties': {'resource': {'id': \"[parameters('databasename')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases/containers', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', format('{0}/{1}', variables('accountname_var'), parameters('databasename')), parameters('containername'))]\", 'properties': {'resource': {'id': \"[parameters('containername')]\", 'partitionkey': {'paths': ['/mypartitionkey'], 'kind': 'hash'}, 'indexingpolicy': {'indexingmode': 'consistent', 'includedpaths': [{'path': '/*'}], 'excludedpaths': [{'path': '/mypathtonotindex/*'}], 'compositeindexes': [[{'path': '/name', 'order': 'ascending'}, {'path': '/age', 'order': 'descending'}]], 'spatialindexes': [{'path': '/location/*', 'types': ['point', 'polygon', 'multipolygon', 'linestring']}]}, 'defaultttl': 86400, 'uniquekeypolicy': {'uniquekeys': [{'paths': ['/phonenumber']}]}}, 'options': {'throughput': \"[parameters('throughput')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases', split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[0], split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[1])]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for MongoDB API (3.2, 3.6 and 4.0) in two regions using shared database throughput with two collections.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'mongodb', 'properties': {'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'apiproperties': {'serverversion': \"[parameters('serverversion')]\"}}}{'type': 'microsoft.documentdb/databaseaccounts/mongodbdatabases', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('databasename'))]\", 'properties': {'resource': {'id': \"[parameters('databasename')]\"}, 'options': {'throughput': \"[parameters('throughput')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/mongodbdatabases/collections', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', format('{0}/{1}', variables('accountname_var'), parameters('databasename')), parameters('collection1name'))]\", 'properties': {'resource': {'id': \"[parameters('collection1name')]\", 'shardkey': {'user_id': 'hash'}, 'indexes': [{'key': {'keys': ['_id']}}, {'key': {'keys': ['$**']}}, {'key': {'keys': ['user_id', 'user_address']}, 'options': {'unique': true}}, {'key': {'keys': ['_ts']}, 'options': {'expireafterseconds': 2629746}}], 'options': {'if-match': '<etag>'}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/mongodbdatabases', split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[0], split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[1])]\"]}{'type': 'microsoft.documentdb/databaseaccounts/mongodbdatabases/collections', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', format('{0}/{1}', variables('accountname_var'), parameters('databasename')), parameters('collection2name'))]\", 'properties': {'resource': {'id': \"[parameters('collection2name')]\", 'shardkey': {'company_id': 'hash'}, 'indexes': [{'key': {'keys': ['_id']}}, {'key': {'keys': ['$**']}}, {'key': {'keys': ['company_id', 'company_address']}, 'options': {'unique': true}}, {'key': {'keys': ['_ts']}, 'options': {'expireafterseconds': 2629746}}], 'options': {'if-match': '<etag>'}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/mongodbdatabases', split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[0], split(format('{0}/{1}', variables('accountname_var'), parameters('databasename')), '/')[1])]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos DB account for Cassandra API in two regions with a keyspace and table with autoscale throughput.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'capabilities': [{'name': 'enablecassandra'}], 'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/cassandrakeyspaces', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('keyspacename'))]\", 'properties': {'resource': {'id': \"[parameters('keyspacename')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/cassandrakeyspaces/tables', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', format('{0}/{1}', variables('accountname_var'), parameters('keyspacename')), parameters('tablename'))]\", 'properties': {'resource': {'id': \"[parameters('tablename')]\", 'schema': {'columns': [{'name': 'loadid', 'type': 'uuid'}, {'name': 'machine', 'type': 'uuid'}, {'name': 'cpu', 'type': 'int'}, {'name': 'mtime', 'type': 'int'}, {'name': 'load', 'type': 'float'}], 'partitionkeys': [{'name': 'machine'}, {'name': 'cpu'}, {'name': 'mtime'}], 'clusterkeys': [{'name': 'loadid', 'orderby': 'asc'}]}}, 'options': {'autoscalesettings': {'maxthroughput': \"[parameters('autoscalemaxthroughput')]\"}}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/cassandrakeyspaces', split(format('{0}/{1}', variables('accountname_var'), parameters('keyspacename')), '/')[0], split(format('{0}/{1}', variables('accountname_var'), parameters('keyspacename')), '/')[1])]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Cosmos account for Core (SQL) API and a container with a stored procedure, trigger and user defined function.\n\n===\n\n", "completion": " {'type': 'microsoft.documentdb/databaseaccounts', 'apiversion': '2021-04-15', 'name': \"[variables('accountname_var')]\", 'location': \"[parameters('location')]\", 'kind': 'globaldocumentdb', 'properties': {'consistencypolicy': \"[variables('consistencypolicy')[parameters('defaultconsistencylevel')]]\", 'locations': \"[variables('locations')]\", 'databaseaccountoffertype': 'standard', 'enableautomaticfailover': \"[parameters('automaticfailover')]\"}}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}', variables('accountname_var'), parameters('databasename'))]\", 'properties': {'resource': {'id': \"[parameters('databasename')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases/containers', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}/{2}', variables('accountname_var'), parameters('databasename'), parameters('containername'))]\", 'properties': {'resource': {'id': \"[parameters('containername')]\", 'partitionkey': {'paths': ['/mypartitionkey'], 'kind': 'hash'}, 'indexingpolicy': {'indexingmode': 'consistent', 'includedpaths': [{'path': '/*'}], 'excludedpaths': [{'path': '/mypathtonotindex/*'}]}}, 'options': {'throughput': \"[parameters('throughput')]\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases', variables('accountname_var'), parameters('databasename'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases/containers/storedprocedures', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}/{2}/{3}', variables('accountname_var'), parameters('databasename'), parameters('containername'), 'mystoredprocedure')]\", 'properties': {'resource': {'id': 'mystoredprocedure', 'body': \"function () { var context = getcontext(); var response = context.getresponse(); response.setbody('hello, world'); }\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases', variables('accountname_var'), parameters('databasename'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases/containers', variables('accountname_var'), parameters('databasename'), parameters('containername'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases/containers/triggers', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}/{2}/{3}', variables('accountname_var'), parameters('databasename'), parameters('containername'), 'mypretrigger')]\", 'properties': {'resource': {'id': 'mypretrigger', 'triggertype': 'pre', 'triggeroperation': 'create', 'body': \"function validatetodoitemtimestamp(){var context=getcontext();var request=context.getrequest();var itemtocreate=request.getbody();if(!('timestamp'in itemtocreate)){var ts=new date();itemtocreate['timestamp']=ts.gettime();}request.setbody(itemtocreate);}\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases', variables('accountname_var'), parameters('databasename'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases/containers', variables('accountname_var'), parameters('databasename'), parameters('containername'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]}{'type': 'microsoft.documentdb/databaseaccounts/sqldatabases/containers/userdefinedfunctions', 'apiversion': '2021-04-15', 'name': \"[format('{0}/{1}/{2}/{3}', variables('accountname_var'), parameters('databasename'), parameters('containername'), 'myuserdefinedfunction')]\", 'properties': {'resource': {'id': 'myuserdefinedfunction', 'body': \"function tax(income){if(income==undefined)throw'no input';if(income<1000)return income*0.1;else if(income<10000)return income*0.2;else return income*0.4;}\"}}, 'dependson': [\"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases', variables('accountname_var'), parameters('databasename'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts/sqldatabases/containers', variables('accountname_var'), parameters('databasename'), parameters('containername'))]\", \"[resourceid('microsoft.documentdb/databaseaccounts', variables('accountname_var'))]\"]} END"}
{"prompt": "\n\n###\n\nDeploy a managed cluster with Azure Container Service (AKS)\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nDeploys a managed Kubernetes cluster via Azure Kubernetes Service (AKS) with Virtual Machine Scale Sets Agent Pool and System-assigned managed identity\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nDeploy a simple Azure Spring Cloud microservice application\n\n===\n\n", "completion": " {'type': 'microsoft.appplatform/spring', 'apiversion': '2020-07-01', 'name': \"[parameters('servicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 's0', 'tier': 'standard'}, 'properties': {'configserverproperties': {'configserver': {'gitproperty': {'uri': 'https://github.com/azure-samples/piggymetrics-config'}}}}, 'resources': [{'type': 'apps', 'apiversion': '2020-07-01', 'name': \"[parameters('app1')]\", 'properties': {'public': true}, 'dependson': [\"[parameters('servicename')]\"], 'resources': [{'type': 'deployments', 'apiversion': '2020-07-01', 'name': 'default', 'dependson': [\"[parameters('app1')]\"], 'properties': {'source': {'relativepath': '<default>', 'type': 'jar'}}}]}, {'type': 'apps', 'apiversion': '2020-07-01', 'name': \"[parameters('app2')]\", 'properties': {'public': true}, 'dependson': [\"[parameters('servicename')]\"], 'resources': [{'type': 'deployments', 'apiversion': '2020-07-01', 'name': 'default', 'dependson': [\"[parameters('app2')]\"], 'properties': {'source': {'relativepath': '<default>', 'type': 'jar'}}}]}, {'type': 'apps', 'apiversion': '2020-07-01', 'name': \"[parameters('app3')]\", 'properties': {'public': false}, 'dependson': [\"[parameters('servicename')]\"], 'resources': [{'type': 'deployments', 'apiversion': '2020-07-01', 'name': 'default', 'dependson': [\"[parameters('app3')]\"], 'properties': {'source': {'relativepath': '<default>', 'type': 'jar'}}}]}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Premium and an Azure Storage blob container, and uses a private endpoint for Front Door to send traffic to the storage account.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreates a CDN Endpoint with rules engine and remote address based match and adds corresponding response headers.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-09-01', 'name': \"[parameters('profilename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('cdnsku')]\"}}{'type': 'microsoft.cdn/profiles/endpoints', 'apiversion': '2020-09-01', 'name': \"[format('{0}/{1}', parameters('profilename'), parameters('endpointname'))]\", 'location': \"[parameters('location')]\", 'properties': {'originhostheader': \"[parameters('originurl')]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'ignorequerystring', 'contenttypestocompress': ['text/plain', 'text/html', 'text/css', 'application/x-javascript', 'text/javascript'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[parameters('originurl')]\"}}], 'deliverypolicy': {'description': 'add response headers', 'rules': [{'name': 'geomatchcondition', 'order': 1, 'conditions': [{'name': 'remoteaddress', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleremoteaddressconditionparameters', 'operator': 'geomatch', 'matchvalues': ['us']}}], 'actions': [{'name': 'modifyresponseheader', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleheaderactionparameters', 'headeraction': 'overwrite', 'headername': 'x-client-country', 'value': 'us'}}]}, {'name': 'ipv4match', 'order': 2, 'conditions': [{'name': 'remoteaddress', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleremoteaddressconditionparameters', 'operator': 'ipmatch', 'matchvalues': ['0.0.0.0/0']}}], 'actions': [{'name': 'modifyresponseheader', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleheaderactionparameters', 'headeraction': 'overwrite', 'headername': 'x-client-ip-version', 'value': 'ipv4'}}]}, {'name': 'ipv6match', 'order': 3, 'conditions': [{'name': 'remoteaddress', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleremoteaddressconditionparameters', 'operator': 'ipmatch', 'matchvalues': ['::0/0']}}], 'actions': [{'name': 'modifyresponseheader', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleheaderactionparameters', 'headeraction': 'overwrite', 'headername': 'x-client-ip-version', 'value': 'ipv6'}}]}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\"]} END"}
{"prompt": "\n\n###\n\nCreates a CDN WAF Policy managed rule set DefaultRuleSet_1.0 and a linked CDN Endpoint.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/cdnwebapplicationfirewallpolicies', 'apiversion': '2020-09-01', 'name': \"[parameters('policyname')]\", 'location': 'global', 'sku': {'name': \"[parameters('cdnsku')]\"}, 'properties': {'policysettings': {'enabledstate': 'enabled', 'mode': \"[parameters('policymode')]\"}, 'managedrules': {'managedrulesets': [{'rulesettype': 'defaultruleset', 'rulesetversion': '1.0'}]}}}{'name': \"[parameters('profilename')]\", 'type': 'microsoft.cdn/profiles', 'location': \"[parameters('location')]\", 'apiversion': '2019-06-15-preview', 'sku': {'name': \"[parameters('cdnsku')]\"}, 'resources': [{'apiversion': '2019-06-15-preview', 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\", \"[resourceid('microsoft.cdn/cdnwebapplicationfirewallpolicies', parameters('policyname'))]\"], 'location': \"[parameters('location')]\", 'name': \"[parameters('endpointname')]\", 'type': 'endpoints', 'properties': {'originhostheader': \"[parameters('originurl')]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'ignorequerystring', 'contenttypestocompress': ['text/plain', 'text/html', 'text/css', 'application/x-javascript', 'text/javascript'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[parameters('originurl')]\"}}], 'webapplicationfirewallpolicylink': {'id': \"[resourceid('microsoft.cdn/cdnwebapplicationfirewallpolicies', parameters('policyname'))]\"}}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium including a rule set.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('skuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/rulesets', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('rulesetname'))]\", 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/rulesets/rules', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('rulesetname'), variables('redirectsecuretraffictomicrosoftrulename'))]\", 'properties': {'order': 1, 'conditions': [{'name': 'urlpath', 'parameters': {'operator': 'beginswith', 'negatecondition': false, 'matchvalues': ['secure/'], 'transforms': ['lowercase'], 'typename': 'deliveryruleurlpathmatchconditionparameters'}}], 'actions': [{'name': 'urlredirect', 'parameters': {'redirecttype': 'temporaryredirect', 'destinationprotocol': 'https', 'customhostname': 'microsoft.com', 'custompath': '/', 'typename': 'deliveryruleurlredirectactionparameters'}}]}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\", \"[resourceid('microsoft.cdn/profiles/rulesets', variables('profilename'), variables('rulesetname'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'rulesets': [{'id': \"[resourceid('microsoft.cdn/profiles/rulesets', variables('profilename'), variables('rulesetname'))]\"}], 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\", \"[resourceid('microsoft.cdn/profiles/rulesets', variables('profilename'), variables('rulesetname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium including a web application firewall with a custom rule.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/securitypolicies', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('securitypolicyname'))]\", 'properties': {'parameters': {'type': 'webapplicationfirewall', 'wafpolicy': {'id': \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"}, 'associations': [{'domains': [{'id': \"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\"}], 'patternstomatch': ['/*']}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\", \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Premium and an API Management instance, and uses an NSG and global API Management policy to validate that traffic has come through the Front Door origin.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreate a CDN Profile, a CDN Endpoint with a user defined origin and recommended settings. This template also configures rules engine device based path rewrite and request scheme based redirect.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-09-01', 'name': \"[parameters('profilename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('cdnsku')]\"}}{'type': 'microsoft.cdn/profiles/endpoints', 'apiversion': '2020-09-01', 'name': \"[format('{0}/{1}', parameters('profilename'), parameters('endpointname'))]\", 'location': \"[parameters('location')]\", 'properties': {'originhostheader': \"[parameters('originurl')]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'ignorequerystring', 'contenttypestocompress': ['text/plain', 'text/html', 'text/css', 'application/x-javascript', 'text/javascript'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[parameters('originurl')]\"}}], 'deliverypolicy': {'description': 'rewrite and redirect', 'rules': [{'name': 'pathrewritebasedondevicematchcondition', 'order': 1, 'conditions': [{'name': 'isdevice', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleisdeviceconditionparameters', 'operator': 'equal', 'matchvalues': ['mobile']}}], 'actions': [{'name': 'urlrewrite', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleurlrewriteactionparameters', 'sourcepattern': '/standard', 'destination': '/mobile'}}]}, {'name': 'httpversionbasedredirect', 'order': 2, 'conditions': [{'name': 'requestscheme', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryrulerequestschemeconditionparameters', 'operator': 'equal', 'matchvalues': ['http']}}], 'actions': [{'name': 'urlredirect', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleurlredirectactionparameters', 'redirecttype': 'found', 'destinationprotocol': 'https'}}]}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Premium and an Azure Functions app, and uses a private endpoint for Front Door to send traffic to the function app.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreate a CDN Profile, a CDN Endpoint with a user defined origin and recommended settings. This template also configures rules engine UrlSigning action.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-09-01', 'name': \"[parameters('profilename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('cdnsku')]\"}}{'type': 'microsoft.cdn/profiles/endpoints', 'apiversion': '2020-09-01', 'name': \"[format('{0}/{1}', parameters('profilename'), parameters('endpointname'))]\", 'location': \"[parameters('location')]\", 'properties': {'originhostheader': \"[parameters('originurl')]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'usequerystring', 'contenttypestocompress': ['text/plain', 'text/html', 'text/css', 'application/x-javascript', 'text/javascript'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[parameters('originurl')]\"}}], 'urlsigningkeys': [{'keyid': 'key1', 'keysourceparameters': {'@odata.type': '#microsoft.azure.cdn.models.keyvaultsigningkeyparameters', 'subscriptionid': \"[parameters('urlsigningkeyssubid')]\", 'resourcegroupname': \"[parameters('urlsigningkeysresourcegroup')]\", 'vaultname': \"[parameters('urlsigningkeysvaultname')]\", 'secretname': \"[parameters('urlsigningkeyssecret1name')]\", 'secretversion': \"[parameters('urlsigningkeyssecret1version')]\"}}, {'keyid': 'key2', 'keysourceparameters': {'@odata.type': '#microsoft.azure.cdn.models.keyvaultsigningkeyparameters', 'subscriptionid': \"[parameters('urlsigningkeyssubid')]\", 'resourcegroupname': \"[parameters('urlsigningkeysresourcegroup')]\", 'vaultname': \"[parameters('urlsigningkeysvaultname')]\", 'secretname': \"[parameters('urlsigningkeyssecret2name')]\", 'secretversion': \"[parameters('urlsigningkeyssecret2version')]\"}}], 'deliverypolicy': {'description': 'urlsigning', 'rules': [{'name': 'rule1', 'order': 1, 'conditions': [{'name': 'urlpath', 'parameters': {'operator': 'equal', 'matchvalues': ['/urlsigning/test'], '@odata.type': '#microsoft.azure.cdn.models.deliveryruleurlpathmatchconditionparameters'}}], 'actions': [{'name': 'urlsigning', 'parameters': {'keyid': 'key1', 'algorithm': 'sha256', '@odata.type': '#microsoft.azure.cdn.models.deliveryruleurlsigningactionparameters'}}, {'name': 'cachekeyquerystring', 'parameters': {'querystringbehavior': 'exclude', 'queryparameters': 'expires,keyid,signature', '@odata.type': '#microsoft.azure.cdn.models.deliveryrulecachekeyquerystringbehavioractionparameters'}}]}, {'name': 'rule2', 'order': 2, 'conditions': [{'name': 'urlpath', 'parameters': {'operator': 'equal', 'matchvalues': ['/urlsigning/test2'], '@odata.type': '#microsoft.azure.cdn.models.deliveryruleurlpathmatchconditionparameters'}}], 'actions': [{'name': 'urlsigning', 'parameters': {'keyid': 'key2', 'algorithm': 'sha256', 'parameternameoverride': [{'paramindicator': 'expires', 'paramname': 'oexpires'}, {'paramindicator': 'keyid', 'paramname': 'okeyid'}, {'paramindicator': 'signature', 'paramname': 'osignature'}], '@odata.type': '#microsoft.azure.cdn.models.deliveryruleurlsigningactionparameters'}}, {'name': 'cachekeyquerystring', 'parameters': {'querystringbehavior': 'exclude', 'queryparameters': 'oexpires,okeyid,osignature', '@odata.type': '#microsoft.azure.cdn.models.deliveryrulecachekeyquerystringbehavioractionparameters'}}]}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a CDN Profile, a CDN Endpoint with a user defined origin and recommended settings. This template also configures rules engine with a path based rule and overrides cache expiration.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-09-01', 'name': \"[parameters('profilename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('cdnsku')]\"}}{'type': 'microsoft.cdn/profiles/endpoints', 'apiversion': '2020-09-01', 'name': \"[format('{0}/{1}', parameters('profilename'), parameters('endpointname'))]\", 'location': \"[parameters('location')]\", 'properties': {'originhostheader': \"[parameters('originurl')]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'ignorequerystring', 'contenttypestocompress': ['text/plain', 'text/html', 'text/css', 'application/x-javascript', 'text/javascript'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[parameters('originurl')]\"}}], 'deliverypolicy': {'description': 'path based cache override', 'rules': [{'name': 'pathmatchcondition', 'order': 1, 'conditions': [{'name': 'urlpath', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryruleurlpathmatchconditionparameters', 'operator': 'beginswith', 'matchvalues': ['/images/']}}], 'actions': [{'name': 'cacheexpiration', 'parameters': {'@odata.type': '#microsoft.azure.cdn.models.deliveryrulecacheexpirationactionparameters', 'cachebehavior': 'override', 'cachetype': 'all', 'cacheduration': '00:00:30'}}]}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Premium including a web application firewall with the Microsoft-managed default and bot protection rule sets.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[variables('skuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/securitypolicies', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('securitypolicyname'))]\", 'properties': {'parameters': {'type': 'webapplicationfirewall', 'wafpolicy': {'id': \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"}, 'associations': [{'domains': [{'id': \"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\"}], 'patternstomatch': ['/*']}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\", \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium, an Azure Functions app, and configures the function app to validate that traffic has come through the Front Door origin.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-09-01', 'name': \"[variables('frontdoorprofilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", 'properties': {'hostname': \"[reference(resourceid('microsoft.resources/deployments', 'functionapp')).outputs.functionapphostname.value]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[reference(resourceid('microsoft.resources/deployments', 'functionapp')).outputs.functionapphostname.value]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\", \"[resourceid('microsoft.resources/deployments', 'functionapp')]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'), variables('frontdoorroutename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Premium and a virtual machine configured as a web server. Front Door uses a private endpoint with Private Link service to send traffic to the VM.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreates a CDN WAF Policy with example rate limit rules and a linked CDN Endpoint.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/cdnwebapplicationfirewallpolicies', 'apiversion': '2020-09-01', 'name': \"[parameters('policyname')]\", 'location': 'global', 'sku': {'name': \"[parameters('cdnsku')]\"}, 'properties': {'policysettings': {'enabledstate': \"[parameters('enabledstate')]\", 'mode': \"[parameters('policymode')]\", 'defaultredirecturl': \"[parameters('redirecturl')]\"}, 'ratelimitrules': {'rules': [{'name': 'baselimit', 'priority': 100, 'enabledstate': 'enabled', 'ratelimitthreshold': 1000, 'ratelimitdurationinminutes': 1, 'matchconditions': [{'matchvariable': 'requestmethod', 'operator': 'any', 'negatecondition': false}], 'action': 'block'}, {'name': 'writelimit', 'priority': 50, 'enabledstate': 'enabled', 'ratelimitthreshold': 100, 'ratelimitdurationinminutes': 1, 'matchconditions': [{'matchvariable': 'requestmethod', 'operator': 'equal', 'negatecondition': false, 'matchvalue': ['post', 'put', 'patch']}], 'action': 'redirect'}]}}}{'name': \"[parameters('profilename')]\", 'type': 'microsoft.cdn/profiles', 'location': \"[parameters('location')]\", 'apiversion': '2019-06-15-preview', 'sku': {'name': \"[parameters('cdnsku')]\"}, 'resources': [{'apiversion': '2019-06-15-preview', 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\", \"[resourceid('microsoft.cdn/cdnwebapplicationfirewallpolicies', parameters('policyname'))]\"], 'location': \"[parameters('location')]\", 'name': \"[parameters('endpointname')]\", 'type': 'endpoints', 'properties': {'originhostheader': \"[parameters('originurl')]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'ignorequerystring', 'contenttypestocompress': ['text/plain', 'text/html', 'text/css', 'application/x-javascript', 'text/javascript'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[parameters('originurl')]\"}}], 'webapplicationfirewallpolicylink': {'id': \"[resourceid('microsoft.cdn/cdnwebapplicationfirewallpolicies', parameters('policyname'))]\"}}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-09-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('skuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium and an Azure Storage static website, and configured Front Door to send traffic to the static website.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreate a CDN Profile and a CDN Endpoint with a Storage Account as origin\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-09-01', 'name': \"[variables('profilename')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[variables('profilename')]\"}, 'sku': {'name': 'standard_verizon'}}{'type': 'microsoft.cdn/profiles/endpoints', 'apiversion': '2020-09-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('endpointname'))]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[variables('endpointname')]\"}, 'properties': {'originhostheader': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob, 'https://', ''), '/', '')]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'ignorequerystring', 'contenttypestocompress': ['text/plain', 'text/html', 'text/css', 'application/x-javascript', 'text/javascript'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[replace(replace(reference(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))).primaryendpoints.blob, 'https://', ''), '/', '')]\"}}]}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium including a web application firewall with a rate limit rule.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/securitypolicies', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('securitypolicyname'))]\", 'properties': {'parameters': {'type': 'webapplicationfirewall', 'wafpolicy': {'id': \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"}, 'associations': [{'domains': [{'id': \"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\"}], 'patternstomatch': ['/*']}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\", \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a CDN Profile and a CDN Endpoint\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-09-01', 'name': \"[parameters('profilename')]\", 'location': \"[parameters('location')]\", 'properties': {}, 'sku': {'name': \"[parameters('sku')]\"}}{'type': 'microsoft.cdn/profiles/endpoints', 'apiversion': '2020-09-01', 'name': \"[format('{0}/{1}', parameters('profilename'), parameters('endpointname'))]\", 'location': \"[parameters('location')]\", 'properties': {'originhostheader': \"[parameters('originurl')]\", 'ishttpallowed': \"[parameters('ishttpallowed')]\", 'ishttpsallowed': \"[parameters('ishttpsallowed')]\", 'querystringcachingbehavior': \"[parameters('querystringcachingbehavior')]\", 'contenttypestocompress': \"[parameters('contenttypestocompress')]\", 'iscompressionenabled': \"[parameters('iscompressionenabled')]\", 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[parameters('originurl')]\"}}]}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium with a container group and Application Gateway.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('frontdoorprofilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", 'properties': {'hostname': \"[reference(resourceid('microsoft.resources/deployments', 'application-gateway')).outputs.publicipaddresshostname.value]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[reference(resourceid('microsoft.resources/deployments', 'application-gateway')).outputs.publicipaddresshostname.value]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.resources/deployments', 'application-gateway')]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'), variables('frontdoorroutename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httponly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium including a web application firewall with a geo-filtering rule.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('profilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), parameters('endpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('origingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), variables('origingroupname'), variables('originname'))]\", 'properties': {'hostname': \"[parameters('originhostname')]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[parameters('originhostname')]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('profilename'), parameters('endpointname'), variables('routename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('profilename'), variables('origingroupname'), variables('originname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('profilename'), variables('origingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\"]}{'type': 'microsoft.cdn/profiles/securitypolicies', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('profilename'), variables('securitypolicyname'))]\", 'properties': {'parameters': {'type': 'webapplicationfirewall', 'wafpolicy': {'id': \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"}, 'associations': [{'domains': [{'id': \"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\"}], 'patternstomatch': ['/*']}]}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('profilename'), parameters('endpointname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('profilename'))]\", \"[resourceid('microsoft.network/frontdoorwebapplicationfirewallpolicies', variables('wafpolicyname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium, an App Service, and configures the App Service to validate that traffic has come through the Front Door origin.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('frontdoorprofilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", 'properties': {'hostname': \"[reference(resourceid('microsoft.web/sites', parameters('appname'))).defaulthostname]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[reference(resourceid('microsoft.web/sites', parameters('appname'))).defaulthostname]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.web/sites', parameters('appname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'), variables('frontdoorroutename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httpsonly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium with a container group.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('frontdoorprofilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", 'properties': {'hostname': \"[reference(resourceid('microsoft.containerinstance/containergroups', variables('containergroupname'))).ipaddress.fqdn]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[reference(resourceid('microsoft.containerinstance/containergroups', variables('containergroupname'))).ipaddress.fqdn]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.containerinstance/containergroups', variables('containergroupname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'), variables('frontdoorroutename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': 'httponly', 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a CDN Profile, a CDN Endpoint with a user defined origin and recommended settings.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-04-15', 'name': \"[parameters('profilename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('cdnsku')]\"}}{'type': 'microsoft.cdn/profiles/endpoints', 'apiversion': '2020-04-15', 'name': \"[format('{0}/{1}', parameters('profilename'), parameters('endpointname'))]\", 'location': \"[parameters('location')]\", 'properties': {'originhostheader': \"[parameters('originurl')]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'ignorequerystring', 'contenttypestocompress': ['application/eot', 'application/font', 'application/font-sfnt', 'application/javascript', 'application/json', 'application/opentype', 'application/otf', 'application/pkcs7-mime', 'application/truetype', 'application/ttf', 'application/vnd.ms-fontobject', 'application/xhtml+xml', 'application/xml', 'application/xml+rss', 'application/x-font-opentype', 'application/x-font-truetype', 'application/x-font-ttf', 'application/x-httpd-cgi', 'application/x-javascript', 'application/x-mpegurl', 'application/x-opentype', 'application/x-otf', 'application/x-perl', 'application/x-ttf', 'font/eot', 'font/ttf', 'font/otf', 'font/opentype', 'image/svg+xml', 'text/css', 'text/csv', 'text/html', 'text/javascript', 'text/js', 'text/plain', 'text/richtext', 'text/tab-separated-values', 'text/xml', 'text/x-script', 'text/x-component', 'text/x-java-source'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[parameters('originurl')]\"}}]}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Standard/Premium and an Application Gateway instance, and uses an NSG and WAF policy to validate that traffic has come through the Front Door origin.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2021-06-01', 'name': \"[variables('frontdoorprofilename')]\", 'location': 'global', 'sku': {'name': \"[parameters('frontdoorskuname')]\"}}{'type': 'microsoft.cdn/profiles/afdendpoints', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", 'location': 'global', 'properties': {'enabledstate': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", 'properties': {'loadbalancingsettings': {'samplesize': 4, 'successfulsamplesrequired': 3}, 'healthprobesettings': {'probepath': '/', 'proberequesttype': 'head', 'probeprotocol': 'http', 'probeintervalinseconds': 100}}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/origingroups/origins', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", 'properties': {'hostname': \"[reference(resourceid('microsoft.resources/deployments', 'application-gateway')).outputs.publicipaddresshostname.value]\", 'httpport': 80, 'httpsport': 443, 'originhostheader': \"[reference(resourceid('microsoft.resources/deployments', 'application-gateway')).outputs.publicipaddresshostname.value]\", 'priority': 1, 'weight': 1000}, 'dependson': [\"[resourceid('microsoft.resources/deployments', 'application-gateway')]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]}{'type': 'microsoft.cdn/profiles/afdendpoints/routes', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}/{2}', variables('frontdoorprofilename'), parameters('frontdoorendpointname'), variables('frontdoorroutename'))]\", 'properties': {'origingroup': {'id': \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\"}, 'supportedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'forwardingprotocol': \"[variables('frontdoortoapplicationgatewayprotocol')]\", 'linktodefaultdomain': 'enabled', 'httpsredirect': 'enabled'}, 'dependson': [\"[resourceid('microsoft.cdn/profiles/afdendpoints', variables('frontdoorprofilename'), parameters('frontdoorendpointname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups/origins', variables('frontdoorprofilename'), variables('frontdoororigingroupname'), variables('frontdoororiginname'))]\", \"[resourceid('microsoft.cdn/profiles/origingroups', variables('frontdoorprofilename'), variables('frontdoororigingroupname'))]\", \"[resourceid('microsoft.cdn/profiles', variables('frontdoorprofilename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door Premium and an App Service, and uses a private endpoint for Front Door to send traffic to the application.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreates a CDN WAF Policy with example custom rules and a linked CDN Endpoint.\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/cdnwebapplicationfirewallpolicies', 'apiversion': '2020-09-01', 'name': \"[parameters('policyname')]\", 'location': 'global', 'sku': {'name': \"[parameters('cdnsku')]\"}, 'properties': {'policysettings': {'enabledstate': \"[parameters('enabledstate')]\", 'mode': \"[parameters('policymode')]\", 'defaultredirecturl': \"[parameters('redirecturl')]\"}, 'customrules': {'rules': [{'name': 'blockoutsidenorthamerica', 'priority': 10, 'enabledstate': 'enabled', 'matchconditions': [{'matchvariable': 'remoteaddr', 'operator': 'geomatch', 'negatecondition': true, 'matchvalue': ['us', 'mx', 'ca']}], 'action': 'block'}, {'name': 'redirectipmatch', 'priority': 20, 'enabledstate': 'enabled', 'matchconditions': [{'matchvariable': 'remoteaddr', 'operator': 'ipmatch', 'negatecondition': false, 'matchvalue': ['1.0.0.0/8', '2.1.1.1', 'ffff::/16']}], 'action': 'redirect'}, {'name': 'allowunauthenticatedlogin', 'priority': 30, 'enabledstate': 'enabled', 'matchconditions': [{'matchvariable': 'requesturi', 'operator': 'contains', 'negatecondition': false, 'matchvalue': ['/login']}], 'action': 'allow'}, {'name': 'redirectunauthenticated', 'priority': 40, 'enabledstate': 'enabled', 'matchconditions': [{'matchvariable': 'cookies', 'selector': 'sessionid', 'transforms': ['trim'], 'operator': 'lessthanorequal', 'negatecondition': false, 'matchvalue': ['0']}], 'action': 'redirect'}]}}}{'name': \"[parameters('profilename')]\", 'type': 'microsoft.cdn/profiles', 'location': \"[parameters('location')]\", 'apiversion': '2019-06-15-preview', 'sku': {'name': \"[parameters('cdnsku')]\"}, 'resources': [{'apiversion': '2019-06-15-preview', 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\", \"[resourceid('microsoft.cdn/cdnwebapplicationfirewallpolicies', parameters('policyname'))]\"], 'location': \"[parameters('location')]\", 'name': \"[parameters('endpointname')]\", 'type': 'endpoints', 'properties': {'originhostheader': \"[parameters('originurl')]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'ignorequerystring', 'contenttypestocompress': ['text/plain', 'text/html', 'text/css', 'application/x-javascript', 'text/javascript'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[parameters('originurl')]\"}}], 'webapplicationfirewallpolicylink': {'id': \"[resourceid('microsoft.cdn/cdnwebapplicationfirewallpolicies', parameters('policyname'))]\"}}}]} END"}
{"prompt": "\n\n###\n\nCreate a CDN Profile, a CDN Endpoint, a Server Farm and a Web App\n\n===\n\n", "completion": " {'type': 'microsoft.cdn/profiles', 'apiversion': '2020-09-01', 'name': \"[parameters('profilename')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[parameters('profilename')]\"}, 'sku': {'name': 'standard_microsoft'}, 'properties': {}}{'type': 'microsoft.cdn/profiles/endpoints', 'apiversion': '2020-09-01', 'name': \"[format('{0}/{1}', parameters('profilename'), parameters('endpointname'))]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[parameters('endpointname')]\"}, 'properties': {'originhostheader': \"[reference(resourceid('microsoft.web/sites', parameters('webappname'))).hostnames[0]]\", 'ishttpallowed': true, 'ishttpsallowed': true, 'querystringcachingbehavior': 'ignorequerystring', 'contenttypestocompress': ['text/plain', 'text/html', 'text/css', 'application/x-javascript', 'text/javascript'], 'iscompressionenabled': true, 'origins': [{'name': 'origin1', 'properties': {'hostname': \"[reference(resourceid('microsoft.web/sites', parameters('webappname'))).hostnames[0]]\"}}]}, 'dependson': [\"[resourceid('microsoft.cdn/profiles', parameters('profilename'))]\", \"[resourceid('microsoft.web/sites', parameters('webappname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to Create a instance of Azure API Management and configure custom hostname for proxy with ssl certificate from keyvault by passing an Azure Resource Id\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service', 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'hostnameconfigurations': [{'type': 'proxy', 'hostname': \"[concat(parameters('proxycustomhostname'))]\", 'encodedcertificate': \"[parameters('proxycustomhostnamebase64encodedpfxcertificate')]\", 'certificatepassword': \"[parameters('proxysslcertificatepassword')]\", 'negotiateclientcertificate': false}]}} END"}
{"prompt": "\n\n###\n\nCreate an instance Azure API Management within your virtual network's subnet and Public IP from your subscription.\n\n===\n\n", "completion": " {'apiversion': '2021-01-01-preview', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipname'))]\"], 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'virtualnetworktype': 'internal', 'publicipaddressid': \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipname'))]\", 'virtualnetworkconfiguration': {'subnetresourceid': \"[variables('subnetref')]\"}, 'customproperties': {'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_gcm_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tripledes168': false, 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10': false, 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11': false, 'microsoft.windowsazure.apimanagement.gateway.security.protocols.ssl30': false, 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls10': false, 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls11': false, 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.ssl30': false, 'microsoft.windowsazure.apimanagement.gateway.protocols.server.http2': false}}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create API Management service with additional locations\n\n===\n\n", "completion": " {'type': 'microsoft.apimanagement/service', 'apiversion': '2020-12-01', 'name': \"[parameters('apimanagementservicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'premium', 'capacity': \"[parameters('skucount')]\"}, 'properties': {'copy': [{'name': 'additionallocations', 'count': \"[length(parameters('additionallocations'))]\", 'input': {'location': \"[parameters('additionallocations')[copyindex('additionallocations')]]\", 'sku': {'name': 'premium', 'capacity': \"[parameters('skucount')]\"}, 'disablegateway': \"[parameters('disablegatewayinadditionallocation')]\"}}], 'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'apiversionconstraint': {'minapiversion': \"[parameters('minapiversiontoallowoncontrolplane')]\"}, 'customproperties': {'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_ecdsa_with_aes_256_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_ecdsa_with_aes_128_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_256_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_128_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_gcm_sha256': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha256': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha256': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tripledes168': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.protocols.ssl30': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls10': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls11': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.ssl30': 'false', 'microsoft.windowsazure.apimanagement.gateway.protocols.server.http2': 'true'}}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a instance of Azure API Management with custom hostname for portal and multiple custom hostnames for proxy\n\n===\n\n", "completion": " {'apiversion': '2017-03-01', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service', 'location': \"[parameters('location')]\", 'tags': {}, 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'hostnameconfigurations': [{'type': 'proxy', 'hostname': \"[parameters('proxycustomhostname1')]\", 'encodedcertificate': \"[parameters('proxycustomhostnamebase64encodedpfxcertificate1')]\", 'certificatepassword': \"[parameters('proxysslcertificatepassword1')]\", 'negotiateclientcertificate': false}, {'type': 'proxy', 'hostname': \"[parameters('proxycustomhostname2')]\", 'encodedcertificate': \"[parameters('proxycustomhostnamebase64encodedpfxcertificate2')]\", 'certificatepassword': \"[parameters('proxysslcertificatepassword2')]\", 'negotiateclientcertificate': false}, {'type': 'portal', 'hostname': \"[parameters('portalcustomhostname')]\", 'encodedcertificate': \"[parameters('portalcustomhostnamebase64encodedpfxcertificate')]\", 'certificatepassword': \"[parameters('portalsslcertificatepassword')]\", 'negotiateclientcertificate': false}]}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a instance of Azure API Management within your virtual network's subnet and configure Network Security Group as per recommendation using Service Tags.\n\n===\n\n", "completion": " {'apiversion': '2019-12-01', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'virtualnetworktype': 'external', 'virtualnetworkconfiguration': {'subnetresourceid': \"[variables('subnetref')]\"}, 'customproperties': {'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_gcm_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tripledes168': false, 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10': false, 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11': false, 'microsoft.windowsazure.apimanagement.gateway.security.protocols.ssl30': false, 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls10': false, 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls11': false, 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.ssl30': false, 'microsoft.windowsazure.apimanagement.gateway.protocols.server.http2': false}}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a instance of Azure API Management within your virtual network's subnet and configure Network Security Group as per recommendation using Service Tags.\n\n===\n\n", "completion": " {'apiversion': '2019-12-01', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'virtualnetworktype': 'internal', 'virtualnetworkconfiguration': {'subnetresourceid': \"[variables('subnetref')]\"}}} END"}
{"prompt": "\n\n###\n\nCreate an API Management service with a virtual network and a private endpoint\n\n===\n\n", "completion": " {'type': 'microsoft.apimanagement/service', 'apiversion': '2021-08-01', 'name': \"[parameters('apimanagementservicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'identity': {'type': 'systemassigned'}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\"}} END"}
{"prompt": "\n\n###\n\nCreate an API Management instance into Availability Zone and enable Managed Identity.\n\n===\n\n", "completion": " {'type': 'microsoft.apimanagement/service', 'apiversion': '2021-01-01-preview', 'name': \"[parameters('apimanagementservicename')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'identity': {'type': 'systemassigned'}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\"}} END"}
{"prompt": "\n\n###\n\nCreate an API Management service with SSL from KeyVault using User Assigned identity.\n\n===\n\n", "completion": " {'type': 'microsoft.apimanagement/service', 'apiversion': '2021-04-01-preview', 'name': \"[parameters('apimanagementservicename')]\", 'location': \"[parameters('location')]\", 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[format('{0}', resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname')))]\": {}}}, 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'hostnameconfigurations': [{'type': 'proxy', 'hostname': \"[parameters('gatewaycustomhostname')]\", 'keyvaultid': \"[reference(resourceid('microsoft.keyvault/vaults/secrets', split(format('{0}/sslcert', parameters('keyvaultname')), '/')[0], split(format('{0}/sslcert', parameters('keyvaultname')), '/')[1])).secreturi]\", 'identityclientid': \"[reference(resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))).clientid]\", 'defaultsslbinding': true}], 'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'customproperties': {'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_ecdsa_with_aes_256_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_ecdsa_with_aes_128_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_256_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_128_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_gcm_sha256': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha256': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha256': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tripledes168': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.protocols.ssl30': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls10': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls11': 'false', 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.ssl30': 'false', 'microsoft.windowsazure.apimanagement.gateway.protocols.server.http2': 'true'}}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults/secrets', split(format('{0}/sslcert', parameters('keyvaultname')), '/')[0], split(format('{0}/sslcert', parameters('keyvaultname')), '/')[1])]\", \"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\"]} END"}
{"prompt": "\n\n###\n\nBetter understand API usage by logging API calls from Azure API Management to Moesif API Analytics\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreate an instance Azure API Management within your virtual network's subnet and Public IP from your subscription.\n\n===\n\n", "completion": " {'apiversion': '2021-01-01-preview', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipname'))]\"], 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\", 'virtualnetworktype': 'external', 'publicipaddressid': \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipname'))]\", 'virtualnetworkconfiguration': {'subnetresourceid': \"[variables('subnetref')]\"}, 'customproperties': {'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_ecdhe_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_gcm_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha256': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_256_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tls_rsa_with_aes_128_cbc_sha': false, 'microsoft.windowsazure.apimanagement.gateway.security.ciphers.tripledes168': false, 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10': false, 'microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11': false, 'microsoft.windowsazure.apimanagement.gateway.security.protocols.ssl30': false, 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls10': false, 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.tls11': false, 'microsoft.windowsazure.apimanagement.gateway.security.backend.protocols.ssl30': false, 'microsoft.windowsazure.apimanagement.gateway.protocols.server.http2': false}}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to Create a instance of Azure API Management on a private network protected by Azure Application Gateway.\n\n===\n\n", "completion": " {'type': 'microsoft.apimanagement/service', 'apiversion': '2020-12-01', 'name': \"[variables('apim-name')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('apim-sku')]\", 'capacity': \"[parameters('apim-capacity')]\"}, 'identity': {'type': 'systemassigned'}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnet-name'))]\"], 'resources': [{'type': 'gateways', 'apiversion': '2020-12-01', 'name': 'my-gateway', 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apim-name'))]\"], 'properties': {'locationdata': {'name': 'my internal location'}, 'description': 'self hosted gateway bringing api management to the edge'}}, {'type': 'loggers', 'apiversion': '2020-12-01', 'name': 'appinsightslogger', 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apim-name'))]\"], 'properties': {'loggertype': 'applicationinsights', 'resourceid': \"[resourceid('microsoft.insights/components', variables('app-insights-name'))]\", 'credentials': {'instrumentationkey': \"[reference(variables('app-insights-name')).instrumentationkey]\"}}}, {'type': 'diagnostics', 'apiversion': '2020-12-01', 'name': 'applicationinsights', 'dependson': [\"[resourceid('microsoft.apimanagement/service', variables('apim-name'))]\", \"[resourceid('microsoft.apimanagement/service/loggers', variables('apim-name'), 'appinsightslogger')]\"], 'properties': {'alwayslog': 'allerrors', 'httpcorrelationprotocol': 'legacy', 'verbosity': 'information', 'logclientip': true, 'loggerid': \"[resourceid('microsoft.apimanagement/service/loggers/', variables('apim-name'), 'appinsightslogger')]\", 'sampling': {'samplingtype': 'fixed', 'percentage': 100}, 'frontend': {'request': {'body': {'bytes': 0}}, 'response': {'body': {'bytes': 0}}}, 'backend': {'request': {'body': {'bytes': 0}}, 'response': {'body': {'bytes': 0}}}}}], 'properties': {'publishername': \"[parameters('apim-publisher-name')]\", 'publisheremail': \"[parameters('apim-publisher-email')]\", 'virtualnetworktype': 'internal', 'virtualnetworkconfiguration': {'subnetresourceid': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet-name'), 'apimsubnet')]\"}}} END"}
{"prompt": "\n\n###\n\nMonitor your API Management service with Operations Management Suite - Log Analytics\n\n===\n\n", "completion": " {'apiversion': '2020-12-01', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service', 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('apimanagementsku')]\", 'capacity': \"[parameters('apimanagementskucount')]\"}, 'properties': {'publisheremail': \"[parameters('apimanagementpublisheremail')]\", 'publishername': \"[parameters('apimanagementpublishername')]\"}}{'name': \"[concat(variables('apimanagementservicename'), '/', 'microsoft.insights/service')]\", 'type': 'microsoft.apimanagement/service/providers/diagnosticsettings', 'apiversion': '2015-07-01', 'dependson': [\"[resourceid('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\", \"[resourceid('microsoft.operationalinsights/workspaces/', variables('omsworkspacename'))]\"], 'properties': {'workspaceid': \"[resourceid('microsoft.operationalinsights/workspaces', variables('omsworkspacename'))]\", 'logs': [{'category': 'gatewaylogs', 'enabled': true}]}} END"}
{"prompt": "\n\n###\n\nCreate an API Management instance using a template\n\n===\n\n", "completion": " {'type': 'microsoft.apimanagement/service', 'apiversion': '2020-12-01', 'name': \"[parameters('apimanagementservicename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\"}} END"}
{"prompt": "\n\n###\n\nThis template provides an example of how to create API Management service and configure all sub-entities\n\n===\n\n", "completion": " {'apiversion': '2017-03-01', 'name': \"[variables('apimanagementservicename')]\", 'type': 'microsoft.apimanagement/service', 'location': \"[parameters('location')]\", 'tags': {}, 'sku': {'name': \"[parameters('sku')]\", 'capacity': \"[parameters('skucount')]\"}, 'properties': {'publisheremail': \"[parameters('publisheremail')]\", 'publishername': \"[parameters('publishername')]\"}, 'resources': [{'apiversion': '2017-03-01', 'type': 'policies', 'name': 'policy', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'policycontent': \"[parameters('tenantpolicy')]\"}}, {'apiversion': '2017-03-01', 'type': 'apis', 'name': 'petstoreswaggerimportexample', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'contentformat': 'swaggerlinkjson', 'contentvalue': 'http://petstore.swagger.io/v2/swagger.json', 'path': 'examplepetstore'}}, {'apiversion': '2017-03-01', 'type': 'apis', 'name': 'exampleapi', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'displayname': 'example api name', 'description': 'description for example api', 'serviceurl': 'https://example.net', 'path': 'exampleapipath', 'protocols': ['https']}, 'resources': [{'apiversion': '2017-03-01', 'type': 'operations', 'name': 'exampleoperationsdelete', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/apis/exampleapi')]\"], 'properties': {'displayname': 'delete resource', 'method': 'delete', 'urltemplate': '/resource', 'description': 'a demonstration of a delete call'}}, {'apiversion': '2017-03-01', 'type': 'operations', 'name': 'exampleoperationsget', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/apis/exampleapi')]\"], 'properties': {'displayname': 'get resource', 'method': 'get', 'urltemplate': '/resource', 'description': 'a demonstration of a get call'}, 'resources': [{'apiversion': '2017-03-01', 'type': 'policies', 'name': 'policy', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/apis/exampleapi')]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/apis/exampleapi/operations/exampleoperationsget')]\"], 'properties': {'policycontent': \"[parameters('operationpolicy')]\"}}]}]}, {'apiversion': '2017-03-01', 'type': 'apis', 'name': 'exampleapiwithpolicy', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'displayname': 'example api name with policy', 'description': 'description for example api with policy', 'serviceurl': 'https://exampleapiwithpolicy.net', 'path': 'exampleapiwithpolicypath', 'protocols': ['https']}, 'resources': [{'apiversion': '2017-03-01', 'type': 'policies', 'name': 'policy', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/apis/exampleapiwithpolicy')]\"], 'properties': {'policycontent': \"[parameters('apipolicy')]\"}}]}, {'apiversion': '2017-03-01', 'type': 'products', 'name': 'exampleproduct', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'displayname': 'example product name', 'description': 'description for example product', 'terms': 'terms for example product', 'subscriptionrequired': true, 'approvalrequired': false, 'subscriptionslimit': 1, 'state': 'published'}, 'resources': [{'apiversion': '2017-03-01', 'type': 'apis', 'name': 'exampleapi', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/apis/exampleapi')]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/products/exampleproduct')]\"]}, {'apiversion': '2017-03-01', 'type': 'policies', 'name': 'policy', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/products/exampleproduct')]\"], 'properties': {'policycontent': \"[parameters('productpolicy')]\"}}]}, {'apiversion': '2017-03-01', 'type': 'users', 'name': 'exampleuser1', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'firstname': 'examplefirstname1', 'lastname': 'examplelastname1', 'email': 'examplefirst1@example.com', 'state': 'active', 'note': 'note for example user 1'}}, {'apiversion': '2017-03-01', 'type': 'users', 'name': 'exampleuser2', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'firstname': 'examplefirstname2', 'lastname': 'examplelastname2', 'email': 'examplefirst2@example.com', 'state': 'active', 'note': 'note for example user 2'}}, {'apiversion': '2017-03-01', 'type': 'users', 'name': 'exampleuser3', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'firstname': 'examplefirstname3', 'lastname': 'examplelastname3', 'email': 'examplefirst3@example.com', 'state': 'active', 'note': 'note for example user 3'}}, {'apiversion': '2017-03-01', 'type': 'properties', 'name': 'exampleproperties', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'displayname': 'propertyexamplename', 'value': 'propertyexamplevalue', 'tags': ['exampletag']}}, {'apiversion': '2017-03-01', 'type': 'subscriptions', 'name': 'examplesubscription1', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/products/exampleproduct')]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/users/exampleuser1')]\"], 'properties': {'productid': '/subscriptions/{subscriptionid}/resourcegroups/{resourcegroupname}/providers/microsoft.apimanagement/service/exampleservicename/products/exampleproduct', 'userid': '/subscriptions/{subscriptionid}/resourcegroups/{resourcegroupname}/providers/microsoft.apimanagement/service/exampleservicename/users/exampleuser1'}}, {'apiversion': '2017-03-01', 'type': 'subscriptions', 'name': 'examplesubscription2', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/products/exampleproduct')]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/users/exampleuser3')]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/subscriptions/examplesubscription1')]\"], 'properties': {'productid': '/subscriptions/{subscriptionid}/resourcegroups/{resourcegroupname}/providers/microsoft.apimanagement/service/exampleservicename/products/exampleproduct', 'userid': '/subscriptions/{subscriptionid}/resourcegroups/{resourcegroupname}/providers/microsoft.apimanagement/service/exampleservicename/users/exampleuser3'}}, {'apiversion': '2017-03-01', 'type': 'certificates', 'name': 'examplecertificate', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'data': \"[parameters('mutualauthenticationcertificate')]\", 'password': \"[parameters('certificatepassword')]\"}}, {'apiversion': '2017-03-01', 'type': 'groups', 'name': 'examplegroup', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'displayname': 'example group name', 'description': 'example group description'}, 'resources': [{'apiversion': '2017-03-01', 'type': 'users', 'name': 'exampleuser3', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\", \"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'), '/groups/examplegroup')]\"]}]}, {'apiversion': '2017-03-01', 'type': 'openidconnectproviders', 'name': 'exampleopenidconnectprovider', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'displayname': 'exampleopenidconnectprovidername', 'description': 'description for example openid connect provider', 'metadataendpoint': 'https://example-openidconnect-url.net', 'clientid': 'exampleclientid', 'clientsecret': \"[parameters('openidconnectclientsecret')]\"}}, {'apiversion': '2017-03-01', 'type': 'loggers', 'name': 'examplelogger', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'loggertype': 'azureeventhub', 'description': 'description for example logger', 'credentials': {'name': 'exampleeventhubname', 'connectionstring': \"[parameters('eventhubnamespaceconnectionstring')]\"}}}, {'apiversion': '2017-03-01', 'type': 'identityproviders', 'name': 'google', 'dependson': [\"[concat('microsoft.apimanagement/service/', variables('apimanagementservicename'))]\"], 'properties': {'clientid': 'googleclientid', 'clientsecret': \"[parameters('googleclientsecret')]\"}}]} END"}
{"prompt": "\n\n###\n\nCreate a Standard Stream Analytics Job without input and output\n\n===\n\n", "completion": " {'type': 'microsoft.streamanalytics/streamingjobs', 'apiversion': '2019-06-01', 'name': \"[parameters('streamanalyticsjobname')]\", 'location': \"[parameters('location')]\", 'properties': {'sku': {'name': 'standard'}, 'outputerrorpolicy': 'stop', 'eventsoutoforderpolicy': 'adjust', 'eventsoutofordermaxdelayinseconds': 0, 'eventslatearrivalmaxdelayinseconds': 5, 'datalocale': 'en-us', 'transformation': {'name': 'transformation', 'properties': {'streamingunits': \"[parameters('numberofstreamingunits')]\", 'query': 'select\\r\\n    *\\r\\ninto\\r\\n    [youroutputalias]\\r\\nfrom\\r\\n    [yourinputalias]'}}}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a container group with VNet.\n\n===\n\n", "completion": " {'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2019-12-01', 'name': \"[parameters('containergroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[parameters('containername')]\", 'properties': {'image': \"[parameters('image')]\", 'ports': [{'port': \"[parameters('port')]\", 'protocol': 'tcp'}], 'resources': {'requests': {'cpu': \"[parameters('cpucores')]\", 'memoryingb': \"[parameters('memoryingb')]\"}}}}], 'ostype': 'linux', 'networkprofile': {'id': \"[resourceid('microsoft.network/networkprofiles', variables('networkprofilename'))]\"}, 'restartpolicy': 'always'}, 'dependson': [\"[resourceid('microsoft.network/networkprofiles', variables('networkprofilename'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate an on-demand SFTP Server with persistent storage\n\n===\n\n", "completion": " {'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2019-12-01', 'name': \"[variables('sftpcontainergroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[variables('sftpcontainername')]\", 'properties': {'image': \"[variables('sftpcontainerimage')]\", 'environmentvariables': [{'name': 'sftp_users', 'value': \"[variables('sftpenvvariable')]\"}], 'resources': {'requests': {'cpu': 2, 'memoryingb': 1}}, 'ports': [{'port': 22}], 'volumemounts': [{'name': 'sftpvolume', 'mountpath': \"[format('/home/{0}/upload', parameters('sftpuser'))]\", 'readonly': false}]}}], 'ostype': 'linux', 'ipaddress': {'type': 'public', 'ports': [{'protocol': 'tcp', 'port': 22}]}, 'restartpolicy': 'onfailure', 'volumes': [{'name': 'sftpvolume', 'azurefile': {'readonly': false, 'sharename': \"[parameters('filesharename')]\", 'storageaccountname': \"[variables('storageaccountname')]\", 'storageaccountkey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', variables('storageaccountname')), '2021-04-01').keys[0].value]\"}}]}, 'dependson': [\"[resourceid('microsoft.resources/deploymentscripts', variables('scriptname'))]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis templates creates an ACI resource and exposes a container through UDP\n\n===\n\n", "completion": " {'type': 'microsoft.containerinstance/containergroups', 'name': \"[concat(variables('containername'),variables('randomname'),'1')]\", 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[variables('containername')]\", 'properties': {'image': \"[variables('containeruri')]\", 'ports': [{'protocol': \"[parameters('portprotocol')]\", 'port': \"[variables('port')]\"}], 'resources': {'requests': {'cpu': \"[variables('numbercores')]\", 'memoryingb': \"[variables('memory')]\"}}}}], 'ostype': \"[variables('ostype')]\", 'ipaddress': {'type': 'public', 'ports': [{'protocol': \"[parameters('portprotocol')]\", 'port': \"[variables('port')]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis ARM template demonstrates the deployment of an AKS instance with advanced networking features into an existing virtual network.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a container group with a Linux container that has a secret volume using Azure Container Instances.\n\n===\n\n", "completion": " {'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2020-11-01', 'name': \"[parameters('name')]\", 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[parameters('containername')]\", 'properties': {'image': \"[parameters('imagename')]\", 'ports': [{'port': \"[parameters('port')]\"}], 'resources': {'requests': {'cpu': \"[parameters('cpucores')]\", 'memoryingb': \"[parameters('memoryingb')]\"}}, 'volumemounts': [{'name': \"[parameters('volumename')]\", 'mountpath': '/mnt/secrets', 'readonly': false}]}}], 'ostype': 'linux', 'ipaddress': {'type': 'public', 'dnsnamelabel': \"[parameters('dnsnamelabel')]\", 'ports': [{'protocol': 'tcp', 'port': \"[parameters('port')]\"}]}, 'volumes': [{'name': \"[parameters('volumename')]\", 'secret': {'sslcertificatedata': \"[parameters('sslcertificatedata')]\", 'sslcertificatepwd': \"[base64(parameters('sslcertificatepwd'))]\"}}]}} END"}
{"prompt": "\n\n###\n\nCreate a storage account and a file share\n\n===\n\n", "completion": " {'name': \"[variables('containergroupname')]\", 'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2019-12-01', 'location': \"[parameters('containerinstancelocation')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts/', parameters('storageaccountname'))]\"], 'properties': {'containers': [{'name': \"[variables('containername')]\", 'properties': {'image': \"[variables('image')]\", 'command': ['az', 'storage', 'share', 'create', '--name', \"[parameters('filesharename')]\"], 'environmentvariables': [{'name': 'azure_storage_key', 'value': \"[listkeys(parameters('storageaccountname'),'2019-06-01').keys[0].value]\"}, {'name': 'azure_storage_account', 'value': \"[parameters('storageaccountname')]\"}], 'resources': {'requests': {'cpu': \"[variables('cpucores')]\", 'memoryingb': \"[variables('memoryingb')]\"}}}}], 'restartpolicy': 'onfailure', 'ostype': 'linux'}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a container group with a Linux container that has a health probe using Azure Container Instances.\n\n===\n\n", "completion": " {'name': \"[parameters('containergroupname')]\", 'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[parameters('containername')]\", 'properties': {'command': ['/bin/sh', '-c', 'touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600'], 'image': \"[parameters('imagename')]\", 'ports': [{'port': \"[parameters('port')]\"}], 'resources': {'requests': {'cpu': \"[parameters('cpucores')]\", 'memoryingb': \"[parameters('memoryingb')]\"}}, 'livenessprobe': {'exec': {'command': ['cat', '/tmp/healthy']}, 'periodseconds': 5}}}], 'ostype': 'linux', 'ipaddress': {'type': 'public', 'ports': [{'protocol': 'tcp', 'port': \"[parameters('port')]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a container group with a single Linux container and a public IP address using Azure Container Instances.\n\n===\n\n", "completion": " {'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2019-12-01', 'name': \"[parameters('name')]\", 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[parameters('name')]\", 'properties': {'image': \"[parameters('image')]\", 'ports': [{'port': \"[parameters('port')]\", 'protocol': 'tcp'}], 'resources': {'requests': {'cpu': \"[parameters('cpucores')]\", 'memoryingb': \"[parameters('memoryingb')]\"}}}}], 'ostype': 'linux', 'restartpolicy': \"[parameters('restartpolicy')]\", 'ipaddress': {'type': 'public', 'ports': [{'port': \"[parameters('port')]\", 'protocol': 'tcp'}]}}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a container group with a Linux container that has a secure environment variable using Azure Container Instances.\n\n===\n\n", "completion": " {'name': \"[parameters('containergroupname')]\", 'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[parameters('containername')]\", 'properties': {'image': \"[parameters('imagename')]\", 'ports': [{'port': \"[parameters('port')]\"}], 'resources': {'requests': {'cpu': \"[parameters('cpucores')]\", 'memoryingb': \"[parameters('memoryingb')]\"}}, 'environmentvariables': [{'name': \"[parameters('environmentvariablename')]\", 'securevalue': \"[parameters('environmentvariablevalue')]\"}]}}], 'ostype': 'linux', 'ipaddress': {'type': 'public', 'ports': [{'protocol': 'tcp', 'port': \"[parameters('port')]\"}]}}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a container group with two Linux containers that share an emptyDir volume using Azure Container Instances.\n\n===\n\n", "completion": " {'name': \"[parameters('containergroupname')]\", 'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[parameters('containername1')]\", 'properties': {'image': 'nginx', 'ports': [{'port': \"[parameters('port')]\"}], 'resources': {'requests': {'cpu': \"[parameters('cpucores')]\", 'memoryingb': \"[parameters('memoryingb')]\"}}, 'volumemounts': [{'name': \"[parameters('volumename')]\", 'mountpath': '/var/log/nginx', 'readonly': false}]}}, {'name': \"[parameters('containername2')]\", 'properties': {'command': ['bin/bash', '-c', 'while sleep 5; do cat /mnt/input/access.log; done'], 'image': \"[parameters('image')]\", 'resources': {'requests': {'cpu': \"[parameters('cpucores')]\", 'memoryingb': \"[parameters('memoryingb')]\"}}, 'volumemounts': [{'name': \"[parameters('volumename')]\", 'mountpath': '/mnt/input', 'readonly': true}]}}], 'ostype': 'linux', 'ipaddress': {'type': 'public', 'ports': [{'protocol': 'tcp', 'port': \"[parameters('port')]\"}]}, 'volumes': [{'name': \"[parameters('volumename')]\", 'emptydir': {}}]}} END"}
{"prompt": "\n\n###\n\nThis ARM template demonstrates the deployment of an AKS instance with advanced networking features into an existing virtual network and Azure AD Integration.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template demonstrates how to create a container group with a gitRepo volume using Azure Container Instances.\n\n===\n\n", "completion": " {'name': \"[parameters('containergroupname')]\", 'type': 'microsoft.containerinstance/containergroups', 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[parameters('containername')]\", 'properties': {'image': 'nginx', 'ports': [{'port': \"[parameters('port')]\"}], 'resources': {'requests': {'cpu': \"[parameters('cpucores')]\", 'memoryingb': \"[parameters('memoryingb')]\"}}, 'volumemounts': [{'name': \"[parameters('volumename')]\", 'mountpath': '/mnt/gitrepos/', 'readonly': false}]}}], 'ostype': 'linux', 'ipaddress': {'type': 'public', 'ports': [{'protocol': 'tcp', 'port': \"[parameters('port')]\"}]}, 'volumes': [{'name': \"[parameters('volumename')]\", 'gitrepo': {'repository': 'https://github.com/azure-samples/aci-helloworld.git'}}]}} END"}
{"prompt": "\n\n###\n\nCreate an on-demand SFTP Server with persistent storage using an existing storage account\n\n===\n\n", "completion": " {'type': 'microsoft.containerinstance/containergroups', 'name': \"[variables('sftpcontainergroupname')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'containers': [{'name': \"[variables('sftpcontainername')]\", 'properties': {'image': \"[variables('sftpcontainerimage')]\", 'environmentvariables': [{'name': 'sftp_users', 'value': \"[variables('sftpenvvariable')]\"}], 'resources': {'requests': {'cpu': 2, 'memoryingb': 1}}, 'ports': [{'port': 22}], 'volumemounts': [{'mountpath': \"[concat('/home/', parameters('sftpuser'), '/upload')]\", 'name': 'sftpvolume', 'readonly': false}]}}], 'ostype': 'linux', 'ipaddress': {'type': 'public', 'ports': [{'protocol': 'tcp', 'port': 22}]}, 'restartpolicy': 'onfailure', 'volumes': [{'name': 'sftpvolume', 'azurefile': {'readonly': false, 'sharename': \"[parameters('existingfilesharename')]\", 'storageaccountname': \"[parameters('existingstorageaccountname')]\", 'storageaccountkey': \"[listkeys(variables('storageaccountid'),'2018-02-01').keys[0].value]\"}}]}} END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy an AKS cluster can be easily integrated with entreprise-grade devops process and fullfil the condition to be attached with Azure ML as compute target resources\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nDeploy a VM and maintain the state of the node using Azure Security and Operations Management service for Configuration Management.\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreate an Azure Automation account and create a new Azure Monitor Log Analytics workspace if it doesn't exist, and then link them together.\n\n===\n\n", "completion": " {'type': 'microsoft.automation/automationaccounts', 'apiversion': '2020-01-13-preview', 'name': \"[parameters('automationaccountname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('workspacename')]\"], 'identity': {'type': 'systemassigned'}, 'properties': {'sku': {'name': 'basic'}}, 'resources': [{'type': 'runbooks', 'apiversion': '2020-01-13-preview', 'name': \"[parameters('samplegraphicalrunbookname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('automationaccountname')]\"], 'properties': {'runbooktype': 'graphpowershell', 'logprogress': 'false', 'logverbose': 'false', 'description': \"[parameters('samplegraphicalrunbookdescription')]\", 'publishcontentlink': {'uri': \"[uri(parameters('_artifactslocation'), concat('scripts/azureautomationtutorial.graphrunbook', parameters('_artifactslocationsastoken')))]\", 'version': '1.0.0.0'}}}, {'type': 'runbooks', 'apiversion': '2020-01-13-preview', 'name': \"[parameters('samplepowershellrunbookname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('automationaccountname')]\"], 'properties': {'runbooktype': 'powershell', 'logprogress': 'false', 'logverbose': 'false', 'description': \"[parameters('samplepowershellrunbookdescription')]\", 'publishcontentlink': {'uri': \"[uri(parameters('_artifactslocation'), concat('scripts/azureautomationtutorial.ps1', parameters('_artifactslocationsastoken')))]\", 'version': '1.0.0.0'}}}, {'type': 'runbooks', 'apiversion': '2020-01-13-preview', 'name': \"[parameters('samplepython2runbookname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('automationaccountname')]\"], 'properties': {'runbooktype': 'python2', 'logprogress': 'false', 'logverbose': 'false', 'description': \"[parameters('samplepython2runbookdescription')]\", 'publishcontentlink': {'uri': \"[uri(parameters('_artifactslocation'), concat('scripts/azureautomationtutorialpython2.py', parameters('_artifactslocationsastoken')))]\", 'version': '1.0.0.0'}}}]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Container Registry with policies, diagnostics along with other configurable options such as identities, IP rules, etc.\n\n===\n\n", "completion": " {'type': 'microsoft.containerregistry/registries', 'apiversion': '2021-06-01-preview', 'name': \"[parameters('acrname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('acrsku')]\"}, 'identity': \"[if(parameters('enablesystemidentity'), createobject('type', 'systemassigned'), if(not(empty(parameters('userassignedidentities'))), createobject('type', 'userassigned', 'userassignedidentities', parameters('userassignedidentities')), null()))]\", 'properties': {'adminuserenabled': \"[parameters('enableadminuser')]\", 'publicnetworkaccess': \"[parameters('publicnetworkaccess')]\", 'zoneredundancy': \"[parameters('zoneredundancy')]\", 'networkrulebypassoptions': \"[parameters('networkrulebypassoptions')]\", 'networkruleset': \"[if(not(empty(parameters('iprules'))), createobject('defaultaction', parameters('iprules').defaultaction, 'iprules', parameters('iprules').iprules), createobject())]\", 'policies': \"[parameters('policies')]\"}} END"}
{"prompt": "\n\n###\n\nA template for creating a new Azure Container Registry. Use this template as the framework for your custom deployment.\n\n===\n\n", "completion": " {'type': 'microsoft.containerregistry/registries', 'apiversion': '2019-12-01-preview', 'name': \"[parameters('acrname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('acrsku')]\"}, 'tags': {'displayname': 'container registry', 'container.registry': \"[parameters('acrname')]\"}, 'properties': {'adminuserenabled': \"[parameters('acradminuserenabled')]\"}}{'type': 'microsoft.containerregistry/registries/replications', 'apiversion': '2019-12-01-preview', 'name': \"[format('{0}/{1}', parameters('acrname'), parameters('acrreplicalocation'))]\", 'location': \"[parameters('acrreplicalocation')]\", 'properties': {}, 'dependson': [\"[resourceid('microsoft.containerregistry/registries', parameters('acrname'))]\"]} END"}
{"prompt": "\n\n###\n\nA template for creating a new Azure Container Registry. Use this template as the framework for your custom deployment.\n\n===\n\n", "completion": " {'type': 'microsoft.containerregistry/registries', 'apiversion': '2019-12-01-preview', 'name': \"[parameters('acrname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': 'container registry', 'container.registry': \"[parameters('acrname')]\"}, 'sku': {'name': \"[parameters('acrsku')]\"}, 'properties': {'adminuserenabled': \"[parameters('acradminuserenabled')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Relay namespace and a WCF Relay\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('namespacename')]\", 'type': 'microsoft.relay/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('wcfrelayname')]\", 'type': 'wcfrelays', 'dependson': [\"[resourceid('microsoft.relay/namespaces', parameters('namespacename'))]\"], 'properties': {'relaytype': \"[parameters('wcfrelaytype')]\", 'requiresclientauthorization': 'false', 'requirestransportsecurity': 'false', 'usermetadata': 'meta data supplied by user for wcfrelays'}}]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Relay namespace with a Standard SKU.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('namespace')]\", 'type': 'microsoft.relay/namespaces', 'location': \"[parameters('location')]\", 'kind': 'relay', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Relay namespace, a WcfRealy and authorization rules for both the namespace and WcfRealy.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('namespacename')]\", 'type': 'microsoft.relay/namespaces', 'location': \"[variables('location')]\", 'sku': {'name': 'standard'}, 'properties': {}, 'resources': [{'apiversion': \"[variables('apiversion')]\", 'name': \"[parameters('wcfrelayname')]\", 'type': 'wcfrelays', 'dependson': [\"[resourceid('microsoft.relay/namespaces/', parameters('namespacename'))]\"], 'properties': {'relaytype': \"[parameters('wcfrelaytype')]\", 'requiresclientauthorization': 'false', 'requirestransportsecurity': 'false', 'usermetadata': 'meta data supplied by user for wcfrelays'}, 'resources': [{'apiversion': \"[variables('apiversion')]\", 'name': \"[parameters('wcfrelayauthorizationrulename')]\", 'type': 'authorizationrules', 'dependson': [\"[parameters('wcfrelayname')]\"], 'properties': {'rights': ['listen']}}]}, {'apiversion': \"[variables('apiversion')]\", 'name': \"[variables('namespaceauthrulename')]\", 'type': 'microsoft.relay/namespaces/authorizationrules', 'dependson': [\"[resourceid('microsoft.relay/namespaces/', parameters('namespacename'))]\"], 'properties': {'rights': ['send']}}]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Relay namespace and HybridConnection.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('namespacename')]\", 'type': 'microsoft.relay/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('hybridconnectionname')]\", 'type': 'hybridconnections', 'dependson': [\"[resourceid('microsoft.relay/namespaces', parameters('namespacename'))]\"], 'properties': {'requiresclientauthorization': 'true', 'usermetadata': 'meta data supplied by user for hybridconnections'}}]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Relay namespace, a WCF Relay and a HybridConnection.\n\n===\n\n", "completion": " {'apiversion': '2017-04-01', 'name': \"[parameters('namespacename')]\", 'type': 'microsoft.relay/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('wcfrelayname')]\", 'type': 'wcfrelays', 'dependson': [\"[resourceid('microsoft.relay/namespaces', parameters('namespacename'))]\"], 'properties': {'relaytype': \"[parameters('wcfrelaytype')]\", 'requiresclientauthorization': 'false', 'requirestransportsecurity': 'false', 'usermetadata': 'meta data supplied by user for wcfrelays'}}, {'apiversion': '2017-04-01', 'name': \"[parameters('hybridconnectionname')]\", 'type': 'hybridconnections', 'dependson': [\"[resourceid('microsoft.relay/namespaces', parameters('namespacename'))]\"], 'properties': {'requiresclientauthorization': 'true', 'usermetadata': 'meta data supplied by user hybridconnections'}}]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Relay namespace, a HybridConnection and authorization rules for both the namespace and HybridConnection.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('namespacename')]\", 'type': 'microsoft.relay/namespaces', 'location': \"[variables('location')]\", 'kind': 'relay', 'resources': [{'apiversion': \"[variables('apiversion')]\", 'name': \"[parameters('hybridconnectionname')]\", 'type': 'hybridconnections', 'dependson': [\"[resourceid('microsoft.relay/namespaces/', parameters('namespacename'))]\"], 'properties': {'requiresclientauthorization': 'true', 'usermetadata': 'meta data supplied by user hybridconnections'}, 'resources': [{'apiversion': \"[variables('apiversion')]\", 'name': \"[parameters('hybridconnectionauthorizationrulename')]\", 'type': 'authorizationrules', 'dependson': [\"[parameters('hybridconnectionname')]\"], 'properties': {'rights': ['listen']}}]}, {'apiversion': \"[variables('apiversion')]\", 'name': \"[variables('namespaceauthrulename')]\", 'type': 'microsoft.relay/namespaces/authorizationrules', 'dependson': [\"[resourceid('microsoft.relay/namespaces/', parameters('namespacename'))]\"], 'properties': {'rights': ['send']}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Recovery Services Vault and enables diagnostics for Azure Backup\n\n===\n\n", "completion": " {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2021-02-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'type': 'microsoft.recoveryservices/vaults/providers/diagnosticsettings', 'name': \"[concat(parameters('vaultname'), '/microsoft.insights/', variables('omsworkspacename'))]\", 'apiversion': '2017-05-01-preview', 'properties': {'name': \"[variables('omsworkspacename')]\", 'storageaccountid': \"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", 'workspaceid': \"[resourceid('microsoft.operationalinsights/workspaces/', variables('omsworkspacename'))]\", 'logs': [{'category': 'azurebackupreport', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}]}, 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults/', parameters('vaultname'))]\", \"[resourceid('microsoft.storage/storageaccounts/', variables('storageaccountname'))]\", \"[resourceid('microsoft.operationalinsights/workspaces/', variables('omsworkspacename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template configures protection for an existing File Share present in an existing Storage Account.\n\n===\n\n", "completion": " {'condition': \"[parameters('isnewvault')]\", 'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2020-02-02', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'condition': \"[parameters('isnewpolicy')]\", 'type': 'microsoft.recoveryservices/vaults/backuppolicies', 'apiversion': '2020-02-02', 'name': \"[concat(parameters('vaultname'), '/', parameters('policyname'))]\", 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"], 'properties': {'backupmanagementtype': \"[variables('backupmanagementtype')]\", 'schedulepolicy': {'schedulerunfrequency': 'daily', 'scheduleruntimes': \"[variables('scheduleruntimes')]\", 'schedulepolicytype': 'simpleschedulepolicy'}, 'retentionpolicy': {'dailyschedule': {'retentiontimes': \"[variables('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('dailyretentiondurationcount')]\", 'durationtype': 'days'}}, 'weeklyschedule': {'daysoftheweek': \"[parameters('daysoftheweek')]\", 'retentiontimes': \"[variables('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('weeklyretentiondurationcount')]\", 'durationtype': 'weeks'}}, 'monthlyschedule': {'retentionscheduleformattype': 'daily', 'retentionscheduledaily': {'daysofthemonth': [{'date': 1, 'islast': false}]}, 'retentiontimes': \"[variables('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('monthlyretentiondurationcount')]\", 'durationtype': 'months'}}, 'yearlyschedule': {'retentionscheduleformattype': 'daily', 'monthsofyear': \"[parameters('monthsofyear')]\", 'retentionscheduledaily': {'daysofthemonth': [{'date': 1, 'islast': false}]}, 'retentiontimes': \"[variables('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('yearlyretentiondurationcount')]\", 'durationtype': 'years'}}, 'retentionpolicytype': 'longtermretentionpolicy'}, 'timezone': \"[parameters('timezone')]\", 'workloadtype': 'azurefileshare'}}{'condition': \"[parameters('registerstorageaccount')]\", 'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers', 'apiversion': '2020-02-02', 'name': \"[concat(parameters('vaultname'), '/', variables('backupfabric'), '/storagecontainer;storage;', parameters('existingresourcegroupname'), ';', parameters('existingstorageaccountname'))]\", 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"], 'properties': {'backupmanagementtype': \"[variables('backupmanagementtype')]\", 'containertype': 'storagecontainer', 'sourceresourceid': \"[resourceid(parameters('existingresourcegroupname'), 'microsoft.storage/storageaccounts', parameters('existingstorageaccountname'))]\"}}{'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems', 'apiversion': '2020-02-02', 'name': \"[concat(parameters('vaultname'), '/', variables('backupfabric'), '/storagecontainer;storage;', parameters('existingresourcegroupname'), ';', parameters('existingstorageaccountname'), '/azurefileshare;', parameters('existingfilesharename'))]\", 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers', parameters('vaultname'), variables('backupfabric'), concat('storagecontainer;storage;', parameters('existingresourcegroupname'), ';', parameters('existingstorageaccountname')))]\", \"[resourceid('microsoft.recoveryservices/vaults/backuppolicies', parameters('vaultname'), parameters('policyname'))]\", \"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"], 'properties': {'protecteditemtype': 'azurefileshareprotecteditem', 'sourceresourceid': \"[resourceid(parameters('existingresourcegroupname'), 'microsoft.storage/storageaccounts', parameters('existingstorageaccountname'))]\", 'policyid': \"[resourceid('microsoft.recoveryservices/vaults/backuppolicies', parameters('vaultname'), parameters('policyname'))]\", 'isinlineinquiry': true}} END"}
{"prompt": "\n\n###\n\nThis template creates a Recovery Services vault that will be used further for Backup and Site Recovery.\n\n===\n\n", "completion": " {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2020-02-02', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('skuname')]\", 'tier': \"[variables('skutier')]\"}, 'properties': {}}{'type': 'microsoft.recoveryservices/vaults/backupstorageconfig', 'apiversion': '2020-02-02', 'name': \"[format('{0}/{1}', parameters('vaultname'), 'vaultstorageconfig')]\", 'properties': {'storagemodeltype': \"[parameters('vaultstoragetype')]\", 'crossregionrestoreflag': \"[parameters('enablecrr')]\"}, 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Recovery Services Vault without any advanced features or additional resources.\n\n===\n\n", "completion": " {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2020-10-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'properties': {}, 'sku': {'name': 'rs0', 'tier': 'standard'}} END"}
{"prompt": "\n\n###\n\nThis template creates a Backup Policy for Recovery Services Vault to protect Azure IaasVMs\n\n===\n\n", "completion": " {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2020-10-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'apiversion': '2016-06-01', 'name': \"[format('{0}/{1}', parameters('vaultname'), parameters('policyname'))]\", 'type': 'microsoft.recoveryservices/vaults/backuppolicies', 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"], 'location': \"[parameters('location')]\", 'properties': {'backupmanagementtype': 'azureiaasvm', 'instantrpretentionrangeindays': \"[parameters('instantrpretentionrangeindays')]\", 'schedulepolicy': {'schedulerunfrequency': 'daily', 'scheduleruntimes': \"[parameters('scheduleruntimes')]\", 'schedulepolicytype': 'simpleschedulepolicy'}, 'retentionpolicy': {'dailyschedule': {'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('dailyretentiondurationcount')]\", 'durationtype': 'days'}}, 'weeklyschedule': {'daysoftheweek': \"[parameters('daysoftheweek')]\", 'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('weeklyretentiondurationcount')]\", 'durationtype': 'weeks'}}, 'monthlyschedule': {'retentionscheduleformattype': 'daily', 'retentionscheduledaily': {'daysofthemonth': [{'date': 1, 'islast': false}]}, 'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('monthlyretentiondurationcount')]\", 'durationtype': 'months'}}, 'yearlyschedule': {'retentionscheduleformattype': 'daily', 'monthsofyear': \"[parameters('monthsofyear')]\", 'retentionscheduledaily': {'daysofthemonth': [{'date': 1, 'islast': false}]}, 'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('yearlyretentiondurationcount')]\", 'durationtype': 'years'}}, 'retentionpolicytype': 'longtermretentionpolicy'}, 'timezone': \"[parameters('timezone')]\"}} END"}
{"prompt": "\n\n###\n\nThis template configures protection for classic and ARM based Azure IaaSVMs.\n\n===\n\n", "completion": " {'name': \"[concat(parameters('existingrecoveryservicesvaultname'), '/', variables('backupfabric'), '/', parameters('existingprotectioncontainers')[copyindex()], '/', parameters('existingprotectableitems')[copyindex()])]\", 'apiversion': '2016-06-01', 'location': \"[parameters('location')]\", 'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems', 'copy': {'name': 'protecteditemscopy', 'count': \"[length(parameters('existingprotectableitems'))]\"}, 'properties': {'protecteditemtype': \"[variables('protecteditemtype')]\", 'policyid': \"[resourceid('microsoft.recoveryservices/vaults/backuppolicies', parameters('existingrecoveryservicesvaultname'), parameters('existingbackuppolicyname'))]\", 'sourceresourceid': \"[parameters('existingsourceresourceids')[copyindex()]]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a Recovery Services Vault and a Workload specific Backup Policy. Registers VM with Backup service and Configures Protection\n\n===\n\n", "completion": " {'condition': \"[parameters('isnewvault')]\", 'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2018-01-10', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('skuname')]\", 'tier': \"[variables('skutier')]\"}, 'properties': {}}{'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers', 'apiversion': '2018-01-10', 'name': \"[concat(parameters('vaultname'), '/', variables('backupfabric'), '/', variables('containertype'), ';compute;', parameters('vmresourcegroup'),';',parameters('vmname'))]\", 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults/', parameters('vaultname'))]\"], 'properties': {'containertype': \"[variables('containertype')]\", 'backupmanagementtype': \"[variables('backupmanagementtype')]\", 'workloadtype': \"[parameters('workloadtype')]\", 'friendlyname': \"[parameters('vmname')]\", 'sourceresourceid': \"[resourceid(parameters('vmresourcegroup'),'microsoft.compute/virtualmachines', parameters('vmname'))]\"}}{'condition': \"[parameters('isnewpolicy')]\", 'type': 'microsoft.recoveryservices/vaults/backuppolicies', 'apiversion': '2018-01-10', 'name': \"[concat(parameters('vaultname'), '/', parameters('policyname'))]\", 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults/', parameters('vaultname'))]\"], 'properties': {'backupmanagementtype': \"[variables('backupmanagementtype')]\", 'workloadtype': \"[parameters('workloadtype')]\", 'settings': {'timezone': 'utc', 'issqlcompression': false, 'iscompression': false}, 'subprotectionpolicy': [{'policytype': 'full', 'schedulepolicy': {'schedulepolicytype': 'simpleschedulepolicy', 'schedulerunfrequency': 'daily', 'scheduleruntimes': ['2019-03-24t16:00:00z'], 'scheduleweeklyfrequency': 0}, 'retentionpolicy': {'retentionpolicytype': 'longtermretentionpolicy', 'dailyschedule': {'retentiontimes': ['2019-03-24t16:00:00z'], 'retentionduration': {'count': 30, 'durationtype': 'days'}}}}, {'policytype': 'log', 'schedulepolicy': {'schedulepolicytype': 'logschedulepolicy', 'schedulefrequencyinmins': 60}, 'retentionpolicy': {'retentionpolicytype': 'simpleretentionpolicy', 'retentionduration': {'count': 30, 'durationtype': 'days'}}}]}}{'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems', 'apiversion': '2018-01-10', 'name': \"[concat(parameters('vaultname'), '/', variables('backupfabric'), '/', variables('containertype'), ';compute;', parameters('vmresourcegroup'),';',parameters('vmname'), '/', parameters('workloadtype'), ';', parameters('databaseinstancename'), ';', parameters('databasename'))]\", 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\", \"[resourceid('microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers', parameters('vaultname'), variables('backupfabric'), concat(variables('containertype'), ';compute;', parameters('vmresourcegroup'),';',parameters('vmname')))]\"], 'properties': {'backupmanagementtype': \"[variables('backupmanagementtype')]\", 'workloadtype': \"[parameters('workloadtype')]\", 'protecteditemtype': \"[parameters('protecteditemtype')]\", 'friendlyname': \"[parameters('databasename')]\", 'policyid': \"[resourceid('microsoft.recoveryservices/vaults/backuppolicies', parameters('vaultname'), parameters('policyname'))]\"}} END"}
{"prompt": "\n\n###\n\nThis template configures backup of VMs from same Resource Group\n\n===\n\n", "completion": " {'name': \"[concat(parameters('existingrecoveryservicesvault'), '/', variables('backupfabric'), '/', variables('v2vmcontainer'), concat(parameters('existingvirtualmachinesresourcegroup'),';',parameters('existingvirtualmachines')[copyindex()]), '/', variables('v2vm'), concat(parameters('existingvirtualmachinesresourcegroup'),';',parameters('existingvirtualmachines')[copyindex()]))]\", 'apiversion': '2016-06-01', 'location': \"[parameters('location')]\", 'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems', 'copy': {'name': 'v2vmscopy', 'count': \"[length(parameters('existingvirtualmachines'))]\"}, 'properties': {'protecteditemtype': \"[variables('v2vmtype')]\", 'policyid': \"[resourceid('microsoft.recoveryservices/vaults/backuppolicies',parameters('existingrecoveryservicesvault'),parameters('existingbackuppolicy') )]\", 'sourceresourceid': \"[resourceid(subscription().subscriptionid,parameters('existingvirtualmachinesresourcegroup'),'microsoft.compute/virtualmachines',parameters('existingvirtualmachines')[copyindex()])]\"}} END"}
{"prompt": "\n\n###\n\nThis template takes a minimum amount of parameters and deploys a Windows VM and configures backup protection.\n\n===\n\n", "completion": " {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2020-02-02', 'name': \"[variables('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'type': 'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems', 'apiversion': '2020-02-02', 'name': \"[format('{0}/{1}/{2}/{3}', variables('vaultname'), variables('backupfabric'), variables('protectioncontainer'), variables('protecteditem'))]\", 'properties': {'protecteditemtype': 'microsoft.compute/virtualmachines', 'policyid': \"[format('{0}/backuppolicies/{1}', resourceid('microsoft.recoveryservices/vaults', variables('vaultname')), variables('backuppolicyname'))]\", 'sourceresourceid': \"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"}, 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', variables('vaultname'))]\", \"[resourceid('microsoft.compute/virtualmachines', variables('vmname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Recovery Services Vault with backup policies configured\n\n===\n\n", "completion": " {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2021-06-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'identity': {'type': \"[if(parameters('enablesystemidentity'), 'systemassigned', 'none')]\"}, 'properties': {}, 'sku': {'name': \"[parameters('sku')]\", 'tier': 'standard'}}{'copy': {'name': 'backuppolicy', 'count': \"[length(parameters('backuppolicies'))]\"}, 'type': 'microsoft.recoveryservices/vaults/backuppolicies', 'apiversion': '2021-06-01', 'name': \"[format('{0}/{1}', parameters('vaultname'), parameters('backuppolicies')[copyindex()].policyname)]\", 'location': \"[parameters('location')]\", 'properties': \"[parameters('backuppolicies')[copyindex()].properties]\", 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"]}{'type': 'microsoft.recoveryservices/vaults/backupstorageconfig', 'apiversion': '2021-04-01', 'name': \"[format('{0}/vaultstorageconfig', parameters('vaultname'))]\", 'properties': {'crossregionrestoreflag': \"[parameters('enablecrossregionrestore')]\", 'storagetype': \"[parameters('storagetype')]\"}, 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Backup Policy for Recovery Services Vault to protect Azure IaasVMs\n\n===\n\n", "completion": " {'type': 'microsoft.recoveryservices/vaults', 'apiversion': '2020-10-01', 'name': \"[parameters('vaultname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'rs0', 'tier': 'standard'}, 'properties': {}}{'apiversion': '2016-06-01', 'name': \"[format('{0}/{1}', parameters('vaultname'), parameters('policyname'))]\", 'type': 'microsoft.recoveryservices/vaults/backuppolicies', 'dependson': [\"[resourceid('microsoft.recoveryservices/vaults', parameters('vaultname'))]\"], 'location': \"[parameters('location')]\", 'properties': {'backupmanagementtype': 'azureiaasvm', 'instantrpretentionrangeindays': 5, 'schedulepolicy': {'schedulerunfrequency': 'weekly', 'schedulerundays': \"[parameters('schedulerundays')]\", 'scheduleruntimes': \"[parameters('scheduleruntimes')]\", 'schedulepolicytype': 'simpleschedulepolicy'}, 'retentionpolicy': {'weeklyschedule': {'daysoftheweek': \"[parameters('schedulerundays')]\", 'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('weeklyretentiondurationcount')]\", 'durationtype': 'weeks'}}, 'monthlyschedule': {'retentionscheduleformattype': 'weekly', 'retentionscheduledaily': {'daysofthemonth': [{'date': 1, 'islast': false}]}, 'retentionscheduleweekly': {'daysoftheweek': \"[parameters('daysoftheweekformontlyretention')]\", 'weeksofthemonth': \"[parameters('weeksofthemonthformonthlyretention')]\"}, 'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('monthlyretentiondurationcount')]\", 'durationtype': 'months'}}, 'yearlyschedule': {'retentionscheduleformattype': 'weekly', 'monthsofyear': \"[parameters('monthsofyear')]\", 'retentionscheduledaily': {'daysofthemonth': [{'date': 1, 'islast': false}]}, 'retentionscheduleweekly': {'daysoftheweek': \"[parameters('daysoftheweekforyearlyretention')]\", 'weeksofthemonth': \"[parameters('weeksofthemonthforyearlyretention')]\"}, 'retentiontimes': \"[parameters('scheduleruntimes')]\", 'retentionduration': {'count': \"[parameters('yearlyretentiondurationcount')]\", 'durationtype': 'years'}}, 'retentionpolicytype': 'longtermretentionpolicy'}, 'timezone': \"[parameters('timezone')]\"}} END"}
{"prompt": "\n\n###\n\nThis template provides a way to deploy an Azure database for MariaDB with VNet integration.\n\n===\n\n", "completion": " {'type': 'microsoft.dbformariadb/servers/virtualnetworkrules', 'apiversion': '2018-06-01', 'name': \"[format('{0}/{1}', parameters('servername'), parameters('virtualnetworkrulename'))]\", 'properties': {'virtualnetworksubnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'ignoremissingvnetserviceendpoint': true}, 'dependson': [\"[resourceid('microsoft.dbformariadb/servers', parameters('servername'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\"]}{'type': 'microsoft.dbformariadb/servers', 'apiversion': '2018-06-01', 'name': \"[parameters('servername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'tier': \"[parameters('skutier')]\", 'capacity': \"[parameters('skucapacity')]\", 'size': \"[format('{0}', parameters('skusizemb'))]\", 'family': \"[parameters('skufamily')]\"}, 'properties': {'createmode': 'default', 'version': \"[parameters('mariadbversion')]\", 'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'storageprofile': {'storagemb': \"[parameters('skusizemb')]\", 'backupretentiondays': \"[parameters('backupretentiondays')]\", 'georedundantbackup': \"[parameters('georedundantbackup')]\"}}}{'copy': {'name': 'firewallrules', 'count': \"[length(variables('firewallrules'))]\", 'mode': 'serial', 'batchsize': 1}, 'type': 'microsoft.dbformariadb/servers/firewallrules', 'apiversion': '2018-06-01', 'name': \"[format('{0}/{1}', parameters('servername'), variables('firewallrules')[copyindex()].name)]\", 'properties': {'startipaddress': \"[variables('firewallrules')[copyindex()].startipaddress]\", 'endipaddress': \"[variables('firewallrules')[copyindex()].endipaddress]\"}, 'dependson': [\"[resourceid('microsoft.dbformariadb/servers', parameters('servername'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template uses Confidential Ledger to log to an immutable, tamper-proof ledger.\n\n===\n\n", "completion": " {'name': \"[parameters('ledgername')]\", 'type': 'microsoft.confidentialledger/ledgers', 'apiversion': '2020-12-01-preview', 'location': \"[parameters('location')]\", 'properties': {'ledgertype': 'public', 'aadbasedsecurityprincipals': [{'principalid': \"[parameters('principalid')]\", 'ledgerrolename': 'administrator'}]}} END"}
{"prompt": "\n\n###\n\nEnable Azure Sentinel\n\n===\n\n", "completion": " {'type': 'microsoft.operationsmanagement/solutions', 'apiversion': '2015-11-01-preview', 'name': \"[format('securityinsights({0})', parameters('workspacename'))]\", 'location': \"[parameters('location')]\", 'properties': {'workspaceresourceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('workspacename'))]\"}, 'plan': {'name': \"[format('securityinsights({0})', parameters('workspacename'))]\", 'product': 'omsgallery/securityinsights', 'publisher': 'microsoft', 'promotioncode': ''}, 'dependson': [\"[resourceid('microsoft.operationalinsights/workspaces', parameters('workspacename'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a Media Services Account with its Storage account using a template.\n\n===\n\n", "completion": " {'type': 'microsoft.media/mediaservices', 'apiversion': '2020-05-01', 'name': \"[parameters('mediaservicename')]\", 'location': \"[parameters('location')]\", 'properties': {'storageaccounts': [{'id': \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\", 'type': 'primary'}]}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure API for FHIR\u00ae.\n\n===\n\n", "completion": " {'type': 'microsoft.healthcareapis/services', 'apiversion': '2020-03-15', 'name': \"[parameters('servicename')]\", 'location': \"[parameters('location')]\", 'kind': 'fhir-r4', 'properties': {'authenticationconfiguration': {'audience': \"[concat('https://', parameters('servicename'), '.azurehealthcareapis.com')]\", 'authority': '[uri(environment().authentication.loginendpoint, subscription().tenantid)]'}}} END"}
{"prompt": "\n\n###\n\nThis template creates a Attestation provider that can be used for various attestation types like sgx, vsm enclaves.\n\n===\n\n", "completion": " {'type': 'microsoft.attestation/attestationproviders', 'apiversion': '2020-10-01', 'name': \"[parameters('attestationprovidername')]\", 'location': \"[parameters('location')]\", 'tags': \"[parameters('tags')]\", 'properties': \"[if(empty(parameters('policysigningcertificates')), json('{}'), variables('policysigningcertificates'))]\"} END"}
{"prompt": "\n\n###\n\nCreate a SQL Server Virtual Machine with performance optimized storage settings, using UltraSSD for SQL Log files\n\n===\n\n", "completion": " {'type': 'microsoft.sqlvirtualmachine/sqlvirtualmachines', 'apiversion': '2017-03-01-preview', 'name': \"[parameters('virtualmachinename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"], 'properties': {'virtualmachineresourceid': \"[resourceid('microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\", 'sqlmanagement': 'full', 'sqlserverlicensetype': 'payg', 'storageconfigurationsettings': {'diskconfigurationtype': \"[variables('diskconfigurationtype')]\", 'storageworkloadtype': \"[parameters('storageworkloadtype')]\", 'sqldatasettings': {'luns': \"[variables('datadisksluns')]\", 'defaultfilepath': \"[parameters('datapath')]\"}, 'sqllogsettings': {'luns': \"[variables('logdisksluns')]\", 'defaultfilepath': \"[parameters('logpath')]\"}, 'sqltempdbsettings': {'defaultfilepath': \"[variables('tempdbpath')]\"}}}} END"}
{"prompt": "\n\n###\n\nDeploy SQL Always ON setup with existing SQL Virtual Machines.\n\n===\n\n", "completion": " {'type': 'microsoft.sqlvirtualmachine/sqlvirtualmachines', 'apiversion': '2017-03-01-preview', 'name': \"[trim(variables('existingvmlistarray')[copyindex()])]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'sqlvirtualmachineloop', 'count': \"[length(variables('existingvmlistarray'))]\"}, 'properties': {'virtualmachineresourceid': \"[resourceid(parameters('existingvmresourcegroup'), 'microsoft.compute/virtualmachines', trim(variables('existingvmlistarray')[copyindex()]))]\", 'sqlserverlicensetype': \"[parameters('sqlserverlicensetype')]\"}}{'type': 'microsoft.sqlvirtualmachine/sqlvirtualmachinegroups', 'apiversion': '2017-03-01-preview', 'name': \"[parameters('failoverclustername')]\", 'location': \"[parameters('location')]\", 'properties': {'sqlimageoffer': \"[parameters('sqlserverimagetype')]\", 'sqlimagesku': 'enterprise', 'wsfcdomainprofile': {'domainfqdn': \"[parameters('existingfullyqualifieddomainname')]\", 'oupath': \"[parameters('existingoupath')]\", 'clusterbootstrapaccount': \"[parameters('existingdomainaccount')]\", 'clusteroperatoraccount': \"[parameters('existingdomainaccount')]\", 'sqlserviceaccount': \"[parameters('existingsqlserviceaccount')]\", 'storageaccounturl': \"[reference(resourceid('microsoft.storage/storageaccounts', parameters('cloudwitnessname')), '2018-07-01').primaryendpoints['blob']]\", 'storageaccountprimarykey': \"[listkeys(resourceid('microsoft.storage/storageaccounts', parameters('cloudwitnessname')), '2018-07-01').keys[0].value]\"}}} END"}
{"prompt": "\n\n###\n\nCreate a SQL Server Virtual Machine with performance optimized storage settings on PremiumSSD\n\n===\n\n", "completion": " {'type': 'microsoft.sqlvirtualmachine/sqlvirtualmachines', 'apiversion': '2017-03-01-preview', 'name': \"[parameters('virtualmachinename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"], 'properties': {'virtualmachineresourceid': \"[resourceid('microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\", 'sqlmanagement': 'full', 'sqlserverlicensetype': 'payg', 'storageconfigurationsettings': {'diskconfigurationtype': \"[variables('diskconfigurationtype')]\", 'storageworkloadtype': \"[parameters('storageworkloadtype')]\", 'sqldatasettings': {'luns': \"[variables('datadisksluns')]\", 'defaultfilepath': \"[parameters('datapath')]\"}, 'sqllogsettings': {'luns': \"[variables('logdisksluns')]\", 'defaultfilepath': \"[parameters('logpath')]\"}, 'sqltempdbsettings': {'defaultfilepath': \"[variables('tempdbpath')]\"}}}} END"}
{"prompt": "\n\n###\n\nCreate new Azure NetApp Files resource with SMB volume\n\n===\n\n", "completion": " {'type': 'microsoft.netapp/netappaccounts', 'apiversion': '2020-06-01', 'name': \"[parameters('netappaccountname')]\", 'location': \"[parameters('location')]\", 'properties': {'activedirectories': [{'username': \"[parameters('adusername')]\", 'password': \"[parameters('adpassword')]\", 'domain': \"[parameters('domainname')]\", 'dns': \"[parameters('dnsipaddress')]\", 'smbservername': \"[parameters('smbservername')]\"}]}}{'type': 'microsoft.netapp/netappaccounts/capacitypools', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('netappaccountname'),'/',parameters('netapppoolname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.netapp/netappaccounts', parameters('netappaccountname'))]\"], 'properties': {'servicelevel': \"[parameters('servicelevel')]\", 'size': \"[parameters('poolsizebytes')]\"}}{'type': 'microsoft.netapp/netappaccounts/capacitypools/volumes', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('netappaccountname'),'/',parameters('netapppoolname'),'/', parameters('netappvolumename'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.netapp/netappaccounts/capacitypools', parameters('netappaccountname'), parameters('netapppoolname'))]\", 'addsubnet'], 'properties': {'servicelevel': \"[parameters('servicelevel')]\", 'creationtoken': \"[parameters('netappvolumename')]\", 'usagethreshold': \"[parameters('volsizebytes')]\", 'subnetid': \"[resourceid(parameters('virtualnetworksubscriptionid'), parameters('virtualnetworkresourcegroupname'), 'microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('anfsubnetname'))]\"}} END"}
{"prompt": "\n\n###\n\nCreate new Azure NetApp Files resource with NFSV3 or NFSv4.1 volume\n\n===\n\n", "completion": " {'type': 'microsoft.netapp/netappaccounts', 'apiversion': '2020-06-01', 'name': \"[parameters('netappaccountname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'type': 'microsoft.netapp/netappaccounts/capacitypools', 'apiversion': '2020-06-01', 'name': \"[variables('capacitypoolname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.netapp/netappaccounts', parameters('netappaccountname'))]\"], 'properties': {'servicelevel': \"[parameters('servicelevel')]\", 'size': \"[parameters('poolsizebytes')]\"}}{'type': 'microsoft.netapp/netappaccounts/capacitypools/volumes', 'apiversion': '2020-06-01', 'name': \"[variables('volumename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.netapp/netappaccounts/capacitypools', parameters('netappaccountname'), parameters('netapppoolname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'servicelevel': \"[parameters('servicelevel')]\", 'creationtoken': \"[parameters('netappvolumename')]\", 'usagethreshold': \"[parameters('volsizebytes')]\", 'exportpolicy': {'rules': [{'ruleindex': 1, 'unixreadonly': \"[parameters('unixreadonly')]\", 'unixreadwrite': \"[parameters('unixreadwrite')]\", 'cifs': false, 'nfsv3': \"[if(equals( parameters('protocoltypes'), 'nfsv3'),bool('true'),bool('false'))]\", 'nfsv41': \"[if(equals(parameters('protocoltypes'), 'nfsv4.1'),bool('true'),bool('false'))]\", 'allowedclients': \"[parameters('allowedclients')]\"}]}, 'protocoltypes': [\"[parameters('protocoltypes')]\"], 'subnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'snapshotdirectoryvisible': \"[parameters('snapshotdirectoryvisible')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a vnet and a subnet hosting a Linux virtual machine that accesses a Event Hubs namespace with a private endpoint.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('eventhubsnamespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('eventhubsnamespacesku')]\", 'tier': \"[parameters('eventhubsnamespacesku')]\", 'capacity': \"[parameters('eventhubsnamespacecapacity')]\"}, 'properties': {'zoneredundant': \"[parameters('eventhubsnamespacezoneredundant')]\"}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('eventhubname')]\", 'type': 'eventhubs', 'dependson': [\"[variables('eventhubsnamespaceid')]\"], 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('consumergroupname')]\", 'type': 'consumergroups', 'dependson': [\"[parameters('eventhubname')]\"], 'properties': {'usermetadata': 'user metadata goes here'}}]}]} END"}
{"prompt": "\n\n###\n\nThis template creates a EventHub Basic/Standard namespace.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('eventhubnamespacenamesecondary')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('locationsecondarynamepsace')]\", 'sku': {'name': \"[parameters('eventhubsku')]\", 'tier': \"[parameters('eventhubsku')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'tags': {'tag1': 'value1', 'tag2': 'value2'}}{'apiversion': '2018-01-01-preview', 'name': \"[parameters('eventhubnamespacenameprimary')]\", 'type': 'microsoft.eventhub/namespaces', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('eventhubnamespacenamesecondary'))]\"], 'location': \"[parameters('locationprimarynamepsace')]\", 'sku': {'name': \"[parameters('eventhubsku')]\", 'tier': \"[parameters('eventhubsku')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'tags': {'tag1': 'value1', 'tag2': 'value2'}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('aliasname')]\", 'type': 'disasterrecoveryconfigs', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('eventhubnamespacenameprimary'))]\"], 'properties': {'partnernamespace': \"[resourceid('microsoft.eventhub/namespaces', parameters('eventhubnamespacenamesecondary'))]\"}}]} END"}
{"prompt": "\n\n###\n\nCreates a Event Hub cluster and namesapce in the cluster\n\n===\n\n", "completion": " {'type': 'microsoft.eventhub/clusters', 'apiversion': '2018-01-01-preview', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'dedicated', 'capacity': 1}}{'type': 'microsoft.eventhub/namespaces', 'apiversion': '2021-01-01-preview', 'name': \"[parameters('namespacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.eventhub/clusters', parameters('clustername'))]\"], 'sku': {'name': 'standard', 'tier': 'standard', 'capacity': 1}, 'properties': {'isautoinflateenabled': false, 'maximumthroughputunits': 0, 'clusterarmid': \"[resourceid('microsoft.eventhub/clusters', parameters('clustername'))]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates an Event Hubs namespace, an Event Hub, and a consumer group.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('namespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('eventhubsku')]\", 'tier': \"[parameters('eventhubsku')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'tags': {'tag1': 'value1', 'tag2': 'value2'}, 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('eventhubname')]\", 'type': 'eventhubs', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('namespacename'))]\"], 'properties': {}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('consumergroupname')]\", 'type': 'consumergroups', 'dependson': [\"[parameters('eventhubname')]\"], 'properties': {'usermetadata': 'user metadata goes here'}}]}]} END"}
{"prompt": "\n\n###\n\nCreates a EventHubs namespace, and an event hub.\n\n===\n\n", "completion": " {'type': 'microsoft.eventhub/namespaces', 'apiversion': '2018-01-01-preview', 'name': \"[variables('eventhubnamespacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('eventhubsku')]\", 'tier': \"[parameters('eventhubsku')]\", 'capacity': 1}, 'properties': {'isautoinflateenabled': false, 'maximumthroughputunits': 0}}{'type': 'microsoft.eventhub/namespaces/eventhubs', 'apiversion': '2017-04-01', 'name': \"[concat(variables('eventhubnamespacename'), '/', variables('eventhubname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.eventhub/namespaces', variables('eventhubnamespacename'))]\"], 'properties': {'messageretentionindays': 7, 'partitioncount': 1}} END"}
{"prompt": "\n\n###\n\nTurn on the auto-inflate on your namespace to automatically scale-up your throughput units \n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('namespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {'isautoinflateenabled': \"[parameters('isautoinflateenabled')]\", 'maximumthroughputunits': \"[parameters('maximumthroughputunits')]\"}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('eventhubname')]\", 'type': 'eventhubs', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('namespacename'))]\"], 'properties': {'messageretentionindays': \"[parameters('messageretentionindays')]\", 'partitioncount': \"[parameters('partitioncount')]\"}}]} END"}
{"prompt": "\n\n###\n\nCreates a Event Hub cluster, namesapce and eventhub in the cluster\n\n===\n\n", "completion": " {'type': 'microsoft.eventhub/clusters', 'apiversion': '2018-01-01-preview', 'name': \"[parameters('clustername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'dedicated', 'capacity': 1}}{'type': 'microsoft.eventhub/namespaces', 'apiversion': '2021-01-01-preview', 'name': \"[parameters('namespacename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard', 'capacity': 1}, 'dependson': [\"[resourceid('microsoft.eventhub/clusters', parameters('clustername'))]\"], 'properties': {'isautoinflateenabled': false, 'maximumthroughputunits': 0, 'clusterarmid': \"[resourceid('microsoft.eventhub/clusters', parameters('clustername'))]\"}}{'apiversion': '2021-01-01-preview', 'type': 'microsoft.eventhub/namespaces/eventhubs', 'name': \"[concat(parameters('namespacename'), '/', parameters('eventhubname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.eventhub/namespaces', parameters('namespacename'))]\"], 'properties': {'messageretentionindays': 7, 'partitioncount': 1}} END"}
{"prompt": "\n\n###\n\nThis template creates a Service Bus namespace and IP Filter rule\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('eventhubnamespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {}}{'apiversion': '2018-01-01-preview', 'name': \"[concat(parameters('eventhubnamespacename'), '/', parameters('ipfilterrulename'))]\", 'type': 'microsoft.eventhub/namespaces/ipfilterrules', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('eventhubnamespacename'))]\"], 'properties': {'filtername': \"[parameters('ipfilterrulename')]\", 'action': \"[parameters('ipfilteraction')]\", 'ipmask': \"[parameters('ipmask')]\"}} END"}
{"prompt": "\n\n###\n\nCreates a EventHubs namespace, an Event Hub with Capture enabled on it for Azure Storage as destination. Existing storage account resource id and container details are to be specified in the template.\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('eventhubnamespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('eventhubsku')]\", 'tier': \"[parameters('eventhubsku')]\", 'capacity': \"[parameters('skucapacity')]\"}, 'tags': {'tag1': 'value1', 'tag2': 'value2'}, 'properties': {'isautoinflateenabled': \"[parameters('isautoinflateenabled')]\", 'maximumthroughputunits': \"[parameters('maximumthroughputunits')]\"}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('eventhubname')]\", 'type': 'eventhubs', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('eventhubnamespacename'))]\"], 'properties': {'messageretentionindays': \"[parameters('messageretentionindays')]\", 'partitioncount': \"[parameters('partitioncount')]\", 'capturedescription': {'enabled': \"[parameters('captureenabled')]\", 'skipemptyarchives': false, 'encoding': \"[parameters('captureencodingformat')]\", 'intervalinseconds': \"[parameters('capturetime')]\", 'sizelimitinbytes': \"[parameters('capturesize')]\", 'destination': {'name': 'eventhubarchive.azureblockblob', 'properties': {'storageaccountresourceid': \"[parameters('existingstorageacctresourceid')]\", 'blobcontainer': \"[parameters('blobcontainername')]\", 'archivenameformat': \"[parameters('capturenameformat')]\"}}}}}]} END"}
{"prompt": "\n\n###\n\nCreates a EventHubs namespace, an Event Hub with Capture enabled on it for Azure Data Lake Store as destination.\n\n===\n\n", "completion": " {'apiversion': '2017-04-01', 'name': \"[parameters('eventhubnamespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': '[resourcegroup().location]', 'sku': {'name': 'standard', 'tier': 'standard'}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('eventhubname')]\", 'type': 'eventhubs', 'dependson': [\"[concat('microsoft.eventhub/namespaces/', parameters('eventhubnamespacename'))]\"], 'properties': {'path': \"[parameters('eventhubname')]\", 'capturedescription': {'enabled': true, 'skipemptyarchives': false, 'encoding': \"[parameters('captureencodingformat')]\", 'intervalinseconds': \"[parameters('capturetime')]\", 'sizelimitinbytes': \"[parameters('capturesize')]\", 'destination': {'name': 'eventhubarchive.azuredatalake', 'properties': {'datalakesubscriptionid': \"[parameters('subscriptionid')]\", 'datalakeaccountname': \"[parameters('datalakeaccountname')]\", 'datalakefolderpath': \"[parameters('datalakefolderpath')]\", 'archivenameformat': \"[parameters('capturenameformat')]\"}}}}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a Event Hubs namespace and virtual network rule\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('eventhubnamespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'properties': {}}{'apiversion': '2018-01-01-preview', 'name': \"[variables('namespacevirtualnetworkrulename')]\", 'type': 'microsoft.eventhub/namespaces/virtualnetworkrules', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('eventhubnamespacename'))]\"], 'properties': {'virtualnetworksubnetid': \"[variables('subnetid')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a EventHubs namespace, an Event Hub, a consumer group and authorizationRules\n\n===\n\n", "completion": " {'apiversion': '2018-01-01-preview', 'name': \"[parameters('namespacename')]\", 'type': 'microsoft.eventhub/namespaces', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'isautoinflateenabled': true, 'maximumthroughputunits': 7}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('eventhubname')]\", 'type': 'eventhubs', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('namespacename'))]\"], 'properties': {'messageretentionindays': 4, 'partitioncount': 4}, 'resources': [{'apiversion': '2017-04-01', 'name': \"[parameters('consumergroupname')]\", 'type': 'consumergroups', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/eventhubs/', parameters('namespacename'),parameters('eventhubname'))]\"], 'properties': {'usermetadata': 'user metadata'}}, {'apiversion': '2017-04-01', 'name': \"[parameters('eventhubauthorizationrulename')]\", 'type': 'authorizationrules', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/eventhubs/', parameters('namespacename'),parameters('eventhubname'))]\"], 'properties': {'rights': ['send', 'listen', 'manage']}}, {'apiversion': '2017-04-01', 'name': \"[parameters('eventhubauthorizationrulename1')]\", 'type': 'authorizationrules', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/eventhubs/', parameters('namespacename'),parameters('eventhubname'))]\"], 'properties': {'rights': ['send']}}]}]}{'apiversion': '2017-04-01', 'name': \"[concat(parameters('namespacename'), '/', parameters('namespaceauthorizationrulename'))]\", 'type': 'microsoft.eventhub/namespaces/authorizationrules', 'dependson': [\"[resourceid('microsoft.eventhub/namespaces/', parameters('namespacename'))]\"], 'properties': {'rights': ['send', 'listen', 'manage']}} END"}
{"prompt": "\n\n###\n\nCreates an Azure Storage account and a blob container that can be accessed using SFTP protocol. Access can be password or public-key based.\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {'ishnsenabled': true, 'islocaluserenabled': true, 'issftpenabled': true}}{'type': 'microsoft.storage/storageaccounts/blobservices/containers', 'apiversion': '2021-04-01', 'name': \"[format('{0}/default/{1}', parameters('storageaccountname'), parameters('homedirectory'))]\", 'properties': {'publicaccess': 'none'}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]}{'type': 'microsoft.storage/storageaccounts/localusers', 'apiversion': '2021-04-01', 'name': \"[format('{0}/{1}', parameters('storageaccountname'), parameters('username'))]\", 'properties': {'permissionscopes': [{'permissions': 'rcwdl', 'service': 'blob', 'resourcename': \"[parameters('homedirectory')]\"}], 'homedirectory': \"[parameters('homedirectory')]\", 'sshauthorizedkeys': \"[if(empty(parameters('publickey')), null(), createarray(createobject('description', format('{0} public key', parameters('username')), 'key', parameters('publickey'))))]\", 'hassharedkey': false}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure storage account and multiple blob containers. \n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'kind': 'storagev2', 'sku': {'name': 'standard_lrs'}, 'properties': {'accesstier': 'hot'}}{'copy': {'name': 'containers', 'count': '[length(range(0, 3))]'}, 'type': 'microsoft.storage/storageaccounts/blobservices/containers', 'apiversion': '2021-04-01', 'name': \"[format('{0}/default/{1}{2}', parameters('storageaccountname'), parameters('containerprefix'), range(0, 3)[copyindex()])]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Storage account and a blob container. Template originally authored by John Downs. (bicep)\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-06-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot'}}{'type': 'microsoft.storage/storageaccounts/blobservices/containers', 'apiversion': '2021-06-01', 'name': \"[format('{0}/default/{1}', parameters('storageaccountname'), parameters('containername'))]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a Storage Account with Storage Service Encryption for Data at Rest\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storage', 'properties': {'encryption': {'keysource': 'microsoft.storage', 'services': {'blob': {'enabled': \"[parameters('blobencryptionenabled')]\"}}}}} END"}
{"prompt": "\n\n###\n\nCreate a Standard Storage Account (bicep)\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-06-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccounttype')]\"}, 'kind': 'storagev2', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis template creates a vnet and a subnet hosting a Linux virtual machine that accesses an Azure File Share via a private endpoint.\n\n===\n\n", "completion": " {'apiversion': '2021-01-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('filestorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs', 'tier': 'standard'}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot', 'networkacls': {'defaultaction': \"[parameters('networkaclsdefaultaction')]\", 'bypass': 'azureservices'}, 'allowblobpublicaccess': \"[parameters('allowblobpublicaccess')]\"}}{'type': 'microsoft.storage/storageaccounts/fileservices/shares', 'apiversion': '2021-01-01', 'name': \"[concat(parameters('filestorageaccountname'), '/default/', parameters('filesharename'))]\", 'dependson': [\"[variables('filestorageaccountid')]\"], 'properties': {'sharequota': \"[parameters('sharequota')]\"}}{'apiversion': '2021-01-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('blobstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2', 'properties': {'accesstier': 'hot', 'networkacls': {'defaultaction': \"[parameters('networkaclsdefaultaction')]\", 'bypass': 'azureservices'}, 'allowblobpublicaccess': \"[parameters('allowblobpublicaccess')]\"}} END"}
{"prompt": "\n\n###\n\nDeploys a static website with a backing storage account\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'kind': 'storagev2', 'sku': {'name': \"[parameters('storagesku')]\"}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure Storage account with Advanced Threat Protection enabled.\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storageaccountreplication')]\"}, 'kind': 'storagev2', 'properties': {}} END"}
{"prompt": "\n\n###\n\nThis template creates a vnet and a subnet hosting a Linux virtual machine that accesses a storage account using a system-assigned managed identity with a contributor role and a private endpoint.\n\n===\n\n", "completion": " {'apiversion': '2019-06-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('adlsstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_ragrs'}, 'kind': 'storagev2'}{'apiversion': '2019-06-01', 'type': 'microsoft.storage/storageaccounts', 'name': \"[parameters('blobstorageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2'} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure storage account and multiple file shares.\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'kind': 'storagev2', 'sku': {'name': 'standard_lrs'}, 'properties': {'accesstier': 'hot'}}{'copy': {'name': 'fileshares', 'count': \"[length(range(0, parameters('sharecopy')))]\"}, 'type': 'microsoft.storage/storageaccounts/fileservices/shares', 'apiversion': '2021-04-01', 'name': \"[format('{0}/default/{1}{2}', parameters('storageaccountname'), parameters('shareprefix'), range(0, parameters('sharecopy'))[copyindex()])]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure storage account with file share.\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'kind': 'storagev2', 'sku': {'name': 'standard_lrs'}, 'properties': {'accesstier': 'hot'}}{'type': 'microsoft.storage/storageaccounts/fileservices/shares', 'apiversion': '2021-04-01', 'name': \"[format('{0}/default/{1}', parameters('storageaccountname'), parameters('filesharename'))]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template deploys a Storage Account with a customer-managed key for encryption that's generated and placed inside a Key Vault.\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard_lrs'}, 'kind': 'storagev2', 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[format('{0}', resourceid('microsoft.managedidentity/userassignedidentities', parameters('userassignedidentityname')))]\": {}}}, 'properties': {'accesstier': 'hot', 'supportshttpstrafficonly': true, 'minimumtlsversion': 'tls1_2', 'encryption': {'identity': {'userassignedidentity': \"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('userassignedidentityname'))]\"}, 'services': {'blob': {'enabled': true}}, 'keysource': 'microsoft.keyvault', 'keyvaultproperties': {'keyname': \"[parameters('keyvaultkeyname')]\", 'keyvaulturi': \"[if(endswith(reference(resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))).vaulturi, '/'), substring(reference(resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))).vaulturi, 0, sub(length(reference(resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))).vaulturi), 1)), reference(resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))).vaulturi)]\"}}}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\", \"[resourceid('microsoft.keyvault/vaults/keys', parameters('keyvaultname'), parameters('keyvaultkeyname'))]\", \"[resourceid('microsoft.managedidentity/userassignedidentities', parameters('userassignedidentityname'))]\"]} END"}
{"prompt": "\n\n###\n\nStorage Account with Storage Service Encryption and a blob deletion retention policy\n\n===\n\n", "completion": " {'type': 'microsoft.storage/storageaccounts', 'apiversion': '2021-04-01', 'name': \"[parameters('storageaccountname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('storagesku')]\"}, 'kind': \"[parameters('storagekind')]\", 'properties': {'accesstier': \"[parameters('storagetier')]\", 'encryption': {'keysource': 'microsoft.storage', 'services': {'blob': {'enabled': \"[parameters('blobencryptionenabled')]\"}}}}}{'type': 'microsoft.storage/storageaccounts/blobservices', 'apiversion': '2021-04-01', 'name': \"[format('{0}/{1}', parameters('storageaccountname'), 'default')]\", 'properties': {'deleteretentionpolicy': {'enabled': true, 'days': \"[parameters('deleteretentionpolicy')]\"}}, 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis sample will go into detail on how to extend existing Azure resources and Resource Manager templates to add in custom workloads.\n\n===\n\n", "completion": " {'type': 'microsoft.customproviders/associations', 'apiversion': '2018-09-01-preview', 'name': \"[parameters('associationname')]\", 'location': 'global', 'dependson': ['customproviderinfrastructuretemplate'], 'properties': {'targetresourceid': \"[if(empty(parameters('customresourceproviderid')), reference('customproviderinfrastructuretemplate').outputs.customproviderresourceid.value, parameters('customresourceproviderid'))]\", 'mycustominputproperty': 'mycustominputvalue', 'mycustominputobject': {'property1': 'value1'}}} END"}
{"prompt": "\n\n###\n\nThis sample shows how to add custom resources to Resource Manager Templates using custom providers and logic apps.\n\n===\n\n", "completion": " {'type': 'microsoft.customproviders/resourceproviders', 'apiversion': '2018-09-01-preview', 'name': \"[parameters('customresourceprovidername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.logic/workflows', parameters('logicappname'))]\"], 'properties': {'resourcetypes': [{'name': 'customresources', 'mode': 'secure', 'routingtype': 'webhook,cache', 'endpoint': \"[listcallbackurl(resourceid('microsoft.logic/workflows/triggers', parameters('logicappname'), 'customproviderwebhook'), '2019-05-01').value]\"}]}}{'type': 'microsoft.customproviders/resourceproviders/customresources', 'apiversion': '2018-09-01-preview', 'name': \"[concat(parameters('customresourceprovidername'), '/', parameters('customresourcename'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.customproviders/resourceproviders', parameters('customresourceprovidername'))]\"], 'properties': {'mycustominputproperty': 'mycustominputvalue', 'mycustominputobject': {'property1': 'value1'}}} END"}
{"prompt": "\n\n###\n\nThis template creates function app used as the workload for a custom resource provider in a template deployment.\n\n===\n\n", "completion": " {'condition': \"[parameters('deployfunction')]\", 'type': 'microsoft.customproviders/resourceproviders', 'apiversion': '2018-09-01-preview', 'name': \"[parameters('funcname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.web/sites', parameters('funcname'))]\"], 'properties': {'actions': [{'name': 'ping', 'routingtype': 'proxy', 'endpoint': \"[listsecrets(resourceid('microsoft.web/sites/functions', parameters('funcname'), 'httptrigger1'), '2020-06-01').trigger_url]\"}], 'resourcetypes': [{'name': 'customresources', 'routingtype': 'proxy', 'endpoint': \"[listsecrets(resourceid('microsoft.web/sites/functions', parameters('funcname'), 'httptrigger1'), '2020-06-01').trigger_url]\"}]}}{'type': 'microsoft.customproviders/resourceproviders/customresources', 'name': \"[concat(parameters('funcname'), '/', parameters('azurecustomresourcename'))]\", 'apiversion': '2018-09-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.customproviders/resourceproviders', parameters('funcname'))]\"], 'properties': {'hello': 'world', 'mycustomproperty': \"[parameters('mycustompropertyvalue')]\"}} END"}
{"prompt": "\n\n###\n\nThis template deploys a simple Setup for Azure Blockchain Service.\n\n===\n\n", "completion": " {'type': 'microsoft.blockchain/blockchainmembers', 'apiversion': '2018-06-01-preview', 'name': \"[parameters('bcmembername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'tier': \"[parameters('skutier')]\"}, 'tags': {'consortium': 'consortium'}, 'properties': {'protocol': 'quorum', 'consensus': 'default', 'password': \"[parameters('memberpassword')]\", 'validatornodessku': {'capacity': 1}, 'consortium': \"[parameters('consortiumname')]\", 'consortiummanagementaccountpassword': \"[parameters('consortiummanagementaccountpassword')]\", 'firewallrules': [{'rulename': 'allowall', 'startipaddress': '0.0.0.0', 'endipaddress': '255.255.255.255'}]}} END"}
{"prompt": "\n\n###\n\nThis sample creates and deploys a templateSpec.\n\n===\n\n", "completion": " {'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': \"[format('{0}-{1}-deployment', parameters('templatespecname'), parameters('templatespecversion'))]\", 'properties': {'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'diskname': {'value': 'disk-from-templatespec'}}, 'templatelink': {'id': \"[resourceid(parameters('templatespecsubscriptionid'), parameters('templatespecresourcegroupname'), 'microsoft.resources/templatespecs/versions', parameters('templatespecname'), parameters('templatespecversion'))]\"}}} END"}
{"prompt": "\n\n###\n\nThis template uses the deploymentScript resource to generate ssh keys and stores the private key in keyVault.\n\n===\n\n", "completion": " {'type': 'microsoft.resources/deploymentscripts', 'apiversion': '2020-10-01', 'name': \"[variables('scriptname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('roledefinitionname')]\"], 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[resourceid('microsoft.managedidentity/userassignedidentities', variables('identityname'))]\": {}}}, 'kind': 'azurecli', 'properties': {'forceupdatetag': \"[parameters('newguid')]\", 'azcliversion': '2.0.80', 'timeout': 'pt30m', 'retentioninterval': 'p1d', 'cleanuppreference': 'onsuccess', 'arguments': \"[parameters('passphrase')]\", 'primaryscripturi': \"[uri(parameters('_artifactslocation'), concat('new-key.sh', parameters('_artifactslocationsastoken')))]\"}}{'apiversion': '2019-09-01', 'name': 'storesshkeys', 'type': 'microsoft.resources/deployments', 'resourcegroup': \"[parameters('vaultresourcegroup')]\", 'subscriptionid': \"[parameters('vaultsubscriptionid')]\", 'properties': {'mode': 'incremental', 'expressionevaluationoptions': {'scope': 'inner'}, 'parameters': {'keys': {'value': \"[reference(variables('scriptname')).outputs.keyinfo]\"}, 'vaultname': {'value': \"[parameters('vaultname')]\"}, 'secretname': {'value': \"[parameters('secretname')]\"}}, 'template': {'$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymenttemplate.json#', 'contentversion': '1.0.0.0', 'parameters': {'keys': {'type': 'secureobject'}, 'vaultname': {'type': 'string'}, 'secretname': {'type': 'string'}}, 'resources': [{'name': \"[concat(parameters('vaultname'), '/', parameters('secretname'))]\", 'type': 'microsoft.keyvault/vaults/secrets', 'apiversion': '2019-09-01', 'properties': {'value': \"[parameters('keys').privatekey]\"}}]}}} END"}
{"prompt": "\n\n###\n\nThis sample contains a script to easily migrate template gallery templates to templateSpec resources.\n\n===\n\n", "completion": " {'type': 'microsoft.resources/deployments', 'apiversion': '2020-10-01', 'name': \"[concat('templatespec-', replace(last(split(parameters('templatespecfiles')[copyindex()], '/')), '.json', ''))]\", 'copy': {'name': 'templatespecloop', 'count': \"[length(parameters('templatespecfiles'))]\"}, 'properties': {'mode': 'incremental', 'parameters': {'location': {'value': \"[parameters('location')]\"}}, 'templatelink': {'relativepath': \"[concat(parameters('templatespecfiles')[copyindex()], parameters('_artifactslocationsastoken'))]\"}}} END"}
{"prompt": "\n\n###\n\nCreate a Power BI Embedded capacity\n\n===\n\n", "completion": " {'type': 'microsoft.powerbidedicated/capacities', 'apiversion': '2018-09-01-preview', 'name': \"[parameters('name')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('sku')]\"}, 'properties': {'administration': {'members': [\"[parameters('admin')]\"]}}} END"}
{"prompt": "\n\n###\n\nThis template provides a way to deploy an Azure database for MySQL with VNet integration.\n\n===\n\n", "completion": " {'type': 'microsoft.dbformysql/servers/virtualnetworkrules', 'apiversion': '2017-12-01', 'name': \"[format('{0}/{1}', parameters('servername'), parameters('virtualnetworkrulename'))]\", 'properties': {'virtualnetworksubnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'ignoremissingvnetserviceendpoint': true}, 'dependson': [\"[resourceid('microsoft.dbformysql/servers', parameters('servername'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\"]}{'type': 'microsoft.dbformysql/servers', 'apiversion': '2017-12-01', 'name': \"[parameters('servername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\", 'tier': \"[parameters('skutier')]\", 'capacity': \"[parameters('skucapacity')]\", 'size': \"[format('{0}', parameters('skusizemb'))]\", 'family': \"[parameters('skufamily')]\"}, 'properties': {'createmode': 'default', 'version': \"[parameters('mysqlversion')]\", 'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'storageprofile': {'storagemb': \"[parameters('skusizemb')]\", 'backupretentiondays': \"[parameters('backupretentiondays')]\", 'georedundantbackup': \"[parameters('georedundantbackup')]\"}}}{'copy': {'name': 'firewallrules', 'count': \"[length(variables('firewallrules'))]\", 'mode': 'serial', 'batchsize': 1}, 'type': 'microsoft.dbformysql/servers/firewallrules', 'apiversion': '2017-12-01', 'name': \"[format('{0}/{1}', parameters('servername'), variables('firewallrules')[copyindex()].name)]\", 'properties': {'startipaddress': \"[variables('firewallrules')[copyindex()].startipaddress]\", 'endipaddress': \"[variables('firewallrules')[copyindex()].endipaddress]\"}, 'dependson': [\"[resourceid('microsoft.dbformysql/servers', parameters('servername'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an account that provides public DNS record and allows to make REST API calls to Data Plane.\n\n===\n\n", "completion": " {'type': 'microsoft.deviceupdate/accounts', 'apiversion': '2020-03-01-preview', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\"} END"}
{"prompt": "\n\n###\n\nThis template creates an account, and an instance and a hub to link the instance with.\n\n===\n\n", "completion": " {'type': 'microsoft.deviceupdate/accounts', 'apiversion': '2020-03-01-preview', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\"}{'type': 'microsoft.deviceupdate/accounts/instances', 'apiversion': '2020-03-01-preview', 'name': \"[format('{0}/{1}', parameters('accountname'), parameters('instancename'))]\", 'location': \"[parameters('location')]\", 'properties': {'iothubs': [{'resourceid': \"[variables('iothubresourceid')]\", 'iothubconnectionstring': \"[format('hostname={0};sharedaccesskeyname={1};sharedaccesskey={2}', reference(variables('iothubresourceid'), '2021-03-31').hostname, variables('iothubkeyname'), listkeys(variables('iothubresourceid'), '2021-03-31').value[variables('iothubkeyindex')].primarykey)]\", 'eventhubconnectionstring': \"[format('endpoint={0};sharedaccesskeyname={1};sharedaccesskey={2};entitypath={3}', reference(variables('iothubresourceid'), '2021-03-31').eventhubendpoints.events.endpoint, variables('iothubkeyname'), listkeys(variables('iothubresourceid'), '2021-03-31').value[variables('iothubkeyindex')].primarykey, reference(variables('iothubresourceid'), '2021-03-31').eventhubendpoints.events.path)]\"}]}, 'dependson': [\"[resourceid('microsoft.deviceupdate/accounts', parameters('accountname'))]\", \"[resourceid('microsoft.devices/iothubs', parameters('iothubname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a Batch Account using a template and a storage account associated with the batch account.\n\n===\n\n", "completion": " {'type': 'microsoft.batch/batchaccounts', 'apiversion': '2020-05-01', 'name': \"[parameters('batchaccountname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"], 'tags': {'objectname': \"[parameters('batchaccountname')]\"}, 'properties': {'autostorage': {'storageaccountid': \"[resourceid('microsoft.storage/storageaccounts', variables('storageaccountname'))]\"}}} END"}
{"prompt": "\n\n###\n\nThis will add certificate under azure batch from keyvault pfx with password\n\n===\n\n", "completion": " {'name': \"[variables('certname')]\", 'type': 'microsoft.batch/batchaccounts/certificates', 'apiversion': '2021-01-01', 'properties': {'format': 'pfx', 'thumbprint': \"[parameters('certthumbprint')]\", 'thumbprintalgorithm': 'sha1', 'data': \"[parameters('certdata')]\", 'password': \"[parameters('certpassword')]\"}} END"}
{"prompt": "\n\n###\n\nDeploy a new Data Lake Analytics account on a new Data Lake Store account.\n\n===\n\n", "completion": " {'name': \"[parameters('adlstorename')]\", 'type': 'microsoft.datalakestore/accounts', 'location': \"[parameters('location')]\", 'apiversion': '2016-11-01', 'properties': {}} END"}
{"prompt": "\n\n###\n\nDeploy Azure Data Lake Store accounts with no data encryption.\n\n===\n\n", "completion": " {'type': 'microsoft.datalakestore/accounts', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'apiversion': '2016-11-01', 'properties': {'newtier': 'consumption', 'encryptionstate': 'disabled'}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure Data Lake Store account with data encryption using Data Lake for encryption key management.\n\n===\n\n", "completion": " {'type': 'microsoft.datalakestore/accounts', 'apiversion': '2016-11-01', 'name': \"[parameters('accountname')]\", 'location': \"[parameters('location')]\", 'properties': {'newtier': 'consumption', 'encryptionstate': 'enabled', 'encryptionconfig': {'type': 'servicemanaged'}}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure Data Lake Store account with data encryption using Azure Key Vault for encryption key management.\n\n===\n\n", "completion": " {'apiversion': '2016-11-01', 'name': \"[parameters('datalakestorename')]\", 'location': \"[parameters('location')]\", 'type': 'microsoft.datalakestore/accounts', 'properties': {'encryptionstate': 'enabled', 'encryptionconfig': {'type': 'usermanaged', 'keyvaultmetainfo': {'keyvaultresourceid': \"[resourceid(parameters('keyvaultresourcegroupname'), 'microsoft.keyvault/vaults', parameters('keyvaultname'))]\", 'encryptionkeyname': \"[parameters('keyname')]\", 'encryptionkeyversion': \"[parameters('keyversion')]\"}}}, 'identity': {'type': 'systemassigned'}} END"}
{"prompt": "\n\n###\n\nPerforms ETL job on data stored on blob.Also visualize real time data on PowerBI\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nCreate a new SQL logical server with Azure AD-only authentication and an Azure AD Administrator.\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2020-11-01-preview', 'name': \"[parameters('server')]\", 'location': \"[parameters('location')]\", 'properties': {'administrators': {'login': \"[parameters('aad_admin_name')]\", 'sid': \"[parameters('aad_admin_objectid')]\", 'tenantid': \"[parameters('aad_admin_tenantid')]\", 'principaltype': \"[parameters('aad_admin_type')]\", 'azureadonlyauthentication': \"[parameters('aad_only_auth')]\"}}} END"}
{"prompt": "\n\n###\n\nCreate a Virtual Network with two Subnets. One dedicated to SQL Managed Instances and other default for other resources\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template allows you to deploy an Azure SQL server with Auditing enabled to write audit logs to Event Hub\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2019-06-01-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('sqlservername')]\", 'properties': {'administratorlogin': \"[parameters('sqladministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqladministratorloginpassword')]\", 'version': '12.0'}, 'tags': {'displayname': \"[parameters('sqlservername')]\"}, 'resources': [{'type': 'databases', 'apiversion': '2019-06-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('sqlservername')]\"], 'name': 'master', 'properties': {}}, {'type': 'databases/providers/diagnosticsettings', 'name': \"[concat('master/microsoft.insights/',variables('diagnosticsettingsname'))]\", 'dependson': [\"[parameters('sqlservername')]\", \"[resourceid('microsoft.eventhub/namespaces', parameters('eventhubnamespacename'))]\", \"[resourceid('microsoft.sql/servers/databases', parameters('sqlservername'), 'master')]\"], 'apiversion': '2017-05-01-preview', 'properties': {'name': \"[variables('diagnosticsettingsname')]\", 'eventhubauthorizationruleid': \"[resourceid('microsoft.eventhub/namespaces/authorizationrules', parameters('eventhubnamespacename'), parameters('eventhubauthorizationrulename'))]\", 'eventhubname': \"[parameters('eventhubname')]\", 'logs': [{'category': 'sqlsecurityauditevents', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}, {'condition': \"[parameters('ismsdevopsauditenabled')]\", 'category': 'devopsoperationsaudit', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}]}}, {'apiversion': '2017-03-01-preview', 'type': 'auditingsettings', 'name': 'defaultauditingsettings', 'dependson': [\"[parameters('sqlservername')]\"], 'properties': {'state': 'enabled', 'isazuremonitortargetenabled': true}}, {'condition': \"[parameters('ismsdevopsauditenabled')]\", 'type': 'devopsauditingsettings', 'apiversion': '2020-08-01-preview', 'name': 'default', 'dependson': [\"[parameters('sqlservername')]\"], 'properties': {'state': 'enabled', 'isazuremonitortargetenabled': true}}]} END"}
{"prompt": "\n\n###\n\nDeploy Azure Sql Managed Instance (SQL MI) and configure diagnostic settings for sending logs and metrics. Logs and metrics are sent to Azure storage account, Azure Event Hub, and Azure Monitor.\n\n===\n\n", "completion": " {'type': 'microsoft.sql/managedinstances', 'apiversion': '2020-02-02-preview', 'name': \"[parameters('managedinstancename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[parameters('skuname')]\"}, 'identity': {'type': 'systemassigned'}, 'dependson': [\"[parameters('virtualnetworkname')]\"], 'properties': {'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'subnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'storagesizeingb': \"[parameters('storagesizeingb')]\", 'vcores': \"[parameters('vcores')]\", 'licensetype': \"[parameters('licensetype')]\"}} END"}
{"prompt": "\n\n###\n\nCreate a SQL logical server.\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'name': \"[parameters('servername')]\", 'location': \"[parameters('location')]\", 'identity': '[if(parameters(\\'enableads\\'), json(\\'{\"type\":\"systemassigned\"}\\'), json(\\'null\\'))]', 'properties': {'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'version': '12.0'}, 'resources': [{'condition': \"[parameters('allowazureips')]\", 'type': 'firewallrules', 'apiversion': '2020-02-02-preview', 'name': 'allowallwindowsazureips', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('servername'))]\"], 'properties': {'endipaddress': '0.0.0.0', 'startipaddress': '0.0.0.0'}}, {'condition': \"[parameters('enableads')]\", 'type': 'securityalertpolicies', 'apiversion': '2020-02-02-preview', 'name': 'default', 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('servername'))]\"], 'properties': {'state': 'enabled', 'emailaccountadmins': true}}, {'condition': \"[parameters('enableads')]\", 'type': 'vulnerabilityassessments', 'apiversion': '2020-02-02-preview', 'name': 'default', 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('servername'))]\", \"[resourceid('microsoft.sql/servers/securityalertpolicies', parameters('servername'), 'default')]\", \"[resourceid('microsoft.storage/storageaccounts', variables('storagename'))]\"], 'properties': {'storagecontainerpath': \"[if(parameters('enableads'), concat(reference(resourceid('microsoft.storage/storageaccounts', variables('storagename'))).primaryendpoints.blob, 'vulnerability-assessment'), json('null'))]\", 'recurringscans': {'isenabled': true, 'emailsubscriptionadmins': true}}}, {'type': 'connectionpolicies', 'apiversion': '2014-04-01', 'name': 'default', 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('servername'))]\"], 'properties': {'connectiontype': \"[parameters('connectiontype')]\"}}]} END"}
{"prompt": "\n\n###\n\nProvision a SQL Server with firewall and a SQL database with Transparent Data Encryption.\n\n===\n\n", "completion": " {'name': \"[variables('sqlservername')]\", 'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'sqlserver'}, 'properties': {'administratorlogin': \"[parameters('sqladministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqladministratorloginpassword')]\", 'version': '12.0'}, 'resources': [{'name': \"[variables('databasename')]\", 'type': 'databases', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'tags': {'displayname': 'database'}, 'properties': {'edition': \"[variables('databaseedition')]\", 'collation': \"[variables('databasecollation')]\", 'requestedserviceobjectivename': \"[variables('databaseserviceobjectivename')]\"}, 'dependson': [\"[variables('sqlservername')]\"], 'resources': [{'comments': 'transparent data encryption', 'name': 'current', 'type': 'transparentdataencryption', 'apiversion': '2017-03-01-preview', 'properties': {'status': \"[parameters('transparentdataencryption')]\"}, 'dependson': [\"[variables('databasename')]\"]}]}, {'name': 'allowallmicrosoftazureips', 'type': 'firewallrules', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'properties': {'endipaddress': '0.0.0.0', 'startipaddress': '0.0.0.0'}, 'dependson': [\"[variables('sqlservername')]\"]}]} END"}
{"prompt": "\n\n###\n\nDeploy an Azure SQL Server with Auditing enabled to write audit logs to Log Analytics\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2019-06-01-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('sqlservername')]\", 'properties': {'administratorlogin': \"[parameters('sqladministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqladministratorloginpassword')]\", 'version': '12.0'}, 'tags': {'displayname': \"[parameters('sqlservername')]\"}, 'resources': [{'type': 'databases', 'apiversion': '2017-03-01-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('sqlservername')]\"], 'name': 'master', 'properties': {}}, {'type': 'databases/providers/diagnosticsettings', 'name': \"[concat('master/microsoft.insights/',variables('diagnosticsettingsname'))]\", 'dependson': [\"[parameters('sqlservername')]\", \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\", \"[resourceid('microsoft.sql/servers/databases', parameters('sqlservername'), 'master')]\"], 'apiversion': '2017-05-01-preview', 'properties': {'name': \"[variables('diagnosticsettingsname')]\", 'workspaceid': \"[resourceid('microsoft.operationalinsights/workspaces', parameters('omsworkspacename'))]\", 'logs': [{'category': 'sqlsecurityauditevents', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}, {'condition': \"[parameters('ismsdevopsauditenabled')]\", 'category': 'devopsoperationsaudit', 'enabled': true, 'retentionpolicy': {'days': 0, 'enabled': false}}]}}, {'apiversion': '2017-03-01-preview', 'type': 'auditingsettings', 'name': 'defaultauditingsettings', 'dependson': [\"[resourceid('microsoft.sql/servers/', parameters('sqlservername'))]\"], 'properties': {'state': 'enabled', 'isazuremonitortargetenabled': true}}, {'condition': \"[parameters('ismsdevopsauditenabled')]\", 'type': 'devopsauditingsettings', 'apiversion': '2020-08-01-preview', 'name': 'default', 'dependson': [\"[parameters('sqlservername')]\"], 'properties': {'state': 'enabled', 'isazuremonitortargetenabled': true}}]} END"}
{"prompt": "\n\n###\n\nDeploy a new SQL Elastic Pool.\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('servername')]\", 'properties': {'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'version': '12.0'}}{'type': 'microsoft.sql/servers/elasticpools', 'apiversion': '2020-02-02-preview', 'dependson': [\"[resourceid('microsoft.sql/servers/', parameters('servername'))]\"], 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('servername'), '/', parameters('elasticpoolname'))]\", 'sku': {'name': \"[variables('skuname')]\", 'tier': \"[variables('skutier')]\", 'capacity': \"[parameters('capacity')]\"}, 'properties': {'perdatabasesettings': {'mincapacity': \"[parameters('databasecapacitymin')]\", 'maxcapacity': \"[parameters('databasecapacitymax')]\"}}}{'type': 'microsoft.sql/servers/databases', 'name': \"[concat(parameters('servername'), '/', parameters('databasesnames')[copyindex()])]\", 'location': \"[parameters('location')]\", 'apiversion': '2020-02-02-preview', 'dependson': [\"[resourceid('microsoft.sql/servers/', parameters('servername'))]\", \"[resourceid('microsoft.sql/servers/elasticpools', parameters('servername'), parameters('elasticpoolname'))]\"], 'sku': {'name': 'elasticpool', 'tier': \"[variables('skutier')]\", 'capacity': 0}, 'properties': {'collation': \"[parameters('databasecollation')]\", 'elasticpoolid': \"[resourceid('microsoft.sql/servers/elasticpools', parameters('servername'), parameters('elasticpoolname'))]\"}, 'copy': {'name': 'adddatabasesinelasticpool', 'count': \"[length(parameters('databasesnames'))]\"}}{'apiversion': '2020-02-02-preview', 'dependson': [\"[resourceid('microsoft.sql/servers/', parameters('servername'))]\"], 'location': \"[parameters('location')]\", 'name': \"[concat(parameters('servername'), '/', 'allowallwindowsazureips')]\", 'properties': {'endipaddress': '0.0.0.0', 'startipaddress': '0.0.0.0'}, 'type': 'microsoft.sql/servers/firewallrules'} END"}
{"prompt": "\n\n###\n\nDeploy Azure Sql Database Managed Instance (SQL MI) and Virtual network gateway configured for point-to-site connection inside the new virtual network.\n\n===\n\n", "completion": " {'type': 'microsoft.sql/managedinstances', 'apiversion': '2019-06-01-preview', 'dependson': [\"[parameters('virtualnetworkname')]\"], 'identity': {'type': 'systemassigned'}, 'location': \"[parameters('location')]\", 'name': \"[parameters('managedinstancename')]\", 'sku': {'name': \"[parameters('skuname')]\"}, 'properties': {'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'subnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'storagesizeingb': \"[parameters('storagesizeingb')]\", 'vcores': \"[parameters('vcores')]\", 'licensetype': \"[parameters('licensetype')]\"}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure SQL Server with Threat Detection enabled and a user-defined number of Azure SQL Databases with Threat Detection enabled, with an email address to receive alerts for each database.\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'location': \"[variables('databaseserverlocation')]\", 'name': \"[variables('databaseservername')]\", 'properties': {'administratorlogin': \"[variables('databaseserveradminlogin')]\", 'administratorloginpassword': \"[variables('databaseserveradminloginpassword')]\", 'version': '12.0'}, 'tags': {'displayname': \"[variables('databaseservername')]\"}}{'apiversion': '2020-02-02-preview', 'type': 'microsoft.sql/servers/databases', 'sku': {'name': 's0', 'tier': 'standard'}, 'kind': 'v12.0,user', 'location': \"[variables('databaseserverlocation')]\", 'name': \"[concat(string(variables('databaseservername')), '/', string(variables('databasenames')[copyindex()]))]\", 'dependson': [\"[resourceid('microsoft.sql/servers', variables('databaseservername'))]\"], 'tags': {'displayname': \"[variables('databaseservername')]\"}, 'copy': {'name': 'databasecopy', 'count': \"[length(variables('databasenames'))]\"}, 'properties': {}, 'resources': [{'apiversion': '2020-02-02-preview', 'type': 'securityalertpolicies', 'name': 'default', 'dependson': [\"[resourceid('microsoft.sql/servers/databases', variables('databaseservername'), variables('databasenames')[copyindex()])]\"], 'properties': {'state': 'enabled'}}]} END"}
{"prompt": "\n\n###\n\nCreate a SQL Server and Database\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2021-05-01-preview', 'name': \"[parameters('servername')]\", 'location': \"[parameters('location')]\", 'properties': {'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\"}}{'type': 'microsoft.sql/servers/databases', 'apiversion': '2021-05-01-preview', 'name': \"[format('{0}/{1}', parameters('servername'), parameters('sqldbname'))]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard', 'tier': 'standard'}, 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('servername'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates two Azure SQL servers, a database, and a failover group.\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'kind': 'v12.0', 'name': \"[parameters('sqlserverprimaryname')]\", 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'properties': {'administratorlogin': \"[parameters('sqlserverprimaryadminusername')]\", 'administratorloginpassword': \"[parameters('sqlserverprimaryadminpassword')]\", 'version': '12.0'}, 'resources': [{'apiversion': '2020-02-02-preview', 'type': 'failovergroups', 'name': \"[parameters('sqlfailovergroupname')]\", 'properties': {'servername': \"[parameters('sqlserverprimaryname')]\", 'partnerservers': [{'id': \"[resourceid('microsoft.sql/servers', parameters('sqlserversecondaryname'))]\"}], 'readwriteendpoint': {'failoverpolicy': 'automatic', 'failoverwithdatalossgraceperiodminutes': 60}, 'readonlyendpoint': {'failoverpolicy': 'disabled'}, 'databases': [\"[resourceid('microsoft.sql/servers/databases', parameters('sqlserverprimaryname'), variables('sqldatabasename'))]\"]}, 'dependson': [\"[parameters('sqlserverprimaryname')]\", \"[resourceid('microsoft.sql/servers/databases', parameters('sqlserverprimaryname'), variables('sqldatabasename'))]\", \"[resourceid('microsoft.sql/servers', parameters('sqlserversecondaryname'))]\"]}, {'name': \"[variables('sqldatabasename')]\", 'type': 'databases', 'apiversion': '2020-02-02-preview', 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('sqlserverprimaryname')]\"], 'properties': {'edition': \"[variables('sqldatabaseedition')]\", 'requestedserviceobjectivename': \"[variables('sqldatabaseserviceobjective')]\"}}]}{'type': 'microsoft.sql/servers', 'kind': 'v12.0', 'name': \"[parameters('sqlserversecondaryname')]\", 'apiversion': '2020-02-02-preview', 'location': \"[parameters('sqlserversecondaryregion')]\", 'properties': {'administratorlogin': \"[parameters('sqlserversecondaryadminusername')]\", 'administratorloginpassword': \"[parameters('sqlserversecondaryadminpassword')]\", 'version': '12.0'}} END"}
{"prompt": "\n\n###\n\nDeploy Azure Sql Database Managed Instance (SQL MI) and JumpBox with SSMS inside new Virtual Network\n\n===\n\n", "completion": " {'type': 'microsoft.sql/managedinstances', 'apiversion': '2019-06-01-preview', 'dependson': [\"[parameters('virtualnetworkname')]\"], 'identity': {'type': 'systemassigned'}, 'location': \"[parameters('location')]\", 'name': \"[parameters('managedinstancename')]\", 'sku': {'name': \"[parameters('skuname')]\"}, 'properties': {'administratorlogin': \"[parameters('administratorlogin')]\", 'administratorloginpassword': \"[parameters('administratorloginpassword')]\", 'subnetid': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\", 'storagesizeingb': \"[parameters('storagesizeingb')]\", 'vcores': \"[parameters('vcores')]\", 'licensetype': \"[parameters('licensetype')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a SQL Server and a Dedicated SQL pool (formerly SQL DW) with Transparent Data Encryption.\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2021-05-01-preview', 'name': \"[parameters('sqlservername')]\", 'location': \"[parameters('location')]\", 'kind': 'v12.0', 'properties': {'administratorlogin': \"[parameters('sqladministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqladministratorpassword')]\", 'version': '12.0', 'publicnetworkaccess': 'enabled', 'restrictoutboundnetworkaccess': 'disabled'}}{'type': 'microsoft.sql/servers/databases', 'apiversion': '2021-05-01-preview', 'name': \"[concat(parameters('sqlservername'), concat('/', parameters('databasesname')))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.sql/servers', parameters('sqlservername'))]\"], 'sku': {'name': 'datawarehouse', 'tier': 'datawarehouse', 'capacity': \"[parameters('capacity')]\"}, 'kind': 'v12.0,user,datawarehouse,gen2', 'properties': {'collation': \"[parameters('databasecollation')]\", 'catalogcollation': \"[parameters('databasecollation')]\", 'readscale': 'disabled', 'requestedbackupstorageredundancy': 'geo', 'isledgeron': false}}{'type': 'microsoft.sql/servers/databases/transparentdataencryption', 'apiversion': '2021-05-01-preview', 'name': \"[concat(parameters('sqlservername'), concat(concat('/', parameters('databasesname')), '/current'))]\", 'dependson': [\"[resourceid('microsoft.sql/servers/databases', parameters('sqlservername'), parameters('databasesname'))]\", \"[resourceid('microsoft.sql/servers', parameters('sqlservername'))]\"], 'properties': {'state': \"[parameters('transparentdataencryption')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a private endpoint, Private DNS Zone and a virtual machine to test the private connection to an Azure SQL Server \n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2020-02-02-preview', 'name': \"[variables('sqlservername')]\", 'location': \"[parameters('location')]\", 'kind': 'v12.0', 'tags': {'displayname': \"[variables('sqlservername')]\"}, 'properties': {'administratorlogin': \"[parameters('sqladministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqladministratorloginpassword')]\", 'version': '12.0', 'publicnetworkaccess': 'disabled'}, 'resources': []}{'type': 'microsoft.sql/servers/databases', 'apiversion': '2020-02-02-preview', 'name': \"[variables('databasename')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'basic', 'tier': 'basic', 'capacity': 5}, 'dependson': [\"[resourceid('microsoft.sql/servers', variables('sqlservername'))]\"], 'tags': {'displayname': \"[variables('databasename')]\"}, 'properties': {'collation': 'sql_latin1_general_cp1_ci_as', 'edition': 'basic', 'maxsizebytes': 104857600, 'requestedserviceobjectivename': 'basic', 'samplename': 'adventureworkslt'}} END"}
{"prompt": "\n\n###\n\nDeploy an Azure SQL Server with Auditing enabled to write audit logs to a blob storage\n\n===\n\n", "completion": " {'type': 'microsoft.sql/servers', 'apiversion': '2020-08-01-preview', 'location': \"[parameters('location')]\", 'name': \"[parameters('sqlservername')]\", 'identity': '[if(parameters(\\'isstoragebehindvnet\\'), json(\\'{\"type\":\"systemassigned\"}\\'), json(\\'null\\'))]', 'properties': {'administratorlogin': \"[parameters('sqladministratorlogin')]\", 'administratorloginpassword': \"[parameters('sqladministratorloginpassword')]\", 'version': '12.0'}, 'tags': {'displayname': \"[parameters('sqlservername')]\"}, 'resources': [{'type': 'auditingsettings', 'apiversion': '2019-06-01-preview', 'name': 'defaultauditingsettings', 'dependson': [\"[parameters('sqlservername')]\", \"[parameters('storageaccountname')]\", \"[extensionresourceid(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), 'microsoft.authorization/roleassignments/', variables('uniqueroleguid'))]\"], 'properties': {'state': 'enabled', 'storageendpoint': \"[reference(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2019-06-01').primaryendpoints.blob]\", 'storageaccountaccesskey': \"[if(parameters('isstoragebehindvnet'), json('null'), listkeys(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2019-06-01').keys[0].value)]\", 'storageaccountsubscriptionid': '[subscription().subscriptionid]', 'isstoragesecondarykeyinuse': false}}, {'condition': \"[parameters('ismsdevopsauditenabled')]\", 'type': 'devopsauditingsettings', 'apiversion': '2020-08-01-preview', 'name': 'default', 'dependson': [\"[parameters('sqlservername')]\", \"[parameters('storageaccountname')]\", \"[variables('uniqueroleguid')]\"], 'properties': {'state': 'enabled', 'storageendpoint': \"[reference(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2019-06-01').primaryendpoints.blob]\", 'storageaccountaccesskey': \"[if(parameters('isstoragebehindvnet'), json('null'), listkeys(resourceid('microsoft.storage/storageaccounts', parameters('storageaccountname')), '2019-06-01').keys[0].value)]\", 'storageaccountsubscriptionid': '[subscription().subscriptionid]', 'isstoragesecondarykeyinuse': false}}]} END"}
{"prompt": "\n\n###\n\nThis template creates a managed application that has a customized default view.\n\n===\n\n", "completion": " {'type': 'microsoft.solutions/applicationdefinitions', 'apiversion': '2019-07-01', 'name': \"[variables('managedapplicationdefinitionname')]\", 'location': \"[parameters('location')]\", 'properties': {'locklevel': \"[variables('locklevel')]\", 'description': \"[variables('description')]\", 'displayname': \"[variables('displayname')]\", 'packagefileuri': \"[variables('packagefileuri')]\"}}{'type': 'microsoft.solutions/applications', 'apiversion': '2019-07-01', 'name': \"[parameters('applicationname')]\", 'location': \"[parameters('location')]\", 'kind': 'servicecatalog', 'dependson': [\"[resourceid('microsoft.solutions/applicationdefinitions/',variables('managedapplicationdefinitionname'))]\"], 'properties': {'managedresourcegroupid': \"[variables('managedresourcegroupid')]\", 'applicationdefinitionid': \"[variables('applicationdefinitionresourceid')]\", 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'storageaccountname': {'value': \"[parameters('storageaccountname')]\"}, 'storageaccounttype': {'value': \"[parameters('storageaccounttype')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a managed application that deploys linked templates.\n\n===\n\n", "completion": " {'type': 'microsoft.solutions/applicationdefinitions', 'apiversion': '2019-07-01', 'name': \"[variables('managedapplicationdefinitionname')]\", 'location': \"[parameters('location')]\", 'properties': {'locklevel': \"[variables('locklevel')]\", 'description': \"[variables('description')]\", 'displayname': \"[variables('displayname')]\", 'packagefileuri': \"[variables('packagefileuri')]\"}}{'type': 'microsoft.solutions/applications', 'apiversion': '2019-07-01', 'name': \"[parameters('applicationname')]\", 'location': \"[parameters('location')]\", 'kind': 'servicecatalog', 'dependson': [\"[resourceid('microsoft.solutions/applicationdefinitions/',variables('managedapplicationdefinitionname'))]\"], 'properties': {'managedresourcegroupid': \"[variables('managedresourcegroupid')]\", 'applicationdefinitionid': \"[variables('applicationdefinitionresourceid')]\", 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'storageaccountname': {'value': \"[parameters('storageaccountname')]\"}, 'storageaccounttype': {'value': \"[parameters('storageaccounttype')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a managed application that has application metrics and alerts.\n\n===\n\n", "completion": " {'type': 'microsoft.solutions/applicationdefinitions', 'apiversion': '2019-07-01', 'name': \"[variables('applicationdefinitionname')]\", 'location': \"[parameters('location')]\", 'properties': {'locklevel': \"[variables('locklevel')]\", 'description': \"[variables('description')]\", 'displayname': \"[variables('displayname')]\", 'packagefileuri': \"[variables('packagefileuri')]\"}}{'type': 'microsoft.solutions/applications', 'apiversion': '2019-07-01', 'name': \"[parameters('applicationname')]\", 'location': \"[parameters('location')]\", 'kind': 'servicecatalog', 'dependson': [\"[variables('applicationdefinitionresourceid')]\"], 'properties': {'managedresourcegroupid': \"[variables('managedresourcegroupid')]\", 'applicationdefinitionid': \"[variables('applicationdefinitionresourceid')]\", 'parameters': {'location': {'value': \"[parameters('location')]\"}, 'storageaccountname': {'value': \"[parameters('storageaccountname')]\"}, 'storageaccounttype': {'value': \"[parameters('storageaccounttype')]\"}}}} END"}
{"prompt": "\n\n###\n\nThis template creates an App Service Plan, a Web App, a scheduler job collection and a job.\n\n===\n\n", "completion": " {'apiversion': '2016-03-01', 'type': 'microsoft.scheduler/jobcollections', 'name': \"[parameters('jobcollectionname')]\", 'location': \"[parameters('location')]\", 'properties': {'sku': \"[parameters('sku')]\"}, 'resources': [{'apiversion': '2016-03-01', 'type': 'jobs', 'name': \"[parameters('jobname')]\", 'dependson': [\"[resourceid('microsoft.scheduler/jobcollections/', parameters('jobcollectionname'))]\"], 'properties': {'state': 'enabled', 'action': {'type': 'http', 'request': {'uri': \"[concat('http://', reference(resourceid('microsoft.web/sites', parameters('webappname'))).hostnames[0])]\", 'method': 'get', 'retrypolicy': {'retrytype': 'none'}}}, 'recurrence': {'interval': 1, 'frequency': 'week', 'schedule': {'weekdays': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'], 'hours': [10, 12], 'minutes': [0, 30]}}}}]} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway with Public IP\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}, {'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate Testing environment for Firewall Premium (IDPS,TLS Inspection,Web Categories)\n\n===\n\n", "completion": " {'type': 'microsoft.network/routetables', 'apiversion': '2020-05-01', 'name': 'workerroute', 'location': \"[parameters('location')]\", 'properties': {'routes': [{'name': 'workerroutefirewall', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('firewallprivateipaddress')]\"}}], 'disablebgproutepropagation': false}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-07-01', 'name': 'demovnet', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables', 'workerroute')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressspace')]\"]}, 'subnets': [{'name': 'workersubnet', 'properties': {'addressprefix': \"[variables('workeraddressspace')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', 'workerroute')]\"}}}, {'name': 'azurebastionsubnet', 'properties': {'addressprefix': \"[variables('bastionaddressspace')]\"}}, {'name': 'azurefirewallsubnet', 'properties': {'addressprefix': \"[variables('firewalladdressspace')]\"}}]}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-07-01', 'name': 'workernic', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', 'demovnet')]\"], 'properties': {'ipconfigurations': [{'name': 'workeripconfiguration', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', 'demovnet', 'workersubnet')]\"}, 'privateipallocationmethod': 'static', 'privateipaddress': \"[variables('workerprivateipaddress')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-07-01', 'name': 'bastionpublicip', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/bastionhosts', 'apiversion': '2020-07-01', 'name': 'demobastion', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', 'demovnet')]\", \"[resourceid('microsoft.network/publicipaddresses', 'bastionpublicip')]\"], 'properties': {'ipconfigurations': [{'name': 'bastionipconfiguration', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', 'demovnet', 'azurebastionsubnet')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', 'bastionpublicip')]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-07-01', 'name': 'firewallpublicip', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/firewallpolicies', 'apiversion': '2020-07-01', 'name': 'demofirewallpolicy', 'location': \"[parameters('location')]\", 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[resourceid('microsoft.managedidentity/userassignedidentities', 'demoidentity')]\": {}}}, 'dependson': [\"[resourceid('microsoft.keyvault/vaults/secrets', variables('keyvaultname'), variables('keyvaultcasecretname'))]\", \"[resourceid('microsoft.managedidentity/userassignedidentities', 'demoidentity')]\"], 'properties': {'sku': {'tier': 'premium'}, 'transportsecurity': {'certificateauthority': {'name': \"[variables('keyvaultcasecretname')]\", 'keyvaultsecretid': \"[concat(reference(resourceid('microsoft.keyvault/vaults', variables('keyvaultname')), '2019-09-01').vaulturi, 'secrets/', variables('keyvaultcasecretname'), '/')]\"}}, 'intrusiondetection': {'mode': 'alert', 'configuration': {'signatureoverrides': [{'id': \"[parameters('sigoverrideparam1')]\", 'mode': 'deny'}, {'id': \"[parameters('sigoverrideparam2')]\", 'mode': 'alert'}], 'bypasstrafficsettings': [{'name': 'secretbypass', 'protocol': 'tcp', 'sourceaddresses': ['*'], 'destinationaddresses': ['1.1.1.1'], 'destinationports': ['80']}]}}}}{'type': 'microsoft.network/firewallpolicies/rulecollectiongroups', 'apiversion': '2020-07-01', 'name': 'demofirewallpolicy/policyrules', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/firewallpolicies', 'demofirewallpolicy')]\"], 'properties': {'priority': 200, 'rulecollections': [{'name': 'allowweb', 'priority': 101, 'rulecollectiontype': 'firewallpolicyfilterrulecollection', 'action': {'type': 'allow'}, 'rules': [{'ruletype': 'applicationrule', 'name': 'allowazure', 'protocols': [{'protocoltype': 'https', 'port': 443}], 'targetfqdns': ['*azure.com', '*microsoft.com'], 'sourceaddresses': ['*'], 'terminatetls': true}, {'ruletype': 'applicationrule', 'name': 'allownews', 'protocols': [{'protocoltype': 'https', 'port': 443}], 'webcategories': ['business', 'webbasedemail'], 'sourceaddresses': ['*'], 'terminatetls': true}]}, {'name': 'blockpage', 'priority': 100, 'rulecollectiontype': 'firewallpolicyfilterrulecollection', 'action': {'type': 'deny'}, 'rules': [{'ruletype': 'applicationrule', 'name': 'blockazureevents', 'protocols': [{'protocoltype': 'https', 'port': 443}], 'targeturls': ['azure.microsoft.com/en-us/community/events', 'azure.microsoft.com/en-us/community/events/*'], 'sourceaddresses': ['*'], 'terminatetls': true}]}]}}{'type': 'microsoft.network/azurefirewalls', 'apiversion': '2020-07-01', 'name': 'demofirewall', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', 'demovnet')]\", \"[resourceid('microsoft.network/publicipaddresses', 'firewallpublicip')]\", \"[resourceid('microsoft.network/firewallpolicies', 'demofirewallpolicy')]\", \"[resourceid('microsoft.network/firewallpolicies/rulecollectiongroups', 'demofirewallpolicy', 'policyrules')]\"], 'properties': {'ipconfigurations': [{'name': 'firewallipconfiguration', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', 'demovnet', 'azurefirewallsubnet')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', 'firewallpublicip')]\"}}}], 'firewallpolicy': {'id': \"[resourceid('microsoft.network/firewallpolicies', 'demofirewallpolicy')]\"}, 'sku': {'name': 'azfw_vnet', 'tier': 'premium'}}} END"}
{"prompt": "\n\n###\n\nLoad Balancer with Inbound NAT Rule\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforlbip')]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnetref')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), 'loadbalancerbackend')]\"}], 'loadbalancerinboundnatrules': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatrules', variables('loadbalancername'), 'rdp')]\"}]}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('loadbalancername')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid')]\"}}}], 'backendaddresspools': [{'name': 'loadbalancerbackend'}], 'inboundnatrules': [{'name': 'rdp', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid')]\"}, 'protocol': 'tcp', 'frontendport': 3389, 'backendport': 3389, 'enablefloatingip': false}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a DDoS protection plan and a virtual network. It also enables the DDoS protection plan for the virtual network.\n\n===\n\n", "completion": " {'type': 'microsoft.network/ddosprotectionplans', 'apiversion': '2020-11-01', 'name': \"[parameters('ddosprotectionplanname')]\", 'location': \"[parameters('location')]\"}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-11-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': 'default', 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}], 'enableddosprotection': \"[parameters('ddosprotectionplanenabled')]\", 'ddosprotectionplan': {'id': \"[resourceid('microsoft.network/ddosprotectionplans', parameters('ddosprotectionplanname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/ddosprotectionplans', parameters('ddosprotectionplanname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an AKS cluster with Application Gateway, Application Gateway Ingress Controller, Azure Container Registry, Log Analytics and Key Vault.\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('bastionpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('bastionsubnetnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowhttpsinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'internet', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'allowgatewaymanagerinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'gatewaymanager', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'allowloadbalancerinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'azureloadbalancer', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}, {'name': 'allowbastionhostcommunicationinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationportranges': ['8080', '5701'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 130, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportrange': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 1000, 'direction': 'inbound'}}, {'name': 'allowsshrdpoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportranges': ['22', '3389'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 100, 'direction': 'outbound'}}, {'name': 'allowazurecloudcommunicationoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportrange': '443', 'destinationaddressprefix': 'azurecloud', 'access': 'allow', 'priority': 110, 'direction': 'outbound'}}, {'name': 'allowbastionhostcommunicationoutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationportranges': ['8080', '5701'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 120, 'direction': 'outbound'}}, {'name': 'allowgetsessioninformationoutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'destinationportranges': ['80', '443'], 'access': 'allow', 'priority': 130, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 1000, 'direction': 'outbound'}}]}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionsubnetnsgid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'networksecuritygroupevent', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}, {'category': 'networksecuritygrouprulecounter', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}}]}{'apiversion': '2020-05-01', 'type': 'microsoft.network/bastionhosts', 'name': \"[parameters('bastionhostname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionpublicipaddressid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'subnet': {'id': \"[variables('bastionsubnetid')]\"}, 'publicipaddress': {'id': \"[variables('bastionpublicipaddressid')]\"}}}]}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionhostid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'bastionauditlogs', 'enabled': true}]}}]}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('vmnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('vmsubnetid')]\"}}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('vmsubnetnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowsshinbound', 'properties': {'priority': 100, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmsubnetnsgid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'networksecuritygroupevent', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}, {'category': 'networksecuritygrouprulecounter', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}}]}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vmsubnetnsgid')]\", \"[variables('bastionsubnetnsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('virtualnetworkaddressprefixes')]\"]}, 'subnets': [{'name': \"[parameters('akssubnetname')]\", 'properties': {'addressprefix': \"[parameters('akssubnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': \"[parameters('vmsubnetname')]\", 'properties': {'addressprefix': \"[parameters('vmsubnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[variables('vmsubnetnsgid')]\"}, 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': \"[parameters('applicationgatewaysubnetname')]\", 'properties': {'addressprefix': \"[parameters('applicationgatewaysubnetaddressprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': \"[variables('bastionsubnetname')]\", 'properties': {'addressprefix': \"[parameters('bastionsubnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[variables('bastionsubnetnsgid')]\"}}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('blobprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('keyvaultprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'condition': \"[equals(parameters('acrsku'), 'premium')]\", 'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('acrprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat(variables('blobprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('blobprivatednszoneid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('virtualnetworkid')]\"}}}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2018-09-01', 'name': \"[concat(variables('keyvaultprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('keyvaultprivatednszoneid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('virtualnetworkid')]\"}}}{'condition': \"[equals(parameters('acrsku'), 'premium')]\", 'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat(variables('acrprivatednszonename'), '/link_to_', tolower(parameters('virtualnetworkname')))]\", 'location': 'global', 'dependson': [\"[variables('acrprivatednszoneid')]\", \"[variables('virtualnetworkid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('virtualnetworkid')]\"}}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('blobstorageaccountprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkid')]\", \"[variables('blobstorageaccountid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('blobstorageaccountprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('blobstorageaccountid')]\", 'groupids': [\"[variables('blobstorageaccountprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('vmsubnetid')]\"}}, 'resources': [{'type': 'privatednszonegroups', 'apiversion': '2020-07-01', 'name': \"[variables('blobprivatednszonegroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('blobstorageaccountprivateendpointid')]\", \"[variables('blobprivatednszoneid')]\", \"[variables('blobstorageaccountprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('blobprivatednszoneid')]\"}}]}}]}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('keyvaultprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkid')]\", \"[variables('keyvaultid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('keyvaultprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('keyvaultid')]\", 'groupids': [\"[variables('keyvaultprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('vmsubnetid')]\"}}, 'resources': [{'type': 'privatednszonegroups', 'apiversion': '2020-07-01', 'name': \"[variables('keyvaultprivatednszonegroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('keyvaultid')]\", \"[variables('keyvaultprivatednszoneid')]\", \"[variables('keyvaultprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('keyvaultprivatednszoneid')]\"}}]}}]}{'condition': \"[equals(parameters('acrsku'), 'premium')]\", 'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('acrprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('virtualnetworkid')]\", \"[variables('acrid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('acrprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('acrid')]\", 'groupids': [\"[variables('acrprivateendpointgroupname')]\"]}}], 'subnet': {'id': \"[variables('vmsubnetid')]\"}}, 'resources': [{'condition': \"[equals(parameters('acrsku'), 'premium')]\", 'type': 'privatednszonegroups', 'apiversion': '2020-07-01', 'name': \"[variables('acrprivatednszonegroupname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('acrid')]\", \"[variables('acrprivatednszoneid')]\", \"[variables('acrprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('acrprivatednszoneid')]\"}}]}}]}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('applicationgatewaypublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/applicationgatewaywebapplicationfirewallpolicies', 'apiversion': '2020-06-01', 'name': \"[parameters('wafpolicyname')]\", 'location': \"[parameters('location')]\", 'properties': {'customrules': [{'name': 'blockme', 'priority': 1, 'ruletype': 'matchrule', 'action': 'block', 'matchconditions': [{'matchvariables': [{'variablename': 'querystring'}], 'operator': 'contains', 'negationconditon': false, 'matchvalues': ['blockme']}]}, {'name': 'blockevilbot', 'priority': 2, 'ruletype': 'matchrule', 'action': 'block', 'matchconditions': [{'matchvariables': [{'variablename': 'requestheaders', 'selector': 'user-agent'}], 'operator': 'contains', 'negationconditon': false, 'matchvalues': ['evilbot'], 'transforms': ['lowercase']}]}], 'policysettings': {'requestbodycheck': \"[parameters('wafpolicyrequestbodycheck')]\", 'maxrequestbodysizeinkb': \"[parameters('wafpolicymaxrequestbodysizeinkb')]\", 'fileuploadlimitinmb': \"[parameters('wafpolicyfileuploadlimitinmb')]\", 'mode': \"[parameters('wafpolicymode')]\", 'state': \"[parameters('wafpolicystate')]\"}, 'managedrules': {'managedrulesets': [{'rulesettype': \"[parameters('wafpolicyrulesettype')]\", 'rulesetversion': \"[parameters('wafpolicyrulesetversion')]\"}]}}}{'type': 'microsoft.network/applicationgateways', 'apiversion': '2020-05-01', 'name': \"[parameters('applicationgatewayname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('keyvaultid')]\", \"[variables('applicationgatewaypublicipaddressid')]\", \"[variables('virtualnetworkid')]\", \"[variables('wafpolicyid')]\"], 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[variables('applicationgatewayuserdefinedmanagedidentityid')]\": {}}}, 'zones': \"[parameters('applicationgatewayzones')]\", 'properties': {'sku': {'name': 'waf_v2', 'tier': 'waf_v2'}, 'gatewayipconfigurations': [{'name': \"[variables('applicationgatewayipconfigurationname')]\", 'properties': {'subnet': {'id': \"[variables('applicationgatewaysubnetid')]\"}}}], 'frontendipconfigurations': [{'name': \"[variables('applicationgatewayfrontendipconfigurationname')]\", 'properties': {'publicipaddress': {'id': \"[variables('applicationgatewaypublicipaddressid')]\"}}}], 'frontendports': [{'name': \"[variables('applicationgatewayfrontendportname')]\", 'properties': {'port': 80}}], 'autoscaleconfiguration': {'mincapacity': 0, 'maxcapacity': 10}, 'enablehttp2': false, 'probes': [{'name': 'defaulthttpprobe', 'properties': {'protocol': 'http', 'path': '/', 'interval': 30, 'timeout': 30, 'unhealthythreshold': 3, 'pickhostnamefrombackendhttpsettings': true, 'minservers': 0}}, {'name': 'defaulthttpsprobe', 'properties': {'protocol': 'https', 'path': '/', 'interval': 30, 'timeout': 30, 'unhealthythreshold': 3, 'pickhostnamefrombackendhttpsettings': true, 'minservers': 0}}], 'backendaddresspools': [{'name': \"[variables('applicationgatewaybackendaddresspoolname')]\"}], 'backendhttpsettingscollection': [{'name': \"[variables('applicationgatewaybackendhttpsettingsname')]\", 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': \"[variables('applicationgatewayhttplistenername')]\", 'properties': {'firewallpolicy': {'id': \"[variables('wafpolicyid')]\"}, 'frontendipconfiguration': {'id': \"[variables('applicationgatewayfrontendipconfigurationid')]\"}, 'frontendport': {'id': \"[variables('applicationgatewayfrontendportid')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': \"[variables('applicationgatewayrequestroutingrulename')]\", 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[variables('applicationgatewayhttplistenerid')]\"}, 'backendaddresspool': {'id': \"[variables('applicationgatewaybackendaddresspoolid')]\"}, 'backendhttpsettings': {'id': \"[variables('applicationgatewaybackendhttpsettingsid')]\"}}}], 'webapplicationfirewallconfiguration': {'enabled': true, 'firewallmode': \"[parameters('wafpolicymode')]\", 'rulesettype': \"[parameters('wafpolicyrulesettype')]\", 'rulesetversion': \"[parameters('wafpolicyrulesetversion')]\", 'requestbodycheck': \"[parameters('wafpolicyrequestbodycheck')]\", 'maxrequestbodysizeinkb': \"[parameters('wafpolicymaxrequestbodysizeinkb')]\", 'fileuploadlimitinmb': \"[parameters('wafpolicyfileuploadlimitinmb')]\"}, 'firewallpolicy': {'id': \"[variables('wafpolicyid')]\"}}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'dependson': [\"[variables('applicationgatewayid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'applicationgatewayaccesslog', 'enabled': true}, {'category': 'applicationgatewayperformancelog', 'enabled': true}, {'category': 'applicationgatewayfirewalllog', 'enabled': true}], 'metrics': [{'category': 'allmetrics', 'enabled': true}]}}]} END"}
{"prompt": "\n\n###\n\nRoute table with routes\n\n===\n\n", "completion": " {'type': 'microsoft.network/routetables', 'apiversion': '2021-02-01', 'name': \"[parameters('routetablename')]\", 'location': \"[parameters('location')]\", 'properties': {'copy': [{'name': 'routes', 'count': \"[length(parameters('routes'))]\", 'input': {'name': \"[parameters('routes')[copyindex('routes')].name]\", 'properties': {'addressprefix': \"[parameters('routes')[copyindex('routes')].addressprefix]\", 'hasbgpoverride': \"[if(contains(parameters('routes')[copyindex('routes')], 'hasbgpoverride'), parameters('routes')[copyindex('routes')].hasbgpoverride, null())]\", 'nexthopipaddress': \"[if(contains(parameters('routes')[copyindex('routes')], 'nexthopipaddress'), parameters('routes')[copyindex('routes')].nexthopipaddress, null())]\", 'nexthoptype': \"[parameters('routes')[copyindex('routes')].nexthoptype]\"}}}], 'disablebgproutepropagation': \"[parameters('disablebgproutepropagation')]\"}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[parameters('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'sslcertificates': [{'name': 'appgatewaysslcert', 'properties': {'data': \"[parameters('certdata')]\", 'password': \"[parameters('certpassword')]\"}}], 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendhttpport1', 'properties': {'port': 80}}, {'name': 'appgatewayfrontendhttpsport1', 'properties': {'port': 443}}, {'name': 'appgatewayfrontendhttpport2', 'properties': {'port': 8080}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool1', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}]}}, {'name': 'appgatewaybackendpool2', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http'}}], 'httplisteners': [{'name': 'appgatewayhttplistener1', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', parameters('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', parameters('applicationgatewayname'), 'appgatewayfrontendhttpport1')]\"}, 'protocol': 'http'}}, {'name': 'appgatewayhttpslistener1', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',parameters('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',parameters('applicationgatewayname'), 'appgatewayfrontendhttpsport1')]\"}, 'protocol': 'https', 'sslcertificate': {'id': \"[resourceid('microsoft.network/applicationgateways/sslcertificates',parameters('applicationgatewayname'), 'appgatewaysslcert')]\"}}}, {'name': 'appgatewayhttplistener2', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',parameters('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',parameters('applicationgatewayname'), 'appgatewayfrontendhttpport2')]\"}, 'protocol': 'http'}}], 'redirectconfigurations': [{'name': 'redirectconfig1', 'properties': {'redirecttype': 'temporary', 'targetlistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',parameters('applicationgatewayname'), 'appgatewayhttpslistener1')]\"}}}, {'name': 'redirectconfig2', 'properties': {'redirecttype': 'temporary', 'targeturl': 'http://www.bing.com'}}], 'urlpathmaps': [{'name': 'urlpathmap1', 'properties': {'defaultredirectconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/redirectconfigurations',parameters('applicationgatewayname'), 'redirectconfig2')]\"}, 'pathrules': [{'name': 'pathrule1', 'properties': {'paths': [\"[parameters('pathmatch1')]\"], 'redirectconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/redirectconfigurations',parameters('applicationgatewayname'), 'redirectconfig1')]\"}}}]}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',parameters('applicationgatewayname'), 'appgatewayhttplistener1')]\"}, 'redirectconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/redirectconfigurations',parameters('applicationgatewayname'), 'redirectconfig1')]\"}}}, {'name': 'rule2', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners/', parameters('applicationgatewayname'), 'appgatewayhttpslistener1')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools/', parameters('applicationgatewayname'), 'appgatewaybackendpool1')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection/', parameters('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}, {'name': 'rule3', 'properties': {'ruletype': 'pathbasedrouting', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners/',parameters('applicationgatewayname'), 'appgatewayhttplistener2')]\"}, 'urlpathmap': {'id': \"[resourceid('microsoft.network/applicationgateways/urlpathmaps/',parameters('applicationgatewayname'), 'urlpathmap1')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate an ExpressRoute Circuit\n\n===\n\n", "completion": " {'type': 'microsoft.network/expressroutecircuits', 'apiversion': '2021-02-01', 'name': \"[parameters('circuitname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[format('{0}_{1}', parameters('skutier'), parameters('skufamily'))]\", 'tier': \"[parameters('skutier')]\", 'family': \"[parameters('skufamily')]\"}, 'properties': {'serviceproviderproperties': {'serviceprovidername': \"[parameters('serviceprovidername')]\", 'peeringlocation': \"[parameters('peeringlocation')]\", 'bandwidthinmbps': \"[parameters('bandwidthinmbps')]\"}}} END"}
{"prompt": "\n\n###\n\nCreate a Site to Site VPN connection to any on premises or other cloud networks such as AWS Virtual Private Cloud\n\n===\n\n", "completion": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/localnetworkgateways', 'name': \"[parameters('localgatewayname')]\", 'location': \"[parameters('location')]\", 'properties': {'localnetworkaddressspace': {'addressprefixes': \"[parameters('localaddressprefix')]\"}, 'gatewayipaddress': \"[parameters('localgatewayipaddress')]\"}}{'apiversion': '2020-07-01', 'name': \"[parameters('connectionname')]\", 'type': 'microsoft.network/connections', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways/', parameters('gatewayname'))]\", \"[resourceid('microsoft.network/localnetworkgateways/', parameters('localgatewayname'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways', parameters('gatewayname'))]\"}, 'localnetworkgateway2': {'id': \"[resourceid('microsoft.network/localnetworkgateways', parameters('localgatewayname'))]\"}, 'connectiontype': 'ipsec', 'routingweight': 10, 'sharedkey': \"[parameters('sharedkey')]\"}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('azurevnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('gatewaypublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[parameters('gatewayname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', parameters('gatewaypublicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gatewaysubnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',parameters('gatewaypublicipname'))]\"}}, 'name': 'vnetgatewayconfig'}], 'sku': {'name': \"[parameters('gatewaysku')]\", 'tier': \"[parameters('gatewaysku')]\"}, 'gatewaytype': 'vpn', 'vpntype': \"[parameters('vpntype')]\", 'enablebgp': 'false'}} END"}
{"prompt": "\n\n###\n\nCreate a Virtual Network with two Subnets\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix')]\"}}, {'name': \"[parameters('subnet2name')]\", 'properties': {'addressprefix': \"[parameters('subnet2prefix')]\"}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Virtual WAN (vWAN) Multi-Hub Deployment with Custom Routing Tables\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualwans', 'apiversion': '2020-05-01', 'name': \"[parameters('vwanname')]\", 'location': \"[parameters('hub1_location')]\", 'properties': {'allowvnettovnettraffic': true, 'allowbranchtobranchtraffic': true, 'type': \"[variables('vwan_cfg').type]\"}}{'type': 'microsoft.network/virtualhubs', 'apiversion': '2020-05-01', 'name': \"[variables('virtual_hub1_cfg').name]\", 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"], 'properties': {'addressprefix': \"[variables('virtual_hub1_cfg').addressspaceprefix]\", 'virtualwan': {'id': \"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"}}}{'type': 'microsoft.network/virtualhubs', 'apiversion': '2020-05-01', 'name': \"[variables('virtual_hub2_cfg').name]\", 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"], 'properties': {'addressprefix': \"[variables('virtual_hub2_cfg').addressspaceprefix]\", 'virtualwan': {'id': \"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"}}}{'type': 'microsoft.network/virtualhubs/hubroutetables', 'apiversion': '2020-05-01', 'name': \"[concat(variables('virtual_hub1_cfg').name, '/defaultroutetable')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\", \"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub1_cfg').name))]\"], 'properties': {'labels': ['default']}}{'type': 'microsoft.network/virtualhubs/hubroutetables', 'apiversion': '2020-05-01', 'name': \"[concat(variables('virtual_hub1_cfg').name, '/noneroutetable')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\", \"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub1_cfg').name))]\"], 'properties': {'labels': ['none']}}{'type': 'microsoft.network/virtualhubs/hubroutetables', 'apiversion': '2020-05-01', 'name': \"[concat(variables('virtual_hub1_cfg').name, '/hub1_rt_shared')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\", \"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub1_cfg').name))]\"], 'properties': {'labels': ['lbl_rt_shared']}}{'type': 'microsoft.network/virtualhubs/hubroutetables', 'apiversion': '2020-05-01', 'name': \"[concat(variables('virtual_hub2_cfg').name, '/defaultroutetable')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\", \"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub2_cfg').name))]\"], 'properties': {'labels': ['default']}}{'type': 'microsoft.network/virtualhubs/hubroutetables', 'apiversion': '2020-05-01', 'name': \"[concat(variables('virtual_hub2_cfg').name, '/noneroutetable')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\", \"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub2_cfg').name))]\"], 'properties': {'labels': ['none']}}{'type': 'microsoft.network/virtualhubs/hubroutetables', 'apiversion': '2020-05-01', 'name': \"[concat(variables('virtual_hub2_cfg').name, '/hub2_rt_shared')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\", \"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub2_cfg').name))]\"], 'properties': {'labels': ['lbl_rt_shared']}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('vnet1_cfg').name]\", 'location': \"[parameters('hub1_location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet1_cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet1_cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet1_cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('vnet2_cfg').name]\", 'location': \"[parameters('hub1_location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet2_cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet2_cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet2_cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('vnet3_cfg').name]\", 'location': \"[parameters('hub2_location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet3_cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet3_cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet3_cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('vnet4_cfg').name]\", 'location': \"[parameters('hub2_location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet4_cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet4_cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet4_cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualhubs/hubvirtualnetworkconnections', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}_connection', variables('virtual_hub1_cfg').name, variables('vnet1_cfg').name)]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1_cfg').name)]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'defaultroutetable')]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'hub1_rt_shared')]\"], 'properties': {'routingconfiguration': {'associatedroutetable': {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'defaultroutetable')]\"}, 'propagatedroutetables': {'labels': ['default', 'lbl_rt_shared'], 'ids': [{'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'defaultroutetable')]\"}, {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'hub1_rt_shared')]\"}]}}, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1_cfg').name)]\"}, 'allowhubtoremotevnettransit': true, 'allowremotevnettousehubvnetgateways': true, 'enableinternetsecurity': true}}{'type': 'microsoft.network/virtualhubs/hubvirtualnetworkconnections', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}_connection', variables('virtual_hub1_cfg').name, variables('vnet2_cfg').name)]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2_cfg').name)]\", \"[resourceid('microsoft.network/virtualhubs/hubvirtualnetworkconnections', variables('virtual_hub1_cfg').name, format('{0}_connection', variables('vnet1_cfg').name))]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'hub1_rt_shared')]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'defaultroutetable')]\"], 'properties': {'routingconfiguration': {'associatedroutetable': {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'hub1_rt_shared')]\"}, 'propagatedroutetables': {'labels': ['default'], 'ids': [{'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'defaultroutetable')]\"}]}}, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2_cfg').name)]\"}, 'allowhubtoremotevnettransit': true, 'allowremotevnettousehubvnetgateways': true, 'enableinternetsecurity': true}}{'type': 'microsoft.network/virtualhubs/hubvirtualnetworkconnections', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}_connection', variables('virtual_hub2_cfg').name, variables('vnet3_cfg').name)]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet3_cfg').name)]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'hub2_rt_shared')]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'defaultroutetable')]\"], 'properties': {'routingconfiguration': {'associatedroutetable': {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'hub2_rt_shared')]\"}, 'propagatedroutetables': {'labels': ['default'], 'ids': [{'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'defaultroutetable')]\"}]}}, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet3_cfg').name)]\"}, 'allowhubtoremotevnettransit': true, 'allowremotevnettousehubvnetgateways': true, 'enableinternetsecurity': true}}{'type': 'microsoft.network/virtualhubs/hubvirtualnetworkconnections', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}_connection', variables('virtual_hub2_cfg').name, variables('vnet4_cfg').name)]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet4_cfg').name)]\", \"[resourceid('microsoft.network/virtualhubs/hubvirtualnetworkconnections', variables('virtual_hub2_cfg').name, format('{0}_connection', variables('vnet3_cfg').name))]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'hub2_rt_shared')]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'defaultroutetable')]\"], 'properties': {'routingconfiguration': {'associatedroutetable': {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'hub2_rt_shared')]\"}, 'propagatedroutetables': {'labels': ['default'], 'ids': [{'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'defaultroutetable')]\"}]}}, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet4_cfg').name)]\"}, 'allowhubtoremotevnettransit': true, 'allowremotevnettousehubvnetgateways': true, 'enableinternetsecurity': true}}{'type': 'microsoft.network/vpngateways', 'name': \"[format('{0}_s2svpngw', variables('virtual_hub1_cfg').name)]\", 'apiversion': '2020-05-01', 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\"], 'properties': {'vpngatewayscaleunit': \"[parameters('hub1_s2svpngatewayscaleunit')]\", 'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\"}, 'bgpsettings': {'asn': 65515}}}{'type': 'microsoft.network/vpngateways', 'name': \"[format('{0}_s2svpngw', variables('virtual_hub2_cfg').name)]\", 'apiversion': '2020-05-01', 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\"], 'properties': {'vpngatewayscaleunit': \"[parameters('hub2_s2svpngatewayscaleunit')]\", 'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\"}, 'bgpsettings': {'asn': 65515}}}{'type': 'microsoft.network/expressroutegateways', 'apiversion': '2020-05-01', 'name': \"[format('{0}_ergw', variables('virtual_hub1_cfg').name)]\", 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub1_cfg').name))]\"], 'properties': {'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\"}, 'autoscaleconfiguration': {'bounds': {'min': \"[parameters('hub1_expressroutegatewayscaleunit')]\"}}}}{'type': 'microsoft.network/expressroutegateways', 'apiversion': '2020-05-01', 'name': \"[format('{0}_ergw', variables('virtual_hub2_cfg').name)]\", 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub2_cfg').name))]\"], 'properties': {'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\"}, 'autoscaleconfiguration': {'bounds': {'min': \"[parameters('hub2_expressroutegatewayscaleunit')]\"}}}}{'type': 'microsoft.network/vpnserverconfigurations', 'apiversion': '2020-05-01', 'name': \"[format('{0}_p2svpnserverconfiguration', variables('virtual_hub1_cfg').name)]\", 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/expressroutegateways', format('{0}_ergw', variables('virtual_hub1_cfg').name))]\"], 'properties': {'vpnprotocols': ['ikev2', 'openvpn'], 'vpnauthenticationtypes': ['certificate'], 'vpnclientrootcertificates': [{'name': 'p2srootcerthub1', 'publiccertdata': \"[parameters('hub1_publiccertificatedataforp2s')]\"}]}}{'type': 'microsoft.network/vpnserverconfigurations', 'apiversion': '2020-05-01', 'name': \"[format('{0}_p2svpnserverconfiguration', variables('virtual_hub2_cfg').name)]\", 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/expressroutegateways', format('{0}_ergw', variables('virtual_hub2_cfg').name))]\"], 'properties': {'vpnprotocols': ['ikev2', 'openvpn'], 'vpnauthenticationtypes': ['certificate'], 'vpnclientrootcertificates': [{'name': 'p2srootcerthub2', 'publiccertdata': \"[parameters('hub2_publiccertificatedataforp2s')]\"}]}}{'type': 'microsoft.network/p2svpngateways', 'apiversion': '2020-05-01', 'name': \"[format('{0}_p2sgateway', variables('virtual_hub1_cfg').name)]\", 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/vpnserverconfigurations', format('{0}_p2svpnserverconfiguration', variables('virtual_hub1_cfg').name))]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'hub1_rt_shared')]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name, 'defaultroutetable')]\"], 'properties': {'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\"}, 'vpnserverconfiguration': {'id': \"[resourceid('microsoft.network/vpnserverconfigurations', format('{0}_p2svpnserverconfiguration', variables('virtual_hub1_cfg').name))]\"}, 'p2sconnectionconfigurations': [{'name': 'hub1_p2sconnectionconfigdefault', 'properties': {'routingconfiguration': {'associatedroutetable': {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name,'defaultroutetable')]\"}, 'propagatedroutetables': {'labels': ['lbl_rt_shared', 'default'], 'ids': [{'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name,'defaultroutetable')]\"}, {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name,'hub1_rt_shared')]\"}]}}, 'vpnclientaddresspool': {'addressprefixes': [\"[variables('virtual_hub1_cfg').hub1_p2svpnclientaddresspoolprefix]\"]}}}], 'vpngatewayscaleunit': \"[parameters('hub1_p2svpngatewayscaleunit')]\"}}{'type': 'microsoft.network/p2svpngateways', 'apiversion': '2020-05-01', 'name': \"[format('{0}_p2sgateway', variables('virtual_hub2_cfg').name)]\", 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/vpnserverconfigurations', format('{0}_p2svpnserverconfiguration', variables('virtual_hub2_cfg').name))]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'hub2_rt_shared')]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name, 'defaultroutetable')]\"], 'properties': {'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\"}, 'vpnserverconfiguration': {'id': \"[resourceid('microsoft.network/vpnserverconfigurations', format('{0}_p2svpnserverconfiguration', variables('virtual_hub2_cfg').name))]\"}, 'p2sconnectionconfigurations': [{'name': 'hub2_p2sconnectionconfigdefault', 'properties': {'routingconfiguration': {'associatedroutetable': {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name,'defaultroutetable')]\"}, 'propagatedroutetables': {'labels': ['lbl_rt_shared', 'default'], 'ids': [{'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name,'defaultroutetable')]\"}, {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name,'hub2_rt_shared')]\"}]}}, 'vpnclientaddresspool': {'addressprefixes': [\"[variables('virtual_hub2_cfg').hub2_p2svpnclientaddresspoolprefix]\"]}}}], 'vpngatewayscaleunit': \"[parameters('hub2_p2svpngatewayscaleunit')]\"}} END"}
{"prompt": "\n\n###\n\nVirtual Network with diagnostic logs\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-02-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'copy': [{'name': 'subnets', 'count': \"[length(parameters('subnets'))]\", 'input': {'name': \"[parameters('subnets')[copyindex('subnets')].name]\", 'properties': {'addressprefix': \"[parameters('subnets')[copyindex('subnets')].addressprefix]\", 'delegations': \"[if(contains(parameters('subnets')[copyindex('subnets')], 'delegation'), createarray(createobject('name', format('{0}-delegation', parameters('subnets')[copyindex('subnets')].name), 'properties', createobject('servicename', parameters('subnets')[copyindex('subnets')].delegation))), createarray())]\", 'natgateway': \"[if(contains(parameters('subnets')[copyindex('subnets')], 'natgatewayid'), createobject('id', parameters('subnets')[copyindex('subnets')].natgatewayid), null())]\", 'networksecuritygroup': \"[if(contains(parameters('subnets')[copyindex('subnets')], 'nsgid'), createobject('id', parameters('subnets')[copyindex('subnets')].nsgid), null())]\", 'routetable': \"[if(contains(parameters('subnets')[copyindex('subnets')], 'udrid'), createobject('id', parameters('subnets')[copyindex('subnets')].udrid), null())]\", 'privateendpointnetworkpolicies': \"[parameters('subnets')[copyindex('subnets')].privateendpointnetworkpolicies]\", 'privatelinkservicenetworkpolicies': \"[parameters('subnets')[copyindex('subnets')].privatelinkservicenetworkpolicies]\", 'serviceendpoints': \"[if(contains(parameters('subnets')[copyindex('subnets')], 'serviceendpoints'), parameters('subnets')[copyindex('subnets')].serviceendpoints, null())]\"}}}], 'addressspace': {'addressprefixes': \"[parameters('vnetaddressspace')]\"}, 'dhcpoptions': \"[if(empty(parameters('dnsservers')), null(), createobject('dnsservers', parameters('dnsservers')))]\"}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway\n\n===\n\n", "completion": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2017-06-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2017-06-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('applicationgatewaysize')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('azurewebapp1')]\"}, {'ipaddress': \"[parameters('azurewebapp2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'pickhostnamefrombackendaddress': true, 'probeenabled': \"[parameters('probeenabled')]\", 'probe': {'id': \"[resourceid('microsoft.network/applicationgateways/probes',variables('applicationgatewayname'), 'probe1')]\"}}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}], 'probes': [{'name': 'probe1', 'properties': {'protocol': 'http', 'path': '/', 'interval': 30, 'timeout': 10, 'unhealthythreshold': 3, 'minservers': 0, 'pickhostnamefrombackendhttpsettings': true}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VNet to VNet connection in the same region using VNet Peering\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'apiversion': '2021-02-01', 'name': \"[format('{0}/peering-to-remote-vnet', parameters('existinglocalvirtualnetworkname'))]\", 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': false, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[resourceid(parameters('existingremotevirtualnetworkresourcegroupname'), 'microsoft.network/virtualnetworks', parameters('existingremotevirtualnetworkname'))]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a private link service that exposes a virtual machine, and it is consumed via a private endpoint.\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('frontendsubnetname')]\", 'properties': {'addressprefix': \"[variables('frontendsubnetprefix')]\", 'privatelinkservicenetworkpolicies': 'disabled'}}, {'name': \"[variables('backendsubnetname')]\", 'properties': {'addressprefix': \"[variables('backendsubnetprefix')]\"}}]}}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-06-01', 'name': \"[variables('loadbalancername')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'dependson': [\"[variables('vnetname')]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('loadbalancerfrontendipconfigurationname')]\", 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('frontendsubnetname'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('backendpoolname')]\"}], 'inboundnatrules': [{'name': 'rdp-vm0', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancername'), variables('loadbalancerfrontendipconfigurationname'))]\"}, 'protocol': 'tcp', 'frontendport': 3389, 'backendport': 3389, 'enablefloatingip': false}}], 'loadbalancingrules': [{'name': 'myhttprule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancername'), variables('loadbalancerfrontendipconfigurationname'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('backendpoolname'))]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('loadbalancername'), variables('healthprobename'))]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'idletimeoutinminutes': 15}}], 'probes': [{'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 2}, 'name': \"[variables('healthprobename')]\"}]}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('networkinterfacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('loadbalancername')]\"], 'tags': {'displayname': \"[variables('networkinterfacename')]\"}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('backendsubnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), variables('backendpoolname'))]\"}], 'loadbalancerinboundnatrules': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatrules/', variables('loadbalancername'), 'rdp-vm0')]\"}]}}]}}{'type': 'microsoft.network/privatelinkservices', 'apiversion': '2020-06-01', 'name': \"[variables('privatelinkservicename')]\", 'location': \"[parameters('location')]\", 'properties': {'enableproxyprotocol': false, 'loadbalancerfrontendipconfigurations': [{'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancername'), variables('loadbalancerfrontendipconfigurationname'))]\"}], 'ipconfigurations': [{'name': 'snet-provider-default-1', 'properties': {'privateipallocationmethod': 'dynamic', 'privateipaddressversion': 'ipv4', 'subnet': {'id': \"[reference(variables('loadbalancerid'), '2019-06-01').frontendipconfigurations[0].properties.subnet.id]\"}, 'primary': false}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetconsumername')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('consumersubnetname')]\", 'properties': {'addressprefix': \"[variables('consumersubnetprefix')]\", 'privateendpointnetworkpolicies': 'disabled'}}, {'name': \"[variables('backendsubnetname')]\", 'properties': {'addressprefix': \"[variables('backendsubnetprefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('publicipaddressconsumername')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[variables('publicipaddressconsumername')]\"}, 'properties': {'publicipallocationmethod': 'dynamic', 'dnssettings': {'domainnamelabel': \"[tolower(variables('vmconsumername'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('networkinterfaceconsumername')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetconsumername')]\", \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressconsumername'))]\"], 'tags': {'displayname': \"[variables('networkinterfaceconsumername')]\"}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressconsumername'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetconsumername'), variables('consumersubnetname'))]\"}}}]}}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-06-01', 'name': \"[variables('privateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('vnetconsumername')]\", \"[variables('privatelinkservicename')]\"], 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetconsumername'), variables('consumersubnetname'))]\"}, 'privatelinkserviceconnections': [{'name': \"[variables('privateendpointname')]\", 'properties': {'privatelinkserviceid': \"[resourceid('microsoft.network/privatelinkservices',variables('privatelinkservicename'))]\"}}]}} END"}
{"prompt": "\n\n###\n\nThis template adds and secures a custom domain to your Front Door with a customer-managed certificate.\n\n===\n\n", "completion": " {'type': 'microsoft.network/frontdoors', 'apiversion': '2020-01-01', 'name': \"[parameters('frontdoorname')]\", 'location': 'global', 'properties': {'enabledstate': 'enabled', 'frontendendpoints': [{'name': \"[variables('frontendendpointdefaultname')]\", 'properties': {'hostname': \"[variables('frontendendpointdefaulthostname')]\", 'sessionaffinityenabledstate': 'disabled'}}, {'name': \"[variables('frontendendpointcustomname')]\", 'properties': {'hostname': \"[parameters('customdomainname')]\", 'sessionaffinityenabledstate': 'disabled'}}], 'loadbalancingsettings': [{'name': \"[variables('loadbalancingsettingsname')]\", 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}], 'healthprobesettings': [{'name': \"[variables('healthprobesettingsname')]\", 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}], 'backendpools': [{'name': \"[variables('backendpoolname')]\", 'properties': {'backends': [{'address': \"[parameters('backendaddress')]\", 'backendhostheader': \"[parameters('backendaddress')]\", 'httpport': 80, 'httpsport': 443, 'weight': 50, 'priority': 1, 'enabledstate': 'enabled'}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), variables('loadbalancingsettingsname'))]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), variables('healthprobesettingsname'))]\"}}}], 'routingrules': [{'name': \"[variables('routingrulename')]\", 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), variables('frontendendpointdefaultname'))]\"}, {'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), variables('frontendendpointcustomname'))]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), variables('backendpoolname'))]\"}}, 'enabledstate': 'enabled'}}]}}{'type': 'microsoft.network/frontdoors/frontendendpoints/customhttpsconfiguration', 'apiversion': '2020-07-01', 'name': \"[format('{0}/{1}/{2}', parameters('frontdoorname'), variables('frontendendpointcustomname'), 'default')]\", 'properties': {'protocoltype': 'servernameindication', 'certificatesource': 'azurekeyvault', 'keyvaultcertificatesourceparameters': {'vault': {'id': \"[parameters('certificatekeyvaultresourceid')]\"}, 'secretname': \"[parameters('certificatekeyvaultsecretname')]\", 'secretversion': \"[if(equals(parameters('certificatekeyvaultsecretversion'), ''), null(), parameters('certificatekeyvaultsecretversion'))]\"}, 'minimumtlsversion': '1.2'}, 'dependson': [\"[resourceid('microsoft.network/frontdoors', parameters('frontdoorname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template deploys an Application Gateway with WAF, end to end SSL and HTTP to HTTPS redirect on the IIS servers.\n\n===\n\n", "completion": " {'apiversion': '2016-03-30', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('vm1publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('vm1publicipaddresstype')]\"}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('vm2publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[variables('vm2publicipaddresstype')]\"}}{'apiversion': '2017-03-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('appgwpublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('webnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow80', 'properties': {'description': 'allow 80 from local vnet', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'allow443', 'properties': {'description': 'allow 443 from local vnet', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}, {'name': 'allowrdp', 'properties': {'description': 'allow rdp from everywhere', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 102, 'direction': 'inbound'}}]}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('appgwnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow80', 'properties': {'description': 'allow 80 from internet', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'allow443', 'properties': {'description': 'allow 443 from internet', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 102, 'direction': 'inbound'}}, {'name': 'allowappgwprobes', 'properties': {'description': 'allow ports for app gw probes', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '65503-65534 ', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 103, 'direction': 'inbound'}}]}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('webnsgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('appgwnsgname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('websubnetname')]\", 'properties': {'addressprefix': \"[variables('websubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('webnsgname'))]\"}}}, {'name': \"[variables('appgatewaysubnetname')]\", 'properties': {'addressprefix': \"[variables('appgatewaysubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('appgwnsgname'))]\"}}}]}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('vm1nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('vm1publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfigvm1', 'properties': {'privateipaddress': \"[variables('vm1ipaddress')]\", 'privateipallocationmethod': 'static', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('vm1publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('websubnetref')]\"}}}]}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('vm2nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('vm2publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfigvm2', 'properties': {'privateipaddress': \"[variables('vm2ipaddress')]\", 'privateipallocationmethod': 'static', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('vm2publicipaddressname'))]\"}, 'subnet': {'id': \"[variables('websubnetref')]\"}}}]}}{'apiversion': '2017-06-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('appgwpublicipname'))]\"], 'properties': {'sku': {'name': \"[parameters('applicationgatewaysize')]\", 'tier': 'waf', 'capacity': \"[parameters('capacity')]\"}, 'sslcertificates': [{'name': 'appgatewayfrontendsslcert', 'properties': {'data': \"[parameters('frontendcertdata')]\", 'password': \"[parameters('frontendcertpassword')]\"}}], 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('appgatewaysubnetref')]\"}}}], 'authenticationcertificates': [{'properties': {'data': \"[parameters('backendpublickeydata')]\"}, 'name': 'appgatewaybackendcert'}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[variables('appgwpublicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport80', 'properties': {'port': 80}}, {'name': 'appgatewayfrontendport443', 'properties': {'port': 443}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[variables('vm1ipaddress')]\"}, {'ipaddress': \"[variables('vm2ipaddress')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}, {'name': 'appgatewaybackendhttpssettings', 'properties': {'port': 443, 'protocol': 'https', 'cookiebasedaffinity': 'disabled', 'authenticationcertificates': [{'id': \"[resourceid('microsoft.network/applicationgateways/authenticationcertificates', variables('applicationgatewayname'), 'appgatewaybackendcert')]\"}]}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', variables('applicationgatewayname'),  'appgatewayfrontendport80')]\"}, 'protocol': 'http'}}, {'name': 'appgatewayhttpslistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', variables('applicationgatewayname'),  'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', variables('applicationgatewayname'), 'appgatewayfrontendport443')]\"}, 'protocol': 'https', 'sslcertificate': {'id': \"[resourceid('microsoft.network/applicationgateways/sslcertificates', variables('applicationgatewayname'), 'appgatewayfrontendsslcert')]\"}}}], 'requestroutingrules': [{'name': 'httprule', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}, {'name': 'httpsrule', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', variables('applicationgatewayname'), 'appgatewayhttpslistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', variables('applicationgatewayname'), 'appgatewaybackendhttpssettings')]\"}}}], 'webapplicationfirewallconfiguration': {'enabled': \"[variables('wafenabled')]\", 'firewallmode': \"[variables('wafmode')]\", 'rulesettype': \"[variables('wafrulesettype')]\", 'rulesetversion': \"[variables('wafrulesetversion')]\"}}} END"}
{"prompt": "\n\n###\n\nCreate a VNET to VNET connection across using BGP\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnet1cfg').name]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet1cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet1cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet1cfg').subnetprefix]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('vnet1cfg').gatewaysubnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnet2cfg').name]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet2cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet2cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet2cfg').subnetprefix]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('vnet2cfg').gatewaysubnetprefix]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('vnet1cfg').gatewaypublicipname]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('vnet2cfg').gatewaypublicipname]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'type': 'microsoft.network/virtualnetworkgateways', 'apiversion': '2020-06-01', 'name': \"[variables('vnet1cfg').gatewayname]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'vnet1gatewayconfig', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet1cfg').name, 'gatewaysubnet')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('vnet1cfg').gatewaypublicipname)]\"}}}], 'gatewaytype': 'vpn', 'sku': {'name': \"[parameters('gatewaysku')]\", 'tier': \"[parameters('gatewaysku')]\"}, 'vpntype': 'routebased', 'enablebgp': true, 'bgpsettings': {'asn': \"[variables('vnet1cfg').asn]\"}}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('vnet1cfg').gatewaypublicipname)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1cfg').name)]\"]}{'type': 'microsoft.network/virtualnetworkgateways', 'apiversion': '2020-05-01', 'name': \"[variables('vnet2cfg').gatewayname]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'vnet2gatewayconfig', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnet2cfg').name, 'gatewaysubnet')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('vnet2cfg').gatewaypublicipname)]\"}}}], 'gatewaytype': 'vpn', 'sku': {'name': \"[parameters('gatewaysku')]\", 'tier': \"[parameters('gatewaysku')]\"}, 'vpntype': 'routebased', 'enablebgp': true, 'bgpsettings': {'asn': \"[variables('vnet2cfg').asn]\"}}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('vnet2cfg').gatewaypublicipname)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2cfg').name)]\"]}{'type': 'microsoft.network/connections', 'apiversion': '2020-05-01', 'name': \"[variables('vnet1cfg').connectionname]\", 'location': \"[parameters('location')]\", 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways', variables('vnet1cfg').gatewayname)]\", 'properties': {}}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways', variables('vnet2cfg').gatewayname)]\", 'properties': {}}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('vnet1cfg').gatewayname)]\", \"[resourceid('microsoft.network/virtualnetworkgateways', variables('vnet2cfg').gatewayname)]\"]}{'type': 'microsoft.network/connections', 'apiversion': '2020-05-01', 'name': \"[variables('vnet2cfg').connectionname]\", 'location': \"[parameters('location')]\", 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways', variables('vnet2cfg').gatewayname)]\", 'properties': {}}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways', variables('vnet1cfg').gatewayname)]\", 'properties': {}}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('vnet1cfg').gatewayname)]\", \"[resourceid('microsoft.network/virtualnetworkgateways', variables('vnet2cfg').gatewayname)]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Network Watcher-NSG Flow Logs resource for a given NSG\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nApplication Gateway for Multi Hosting\n\n===\n\n", "completion": " {'apiversion': '2021-02-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2017-06-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'sslcertificates': [{'name': 'appgatewaysslcert1', 'properties': {'data': \"[parameters('certdata1')]\", 'password': \"[parameters('certpassword1')]\"}}, {'name': 'appgatewaysslcert2', 'properties': {'data': \"[parameters('certdata2')]\", 'password': \"[parameters('certpassword2')]\"}}], 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[variables('publicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport1', 'properties': {'port': 443}}, {'name': 'appgatewayfrontendport2', 'properties': {'port': 444}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool1', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}]}}, {'name': 'appgatewaybackendpool2', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener1', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', variables('applicationgatewayname'), 'appgatewayfrontendport1')]\"}, 'protocol': 'https', 'sslcertificate': {'id': \"[resourceid('microsoft.network/applicationgateways/sslcertificates', variables('applicationgatewayname'), 'appgatewaysslcert1')]\"}, 'hostname': \"[parameters('hostname1')]\", 'requireservernameindication': true}}, {'name': 'appgatewayhttplistener2', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', variables('applicationgatewayname'), 'appgatewayfrontendport2')]\"}, 'protocol': 'https', 'sslcertificate': {'id': \"[resourceid('microsoft.network/applicationgateways/sslcertificates', variables('applicationgatewayname'), 'appgatewaysslcert2')]\"}, 'hostname': \"[parameters('hostname2')]\", 'requireservernameindication': true}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', variables('applicationgatewayname'), 'appgatewayhttplistener1')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', variables('applicationgatewayname'), 'appgatewaybackendpool1')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}, {'name': 'rule2', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', variables('applicationgatewayname'), 'appgatewayhttplistener2')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', variables('applicationgatewayname'), 'appgatewaybackendpool2')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway\n\n===\n\n", "completion": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[parameters('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[concat('appgw-vm-', uniquestring(resourcegroup().id))]\"}}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': 'subnet1', 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'type': 'microsoft.network/applicationgateways', 'apiversion': '2020-05-01', 'name': \"[parameters('applicationgatewayname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', parameters('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard_v2', 'capacity': 2}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), 'subnet1')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipaddressname'))]\"}}}], 'frontendports': [{'name': 'httpport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'pickhostnamefrombackendaddress': true, 'probe': {'id': \"[resourceid('microsoft.network/applicationgateways/probes', parameters('applicationgatewayname'), 'httpcustomprobe')]\"}}}], 'httplisteners': [{'name': 'httplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', parameters('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', parameters('applicationgatewayname'), 'httpport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'httprule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', parameters('applicationgatewayname'), 'httplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', parameters('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', parameters('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}, 'rewriteruleset': {'id': \"[resourceid('microsoft.network/applicationgateways/rewriterulesets', parameters('applicationgatewayname'), 'rewriteruleset1')]\"}}}], 'rewriterulesets': [{'name': 'rewriteruleset1', 'properties': {'rewriterules': [{'name': 'rwrule1', 'actionset': {'requestheaderconfigurations': [{'headername': 'accept-charset', 'headervalue': 'utf-8'}], 'responseheaderconfigurations': [{'headername': 'content-type', 'headervalue': 'text/html; charset=utf-8'}]}}]}, 'type': 'microsoft.network/applicationgateways/rewriterulesets'}], 'probes': [{'name': 'httpcustomprobe', 'properties': {'protocol': 'http', 'path': '/', 'interval': 30, 'timeout': 30, 'unhealthythreshold': 3, 'pickhostnamefrombackendhttpsettings': true, 'minservers': 0, 'match': {'statuscodes': ['200-399']}}, 'type': 'microsoft.network/applicationgateways/probes'}]}} END"}
{"prompt": "\n\n###\n\nDeploy Managed AADDS with required VNet and NSG configurations\n\n===\n\n", "completion": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-11-01', 'name': \"[variables('domainservicesnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowpsremotingslicep', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '5986', 'sourceaddressprefixes': \"[variables('psremotingslicepipaddresses')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 301, 'direction': 'inbound'}}, {'name': 'allowrdp', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefixes': \"[variables('rdpipaddresses')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 201, 'direction': 'inbound'}}, {'name': 'allowsyncwithazuread', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}, {'name': 'allowpsremotingslicet', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '5986', 'sourceaddressprefixes': \"[variables('psremotingslicetipaddresses')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 302, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-11-01', 'name': \"[parameters('domainservicesvnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('domainservicesvnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('domainservicessubnetname')]\", 'properties': {'addressprefix': \"[parameters('domainservicessubnetaddressprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('domainservicesnsgname'))]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('domainservicesnsgname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template updates your Front Door to change the health probe settings by setting the probe path and also the intervals in which the probes will be sent.\n\n===\n\n", "completion": " {'type': 'microsoft.network/frontdoors', 'apiversion': '2020-05-01', 'name': \"[parameters('frontdoorname')]\", 'location': \"[variables('frontdoorlocation')]\", 'properties': {'routingrules': [{'name': 'routingrule1', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), 'frontendendpoint1')]\"}], 'acceptedprotocols': ['http'], 'patternstomatch': ['/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), 'backendpool1')]\"}}, 'enabledstate': 'enabled'}}], 'healthprobesettings': [{'name': \"[parameters('healthprobename')]\", 'properties': {'path': \"[parameters('healthprobepath')]\", 'protocol': \"[parameters('healthprobeprotocol')]\", 'intervalinseconds': \"[parameters('healthprobeintervalinseconds')]\"}}], 'loadbalancingsettings': [{'name': 'loadbalancingsettings1', 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}], 'backendpools': [{'name': 'backendpool1', 'properties': {'backends': [{'address': \"[parameters('backendaddress')]\", 'httpport': 80, 'httpsport': 443, 'weight': 50, 'priority': 1, 'enabledstate': 'enabled'}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), 'loadbalancingsettings1')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), 'healthprobesettings1')]\"}}}], 'frontendendpoints': [{'name': 'frontendendpoint1', 'properties': {'hostname': \"[variables('frontdoorhostname')]\", 'sessionaffinityenabledstate': 'disabled'}}], 'enabledstate': 'enabled'}} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door with caching enabled for the defined routing configuration thus caching any static assets for your workload.\n\n===\n\n", "completion": " {'apiversion': '2020-01-01', 'type': 'microsoft.network/frontdoors', 'name': \"[parameters('frontdoorname')]\", 'location': \"[variables('frontdoorlocation')]\", 'properties': {'routingrules': [{'name': 'routingrule1', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'),'frontendendpoint1')]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*', '/site1/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'),parameters('backendpools1').name)]\"}}, 'enabledstate': 'enabled'}}, {'name': 'routingrule2', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'),'frontendendpoint1')]\"}], 'acceptedprotocols': ['https'], 'patternstomatch': ['/site2/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'),parameters('backendpools2').name)]\"}}, 'enabledstate': 'enabled'}}], 'healthprobesettings': [{'name': 'healthprobesettings1', 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}, {'name': 'healthprobesettings2', 'properties': {'path': '/', 'protocol': 'https', 'intervalinseconds': 60}}], 'loadbalancingsettings': [{'name': 'loadbalancingsettings1', 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}, {'name': 'loadbalancingsettings2', 'properties': {'samplesize': 2, 'successfulsamplesrequired': 1}}], 'backendpools': [{'name': \"[parameters('backendpools1').name]\", 'properties': {'copy': [{'name': 'backends', 'count': \"[length(parameters('backendpools1').backends)]\", 'input': {'address': \"[parameters('backendpools1').backends[copyindex('backends')].address]\", 'httpport': \"[parameters('backendpools1').backends[copyindex('backends')].httpport]\", 'httpsport': \"[parameters('backendpools1').backends[copyindex('backends')].httpsport]\", 'weight': \"[parameters('backendpools1').backends[copyindex('backends')].weight]\", 'priority': \"[parameters('backendpools1').backends[copyindex('backends')].priority]\", 'enabledstate': \"[parameters('backendpools1').backends[copyindex('backends')].enabledstate]\"}}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'),'loadbalancingsettings1')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'),'healthprobesettings1')]\"}}}, {'name': \"[parameters('backendpools2').name]\", 'properties': {'copy': [{'name': 'backends', 'count': \"[length(parameters('backendpools2').backends)]\", 'input': {'address': \"[parameters('backendpools2').backends[copyindex('backends')].address]\", 'httpport': \"[parameters('backendpools2').backends[copyindex('backends')].httpport]\", 'httpsport': \"[parameters('backendpools2').backends[copyindex('backends')].httpsport]\", 'weight': \"[parameters('backendpools2').backends[copyindex('backends')].weight]\", 'priority': \"[parameters('backendpools2').backends[copyindex('backends')].priority]\", 'enabledstate': \"[parameters('backendpools2').backends[copyindex('backends')].enabledstate]\"}}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'),'loadbalancingsettings2')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'),'healthprobesettings2')]\"}}}], 'frontendendpoints': [{'name': 'frontendendpoint1', 'properties': {'hostname': \"[variables('frontdoorhostname')]\", 'sessionaffinityenabledstate': 'disabled', 'sessionaffinityttlseconds': 0}}], 'enabledstate': 'enabled'}} END"}
{"prompt": "\n\n###\n\nSets service endpoint on one of the 2 subnets in a VNet and secures storage account to that subnet\n\n===\n\n", "completion": " {'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-3389', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '3389', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2017-09-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': 'subnet1', 'properties': {'addressprefix': \"[parameters('subnet1prefix')]\", 'serviceendpoints': [{'service': 'microsoft.storage'}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}, {'name': 'subnet2', 'properties': {'addressprefix': \"[parameters('subnet2prefix')]\"}}]}}{'apiversion': '2017-09-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(variables('publicipaddressname'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'piploop', 'count': 2}, 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2016-10-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat('nic', copyindex())]\", 'location': \"[parameters('location')]\", 'dependson': [\"[parameters('vnetname')]\", 'piploop'], 'copy': {'name': 'nicloop', 'count': 2}, 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnetid')[copyindex()]]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat(variables('publicipaddressname'), copyindex()))]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a Network Security Group\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'first_rule', 'properties': {'description': 'this is the first rule', 'protocol': 'tcp', 'sourceportrange': '23-45', 'destinationportrange': '46-56', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 123, 'direction': 'inbound'}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Traffic Manager profile that provides an App Service behind it\n\n===\n\n", "completion": " {'type': 'microsoft.network/trafficmanagerprofiles', 'apiversion': '2018-08-01', 'name': \"[parameters('trafficmanagername')]\", 'location': 'global', 'properties': {'profilestatus': 'enabled', 'trafficroutingmethod': 'priority', 'dnsconfig': {'relativename': \"[parameters('uniquednsname')]\", 'ttl': 30}, 'monitorconfig': {'protocol': 'https', 'port': 443, 'path': '/'}, 'endpoints': [{'name': \"[parameters('uniquednsnameforwebapp')]\", 'type': 'microsoft.network/trafficmanagerprofiles/azureendpoints', 'properties': {'targetresourceid': \"[resourceid('microsoft.web/sites', parameters('uniquednsnameforwebapp'))]\", 'endpointstatus': 'enabled'}}]}, 'dependson': [\"[resourceid('microsoft.web/sites', parameters('uniquednsnameforwebapp'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a sandbox setup of Azure Firewall with Availability Zones\n\n===\n\n", "completion": " {'type': 'microsoft.network/routetables', 'apiversion': '2020-06-01', 'name': \"[variables('azfwroutetablename')]\", 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'azfwdefaultroute', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('nexthopip')]\"}}]}}{'comments': \"simple network security group for subnet [variables('serverssubnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'displayname': \"[parameters('virtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('jumpboxsubnetname')]\", 'properties': {'addressprefix': \"[variables('jumpboxsubnetprefix')]\"}}, {'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[variables('azurefirewallsubnetprefix')]\"}}, {'name': \"[variables('serverssubnetname')]\", 'properties': {'addressprefix': \"[variables('serverssubnetprefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\"}, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[concat(variables('publicipnameprefix'), add(copyindex(), 1))]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberoffirewallpublicipaddresses')]\"}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('jumpboxpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('jumpboxnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'mynetworksecuritygrouprulerdp', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('jumpboxnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('jumpboxpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('jumpboxpublicipaddressname'))]\"}, 'subnet': {'id': \"[variables('jumpboxsubnetid')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('servernicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('serversubnetid')]\"}}}]}}{'type': 'microsoft.network/azurefirewalls', 'apiversion': '2020-06-01', 'name': \"[variables('firewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", 'publicipcopy'], 'properties': {'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'applicationrulecollections': [{'name': 'apprc1', 'properties': {'priority': 101, 'action': {'type': 'allow'}, 'rules': [{'name': 'apprule1', 'protocols': [{'port': 80, 'protocoltype': 'http'}, {'port': 443, 'protocoltype': 'https'}], 'targetfqdns': ['www.microsoft.com'], 'sourceaddresses': ['10.0.2.0/24']}]}}], 'networkrulecollections': [{'name': 'netrc1', 'properties': {'priority': 200, 'action': {'type': 'allow'}, 'rules': [{'name': 'netrule1', 'protocols': ['tcp'], 'sourceaddresses': ['10.0.2.0/24'], 'destinationaddresses': ['*'], 'destinationports': ['8000-8999']}]}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Firewall with Availability Zones\n\n===\n\n", "completion": " {'type': 'microsoft.network/ipgroups', 'apiversion': '2020-06-01', 'name': \"[parameters('ipgroups_name1')]\", 'location': \"[parameters('location')]\", 'properties': {'ipaddresses': ['13.73.64.64/26', '13.73.208.128/25', '52.126.194.0/23']}}{'type': 'microsoft.network/ipgroups', 'apiversion': '2020-06-01', 'name': \"[parameters('ipgroups_name2')]\", 'location': \"[parameters('location')]\", 'properties': {'ipaddresses': ['12.0.0.0/24', '13.9.0.0/24']}}{'type': 'microsoft.network/routetables', 'apiversion': '2020-06-01', 'name': \"[variables('azfwroutetablename')]\", 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'azfwdefaultroute', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('nexthopip')]\"}}]}}{'comments': \"simple network security group for subnet [variables('serverssubnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'displayname': \"[parameters('virtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('jumpboxsubnetname')]\", 'properties': {'addressprefix': \"[variables('jumpboxsubnetprefix')]\"}}, {'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[variables('azurefirewallsubnetprefix')]\"}}, {'name': \"[variables('serverssubnetname')]\", 'properties': {'addressprefix': \"[variables('serverssubnetprefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\"}, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[concat(variables('publicipnameprefix'), add(copyindex(), 1))]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberoffirewallpublicipaddresses')]\"}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('jumpboxpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('jumpboxnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'mynetworksecuritygrouprulessh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('jumpboxnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\"}, 'subnet': {'id': \"[variables('jumpboxsubnetid')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[variables('servernicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('serversubnetid')]\"}}}]}}{'type': 'microsoft.network/azurefirewalls', 'apiversion': '2020-06-01', 'name': \"[variables('firewallname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name1'))]\", \"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name2'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", 'publicipcopy'], 'properties': {'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'applicationrulecollections': [{'name': 'apprc1', 'properties': {'priority': 101, 'action': {'type': 'allow'}, 'rules': [{'name': 'someapprule', 'protocols': [{'protocoltype': 'http', 'port': 8080}], 'targetfqdns': ['*bing.com'], 'sourceipgroups': [\"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name1'))]\"]}, {'name': 'someotherapprule', 'protocols': [{'protocoltype': 'mssql', 'port': 1433}], 'targetfqdns': [\"[concat('sql1', environment().suffixes.sqlserverhostname)]\"], 'sourceipgroups': [\"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name1'))]\", \"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name2'))]\"]}]}}], 'networkrulecollections': [{'name': 'netrc1', 'properties': {'priority': 200, 'action': {'type': 'allow'}, 'rules': [{'name': 'networkrule', 'description': 'desc1', 'protocols': ['udp', 'tcp', 'icmp'], 'sourceaddresses': ['10.0.0.0', '111.1.0.0/23'], 'sourceipgroups': [\"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name1'))]\"], 'destinationipgroups': [\"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name2'))]\"], 'destinationports': ['90']}]}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Traffic Manager profile using external endpoints.\n\n===\n\n", "completion": " {'type': 'microsoft.network/trafficmanagerprofiles', 'apiversion': '2018-08-01', 'name': 'externalendpointexample', 'location': 'global', 'properties': {'profilestatus': 'enabled', 'trafficroutingmethod': 'performance', 'dnsconfig': {'relativename': \"[parameters('uniquednsname')]\", 'ttl': 30}, 'monitorconfig': {'protocol': 'https', 'port': 443, 'path': '/', 'expectedstatuscoderanges': [{'min': 200, 'max': 202}, {'min': 301, 'max': 302}]}, 'endpoints': [{'type': 'microsoft.network/trafficmanagerprofiles/externalendpoints', 'name': 'endpoint1', 'properties': {'target': 'www.microsoft.com', 'endpointstatus': 'enabled', 'endpointlocation': 'northeurope'}}, {'type': 'microsoft.network/trafficmanagerprofiles/externalendpoints', 'name': 'endpoint2', 'properties': {'target': 'docs.microsoft.com', 'endpointstatus': 'enabled', 'endpointlocation': 'southcentralus'}}]}} END"}
{"prompt": "\n\n###\n\nThis template allows you to add an NSG with Azure Redis Cache security rules to an existing subnet within a VNET.\n\n===\n\n", "completion": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[parameters('newnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow_outbound_storage_pki', 'properties': {'description': 'redis dependencies on azure storage/pki (internet)', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['80', '443'], 'sourceaddressprefix': '*', 'destinationaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'access': 'allow', 'priority': 200, 'direction': 'outbound'}}, {'name': 'allow_outbound_dns', 'properties': {'description': 'redis dependencies on dns (internet/vnet)', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '53', 'sourceaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 201, 'direction': 'outbound'}}, {'name': 'allow_outbound_redisportswithinsubnet', 'properties': {'description': 'internal communications for redis', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['6379', '6380', '8443', '10221-10231', '20226', '13000-13999', '15000-15999'], 'sourceaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'destinationaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'access': 'allow', 'priority': 202, 'direction': 'outbound'}}, {'name': 'allow_inbound_clientendpoints', 'properties': {'description': 'client communication to redis, azure load balancing', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['6379', '6380'], 'sourceaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'destinationaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'access': 'allow', 'priority': 200, 'direction': 'inbound'}}, {'name': 'allow_inbound_clientcommunicationwithinvnet', 'properties': {'description': 'client communication to redis, azure load balancing', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['6379', '6380', '13000-13999', '15000-15999'], 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'access': 'allow', 'priority': 201, 'direction': 'inbound'}}, {'name': 'allow_inbound_loadbalancingwithinvnet', 'properties': {'description': 'client communication to redis, azure load balancing', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['6379', '6380', '13000-13999', '15000-15999'], 'sourceaddressprefix': 'azureloadbalancer', 'destinationaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'access': 'allow', 'priority': 202, 'direction': 'inbound'}}, {'name': 'allow_inbound_internalrediscommunication', 'properties': {'description': 'internal communications for redis', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportranges': ['8443', '10221-10231', '20226'], 'sourceaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'destinationaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'access': 'allow', 'priority': 203, 'direction': 'inbound'}}, {'name': 'allow_inbound_loadbalancertoredisinternaladdresses', 'properties': {'description': 'internal communications for redis', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '10221-10231', 'sourceaddressprefix': 'azureloadbalancer', 'destinationaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'access': 'allow', 'priority': 204, 'direction': 'inbound'}}, {'name': 'allow_inbound_loadbalancing', 'properties': {'description': 'azure load balancing', 'protocol': '*', 'sourceportrange': '*', 'destinationportranges': ['8500', '16001'], 'sourceaddressprefix': 'azureloadbalancer', 'destinationaddressprefix': \"[reference(variables('subnetid'), '2018-04-01').addressprefix]\", 'access': 'allow', 'priority': 205, 'direction': 'inbound'}}]}} END"}
{"prompt": "\n\n###\n\nDeploy a NAT gateway and virtual machine to the virtual network associated with the NAT gateway\n\n===\n\n", "completion": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[parameters('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 300, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[parameters('publicipname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[parameters('publicipvmname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/publicipprefixes', 'apiversion': '2020-06-01', 'name': \"[parameters('publicipprefixname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'prefixlength': 31, 'publicipaddressversion': 'ipv4'}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/natgateways', parameters('natgatewayname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressspace')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('vnetsubnetprefix')]\", 'natgateway': {'id': \"[resourceid('microsoft.network/natgateways', parameters('natgatewayname'))]\"}, 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/natgateways', 'apiversion': '2020-06-01', 'name': \"[parameters('natgatewayname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', parameters('publicipname'))]\", \"[resourceid('microsoft.network/publicipprefixes', parameters('publicipprefixname'))]\"], 'properties': {'idletimeoutinminutes': 4, 'publicipaddresses': [{'id': \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipname'))]\"}], 'publicipprefixes': [{'id': \"[resourceid('microsoft.network/publicipprefixes', parameters('publicipprefixname'))]\"}]}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-05-01', 'name': \"[concat(parameters('vnetname'), '/mysubnet')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\", \"[resourceid('microsoft.network/natgateways', parameters('natgatewayname'))]\"], 'properties': {'addressprefix': \"[parameters('vnetsubnetprefix')]\", 'natgateway': {'id': \"[resourceid('microsoft.network/natgateways', parameters('natgatewayname'))]\"}, 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[parameters('networkinterfacename')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', parameters('publicipvmname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), 'mysubnet')]\", \"[resourceid('microsoft.network/networksecuritygroups', parameters('nsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipaddress': '192.168.0.4', 'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipvmname'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), 'mysubnet')]\"}, 'primary': true, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': false, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', parameters('nsgname'))]\"}}} END"}
{"prompt": "\n\n###\n\nThis template applies a newly created NSG to an existing subnet\n\n===\n\n", "completion": " {'type': 'microsoft.network/networksecuritygroups', 'name': 'new-nsg', 'location': \"[parameters('location')]\", 'apiversion': '2020-05-01', 'properties': {'securityrules': [{'name': 'ssh', 'properties': {'description': 'allows ssh traffic', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}} END"}
{"prompt": "\n\n###\n\nApplication Gateway with WAF and firewall policy\n\n===\n\n", "completion": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2021-03-01', 'name': \"[parameters('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/applicationgateways', 'apiversion': '2021-03-01', 'name': \"[parameters('applicationgatewayname')]\", 'location': \"[parameters('location')]\", 'identity': \"[if(not(empty(parameters('managedidentityresourceid'))), createobject('type', 'userassigned', 'userassignedidentities', createobject(format('{0}', parameters('managedidentityresourceid')), createobject())), null())]\", 'properties': {'copy': [{'name': 'frontendports', 'count': \"[length(parameters('frontendports'))]\", 'input': {'name': \"[parameters('frontendports')[copyindex('frontendports')].name]\", 'properties': {'port': \"[parameters('frontendports')[copyindex('frontendports')].port]\"}}}, {'name': 'probes', 'count': \"[length(parameters('customprobes'))]\", 'input': {'name': \"[parameters('customprobes')[copyindex('probes')].name]\", 'properties': {'protocol': \"[parameters('customprobes')[copyindex('probes')].protocol]\", 'host': \"[parameters('customprobes')[copyindex('probes')].host]\", 'path': \"[parameters('customprobes')[copyindex('probes')].path]\", 'interval': \"[parameters('customprobes')[copyindex('probes')].interval]\", 'timeout': \"[parameters('customprobes')[copyindex('probes')].timeout]\", 'unhealthythreshold': \"[parameters('customprobes')[copyindex('probes')].unhealthythreshold]\", 'pickhostnamefrombackendhttpsettings': \"[parameters('customprobes')[copyindex('probes')].pickhostnamefrombackendhttpsettings]\", 'minservers': \"[parameters('customprobes')[copyindex('probes')].minservers]\", 'match': \"[parameters('customprobes')[copyindex('probes')].match]\"}}}, {'name': 'backendaddresspools', 'count': \"[length(parameters('backendaddresspools'))]\", 'input': {'name': \"[parameters('backendaddresspools')[copyindex('backendaddresspools')].name]\", 'properties': {'backendaddresses': \"[parameters('backendaddresspools')[copyindex('backendaddresspools')].backendaddresses]\"}}}, {'name': 'trustedrootcertificates', 'count': \"[length(parameters('trustedrootcertificates'))]\", 'input': {'name': \"[parameters('trustedrootcertificates')[copyindex('trustedrootcertificates')].name]\", 'properties': {'keyvaultsecretid': \"[format('{0}secrets/{1}', reference(parameters('trustedrootcertificates')[copyindex('trustedrootcertificates')].keyvaultresourceid, '2021-10-01').vaulturi, parameters('trustedrootcertificates')[copyindex('trustedrootcertificates')].secretname)]\"}}}, {'name': 'sslcertificates', 'count': \"[length(parameters('sslcertificates'))]\", 'input': {'name': \"[parameters('sslcertificates')[copyindex('sslcertificates')].name]\", 'properties': {'keyvaultsecretid': \"[format('{0}secrets/{1}', reference(parameters('sslcertificates')[copyindex('sslcertificates')].keyvaultresourceid, '2021-10-01').vaulturi, parameters('sslcertificates')[copyindex('sslcertificates')].secretname)]\"}}}, {'name': 'backendhttpsettingscollection', 'count': \"[length(parameters('backendhttpsettings'))]\", 'input': {'name': \"[parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')].name]\", 'properties': {'port': \"[parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')].port]\", 'protocol': \"[parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')].protocol]\", 'cookiebasedaffinity': \"[parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')].cookiebasedaffinity]\", 'affinitycookiename': \"[if(contains(parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')], 'affinitycookiename'), parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')].affinitycookiename, null())]\", 'requesttimeout': \"[parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')].requesttimeout]\", 'connectiondraining': \"[parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')].connectiondraining]\", 'probe': '[if(contains(parameters(\\'backendhttpsettings\\')[copyindex(\\'backendhttpsettingscollection\\')], \\'probename\\'), json(format(\\'{{\"id\": \"{0}\"}}\\', resourceid(\\'microsoft.network/applicationgateways/probes\\', parameters(\\'applicationgatewayname\\'), parameters(\\'backendhttpsettings\\')[copyindex(\\'backendhttpsettingscollection\\')].probename))), null())]', 'trustedrootcertificates': '[if(contains(parameters(\\'backendhttpsettings\\')[copyindex(\\'backendhttpsettingscollection\\')], \\'trustedrootcertificate\\'), json(format(\\'[{{\"id\": \"{0}\"}}]\\', resourceid(\\'microsoft.network/applicationgateways/trustedrootcertificates\\', parameters(\\'applicationgatewayname\\'), parameters(\\'backendhttpsettings\\')[copyindex(\\'backendhttpsettingscollection\\')].trustedrootcertificate))), null())]', 'hostname': \"[if(contains(parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')], 'hostname'), parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')].hostname, null())]\", 'pickhostnamefrombackendaddress': \"[if(contains(parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')], 'pickhostnamefrombackendaddress'), parameters('backendhttpsettings')[copyindex('backendhttpsettingscollection')].pickhostnamefrombackendaddress, false())]\"}}}, {'name': 'httplisteners', 'count': \"[length(parameters('httplisteners'))]\", 'input': {'name': \"[parameters('httplisteners')[copyindex('httplisteners')].name]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', parameters('applicationgatewayname'), variables('frontendipconfigurationname'))]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', parameters('applicationgatewayname'), parameters('httplisteners')[copyindex('httplisteners')].frontendport)]\"}, 'protocol': \"[parameters('httplisteners')[copyindex('httplisteners')].protocol]\", 'sslcertificate': '[if(contains(parameters(\\'httplisteners\\')[copyindex(\\'httplisteners\\')], \\'sslcertificate\\'), json(format(\\'{{\"id\": \"{0}\"}}\\', resourceid(\\'microsoft.network/applicationgateways/sslcertificates\\', parameters(\\'applicationgatewayname\\'), parameters(\\'httplisteners\\')[copyindex(\\'httplisteners\\')].sslcertificate))), null())]', 'hostnames': \"[if(contains(parameters('httplisteners')[copyindex('httplisteners')], 'hostnames'), parameters('httplisteners')[copyindex('httplisteners')].hostnames, null())]\", 'hostname': \"[if(contains(parameters('httplisteners')[copyindex('httplisteners')], 'hostname'), parameters('httplisteners')[copyindex('httplisteners')].hostname, null())]\", 'requireservernameindication': \"[if(contains(parameters('httplisteners')[copyindex('httplisteners')], 'requireservernameindication'), parameters('httplisteners')[copyindex('httplisteners')].requireservernameindication, false())]\", 'firewallpolicy': '[if(contains(parameters(\\'httplisteners\\')[copyindex(\\'httplisteners\\')], \\'firewallpolicy\\'), json(format(\\'{{\"id\": \"{0}\"}}\\', resourceid(\\'microsoft.network/applicationgatewaywebapplicationfirewallpolicies\\', if(equals(parameters(\\'firewallpolicyname\\'), \\'\\'), \\'placeholdervalue\\', parameters(\\'firewallpolicyname\\'))))), null())]'}}}, {'name': 'requestroutingrules', 'count': \"[length(parameters('rules'))]\", 'input': {'name': \"[parameters('rules')[copyindex('requestroutingrules')].name]\", 'properties': {'ruletype': \"[parameters('rules')[copyindex('requestroutingrules')].ruletype]\", 'httplistener': '[if(contains(parameters(\\'rules\\')[copyindex(\\'requestroutingrules\\')], \\'listener\\'), json(format(\\'{{\"id\": \"{0}\"}}\\', resourceid(\\'microsoft.network/applicationgateways/httplisteners\\', parameters(\\'applicationgatewayname\\'), parameters(\\'rules\\')[copyindex(\\'requestroutingrules\\')].listener))), null())]', 'backendaddresspool': '[if(contains(parameters(\\'rules\\')[copyindex(\\'requestroutingrules\\')], \\'backendpool\\'), json(format(\\'{{\"id\": \"{0}\"}}\\', resourceid(\\'microsoft.network/applicationgateways/backendaddresspools\\', parameters(\\'applicationgatewayname\\'), parameters(\\'rules\\')[copyindex(\\'requestroutingrules\\')].backendpool))), null())]', 'backendhttpsettings': '[if(contains(parameters(\\'rules\\')[copyindex(\\'requestroutingrules\\')], \\'backendhttpsettings\\'), json(format(\\'{{\"id\": \"{0}\"}}\\', resourceid(\\'microsoft.network/applicationgateways/backendhttpsettingscollection\\', parameters(\\'applicationgatewayname\\'), parameters(\\'rules\\')[copyindex(\\'requestroutingrules\\')].backendhttpsettings))), null())]', 'redirectconfiguration': '[if(contains(parameters(\\'rules\\')[copyindex(\\'requestroutingrules\\')], \\'redirectconfiguration\\'), json(format(\\'{{\"id\": \"{0}\"}}\\', resourceid(\\'microsoft.network/applicationgateways/redirectconfigurations\\', parameters(\\'applicationgatewayname\\'), parameters(\\'rules\\')[copyindex(\\'requestroutingrules\\')].redirectconfiguration))), null())]'}}}, {'name': 'redirectconfigurations', 'count': \"[length(parameters('redirectconfigurations'))]\", 'input': {'name': \"[parameters('redirectconfigurations')[copyindex('redirectconfigurations')].name]\", 'properties': {'redirecttype': \"[parameters('redirectconfigurations')[copyindex('redirectconfigurations')].redirecttype]\", 'targeturl': \"[parameters('redirectconfigurations')[copyindex('redirectconfigurations')].targeturl]\", 'targetlistener': '[if(contains(parameters(\\'redirectconfigurations\\')[copyindex(\\'redirectconfigurations\\')], \\'targetlistener\\'), json(format(\\'{{\"id\": \"{0}\"}}\\', resourceid(\\'microsoft.network/applicationgateways/httplisteners\\', parameters(\\'applicationgatewayname\\'), parameters(\\'redirectconfigurations\\')[copyindex(\\'redirectconfigurations\\')].targetlistener))), null())]', 'includepath': \"[parameters('redirectconfigurations')[copyindex('redirectconfigurations')].includepath]\", 'includequerystring': \"[parameters('redirectconfigurations')[copyindex('redirectconfigurations')].includequerystring]\", 'requestroutingrules': [{'id': \"[resourceid('microsoft.network/applicationgateways/requestroutingrules', parameters('applicationgatewayname'), parameters('redirectconfigurations')[copyindex('redirectconfigurations')].requestroutingrule)]\"}]}}}], 'sku': {'name': \"[parameters('sku')]\", 'tier': \"[parameters('tier')]\"}, 'autoscaleconfiguration': {'mincapacity': \"[parameters('capacity')]\", 'maxcapacity': \"[parameters('autoscalemaxcapacity')]\"}, 'enablehttp2': \"[parameters('http2enabled')]\", 'webapplicationfirewallconfiguration': \"[if(parameters('enablewebapplicationfirewall'), createobject('enabled', if(equals(parameters('firewallpolicysettings').state, 'enabled'), true(), false()), 'firewallmode', parameters('firewallpolicysettings').mode, 'rulesettype', 'owasp', 'rulesetversion', '3.2'), null())]\", 'gatewayipconfigurations': [{'name': \"[variables('gatewayipconfigurationname')]\", 'properties': {'subnet': {'id': \"[resourceid(parameters('vnetsubscriptionid'), parameters('existingvnetresourcegroup'), 'microsoft.network/virtualnetworks/subnets', parameters('existingvnetname'), parameters('existingsubnetname'))]\"}}}], 'frontendipconfigurations': [{'name': \"[variables('frontendipconfigurationname')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipaddressname'))]\"}}}], 'firewallpolicy': \"[if(parameters('enablewebapplicationfirewall'), createobject('id', resourceid('microsoft.network/applicationgatewaywebapplicationfirewallpolicies', if(equals(parameters('firewallpolicyname'), ''), 'placeholdervalue', parameters('firewallpolicyname')))), null())]\"}, 'dependson': [\"[resourceid('microsoft.network/applicationgatewaywebapplicationfirewallpolicies', if(equals(parameters('firewallpolicyname'), ''), 'placeholdervalue', parameters('firewallpolicyname')))]\", \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipaddressname'))]\"]}{'condition': \"[parameters('enablewebapplicationfirewall')]\", 'type': 'microsoft.network/applicationgatewaywebapplicationfirewallpolicies', 'apiversion': '2021-03-01', 'name': \"[if(equals(parameters('firewallpolicyname'), ''), 'placeholdervalue', parameters('firewallpolicyname'))]\", 'location': \"[parameters('location')]\", 'properties': {'customrules': \"[parameters('firewallpolicycustomrules')]\", 'policysettings': \"[parameters('firewallpolicysettings')]\", 'managedrules': {'managedrulesets': \"[parameters('firewallpolicymanagedrulesets')]\", 'exclusions': \"[parameters('firewallpolicymanagedruleexclusions')]\"}}} END"}
{"prompt": "\n\n###\n\nReserved IP Use Case Snippet\n\n===\n\n", "completion": " {'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('network_pip_reserved_name')]\", 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[variables('network_pip_reserved_fqdn')]\"}}}{'type': 'microsoft.network/loadbalancers', 'name': \"[variables('network_lb_public_name')]\", 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('network_pip_reserved_id')]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('network_lb_public_fename')]\", 'properties': {'publicipaddress': {'id': \"[variables('network_pip_reserved_id')]\"}}}], 'backendaddresspools': [{'name': \"[variables('network_lb_public_bepoolname')]\"}], 'inboundnatrules': [{'name': \"[variables('network_lb_public_natrule_ssh_vm_name')]\", 'properties': {'frontendipconfiguration': {'id': \"[variables('network_lb_public_feid')]\"}, 'protocol': 'tcp', 'frontendport': \"[variables('network_lb_public_natrule_ssh_vm_publicport')]\", 'backendport': 22, 'enablefloatingip': false}}]}}{'type': 'microsoft.network/loadbalancers', 'name': \"[variables('network_lb_public_name2')]\", 'apiversion': '2020-11-01', 'location': \"[parameters('location')]\", 'properties': {'frontendipconfigurations': [{'name': \"[variables('network_lb_public_fename2')]\", 'properties': {'publicipaddress': {'id': \"[variables('network_pip_reserved_id2')]\"}}}], 'backendaddresspools': [{'name': \"[variables('network_lb_public_bepoolname2')]\"}], 'inboundnatrules': [{'name': \"[variables('network_lb_public_natrule_ssh_vm_name2')]\", 'properties': {'frontendipconfiguration': {'id': \"[variables('network_lb_public_feid2')]\"}, 'protocol': 'tcp', 'frontendport': \"[variables('network_lb_public_natrule_ssh_vm_publicport2')]\", 'backendport': 22, 'enablefloatingip': false}}]}} END"}
{"prompt": "\n\n###\n\nDeploy a NAT gateway and virtual network.  The NAT gateway resource will be associated with the single subnet in the virtual network\n\n===\n\n", "completion": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('publicipname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4, 'dnssettings': {'domainnamelabel': \"[parameters('publicipdns')]\"}}}{'type': 'microsoft.network/natgateways', 'apiversion': '2020-06-01', 'name': \"[parameters('natgatewayname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'idletimeoutinminutes': 4, 'publicipaddresses': \"[if(not(empty(parameters('publicipdns'))), variables('publicipaddresses'), null())]\"}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('publicipname'))]\"]}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressspace')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('vnetsubnetprefix')]\", 'natgateway': {'id': \"[resourceid('microsoft.network/natgateways', parameters('natgatewayname'))]\"}, 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}], 'enableddosprotection': false, 'enablevmprotection': false}, 'dependson': [\"[resourceid('microsoft.network/natgateways', parameters('natgatewayname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreates a simple environment that shows how to work with Application Security Groups within templates.\n\n===\n\n", "completion": " {'comments': 'application security group', 'name': \"[variables('asgname')]\", 'type': 'microsoft.network/applicationsecuritygroups', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {}}{'comments': 'network security group', 'name': \"[variables('nsgname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('asgname')]\"], 'properties': {'securityrules': [{'name': 'allowhttpall', 'properties': {'description': 'allow http traffic to web servers', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'direction': 'inbound', 'access': 'allow', 'priority': 100, 'protocol': 'tcp', 'destinationportrange': '80', 'destinationapplicationsecuritygroups': [{'id': \"[variables('asgid')]\"}]}}, {'name': 'allowsshall', 'properties': {'description': 'allow ssh traffic to web servers', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'direction': 'inbound', 'access': 'allow', 'priority': 200, 'protocol': 'tcp', 'destinationportrange': '22', 'destinationapplicationsecuritygroups': [{'id': \"[variables('asgid')]\"}]}}]}}{'comments': 'virtual network', 'name': \"[variables('vnetname')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nsgname')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressspace')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetadressprefix')]\", 'networksecuritygroup': {'id': \"[variables('nsgid')]\"}}}]}}{'comments': 'public ip address', 'name': \"[variables('pipname')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'web server network interface', 'name': \"[concat(parameters('vmname'),'-nic')]\", 'type': 'microsoft.network/networkinterfaces', 'location': \"[parameters('location')]\", 'apiversion': '2020-05-01', 'dependson': [\"[variables('vnetname')]\", \"[variables('pipname')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[variables('pipid')]\"}, 'subnet': {'id': \"[variables('subnetid')]\"}, 'applicationsecuritygroups': [{'id': \"[variables('asgid')]\"}]}}]}} END"}
{"prompt": "\n\n###\n\nCreate an virtual hub secured with Azure Firewall\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualwans', 'apiversion': '2020-06-01', 'name': 'vwan-01', 'location': \"[parameters('location')]\", 'properties': {'disablevpnencryption': false, 'allowbranchtobranchtraffic': true, 'office365localbreakoutcategory': 'none', 'type': 'standard'}}{'type': 'microsoft.network/virtualhubs', 'apiversion': '2020-06-01', 'name': 'hub-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualwans', 'vwan-01')]\"], 'properties': {'addressprefix': '10.1.0.0/16', 'virtualwan': {'id': \"[resourceid('microsoft.network/virtualwans', 'vwan-01')]\"}}}{'type': 'microsoft.network/virtualhubs/hubvirtualnetworkconnections', 'apiversion': '2020-06-01', 'name': 'hub-01/hub-spoke', 'dependson': [\"[resourceid('microsoft.network/azurefirewalls', 'azfwtest')]\", \"[resourceid('microsoft.network/virtualhubs', 'hub-01')]\", \"[resourceid('microsoft.network/virtualnetworks', 'spoke-01')]\", \"[resourceid('microsoft.network/virtualhubs/hubroutetables', 'hub-01', 'rt_vnet')]\"], 'properties': {'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', 'spoke-01')]\"}, 'allowhubtoremotevnettransit': true, 'allowremotevnettousehubvnetgateways': false, 'enableinternetsecurity': true, 'routingconfiguration': {'associatedroutetable': {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', 'hub-01', 'rt_vnet')]\"}, 'propagatedroutetables': {'labels': ['vnet'], 'ids': [{'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', 'hub-01', 'rt_vnet')]\"}]}}}}{'type': 'microsoft.network/firewallpolicies', 'apiversion': '2020-06-01', 'name': 'policy-01', 'location': \"[parameters('location')]\", 'properties': {'threatintelmode': 'alert'}}{'type': 'microsoft.network/firewallpolicies/rulecollectiongroups', 'apiversion': '2020-06-01', 'name': 'policy-01/defaultapplicationrulecollectiongroup', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/firewallpolicies', 'policy-01')]\"], 'properties': {'priority': 300, 'rulecollections': [{'rulecollectiontype': 'firewallpolicyfilterrulecollection', 'name': 'rc-01', 'priority': 100, 'action': {'type': 'allow'}, 'rules': [{'ruletype': 'applicationrule', 'name': 'allow-msft', 'sourceaddresses': ['*'], 'protocols': [{'port': '80', 'protocoltype': 'http'}, {'port': '443', 'protocoltype': 'https'}], 'targetfqdns': ['*.microsoft.com']}]}]}}{'type': 'microsoft.network/azurefirewalls', 'apiversion': '2020-06-01', 'name': 'azfwtest', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', 'hub-01')]\", \"[resourceid('microsoft.network/firewallpolicies', 'policy-01')]\"], 'properties': {'sku': {'name': 'azfw_hub', 'tier': 'standard'}, 'hubipaddresses': {'publicips': {'count': 1}}, 'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', 'hub-01')]\"}, 'firewallpolicy': {'id': \"[resourceid('microsoft.network/firewallpolicies', 'policy-01')]\"}}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': 'spoke-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'name': 'spoke-01/workload-sn', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', 'spoke-01')]\"], 'properties': {'addressprefix': '10.0.1.0/24', 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'name': 'spoke-01/jump-sn', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', 'spoke-01', 'workload-sn')]\", \"[resourceid('microsoft.network/routetables', 'rt-01')]\"], 'properties': {'addressprefix': '10.0.2.0/24', 'routetable': {'id': \"[resourceid('microsoft.network/routetables','rt-01')]\"}, 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': 'netinterface-workload-srv', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/subnets', 'spoke-01','workload-sn')]\", \"[resourceid('microsoft.network/networksecuritygroups', 'nsg-workload-srv')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', 'spoke-01', 'workload-sn')]\"}, 'primary': true, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': false, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', 'nsg-workload-srv')]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': 'netinterface-jump-srv', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', 'publicip-jump-srv')]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', 'spoke-01','jump-sn')]\", \"[resourceid('microsoft.network/networksecuritygroups', 'nsg-jump-srv')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', 'publicip-jump-srv')]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', 'spoke-01', 'jump-sn')]\"}, 'primary': true, 'privateipaddressversion': 'ipv4'}}], 'enableacceleratednetworking': false, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', 'nsg-jump-srv')]\"}}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': 'nsg-jump-srv', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'rdp', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 300, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': 'nsg-workload-srv', 'location': \"[parameters('location')]\", 'properties': {}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': 'publicip-jump-srv', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/routetables', 'apiversion': '2020-06-01', 'name': 'rt-01', 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'jump-to-inet', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'internet'}}]}}{'type': 'microsoft.network/virtualhubs/hubroutetables', 'apiversion': '2020-06-01', 'name': 'hub-01/rt_vnet', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/azurefirewalls', 'azfwtest')]\"], 'properties': {'routes': [{'name': 'workload-sntofirewall', 'destinationtype': 'cidr', 'destinations': ['10.0.1.0/24'], 'nexthoptype': 'resourceid', 'nexthop': \"[resourceid('microsoft.network/azurefirewalls', 'azfwtest')]\"}, {'name': 'internettofirewall', 'destinationtype': 'cidr', 'destinations': ['0.0.0.0/0'], 'nexthoptype': 'resourceid', 'nexthop': \"[resourceid('microsoft.network/azurefirewalls', 'azfwtest')]\"}], 'labels': ['vnet']}} END"}
{"prompt": "\n\n###\n\nCreate a sandbox setup of Azure Firewall with Linux jumpbox and Linux server\n\n===\n\n", "completion": " {'type': 'microsoft.network/routetables', 'name': \"[variables('azfwroutetablename')]\", 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'azfwdefaultroute', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('nexthopip')]\"}}]}}{'comments': \"simple network security group for subnet [variables('serverssubnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'name': \"[parameters('virtualnetworkname')]\", 'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'displayname': \"[parameters('virtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('jumpboxsubnetname')]\", 'properties': {'addressprefix': \"[variables('jumpboxsubnetprefix')]\"}}, {'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[variables('azurefirewallsubnetprefix')]\"}}, {'name': \"[variables('serverssubnetname')]\", 'properties': {'addressprefix': \"[variables('serverssubnetprefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\"}, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'name': \"[concat(variables('publicipnameprefix'), add(copyindex(), 1))]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberoffirewallpublicipaddresses')]\"}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'name': \"[variables('jumpboxpublicipaddressname')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'name': \"[variables('jumpboxnsgname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'mynetworksecuritygrouprulessh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('jumpboxnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\"}, 'subnet': {'id': \"[variables('jumpboxsubnetid')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('servernicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('serversubnetid')]\"}}}]}}{'apiversion': '2020-04-01', 'type': 'microsoft.network/firewallpolicies', 'name': \"[variables('firewallpolicyname')]\", 'location': \"[parameters('location')]\", 'properties': {'threatintelmode': 'alert'}, 'resources': [{'apiversion': '2020-04-01', 'type': 'rulegroups', 'name': 'networkrg', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/firewallpolicies', variables('firewallpolicyname'))]\", \"[resourceid('microsoft.network/firewallpolicies/rulegroups', variables('firewallpolicyname'), 'apprg')]\"], 'properties': {'priority': 100, 'rules': [{'name': 'networkrule1', 'conditiontype': 'network', 'ruletype': 'firewallpolicyfilterrule', 'action': {'type': 'allow'}, 'priority': 230, 'ruleconditions': [{'name': 'netrc1', 'ipprotocols': ['tcp'], 'destinationports': ['80'], 'sourceaddresses': ['*'], 'destinationaddresses': ['*'], 'ruleconditiontype': 'networkrulecondition'}]}]}}, {'apiversion': '2020-04-01', 'type': 'rulegroups', 'name': 'apprg', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/firewallpolicies', variables('firewallpolicyname'))]\"], 'properties': {'priority': 200, 'rules': [{'name': 'apprule1', 'priority': 4444, 'ruletype': 'firewallpolicyfilterrule', 'action': {'type': 'allow'}, 'ruleconditions': [{'ruleconditiontype': 'applicationrulecondition', 'name': 'apprc1', 'protocols': [{'protocoltype': 'http', 'port': 8000}], 'targetfqdns': ['*'], 'sourceaddresses': ['*']}]}]}}]}{'apiversion': '2020-04-01', 'type': 'microsoft.network/azurefirewalls', 'name': \"[variables('firewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/firewallpolicies', variables('firewallpolicyname'))]\", \"[resourceid('microsoft.network/firewallpolicies/rulegroups', variables('firewallpolicyname'), 'apprg')]\", \"[resourceid('microsoft.network/firewallpolicies/rulegroups', variables('firewallpolicyname'), 'networkrg')]\", 'publicipcopy'], 'properties': {'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'firewallpolicy': {'id': \"[resourceid('microsoft.network/firewallpolicies', variables('firewallpolicyname'))]\"}}} END"}
{"prompt": "\n\n###\n\nThis template updates a Front Door to enable session affinity for your frontend host, thereby, sending subsequent traffic from the same user session to the same backend.\n\n===\n\n", "completion": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/frontdoors', 'name': \"[parameters('frontdoorname')]\", 'location': \"[variables('frontdoorlocation')]\", 'properties': {'routingrules': [{'name': 'routingrule1', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'),'frontendendpoint1')]\"}], 'acceptedprotocols': ['http'], 'patternstomatch': ['/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'),'backendpool1')]\"}}, 'enabledstate': 'enabled'}}], 'healthprobesettings': [{'name': 'healthprobesettings1', 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}], 'loadbalancingsettings': [{'name': 'loadbalancingsettings1', 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}], 'backendpools': [{'name': 'backendpool1', 'properties': {'backends': [{'address': \"[parameters('backendaddress')]\", 'httpport': 80, 'httpsport': 443, 'weight': 50, 'priority': 1, 'enabledstate': 'enabled'}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'),'loadbalancingsettings1')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'),'healthprobesettings1')]\"}}}], 'frontendendpoints': [{'name': 'frontendendpoint1', 'properties': {'hostname': \"[variables('frontdoorhostname')]\", 'sessionaffinityenabledstate': \"[parameters('sessionaffinityenabledstate')]\", 'sessionaffinityttlseconds': \"[parameters('sessionaffinityttlseconds')]\"}}], 'enabledstate': 'enabled'}} END"}
{"prompt": "\n\n###\n\nThis template demonstrates configuring a Backend Pool by IP Address when deploying a Standard Load Balancer\n\n===\n\n", "completion": " {'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('projectname'),'-vm', copyindex(1), '-networkinterface')]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'networkinterfacecopy', 'count': 3}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('vnetsubnetname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[variables('nicipaddresses')[copyindex()]]\", 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('vnetsubnetname'))]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vnetname'), '/' ,variables('bastionsubnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('vnetsubnetname'))]\"], 'properties': {'addressprefix': \"[variables('vnetbastionsubnetaddressprefix')]\"}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'name': \"[concat(variables('vnetname'), '/' ,variables('vnetsubnetname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'addressprefix': \"[variables('vnetsubnetaddressprefix')]\"}}{'type': 'microsoft.network/bastionhosts', 'apiversion': '2020-05-01', 'name': \"[variables('bastionname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('bastionsubnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipaddressname'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('bastionsubnetname'))]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('bastionpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-06-01', 'name': \"[variables('lbname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('lbpublicipaddressname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('lbpublicipaddressnameoutbound'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfrontendname')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressname'))]\"}}}, {'name': \"[variables('lbfrontendnameoutbound')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressnameoutbound'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('lbbackendpoolname')]\"}], 'loadbalancingrules': [{'name': 'myhttprule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname'), variables('lbfrontendname'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('lbbackendpoolname'))]\"}, 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 15, 'protocol': 'tcp', 'enabletcpreset': true, 'loaddistribution': 'default', 'disableoutboundsnat': true, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('lbname'), variables('lbprobename'))]\"}}}], 'probes': [{'name': \"[variables('lbprobename')]\", 'properties': {'protocol': 'http', 'port': 80, 'requestpath': '/', 'intervalinseconds': 5, 'numberofprobes': 2}}], 'outboundrules': [{'name': 'myoutboundrule', 'properties': {'allocatedoutboundports': 10000, 'protocol': 'all', 'enabletcpreset': false, 'idletimeoutinminutes': 15, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('lbbackendpoolname'))]\"}, 'frontendipconfigurations': [{'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname'), variables('lbfrontendnameoutbound'))]\"}]}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('lbpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/loadbalancers/backendaddresspools', 'apiversion': '2020-05-01', 'name': \"[concat(variables('lbname'), '/', variables('lbbackendpoolname'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/loadbalancers', variables('lbname'))]\"], 'properties': {'copy': [{'name': 'loadbalancerbackendaddresses', 'count': \"[length(variables('nicipaddresses'))]\", 'input': {'name': \"[concat('address', copyindex('loadbalancerbackendaddresses'))]\", 'properties': {'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"}, 'ipaddress': \"[variables('nicipaddresses')[copyindex('loadbalancerbackendaddresses')]]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('lbpublicipaddressnameoutbound')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowhttpinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}}} END"}
{"prompt": "\n\n###\n\nCreate an Internet-facing standard load-balancer with three VMs\n\n===\n\n", "completion": " {'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[concat(parameters('projectname'),'-vm', copyindex(1), '-networkinterface')]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'networkinterfacecopy', 'count': 3}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('vnetsubnetname'))]\", \"[resourceid('microsoft.network/loadbalancers', variables('lbname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('vnetsubnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('lbbackendpoolname'))]\"}, {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('lbbackendpoolnameoutbound'))]\"}]}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'name': \"[concat(variables('vnetname'), '/' ,variables('bastionsubnetname'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'addressprefix': \"[variables('vnetbastionsubnetaddressprefix')]\"}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'name': \"[concat(variables('vnetname'), '/' ,variables('vnetsubnetname'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'addressprefix': \"[variables('vnetsubnetaddressprefix')]\"}}{'type': 'microsoft.network/bastionhosts', 'apiversion': '2020-05-01', 'name': \"[variables('bastionname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('bastionsubnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipaddressname'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('bastionsubnetname'))]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('bastionpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-06-01', 'name': \"[variables('lbname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('lbpublicipaddressname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('lbpublicipaddressnameoutbound'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfrontendname')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressname'))]\"}}}, {'name': \"[variables('lbfrontendnameoutbound')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressnameoutbound'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('lbbackendpoolname')]\"}, {'name': \"[variables('lbbackendpoolnameoutbound')]\"}], 'loadbalancingrules': [{'name': 'myhttprule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname'), variables('lbfrontendname'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('lbbackendpoolname'))]\"}, 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 15, 'protocol': 'tcp', 'enabletcpreset': true, 'loaddistribution': 'default', 'disableoutboundsnat': true, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('lbname'), variables('lbprobename'))]\"}}}], 'probes': [{'name': \"[variables('lbprobename')]\", 'properties': {'protocol': 'http', 'port': 80, 'requestpath': '/', 'intervalinseconds': 5, 'numberofprobes': 2}}], 'outboundrules': [{'name': 'myoutboundrule', 'properties': {'allocatedoutboundports': 10000, 'protocol': 'all', 'enabletcpreset': false, 'idletimeoutinminutes': 15, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname'), variables('lbbackendpoolnameoutbound'))]\"}, 'frontendipconfigurations': [{'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname'), variables('lbfrontendnameoutbound'))]\"}]}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('lbpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('lbpublicipaddressnameoutbound')]\", 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowhttpinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway in front of a web app with IP restriction\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'static'}, 'sku': {'name': 'standard'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\", \"[resourceid('microsoft.web/sites/', parameters('sitename'))]\"], 'properties': {'sku': {'name': 'standard_v2', 'tier': 'standard_v2', 'capacity': 2}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[variables('publicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[reference(parameters('sitename')).defaulthostname]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'pickhostnamefrombackendaddress': true, 'probeenabled': true, 'probe': {'id': \"[resourceid('microsoft.network/applicationgateways/probes/',variables('applicationgatewayname'), 'probe1')]\"}}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations/',variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports/',variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners/',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools/',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection/',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}], 'probes': [{'name': 'probe1', 'properties': {'protocol': 'http', 'path': '/', 'interval': 30, 'timeout': 10, 'unhealthythreshold': 3, 'minservers': 0, 'pickhostnamefrombackendhttpsettings': true}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a WAF geo filtering rule for Azure Front Door that allows/blocks traffic from certain countries.\n\n===\n\n", "completion": " {'apiversion': '2020-11-01', 'type': 'microsoft.network/frontdoorwebapplicationfirewallpolicies', 'name': \"[parameters('wafpolicyname')]\", 'location': \"[variables('waflocation')]\", 'properties': {'policysettings': {'mode': \"[parameters('wafmode')]\", 'enabledstate': 'enabled'}, 'customrules': {'rules': [{'name': 'rule1', 'priority': 1, 'ruletype': 'matchrule', 'matchconditions': [{'matchvariable': 'remoteaddr', 'operator': 'geomatch', 'matchvalue': [\"[parameters('geomatch')]\"]}], 'action': \"[parameters('geofilteringaction')]\"}]}}} END"}
{"prompt": "\n\n###\n\nCreates three vNets to demonstrate transitive BGP connections\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnet1').name]\", 'location': \"[parameters('location')]\", 'comments': 'this is the first vnet', 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet1').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet1').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet1').subnetprefix]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('vnet1').gatewaysubnetprefix]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnet2').name]\", 'location': \"[parameters('location')]\", 'comments': 'this is the second vnet', 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet2').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet2').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet2').subnetprefix]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('vnet2').gatewaysubnetprefix]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnet3').name]\", 'location': \"[parameters('location')]\", 'comments': 'this is the third vnet', 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet3').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet3').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet3').subnetprefix]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('vnet3').gatewaysubnetprefix]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('vnet1').gatewaypublicipname]\", 'location': \"[parameters('location')]\", 'comments': 'this is the public ip for vnet gateway 1', 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('vnet2').gatewaypublicipname]\", 'location': \"[parameters('location')]\", 'comments': 'this is the public ip for vnet gateway 2', 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('vnet3').gatewaypublicipname]\", 'location': \"[parameters('location')]\", 'comments': 'this is the public ip for vnet gateway 3', 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[variables('vnet1').gatewayname]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('vnet1').gatewaypublicipname)]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('vnet1').name)]\"], 'comments': 'this is the vnet gateway for vnet 1', 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gateway1subnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('vnet1').gatewaypublicipname)]\"}}, 'name': 'vnet1gatewayconfig'}], 'gatewaytype': 'vpn', 'sku': {'name': \"[variables('gatewaysku')]\", 'tier': \"[variables('gatewaysku')]\"}, 'vpntype': 'routebased', 'enablebgp': true, 'bgpsettings': {'asn': \"[variables('vnet1').asn]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[variables('vnet2').gatewayname]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('vnet2').gatewaypublicipname)]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('vnet2').name)]\"], 'comments': 'this is the vnet gateway for vnet 2', 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gateway2subnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('vnet2').gatewaypublicipname)]\"}}, 'name': 'vnet2gatewayconfig'}], 'gatewaytype': 'vpn', 'sku': {'name': \"[variables('gatewaysku')]\", 'tier': \"[variables('gatewaysku')]\"}, 'vpntype': 'routebased', 'enablebgp': true, 'bgpsettings': {'asn': \"[variables('vnet2').asn]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[variables('vnet3').gatewayname]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('vnet3').gatewaypublicipname)]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('vnet3').name)]\"], 'comments': 'this is the vnet gateway for vnet 3', 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gateway3subnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('vnet3').gatewaypublicipname)]\"}}, 'name': 'vnet3gatewayconfig'}], 'gatewaytype': 'vpn', 'sku': {'name': \"[variables('gatewaysku')]\", 'tier': \"[variables('gatewaysku')]\"}, 'vpntype': 'routebased', 'enablebgp': true, 'bgpsettings': {'asn': \"[variables('vnet3').asn]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/connections', 'name': \"[variables('vnet1').connectionname]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways/', variables('vnet1').gatewayname)]\", \"[resourceid('microsoft.network/virtualnetworkgateways/', variables('vnet2').gatewayname)]\"], 'comments': 'this is the vpn connection from gateway 1 to gateway 2', 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('vnet1').gatewayname)]\"}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('vnet2').gatewayname)]\"}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/connections', 'name': \"[variables('vnet2').connection1name]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways/', variables('vnet1').gatewayname)]\", \"[resourceid('microsoft.network/virtualnetworkgateways/', variables('vnet2').gatewayname)]\"], 'comments': 'this is the vpn connection from gateway 2 to gateway 1', 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('vnet2').gatewayname)]\"}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('vnet1').gatewayname)]\"}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/connections', 'name': \"[variables('vnet2').connection2name]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways/', variables('vnet2').gatewayname)]\", \"[resourceid('microsoft.network/virtualnetworkgateways/', variables('vnet3').gatewayname)]\"], 'comments': 'this is the vpn connection from gateway 2 to gateway 3', 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('vnet2').gatewayname)]\"}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('vnet3').gatewayname)]\"}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/connections', 'name': \"[variables('vnet3').connectionname]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways/', variables('vnet2').gatewayname)]\", \"[resourceid('microsoft.network/virtualnetworkgateways/', variables('vnet3').gatewayname)]\"], 'comments': 'this is the vpn connection from gateway 3 to gateway 2', 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('vnet3').gatewayname)]\"}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('vnet2').gatewayname)]\"}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}} END"}
{"prompt": "\n\n###\n\nThis template creates a private DNS zone within the Azure DNS resource provider.  It can optionally enable VM registration which lets newly created VMs add their A record to the zone.\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-03-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[parameters('privatednszonename')]\", 'location': 'global'}{'type': 'microsoft.network/privatednszones/virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('privatednszonename'), format('{0}-link', parameters('vnetname')))]\", 'location': 'global', 'properties': {'registrationenabled': \"[parameters('vmregistration')]\", 'virtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/privatednszones', parameters('privatednszonename'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door with load balancing configured for multiple backends in a backend pool and also across backend pools based on URL path.\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/frontdoors', 'name': \"[parameters('frontdoorname')]\", 'location': \"[variables('frontdoorlocation')]\", 'properties': {'routingrules': [{'name': 'routingrule1', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), 'frontendendpoint1')]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*', '/site1/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), 'backendpool1')]\"}}, 'enabledstate': 'enabled'}}, {'name': 'routingrule2', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), 'frontendendpoint1')]\"}], 'acceptedprotocols': ['https'], 'patternstomatch': ['/site2/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), 'backendpool2')]\"}}, 'enabledstate': 'enabled'}}], 'healthprobesettings': [{'name': 'healthprobesettings1', 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}, {'name': 'healthprobesettings2', 'properties': {'path': '/', 'protocol': 'https', 'intervalinseconds': 60}}], 'loadbalancingsettings': [{'name': 'loadbalancingsettings1', 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}, {'name': 'loadbalancingsettings2', 'properties': {'samplesize': 2, 'successfulsamplesrequired': 1}}], 'backendpools': [{'name': \"[parameters('backendpools1').name]\", 'properties': {'copy': [{'name': 'backends', 'count': \"[length(parameters('backendpools1').backends)]\", 'input': {'address': \"[parameters('backendpools1').backends[copyindex('backends')].address]\", 'httpport': \"[parameters('backendpools1').backends[copyindex('backends')].httpport]\", 'httpsport': \"[parameters('backendpools1').backends[copyindex('backends')].httpsport]\", 'weight': \"[parameters('backendpools1').backends[copyindex('backends')].weight]\", 'priority': \"[parameters('backendpools1').backends[copyindex('backends')].priority]\", 'enabledstate': \"[parameters('backendpools1').backends[copyindex('backends')].enabledstate]\"}}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), 'loadbalancingsettings1')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), 'healthprobesettings1')]\"}}}, {'name': \"[parameters('backendpools2').name]\", 'properties': {'copy': [{'name': 'backends', 'count': \"[length(parameters('backendpools2').backends)]\", 'input': {'address': \"[parameters('backendpools2').backends[copyindex('backends')].address]\", 'httpport': \"[parameters('backendpools2').backends[copyindex('backends')].httpport]\", 'httpsport': \"[parameters('backendpools2').backends[copyindex('backends')].httpsport]\", 'weight': \"[parameters('backendpools2').backends[copyindex('backends')].weight]\", 'priority': \"[parameters('backendpools2').backends[copyindex('backends')].priority]\", 'enabledstate': \"[parameters('backendpools2').backends[copyindex('backends')].enabledstate]\"}}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), 'loadbalancingsettings2')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), 'healthprobesettings2')]\"}}}], 'frontendendpoints': [{'name': 'frontendendpoint1', 'properties': {'hostname': \"[concat(parameters('frontdoorname'), '.azurefd.net')]\", 'sessionaffinityenabledstate': 'disabled'}}], 'enabledstate': 'enabled'}} END"}
{"prompt": "\n\n###\n\nThis template creates a basic Front Door configuration with a single backend, single default path match '/*' and no custom domain.\n\n===\n\n", "completion": " {'type': 'microsoft.network/frontdoors', 'apiversion': '2020-05-01', 'name': \"[parameters('frontdoorname')]\", 'location': 'global', 'properties': {'enabledstate': 'enabled', 'frontendendpoints': [{'name': \"[variables('frontendendpointname')]\", 'properties': {'hostname': \"[format('{0}.azurefd.net', parameters('frontdoorname'))]\", 'sessionaffinityenabledstate': 'disabled'}}], 'loadbalancingsettings': [{'name': \"[variables('loadbalancingsettingsname')]\", 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}], 'healthprobesettings': [{'name': \"[variables('healthprobesettingsname')]\", 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}], 'backendpools': [{'name': \"[variables('backendpoolname')]\", 'properties': {'backends': [{'address': \"[parameters('backendaddress')]\", 'backendhostheader': \"[parameters('backendaddress')]\", 'httpport': 80, 'httpsport': 443, 'weight': 50, 'priority': 1, 'enabledstate': 'enabled'}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), variables('loadbalancingsettingsname'))]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), variables('healthprobesettingsname'))]\"}}}], 'routingrules': [{'name': \"[variables('routingrulename')]\", 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), variables('frontendendpointname'))]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), variables('backendpoolname'))]\"}}, 'enabledstate': 'enabled'}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Internet-facing load-balancer with a Public IPv6 address\n\n===\n\n", "completion": " {'apiversion': '2016-03-30', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('ipv4publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': \"[variables('ipv4publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforipv4lbip')]\"}}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('ipv6publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipaddressversion': 'ipv6', 'publicipallocationmethod': \"[variables('ipv6publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforipv6lbip')]\"}}}{'comments': \"simple network security group for subnet [variables('subnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'apiversion': '2016-03-30', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'apiversion': '2018-01-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[concat(variables('nicnameprefix'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'nicloop', 'count': \"[variables('numberofinstances')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/loadbalancers', variables('lbname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipv4ipconfig', 'properties': {'privateipaddressversion': 'ipv4', 'privateipallocationmethod': \"[variables('ipv4privateipaddresstype')]\", 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets',variables('vnetname'), variables('subnetname'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[variables('ipv4lbbackendpoolid')]\"}], 'loadbalancerinboundnatrules': [{'id': \"[resourceid('microsoft.network/loadbalancers/inboundnatrules',variables('lbname'),concat('rdp-vm', copyindex()))]\"}]}}, {'name': 'ipv6ipconfig', 'properties': {'privateipaddressversion': 'ipv6', 'privateipallocationmethod': \"[variables('ipv6privateipaddresstype')]\", 'loadbalancerbackendaddresspools': [{'id': \"[variables('ipv6lbbackendpoolid')]\"}]}}]}}{'apiversion': '2016-03-30', 'name': \"[variables('lbname')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('ipv4publicipaddressname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('ipv6publicipaddressname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontendipv4', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('ipv4publicipaddressname'))]\"}}}, {'name': 'loadbalancerfrontendipv6', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('ipv6publicipaddressname'))]\"}}}], 'backendaddresspools': [{'name': 'backendpoolipv4'}, {'name': 'backendpoolipv6'}], 'inboundnatrules': [{'name': 'rdp-vm0', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname'),'loadbalancerfrontendipv4')]\"}, 'protocol': 'tcp', 'frontendport': 50001, 'backendport': 3389, 'enablefloatingip': false}}, {'name': 'rdp-vm1', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname'),'loadbalancerfrontendipv4')]\"}, 'protocol': 'tcp', 'frontendport': 50002, 'backendport': 3389, 'enablefloatingip': false}}], 'loadbalancingrules': [{'name': 'lbruleipv4', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname'),'loadbalancerfrontendipv4')]\"}, 'backendaddresspool': {'id': \"[variables('ipv4lbbackendpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'probe': {'id': \"[variables('ipv4ipv6lbprobeid')]\"}}}, {'name': 'lbruleipv6', 'properties': {'frontendipconfiguration': {'id': \"[variables('ipv6frontendipconfigid')]\"}, 'backendaddresspool': {'id': \"[variables('ipv6lbbackendpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 8080, 'probe': {'id': \"[variables('ipv4ipv6lbprobeid')]\"}}}], 'probes': [{'name': \"[variables('ipv4ipv6lbprobename')]\", 'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 5, 'numberofprobes': 2}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway\n\n===\n\n", "completion": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2017-06-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2017-06-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('applicationgatewaysize')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backend1')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'probeenabled': \"[parameters('probeenabled')]\", 'probe': {'id': \"[resourceid('microsoft.network/applicationgateways/probes',variables('applicationgatewayname'), 'probe1')]\"}}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}], 'probes': [{'name': 'probe1', 'properties': {'protocol': \"[parameters('probeprotocol')]\", 'path': \"[parameters('probepath')]\", 'host': \"[parameters('probehost')]\", 'interval': \"[parameters('probeintervalinseconds')]\", 'timeout': \"[parameters('probetimeoutinseconds')]\", 'unhealthythreshold': \"[parameters('probeunhealthythreshold')]\", 'minservers': \"[parameters('probeminserversavailable')]\", 'match': {'statuscodes': [\"[parameters('healthystatuscodes')]\"]}, 'pickhostnamefrombackendhttpsettings': \"[parameters('probepickhostnamefrombackendhttpsettings')]\"}}]}} END"}
{"prompt": "\n\n###\n\nService Chaining with User defined Routes (UDR)\n\n===\n\n", "completion": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[concat(parameters('uniquednsprefixforvm'), copyindex())]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'pubiploop', 'count': \"[variables('scalenumber')]\"}, 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[concat(parameters('uniquednsprefixforvm'), copyindex())]\"}}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networksecuritygroups', 'name': 'defaultnsg', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'rdp_rule', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/routetables', 'name': \"[variables('routetablename')]\", 'apiversion': '2015-06-15', 'location': \"[parameters('location')]\", 'properties': {'routes': [{'name': 'virtualapplianceroutetosubnet3', 'properties': {'addressprefix': \"[variables('subnet3prefix')]\", 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('nvmprivateipaddress')]\"}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables/', variables('routetablename'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', variables('nsgname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}, 'routetable': {'id': \"[resourceid('microsoft.network/routetables', variables('routetablename'))]\"}}}, {'name': \"[variables('subnet2name')]\", 'properties': {'addressprefix': \"[variables('subnet2prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}, {'name': \"[variables('subnet3name')]\", 'properties': {'addressprefix': \"[variables('subnet3prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname'))]\"}}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': 'nic0', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', concat(parameters('uniquednsprefixforvm'), '0'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat(parameters('uniquednsprefixforvm'), '0'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnet1name'))]\"}}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': 'nic1', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', concat(parameters('uniquednsprefixforvm'), '1'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[variables('nvmprivateipaddress')]\", 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat(parameters('uniquednsprefixforvm'), '1'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnet2name'))]\"}}}], 'enableipforwarding': true}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/networkinterfaces', 'name': 'nic2', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', concat(parameters('uniquednsprefixforvm'), '2'))]\", \"[resourceid('microsoft.network/virtualnetworks/', variables('vnetname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat(parameters('uniquednsprefixforvm'), '2'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnet3name'))]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Firewall with Forced Tunneling\n\n===\n\n", "completion": " {'type': 'microsoft.network/routetables', 'apiversion': '2019-04-01', 'name': \"[variables('azfwroutetablename')]\", 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'azfwdefaultroute', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('nexthopip')]\"}}]}}{'type': 'microsoft.network/routetables', 'apiversion': '2019-04-01', 'name': 'tunneltoroutetable', 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'tunneltodefaultroute', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('tunneltonexthopip')]\"}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-07-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\", \"[resourceid('microsoft.network/routetables', 'tunneltoroutetable')]\"], 'tags': {'displayname': \"[parameters('virtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('jumpboxsubnetname')]\", 'properties': {'addressprefix': \"[variables('jumpboxsubnetprefix')]\"}}, {'name': \"[variables('azurefirewallmgmtsubnetname')]\", 'properties': {'addressprefix': \"[variables('azurefirewallmgmtsubnetprefix')]\"}}, {'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[variables('azurefirewallsubnetprefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', 'tunneltoroutetable')]\"}}}, {'name': \"[variables('serverssubnetname')]\", 'properties': {'addressprefix': \"[variables('serverssubnetprefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\"}}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-07-01', 'name': \"[parameters('tunneltovirtualnetworkname')]\", 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[parameters('tunneltovirtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('tunneltovnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[variables('tunneltoazurefirewallsubnetprefix')]\"}}]}}{'comments': 'this is the peering from vnet1 to vnet2', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'apiversion': '2020-05-01', 'name': \"[concat(parameters('virtualnetworkname'),'/tunneltopeering')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('tunneltovirtualnetworkname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks',parameters('tunneltovirtualnetworkname'))]\"}}}{'comments': 'this is the peering from vnet2 to vnet1', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'apiversion': '2020-05-01', 'name': \"[concat(parameters('tunneltovirtualnetworkname'),'/tunnelfrompeering')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('tunneltovirtualnetworkname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': false, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks',parameters('virtualnetworkname'))]\"}}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-04-01', 'name': \"[concat(variables('publicipnameprefix'), add(copyindex(), 1))]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberoffirewallpublicipaddresses')]\"}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-04-01', 'name': \"[variables('managementpublicipname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-04-01', 'name': \"[variables('tunneltopublicipname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-04-01', 'name': \"[variables('jumpboxpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-04-01', 'name': \"[variables('jumpboxnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'mynetworksecuritygrouprulessh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-07-01', 'name': \"[variables('jumpboxnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\"}, 'subnet': {'id': \"[variables('jumpboxsubnetid')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-07-01', 'name': \"[variables('servernicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('serversubnetid')]\"}}}]}}{'type': 'microsoft.network/azurefirewalls', 'apiversion': '2020-07-01', 'name': \"[variables('firewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", 'publicipcopy'], 'properties': {'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'managementipconfiguration': {'name': 'managementipconf', 'properties': {'subnet': {'id': \"[variables('azurefirewallmgmtsubnetid')]\"}, 'publicipaddress': {'id': \"[variables('managementpublicipid')]\"}}}, 'applicationrulecollections': [{'name': 'apprc1', 'properties': {'priority': 101, 'action': {'type': 'allow'}, 'rules': [{'name': 'apprule1', 'protocols': [{'port': '80', 'protocoltype': 'http'}, {'port': '443', 'protocoltype': 'https'}], 'targetfqdns': ['*']}]}}], 'networkrulecollections': [{'name': 'netrc1', 'properties': {'priority': 200, 'action': {'type': 'allow'}, 'rules': [{'name': 'netrule1', 'protocols': ['tcp'], 'sourceaddresses': ['10.0.2.0/24'], 'destinationaddresses': ['*'], 'destinationports': ['*']}]}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/azurefirewalls', 'name': \"[variables('tunneltofirewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('tunneltovirtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('tunneltopublicipname'))]\"], 'properties': {'ipconfigurations': [{'name': 'tunneltopip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('tunneltopublicipname'))]\"}, 'subnet': {'id': \"[variables('tunneltoazurefirewallsubnetid')]\"}}}], 'applicationrulecollections': [{'name': 'apprc1', 'properties': {'priority': 101, 'action': {'type': 'allow'}, 'rules': [{'name': 'apprule1', 'protocols': [{'port': '80', 'protocoltype': 'http'}, {'port': '443', 'protocoltype': 'https'}], 'targetfqdns': ['*microsoft.com']}]}}], 'networkrulecollections': [{'name': 'netrc1', 'properties': {'priority': 200, 'action': {'type': 'allow'}, 'rules': [{'name': 'netrule1', 'protocols': ['tcp'], 'sourceaddresses': ['10.0.1.0/24'], 'destinationaddresses': ['*'], 'destinationports': ['8000-8999']}]}}]}} END"}
{"prompt": "\n\n###\n\nThis template provisions Azure Bastion and dependent resources in a Virtual Network.\n\n===\n\n", "completion": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'condition': \"[equals(parameters('vnetneworexisting'), 'new')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetipprefix')]\"]}, 'subnets': [{'name': \"[variables('bastionsubnetname')]\", 'properties': {'addressprefix': \"[parameters('bastionsubnetipprefix')]\"}}]}}{'condition': \"[equals(parameters('vnetneworexisting'), 'existing')]\", 'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}', parameters('vnetname'), variables('bastionsubnetname'))]\", 'properties': {'addressprefix': \"[parameters('bastionsubnetipprefix')]\"}}{'type': 'microsoft.network/bastionhosts', 'apiversion': '2020-05-01', 'name': \"[parameters('bastionhostname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), variables('bastionsubnetname'))]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), variables('bastionsubnetname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Traffic Manager profile that load-balances across multiple virtual machines.\n\n===\n\n", "completion": " {'copy': {'name': 'pip', 'count': \"[length(range(0, variables('numvms')))]\"}, 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2021-03-01', 'name': \"[format('{0}{1}-pip', variables('vmname'), range(0, variables('numvms'))[copyindex()])]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'basic'}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\", 'publicipaddressversion': 'ipv4', 'dnssettings': {'domainnamelabel': \"[format('{0}{1}', parameters('uniquednsnameforpublicip'), range(0, variables('numvms'))[copyindex()])]\"}}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-03-01', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[variables('subnetprefix')]\"}}]}}{'copy': {'name': 'nic', 'count': \"[length(range(0, variables('numvms')))]\"}, 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2021-03-01', 'name': \"[format('{0}{1}-nic', variables('vmname'), range(0, variables('numvms'))[copyindex()])]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', format('{0}{1}-pip', variables('vmname'), range(0, variables('numvms'))[range(0, variables('numvms'))[copyindex()]]))]\"}, 'subnet': {'id': \"[reference(resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))).subnets[0].id]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\", \"[resourceid('microsoft.network/publicipaddresses', format('{0}{1}-pip', variables('vmname'), range(0, variables('numvms'))[range(0, variables('numvms'))[copyindex()]]))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\"]}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-03-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-http', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/trafficmanagerprofiles', 'apiversion': '2018-08-01', 'name': \"[variables('traficmanagerprofilename')]\", 'location': 'global', 'properties': {'copy': [{'name': 'endpoints', 'count': \"[length(range(0, variables('numvms')))]\", 'input': {'name': \"[format('endpoint{0}', range(0, variables('numvms'))[copyindex('endpoints')])]\", 'type': 'microsoft.network/trafficmanagerprofiles/azureendpoints', 'properties': {'targetresourceid': \"[resourceid('microsoft.network/publicipaddresses', format('{0}{1}-pip', variables('vmname'), range(0, variables('numvms'))[range(0, variables('numvms'))[copyindex('endpoints')]]))]\", 'endpointstatus': 'enabled', 'weight': 1}}}], 'profilestatus': 'enabled', 'trafficroutingmethod': 'weighted', 'dnsconfig': {'relativename': \"[parameters('uniquednsname')]\", 'ttl': 30}, 'monitorconfig': {'protocol': 'http', 'port': 80, 'path': '/'}}, 'dependson': ['pip']} END"}
{"prompt": "\n\n###\n\nThis template creates a cross-region load balancer with a backend pool containing two regional load balancers\n\n===\n\n", "completion": " {'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[concat('vm-r1','-',copyindex(1),'-networkinterface')]\", 'location': \"[parameters('location-r1')]\", 'copy': {'name': 'networkinterfacecopy', 'count': 3}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname-r1'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r1'), variables('vnetsubnetname-r1'))]\", \"[resourceid('microsoft.network/loadbalancers', variables('lbname-r1'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname-r1'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r1'), variables('vnetsubnetname-r1'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname-r1'), variables('lbbackendpoolname-r1'))]\"}, {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname-r1'), variables('lbbackendpoolnameoutbound-r1'))]\"}]}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname-r1'))]\"}}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'location': \"[parameters('location-r1')]\", 'name': \"[concat(variables('vnetname-r1'), '/' ,variables('bastionsubnetname-r1'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname-r1'))]\"], 'properties': {'addressprefix': \"[variables('vnetbastionsubnetaddressprefix-r1')]\"}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'location': \"[parameters('location-r1')]\", 'name': \"[concat(variables('vnetname-r1'), '/' ,variables('vnetsubnetname-r1'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname-r1'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r1'), variables('bastionsubnetname-r1'))]\"], 'properties': {'addressprefix': \"[variables('vnetsubnetaddressprefix-r1')]\"}}{'type': 'microsoft.network/bastionhosts', 'apiversion': '2020-05-01', 'name': \"[variables('bastionname-r1')]\", 'location': \"[parameters('location-r1')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipaddressname-r1'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname-r1'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r1'), variables('bastionsubnetname-r1'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipaddressname-r1'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r1'), variables('bastionsubnetname-r1'))]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('bastionpublicipaddressname-r1')]\", 'location': \"[parameters('location-r1')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-06-01', 'name': \"[variables('lbname-r1')]\", 'location': \"[parameters('location-r1')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('lbpublicipaddressname-r1'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('lbpublicipaddressnameoutbound-r1'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfrontendname-r1')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressname-r1'))]\"}}}, {'name': \"[variables('lbfrontendnameoutbound-r1')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressnameoutbound-r1'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('lbbackendpoolname-r1')]\"}, {'name': \"[variables('lbbackendpoolnameoutbound-r1')]\"}], 'loadbalancingrules': [{'name': 'myhttprule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname-r1'), variables('lbfrontendname-r1'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname-r1'), variables('lbbackendpoolname-r1'))]\"}, 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 15, 'protocol': 'tcp', 'enabletcpreset': true, 'loaddistribution': 'default', 'disableoutboundsnat': true, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('lbname-r1'), variables('lbprobename-r1'))]\"}}}], 'probes': [{'name': \"[variables('lbprobename-r1')]\", 'properties': {'protocol': 'http', 'port': 80, 'requestpath': '/', 'intervalinseconds': 5, 'numberofprobes': 2}}], 'outboundrules': [{'name': 'myoutboundrule', 'properties': {'allocatedoutboundports': 10000, 'protocol': 'all', 'enabletcpreset': false, 'idletimeoutinminutes': 15, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname-r1'), variables('lbbackendpoolnameoutbound-r1'))]\"}, 'frontendipconfigurations': [{'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname-r1'), variables('lbfrontendnameoutbound-r1'))]\"}]}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('lbpublicipaddressname-r1')]\", 'location': \"[parameters('location-r1')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('lbpublicipaddressnameoutbound-r1')]\", 'location': \"[parameters('location-r1')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('nsgname-r1')]\", 'location': \"[parameters('location-r1')]\", 'properties': {'securityrules': [{'name': 'allowhttpinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname-r1')]\", 'location': \"[parameters('location-r1')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix-r1')]\"]}}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[concat('vm-r2','-',copyindex(1),'-networkinterface')]\", 'location': \"[parameters('location-r2')]\", 'copy': {'name': 'networkinterfacecopy', 'count': 3}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname-r2'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r2'), variables('vnetsubnetname-r2'))]\", \"[resourceid('microsoft.network/loadbalancers', variables('lbname-r2'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname-r2'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r2'), variables('vnetsubnetname-r2'))]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname-r2'), variables('lbbackendpoolname-r2'))]\"}, {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname-r2'), variables('lbbackendpoolnameoutbound-r2'))]\"}]}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsgname-r2'))]\"}}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'location': \"[parameters('location-r2')]\", 'name': \"[concat(variables('vnetname-r2'), '/' ,variables('bastionsubnetname-r2'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname-r2'))]\"], 'properties': {'addressprefix': \"[variables('vnetbastionsubnetaddressprefix-r2')]\"}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'location': \"[parameters('location-r2')]\", 'name': \"[concat(variables('vnetname-r2'), '/' ,variables('vnetsubnetname-r2'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname-r2'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r2'), variables('bastionsubnetname-r2'))]\"], 'properties': {'addressprefix': \"[variables('vnetsubnetaddressprefix-r2')]\"}}{'type': 'microsoft.network/bastionhosts', 'apiversion': '2020-05-01', 'name': \"[variables('bastionname-r2')]\", 'location': \"[parameters('location-r2')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipaddressname-r2'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname-r2'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r2'), variables('bastionsubnetname-r2'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipaddressname-r2'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname-r2'), variables('bastionsubnetname-r2'))]\"}}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('bastionpublicipaddressname-r2')]\", 'location': \"[parameters('location-r2')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/loadbalancers', 'apiversion': '2020-06-01', 'name': \"[variables('lbname-r2')]\", 'location': \"[parameters('location-r2')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('lbpublicipaddressname-r2'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('lbpublicipaddressnameoutbound-r2'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfrontendname-r2')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressname-r2'))]\"}}}, {'name': \"[variables('lbfrontendnameoutbound-r2')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressnameoutbound-r2'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('lbbackendpoolname-r2')]\"}, {'name': \"[variables('lbbackendpoolnameoutbound-r2')]\"}], 'loadbalancingrules': [{'name': 'myhttprule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname-r2'), variables('lbfrontendname-r2'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname-r2'), variables('lbbackendpoolname-r2'))]\"}, 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 15, 'protocol': 'tcp', 'enabletcpreset': true, 'loaddistribution': 'default', 'disableoutboundsnat': true, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('lbname-r2'), variables('lbprobename-r2'))]\"}}}], 'probes': [{'name': \"[variables('lbprobename-r2')]\", 'properties': {'protocol': 'http', 'port': 80, 'requestpath': '/', 'intervalinseconds': 5, 'numberofprobes': 2}}], 'outboundrules': [{'name': 'myoutboundrule', 'properties': {'allocatedoutboundports': 10000, 'protocol': 'all', 'enabletcpreset': false, 'idletimeoutinminutes': 15, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname-r2'), variables('lbbackendpoolnameoutbound-r2'))]\"}, 'frontendipconfigurations': [{'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname-r2'), variables('lbfrontendnameoutbound-r2'))]\"}]}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('lbpublicipaddressname-r2')]\", 'location': \"[parameters('location-r2')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('lbpublicipaddressnameoutbound-r2')]\", 'location': \"[parameters('location-r2')]\", 'sku': {'name': \"[variables('lbskuname')]\"}, 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('nsgname-r2')]\", 'location': \"[parameters('location-r2')]\", 'properties': {'securityrules': [{'name': 'allowhttpinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname-r2')]\", 'location': \"[parameters('location-r2')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix-r2')]\"]}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('lbpublicipaddressname-cr')]\", 'location': \"[parameters('location-cr')]\", 'sku': {'name': 'standard', 'tier': 'global'}, 'properties': {'publicipallocationmethod': \"[variables('publicipaddresstype')]\"}}{'apiversion': '2020-07-01', 'name': \"[variables('lbname-cr')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location-cr')]\", 'sku': {'name': 'standard', 'tier': 'global'}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressname-cr'))]\"], 'properties': {'frontendipconfigurations': [{'name': \"[variables('lbfrontendname-cr')]\", 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('lbpublicipaddressname-cr'))]\"}}}], 'backendaddresspools': [{'name': \"[variables('lbbackendpoolname-cr')]\"}], 'loadbalancingrules': [{'name': 'lbrule', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('lbname-cr'), variables('lbfrontendname-cr'))]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('lbname-cr'), variables('lbbackendpoolname-cr'))]\"}, 'protocol': 'tcp', 'frontendport': 80, 'backendport': 80, 'enablefloatingip': false, 'idletimeoutinminutes': 5, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('lbname-cr'), variables('lbprobename-cr'))]\"}}}], 'probes': [{'name': \"[variables('lbprobename-cr')]\", 'properties': {'protocol': 'tcp', 'port': 50000, 'intervalinseconds': 5, 'numberofprobes': 2}}]}}{'name': \"[concat(variables('lbname-cr'),'/',variables('lbbackendpoolname-cr'))]\", 'type': 'microsoft.network/loadbalancers/backendaddresspools', 'apiversion': '2020-07-01', 'location': \"[parameters('location-cr')]\", 'dependson': [\"[resourceid('microsoft.network/loadbalancers',variables('lbname-cr'))]\", \"[resourceid('microsoft.network/loadbalancers',variables('lbname-r1'))]\", \"[resourceid('microsoft.network/loadbalancers',variables('lbname-r2'))]\"], 'properties': {'loadbalancerbackendaddresses': [{'name': 'address1', 'properties': {'probeadministrativestate': 'inservice', 'loadbalancerfrontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname-r1'),variables('lbfrontendname-r1'))]\"}}}, {'name': 'address2', 'properties': {'probeadministrativestate': 'inservice', 'loadbalancerfrontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations',variables('lbname-r2'),variables('lbfrontendname-r2'))]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template deploys a Custom IPSec Policy to an existing VPN Gateway.\n\n===\n\n", "completion": " {'type': 'microsoft.network/connections', 'apiversion': '2020-04-01', 'name': \"[parameters('vpnname')]\", 'location': \"[parameters('location')]\", 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways', parameters('vpngateway_name'))]\"}, 'localnetworkgateway2': {'id': \"[resourceid('microsoft.network/localnetworkgateways', parameters('localgateway_name'))]\"}, 'connectiontype': 'ipsec', 'connectionprotocol': \"[parameters('vpnprotocol')]\", 'sharedkey': \"[parameters('sharedkey')]\", 'usepolicybasedtrafficselectors': \"[parameters('policybasedtrafficselectors')]\", 'ipsecpolicies': [{'salifetimeseconds': \"[parameters('salifetimeseconds')]\", 'sadatasizekilobytes': \"[parameters('sadatasizekilobytes')]\", 'ipsecencryption': \"[parameters('ipsecencryption')]\", 'ipsecintegrity': \"[parameters('ipsecintegrity')]\", 'ikeencryption': \"[parameters('ikeencryption')]\", 'ikeintegrity': \"[parameters('ikeintegrity')]\", 'dhgroup': \"[parameters('dhgroup')]\", 'pfsgroup': \"[parameters('pfsgroup')]\"}]}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[parameters('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\"], 'properties': {'sku': {'name': \"[parameters('applicationgatewaysize')]\", 'tier': 'standard', 'capacity': \"[parameters('applicationgatewayinstancecount')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': \"[parameters('frontendport')]\"}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': \"[parameters('backendipaddresses')]\"}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': \"[parameters('backendport')]\", 'protocol': 'http', 'cookiebasedaffinity': \"[parameters('cookiebasedaffinity')]\"}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', parameters('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', parameters('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', parameters('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', parameters('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', parameters('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door in front of an API Management instance hosted by a virtual network.\n\n===\n\n", "completion": " {'type': 'microsoft.network/networksecuritygroups', 'name': \"[parameters('virtualnetwork').subnets[0].nsg]\", 'apiversion': '2019-09-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'clientcommunicationtoapimanagementinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': \"[if(parameters('allowtrafficonlyfromfrontdoor'), 'azurefrontdoor.backend', 'internet')]\", 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'secureclientcommunicationtoapimanagementinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': \"[if(parameters('allowtrafficonlyfromfrontdoor'), 'azurefrontdoor.backend', 'internet')]\", 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'managementendpointforazureportalandpowershellinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3443', 'sourceaddressprefix': 'apimanagement', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}, {'name': 'dependencyonrediscacheinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '6381-6383', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 130, 'direction': 'inbound'}}, {'name': 'azureinfrastructureloadbalancer', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': 'azureloadbalancer', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 180, 'direction': 'inbound'}}, {'name': 'dependencyonazuresqloutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '1433', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'sql', 'access': 'allow', 'priority': 140, 'direction': 'outbound'}}, {'name': 'dependencyforlogtoeventhubpolicyoutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '5671', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'eventhub', 'access': 'allow', 'priority': 150, 'direction': 'outbound'}}, {'name': 'dependencyonrediscacheoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '6381-6383', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 160, 'direction': 'outbound'}}, {'name': 'dependencyonazurefileshareforgitoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '445', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'storage', 'access': 'allow', 'priority': 170, 'direction': 'outbound'}}, {'name': 'publishdiagnosticlogsandmetricsoutbound', 'properties': {'description': 'apim logs and metrics for consumption by admins and your it team are all part of the management plane', 'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'azuremonitor', 'access': 'allow', 'priority': 185, 'direction': 'outbound', 'destinationportranges': ['443', '12000', '1886']}}, {'name': 'connecttosmtprelayforsendingemailsoutbound', 'properties': {'description': 'apim features the ability to generate email traffic as part of the data plane and the management plane', 'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'internet', 'access': 'allow', 'priority': 190, 'direction': 'outbound', 'destinationportranges': ['25', '587', '25028']}}, {'name': 'authenticatetoazureactivedirectoryoutbound', 'properties': {'description': 'connect to azure active directory for developer portal authentication or for oauth2 flow during any proxy authentication', 'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'azureactivedirectory', 'access': 'allow', 'priority': 200, 'direction': 'outbound', 'destinationportranges': ['80', '443']}}, {'name': 'dependencyonazurestorageoutbound', 'properties': {'description': 'apim service dependency on azure blob and azure table storage', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'storage', 'access': 'allow', 'priority': 100, 'direction': 'outbound'}}, {'name': 'publishmonitoringlogsoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': 'virtualnetwork', 'destinationaddressprefix': 'azurecloud', 'access': 'allow', 'priority': 300, 'direction': 'outbound'}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetwork').name]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('nsgid')]\"], 'properties': {'addressspace': {'addressprefixes': \"[parameters('virtualnetwork').addressprefixes]\"}, 'copy': [{'name': 'subnets', 'count': \"[length(parameters('virtualnetwork').subnets)]\", 'input': {'name': \"[parameters('virtualnetwork').subnets[copyindex('subnets')].name]\", 'properties': {'addressprefix': \"[parameters('virtualnetwork').subnets[copyindex('subnets')].addressprefix]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', parameters('virtualnetwork').subnets[copyindex('subnets')].nsg)]\"}}}}]}}{'condition': \"[parameters('deploywaf')]\", 'apiversion': '2019-03-01', 'type': 'microsoft.network/frontdoorwebapplicationfirewallpolicies', 'name': \"[parameters('wafpolicyname')]\", 'location': 'global', 'properties': {'policysettings': {'mode': \"[parameters('wafmode')]\", 'enabledstate': 'enabled'}, 'managedrules': {'managedrulesets': [{'rulesettype': 'defaultruleset', 'rulesetversion': '1.0'}]}}}{'type': 'microsoft.network/frontdoors', 'apiversion': '2019-05-01', 'name': \"[parameters('frontdoorname')]\", 'location': 'global', 'dependson': [\"[variables('wafpolicyid')]\"], 'properties': {'backendpoolssettings': {'enforcecertificatenamecheck': \"[parameters('frontdoorenforcecertificatenamecheck')]\", 'sendrecvtimeoutseconds': 120}, 'enabledstate': 'enabled', 'resourcestate': 'enabled', 'backendpools': [{'name': \"[parameters('frontdoorbackendpool').name]\", 'properties': {'backends': [{'address': \"[reference(resourceid('microsoft.apimanagement/service', parameters('apimservicename'))).hostnameconfigurations[0].hostname]\", 'httpport': 80, 'httpsport': 443, 'priority': 1, 'weight': 100, 'backendhostheader': \"[reference(resourceid('microsoft.apimanagement/service', parameters('apimservicename'))).hostnameconfigurations[0].hostname]\"}], 'healthprobesettings': {'id': \"[variables('frontdoorhealthprobesettingsid')]\"}, 'loadbalancingsettings': {'id': \"[variables('frontdoorloadbalancerid')]\"}}}], 'healthprobesettings': [{'name': \"[parameters('frontdoorhealthprobesettings').name]\", 'properties': {'intervalinseconds': \"[parameters('frontdoorhealthprobesettings').intervalinseconds]\", 'path': \"[parameters('frontdoorhealthprobesettings').path]\", 'protocol': \"[parameters('frontdoorhealthprobesettings').protocol]\"}}], 'frontendendpoints': [{'name': \"[parameters('frontdoorfrontendendpoint').name]\", 'properties': {'hostname': \"[variables('frontdoorhostname')]\", 'sessionaffinityenabledstate': \"[parameters('frontdoorfrontendendpoint').sessionaffinityenabledstate]\", 'sessionaffinityttlseconds': \"[parameters('frontdoorfrontendendpoint').sessionaffinityttlseconds]\", 'resourcestate': 'enabled', 'webapplicationfirewallpolicylink': {'id': \"[if(parameters('deploywaf'), variables('wafpolicyid'), json('null'))]\"}}}], 'loadbalancingsettings': [{'name': \"[parameters('frontdoorbackendpool').loadbalancername]\", 'properties': {'additionallatencymilliseconds': 0, 'samplesize': 4, 'successfulsamplesrequired': 2}}], 'routingrules': [{'name': \"[parameters('frontdoorroutingrule').name]\", 'properties': {'frontendendpoints': [{'id': \"[variables('frontdoorfrontedendpointid')]\"}], 'acceptedprotocols': \"[parameters('frontdoorroutingrule').acceptedprotocols]\", 'patternstomatch': \"[parameters('frontdoorroutingrule').patternstomatch]\", 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'customforwardingpath': '/', 'forwardingprotocol': \"[parameters('frontdoorroutingrule').forwardingprotocol]\", 'backendpool': {'id': \"[variables('frontdoorbackendpoolid')]\"}, 'cacheconfiguration': \"[parameters('frontdoorroutingrule').cacheconfiguration]\"}}}], 'friendlyname': \"[parameters('frontdoorname')]\"}}{'type': 'microsoft.network/frontdoors/providers/diagnosticsettings', 'name': \"[concat(parameters('frontdoorname'), '/microsoft.insights/service')]\", 'apiversion': '2016-09-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('frontdoorid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'frontdooraccesslog', 'enabled': true, 'retentionpolicy': {'enabled': true, 'days': 0}}, {'category': 'frontdoorwebapplicationfirewalllog', 'enabled': true, 'retentionpolicy': {'enabled': true, 'days': 0}}], 'metrics': [{'category': 'allmetrics', 'timegrain': 'pt1m', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates a Network Watcher resource for the subscription.\n\n===\n\n", "completion": " {'type': 'microsoft.network/networkwatchers', 'apiversion': '2021-02-01', 'name': \"[parameters('networkwatchername')]\", 'location': \"[parameters('location')]\", 'properties': {}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway\n\n===\n\n", "completion": " {'apiversion': '2021-02-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2017-06-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2017-06-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'sslcertificates': [{'name': 'appgatewaysslcert', 'properties': {'data': \"[parameters('certdata')]\", 'password': \"[parameters('certpassword')]\"}}], 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[variables('publicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 443}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}, {'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'https', 'sslcertificate': {'id': \"[resourceid('microsoft.network/applicationgateways/sslcertificates', variables('applicationgatewayname'), 'appgatewaysslcert')]\"}}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}], 'sslpolicy': {'policytype': 'predefined', 'policyname': 'appgwsslpolicy20170401'}}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Firewall with Firewall Policy and IpGroups\n\n===\n\n", "completion": " {'type': 'microsoft.network/ipgroups', 'apiversion': '2019-12-01', 'name': \"[parameters('ipgroups_name1')]\", 'location': \"[parameters('location')]\", 'properties': {'ipaddresses': ['13.73.64.64/26', '13.73.208.128/25', '52.126.194.0/23']}}{'type': 'microsoft.network/ipgroups', 'apiversion': '2019-12-01', 'name': \"[parameters('ipgroups_name2')]\", 'location': \"[parameters('location')]\", 'properties': {'ipaddresses': ['12.0.0.0/24', '13.9.0.0/24']}}{'type': 'microsoft.network/routetables', 'name': \"[variables('azfwroutetablename')]\", 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'azfwdefaultroute', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('nexthopip')]\"}}]}}{'comments': \"simple network security group for subnet [variables('serverssubnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'name': \"[parameters('virtualnetworkname')]\", 'apiversion': '2019-12-01', 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'displayname': \"[parameters('virtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('jumpboxsubnetname')]\", 'properties': {'addressprefix': \"[variables('jumpboxsubnetprefix')]\"}}, {'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[variables('azurefirewallsubnetprefix')]\"}}, {'name': \"[variables('serverssubnetname')]\", 'properties': {'addressprefix': \"[variables('serverssubnetprefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\"}, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'name': \"[concat(variables('publicipnameprefix'), add(copyindex(), 1))]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberoffirewallpublicipaddresses')]\"}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'name': \"[variables('jumpboxpublicipaddressname')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'name': \"[variables('jumpboxnsgname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-12-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'mynetworksecuritygrouprulessh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}]}}{'apiversion': '2019-12-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('jumpboxnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\"}, 'subnet': {'id': \"[variables('jumpboxsubnetid')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"}}}{'apiversion': '2019-12-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('servernicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('serversubnetid')]\"}}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/firewallpolicies', 'name': \"[parameters('firewallpolicyname')]\", 'location': \"[parameters('location')]\", 'properties': {'threatintelmode': 'alert'}, 'resources': [{'apiversion': '2020-05-01', 'type': 'rulecollectiongroups', 'name': 'rulecollectiongroup1', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name1'))]\", \"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name2'))]\", \"[resourceid('microsoft.network/firewallpolicies',parameters('firewallpolicyname'))]\"], 'properties': {'priority': 100, 'rulecollections': [{'rulecollectiontype': 'firewallpolicyfilterrulecollection', 'name': 'example-filter-rule', 'action': {'type': 'deny'}, 'priority': 1000, 'rules': [{'ruletype': 'networkrule', 'name': 'network-rule1', 'ipprotocols': ['tcp'], 'destinationports': ['*'], 'sourceipgroups': [\"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name1'))]\"], 'destinationipgroups': [\"[resourceid('microsoft.network/ipgroups', parameters('ipgroups_name2'))]\"]}]}]}}]}{'apiversion': '2019-09-01', 'type': 'microsoft.network/azurefirewalls', 'name': \"[variables('firewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/firewallpolicies', parameters('firewallpolicyname'))]\", 'publicipcopy'], 'properties': {'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'firewallpolicy': {'id': \"[resourceid('microsoft.network/firewallpolicies', parameters('firewallpolicyname'))]\"}}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway v2\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('appgwpublicipname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/applicationgateways', 'apiversion': '2020-06-01', 'name': \"[parameters('applicationgatewayname')]\", 'location': \"[parameters('location')]\", 'properties': {'sku': {'name': \"[variables('appgwsize')]\", 'tier': 'standard_v2'}, 'autoscaleconfiguration': {'mincapacity': \"[parameters('mincapacity')]\", 'maxcapacity': \"[parameters('maxcapacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname'), parameters('subnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('appgwpublicipname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': \"[parameters('frontendport')]\"}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': \"[parameters('backendipaddresses')]\"}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': \"[parameters('backendport')]\", 'protocol': 'http', 'cookiebasedaffinity': \"[parameters('cookiebasedaffinity')]\"}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', parameters('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', parameters('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', parameters('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools', parameters('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection', parameters('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('appgwpublicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate a sandbox setup of Azure Firewall with Linux jumpbox and Linux server\n\n===\n\n", "completion": " {'type': 'microsoft.network/routetables', 'name': \"[variables('azfwroutetablename')]\", 'apiversion': '2019-04-01', 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'azfwdefaultroute', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[variables('nexthopip')]\"}}]}}{'comments': \"simple network security group for subnet [variables('serverssubnetname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {}}{'name': \"[parameters('virtualnetworkname')]\", 'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'tags': {'displayname': \"[parameters('virtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('jumpboxsubnetname')]\", 'properties': {'addressprefix': \"[variables('jumpboxsubnetprefix')]\"}}, {'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[variables('azurefirewallsubnetprefix')]\"}}, {'name': \"[variables('serverssubnetname')]\", 'properties': {'addressprefix': \"[variables('serverssubnetprefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', variables('azfwroutetablename'))]\"}, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}]}}{'name': \"[concat(variables('publicipnameprefix'), add(copyindex(), 1))]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-04-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberoffirewallpublicipaddresses')]\"}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'name': \"[variables('jumpboxpublicipaddressname')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-04-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'name': \"[variables('jumpboxnsgname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-04-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'mynetworksecuritygrouprulessh', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 1000, 'direction': 'inbound'}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('jumpboxnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('jumpboxpublicipaddressname'))]\"}, 'subnet': {'id': \"[variables('jumpboxsubnetid')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('jumpboxnsgname'))]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('servernicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('serversubnetid')]\"}}}]}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/azurefirewalls', 'name': \"[variables('firewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", 'publicipcopy'], 'properties': {'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'applicationrulecollections': [{'name': 'apprc1', 'properties': {'priority': 101, 'action': {'type': 'allow'}, 'rules': [{'name': 'apprule1', 'protocols': [{'port': '80', 'protocoltype': 'http'}, {'port': '443', 'protocoltype': 'https'}], 'targetfqdns': ['*microsoft.com']}]}}], 'networkrulecollections': [{'name': 'netrc1', 'properties': {'priority': 200, 'action': {'type': 'allow'}, 'rules': [{'name': 'netrule1', 'protocols': ['tcp'], 'sourceaddresses': ['10.0.2.0/24'], 'destinationaddresses': ['*'], 'destinationports': ['8000-8999']}]}}], 'additionalproperties': {'network.snat.privateranges': \"[parameters('privateranges')]\"}}} END"}
{"prompt": "\n\n###\n\nThis template creates a DNS zone within the Azure DNS resource provider.  It then creates a RecordSet containing two DNS A records within that zone.\n\n===\n\n", "completion": " {'type': 'microsoft.network/dnszones', 'apiversion': '2018-05-01', 'name': \"[parameters('newzonename')]\", 'location': 'global'}{'type': 'microsoft.network/dnszones/a', 'apiversion': '2018-05-01', 'name': \"[concat(parameters('newzonename'), '/', parameters('newrecordname'))]\", 'location': 'global', 'dependson': [\"[parameters('newzonename')]\"], 'properties': {'ttl': 3600, 'arecords': [{'ipv4address': '1.2.3.4'}, {'ipv4address': '1.2.3.5'}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Firewall with multiple public IP addresses\n\n===\n\n", "completion": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[concat(variables('nsg_name'), copyindex(1))]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'nsg-loop', 'count': 2}, 'properties': {'securityrules': [{'name': 'rdp', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 300, 'direction': 'inbound'}}]}}{'apiversion': '2020-06-01', 'type': 'microsoft.network/publicipprefixes', 'name': \"[variables('ipprefix_name')]\", 'location': \"[parameters('location')]\", 'properties': {'prefixlength': \"[variables('ipprefix_size')]\", 'publicipaddressversion': 'ipv4'}, 'sku': {'name': 'standard', 'tier': 'regional'}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[concat(variables('publicipaddress'), copyindex(1))]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicip-loop', 'count': 2}, 'dependson': [\"[resourceid('microsoft.network/publicipprefixes', variables('ipprefix_name'))]\"], 'properties': {'publicipaddressversion': 'ipv4', 'publicipallocationmethod': 'static', 'publicipprefix': {'id': \"[resourceid('microsoft.network/publicipprefixes',variables('ipprefix_name'))]\"}, 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('virtualnetworks_myvnet_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/routetables', 'rt-01')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet_prefix')]\"]}, 'subnets': [{'name': 'mybackendsubnet', 'properties': {'addressprefix': \"[variables('backend_subnet_prefix')]\", 'routetable': {'id': \"[resourceid('microsoft.network/routetables', 'rt-01')]\"}, 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-06-01', 'name': \"[concat(variables('virtualnetworks_myvnet_name'), '/azurefirewallsubnet')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworks_myvnet_name'))]\"], 'properties': {'addressprefix': \"[variables('fw_subnet_prefix')]\", 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-06-01', 'name': \"[concat(variables('net_interface'), copyindex(1))]\", 'location': \"[parameters('location')]\", 'copy': {'name': 'int-loop', 'count': 2}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworks_myvnet_name'))]\", \"[resourceid('microsoft.network/networksecuritygroups', concat(variables('nsg_name'), copyindex(1)))]\"], 'properties': {'ipconfigurations': [{'name': \"[concat(variables('ipconfig_name'), copyindex(1))]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworks_myvnet_name'), 'mybackendsubnet')]\"}, 'primary': true}}], 'enableacceleratednetworking': false, 'enableipforwarding': false, 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', concat(variables('nsg_name'), copyindex(1)))]\"}}}{'type': 'microsoft.network/azurefirewalls', 'apiversion': '2020-06-01', 'name': \"[variables('firewall_name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', concat(variables('publicipaddress'), 1))]\", \"[resourceid('microsoft.network/publicipaddresses', concat(variables('publicipaddress'), 2))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworks_myvnet_name'), 'azurefirewallsubnet')]\"], 'properties': {'sku': {'name': 'azfw_vnet', 'tier': 'standard'}, 'threatintelmode': 'alert', 'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'applicationrulecollections': [{'name': 'web', 'properties': {'priority': 100, 'action': {'type': 'allow'}, 'rules': [{'name': 'wan-address', 'protocols': [{'protocoltype': 'http', 'port': 80}, {'protocoltype': 'https', 'port': 443}], 'targetfqdns': ['getmywanip.com'], 'sourceaddresses': ['*']}, {'name': 'google', 'protocols': [{'protocoltype': 'http', 'port': 80}, {'protocoltype': 'https', 'port': 443}], 'targetfqdns': ['www.google.com'], 'sourceaddresses': ['10.0.1.0/24']}, {'name': 'wupdate', 'protocols': [{'protocoltype': 'http', 'port': 80}, {'protocoltype': 'https', 'port': 443}], 'fqdntags': ['windowsupdate'], 'sourceaddresses': ['*']}]}}], 'natrulecollections': [{'name': 'coll-01', 'properties': {'priority': 100, 'action': {'type': 'dnat'}, 'rules': [{'name': 'rdp-01', 'protocols': ['tcp'], 'translatedaddress': '10.0.1.4', 'translatedport': '3389', 'sourceaddresses': ['*'], 'destinationaddresses': [\"[reference(resourceid('microsoft.network/publicipaddresses/', concat(variables('publicipaddress'), 1))).ipaddress]\"], 'destinationports': ['3389']}, {'name': 'rdp-02', 'protocols': ['tcp'], 'translatedaddress': '10.0.1.5', 'translatedport': '3389', 'sourceaddresses': ['*'], 'destinationaddresses': [\"[reference(resourceid('microsoft.network/publicipaddresses/', concat(variables('publicipaddress'), 2))).ipaddress]\"], 'destinationports': ['3389']}]}}]}}{'type': 'microsoft.network/routetables', 'apiversion': '2020-06-01', 'name': 'rt-01', 'location': \"[parameters('location')]\", 'properties': {'disablebgproutepropagation': false, 'routes': [{'name': 'fw', 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': '10.0.0.4'}}]}} END"}
{"prompt": "\n\n###\n\nThis template configures WAF custom rules based on specific http parameters for Azure Front Door endpoint.\n\n===\n\n", "completion": " {'apiversion': '2019-03-01', 'type': 'microsoft.network/frontdoorwebapplicationfirewallpolicies', 'name': \"[parameters('wafpolicyname')]\", 'location': \"[variables('waflocation')]\", 'properties': {'policysettings': {'mode': \"[parameters('wafmode')]\", 'enabledstate': 'enabled'}, 'customrules': {'rules': [{'name': \"[parameters('httprule1').name]\", 'priority': \"[parameters('httprule1').priority]\", 'enabledstate': \"[parameters('httprule1').enabledstate]\", 'ruletype': \"[parameters('httprule1').ruletype]\", 'copy': [{'name': 'matchconditions', 'count': \"[length(parameters('httprule1').matchconditions)]\", 'input': {'matchvariable': \"[parameters('httprule1').matchconditions[copyindex('matchconditions')].matchvariable]\", 'operator': \"[parameters('httprule1').matchconditions[copyindex('matchconditions')].operator]\", 'selector': \"[parameters('httprule1').matchconditions[copyindex('matchconditions')].selector]\", 'matchvalue': \"[parameters('httprule1').matchconditions[copyindex('matchconditions')].matchvalue]\"}}], 'action': \"[parameters('httprule1').action]\"}, {'name': \"[parameters('httprule2').name]\", 'priority': \"[parameters('httprule2').priority]\", 'enabledstate': \"[parameters('httprule2').enabledstate]\", 'ruletype': \"[parameters('httprule2').ruletype]\", 'copy': [{'name': 'matchconditions', 'count': \"[length(parameters('httprule2').matchconditions)]\", 'input': {'matchvariable': \"[parameters('httprule2').matchconditions[copyindex('matchconditions')].matchvariable]\", 'operator': \"[parameters('httprule2').matchconditions[copyindex('matchconditions')].operator]\", 'selector': \"[parameters('httprule2').matchconditions[copyindex('matchconditions')].selector]\", 'matchvalue': \"[parameters('httprule2').matchconditions[copyindex('matchconditions')].matchvalue]\"}}], 'action': \"[parameters('httprule2').action]\"}]}}} END"}
{"prompt": "\n\n###\n\nCreate a Site-to-Site VPN Connection to any on premises or other cloud networks such as AWS Virtual Private Cloud\n\n===\n\n", "completion": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/localnetworkgateways', 'name': \"[parameters('localgatewayname')]\", 'location': \"[parameters('location')]\", 'properties': {'localnetworkaddressspace': {'addressprefixes': [\"[parameters('localaddressprefix')]\"]}, 'gatewayipaddress': \"[parameters('localgatewayipaddress')]\"}}{'apiversion': '2020-11-01', 'name': \"[parameters('connectionname')]\", 'type': 'microsoft.network/connections', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', parameters('gatewayname'))]\", \"[resourceid('microsoft.network/localnetworkgateways', parameters('localgatewayname'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways', parameters('gatewayname'))]\"}, 'localnetworkgateway2': {'id': \"[resourceid('microsoft.network/localnetworkgateways', parameters('localgatewayname'))]\"}, 'connectiontype': 'ipsec', 'routingweight': 10, 'sharedkey': \"[parameters('sharedkey')]\"}}{'comments': 'default network security group for template', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2019-08-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'default-allow-22', 'properties': {'priority': 1000, 'access': 'allow', 'direction': 'inbound', 'destinationportrange': '22', 'protocol': 'tcp', 'sourceaddressprefix': '*', 'sourceportrange': '*', 'destinationaddressprefix': '*'}}]}}{'apiversion': '2020-11-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('azurevnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}]}}{'apiversion': '2020-11-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('gatewaypublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-11-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('vmpublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-11-01', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[parameters('gatewayname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', parameters('gatewaypublicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gatewaysubnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', parameters('gatewaypublicipname'))]\"}}, 'name': 'vnetgatewayconfig'}], 'sku': {'name': \"[parameters('gatewaysku')]\", 'tier': \"[parameters('gatewaysku')]\"}, 'gatewaytype': 'vpn', 'vpntype': \"[parameters('vpntype')]\", 'enablebgp': 'false'}}{'apiversion': '2020-08-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('vmpublicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", \"[resourceid('microsoft.network/virtualnetworkgateways', parameters('gatewayname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('vmpublicipname'))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a Point-to-Site Gateway\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('gatewaypublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[parameters('gatewayname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', parameters('gatewaypublicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gatewaysubnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',parameters('gatewaypublicipname'))]\"}}, 'name': 'vnetgatewayconfig'}], 'sku': {'name': \"[parameters('gatewaysku')]\", 'tier': \"[parameters('gatewaysku')]\"}, 'gatewaytype': 'vpn', 'vpntype': 'routebased', 'enablebgp': false, 'vpnclientconfiguration': {'vpnclientaddresspool': {'addressprefixes': [\"[parameters('vpnclientaddresspoolprefix')]\"]}, 'vpnclientrootcertificates': [{'name': \"[parameters('clientrootcertname')]\", 'properties': {'publiccertdata': \"[parameters('clientrootcertdata')]\"}}], 'vpnclientrevokedcertificates': [{'name': \"[parameters('revokedcertname')]\", 'properties': {'thumbprint': \"[parameters('revokedcertthumbprint')]\"}}]}}} END"}
{"prompt": "\n\n###\n\nNSG Flow Logs with traffic analytics\n\n===\n\n", "completion": "  END"}
{"prompt": "\n\n###\n\nThis template provisions Azure Bastion and dependent resources in a Virtual Network.\n\n===\n\n", "completion": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('public-ip-address-name')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('nsg-name')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowhttpsinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'internet', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'allowgatewaymanagerinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'gatewaymanager', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'allowloadbalancerinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'azureloadbalancer', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}, {'name': 'allowbastionhostcommunicationinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationportranges': ['8080', '5701'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 130, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportrange': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 1000, 'direction': 'inbound'}}, {'name': 'allowsshrdpoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportranges': ['22', '3389'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 100, 'direction': 'outbound'}}, {'name': 'allowazurecloudcommunicationoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportrange': '443', 'destinationaddressprefix': 'azurecloud', 'access': 'allow', 'priority': 110, 'direction': 'outbound'}}, {'name': 'allowbastionhostcommunicationoutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationportranges': ['8080', '5701'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 120, 'direction': 'outbound'}}, {'name': 'allowgetsessioninformationoutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'destinationportranges': ['80', '443'], 'access': 'allow', 'priority': 130, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 1000, 'direction': 'outbound'}}]}}{'condition': \"[equals(parameters('vnet-new-or-existing'), 'new')]\", 'apiversion': '2020-07-01', 'name': \"[parameters('vnet-name')]\", 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('nsg-name'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnet-ip-prefix')]\"]}, 'subnets': [{'name': \"[variables('bastion-subnet-name')]\", 'properties': {'addressprefix': \"[parameters('bastion-subnet-ip-prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsg-name'))]\"}}}]}}{'condition': \"[equals(parameters('vnet-new-or-existing'), 'existing')]\", 'apiversion': '2020-07-01', 'type': 'microsoft.network/virtualnetworks/subnets', 'name': \"[concat(parameters('vnet-name'), '/', variables('bastion-subnet-name'))]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('nsg-name'))]\"], 'properties': {'addressprefix': \"[parameters('bastion-subnet-ip-prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsg-name'))]\"}}}{'apiversion': '2020-07-01', 'type': 'microsoft.network/bastionhosts', 'name': \"[parameters('bastion-host-name')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('public-ip-address-name'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnet-name'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnet-name'), variables('bastion-subnet-name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnet-name'), variables('bastion-subnet-name'))]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('public-ip-address-name'))]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreates Virtual WAN resources\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualwans', 'apiversion': '2021-03-01', 'name': \"[parameters('vwanname')]\", 'location': \"[parameters('location')]\", 'properties': {'type': \"[parameters('vwansku')]\"}}{'type': 'microsoft.network/virtualhubs', 'apiversion': '2021-03-01', 'name': \"[parameters('hubname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressprefix': \"[parameters('hubaddressprefix')]\", 'virtualwan': {'id': \"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"]}{'type': 'microsoft.network/vpnsites', 'apiversion': '2021-03-01', 'name': \"[parameters('vpnsitename')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': \"[parameters('vpnsiteaddressspacelist')]\"}, 'bgpproperties': \"[if(parameters('enablebgp'), createobject('asn', parameters('vpnsitebgpasn'), 'bgppeeringaddress', parameters('vpnsitebgppeeringaddress'), 'peerweight', 0), null())]\", 'deviceproperties': {'linkspeedinmbps': 10}, 'ipaddress': \"[parameters('vpnsitepublicipaddress')]\", 'virtualwan': {'id': \"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"]}{'type': 'microsoft.network/vpngateways', 'apiversion': '2021-03-01', 'name': \"[parameters('vpngatewayname')]\", 'location': \"[parameters('location')]\", 'properties': {'connections': [{'name': \"[parameters('connectionname')]\", 'properties': {'connectionbandwidth': 10, 'enablebgp': \"[parameters('enablebgp')]\", 'remotevpnsite': {'id': \"[resourceid('microsoft.network/vpnsites', parameters('vpnsitename'))]\"}}}], 'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', parameters('hubname'))]\"}, 'bgpsettings': {'asn': 65515}}, 'dependson': [\"[resourceid('microsoft.network/virtualhubs', parameters('hubname'))]\", \"[resourceid('microsoft.network/vpnsites', parameters('vpnsitename'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template deploys a Route Server into a subnet named RouteServerSubnet.\n\n===\n\n", "completion": " {'condition': \"[equals(parameters('vnetnew_or_existing'), 'new')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[parameters('vnetname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetipprefix')]\"]}}}{'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}', parameters('vnetname'), variables('routeserversubnetname'))]\", 'properties': {'addressprefix': \"[parameters('routeserversubnetipprefix')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnetname'))]\"]}{'condition': \"[equals(parameters('publicipnew_or_existing'), 'new')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[parameters('publicipname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4', 'idletimeoutinminutes': 4}}{'type': 'microsoft.network/virtualhubs', 'apiversion': '2020-06-01', 'name': \"[parameters('firstrouteservername')]\", 'location': \"[parameters('location')]\", 'properties': {'sku': 'standard'}}{'type': 'microsoft.network/virtualhubs/ipconfigurations', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('firstrouteservername'), variables('ipconfigname'))]\", 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), variables('routeserversubnetname'))]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipname'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/virtualhubs', parameters('firstrouteservername'))]\", \"[resourceid('microsoft.network/publicipaddresses', parameters('publicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetname'), variables('routeserversubnetname'))]\"]}{'type': 'microsoft.network/virtualhubs/bgpconnections', 'apiversion': '2020-06-01', 'name': \"[format('{0}/{1}', parameters('firstrouteservername'), parameters('routeserverbgpconnectionname'))]\", 'properties': {'peerasn': \"[parameters('peerasn')]\", 'peerip': \"[parameters('peerip')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualhubs', parameters('firstrouteservername'))]\", \"[resourceid('microsoft.network/virtualhubs/ipconfigurations', parameters('firstrouteservername'), variables('ipconfigname'))]\"]} END"}
{"prompt": "\n\n###\n\nThis template adds and secures a custom domain to your Front Door.\n\n===\n\n", "completion": " {'type': 'microsoft.network/frontdoors', 'apiversion': '2020-01-01', 'name': \"[parameters('frontdoorname')]\", 'location': 'global', 'properties': {'enabledstate': 'enabled', 'frontendendpoints': [{'name': \"[variables('frontendendpointdefaultname')]\", 'properties': {'hostname': \"[variables('frontendendpointdefaulthostname')]\", 'sessionaffinityenabledstate': 'disabled'}}, {'name': \"[variables('frontendendpointcustomname')]\", 'properties': {'hostname': \"[parameters('customdomainname')]\", 'sessionaffinityenabledstate': 'disabled'}}], 'loadbalancingsettings': [{'name': \"[variables('loadbalancingsettingsname')]\", 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}], 'healthprobesettings': [{'name': \"[variables('healthprobesettingsname')]\", 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}], 'backendpools': [{'name': \"[variables('backendpoolname')]\", 'properties': {'backends': [{'address': \"[parameters('backendaddress')]\", 'backendhostheader': \"[parameters('backendaddress')]\", 'httpport': 80, 'httpsport': 443, 'weight': 50, 'priority': 1, 'enabledstate': 'enabled'}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), variables('loadbalancingsettingsname'))]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), variables('healthprobesettingsname'))]\"}}}], 'routingrules': [{'name': \"[variables('routingrulename')]\", 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), variables('frontendendpointdefaultname'))]\"}, {'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), variables('frontendendpointcustomname'))]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), variables('backendpoolname'))]\"}}, 'enabledstate': 'enabled'}}]}}{'type': 'microsoft.network/frontdoors/frontendendpoints/customhttpsconfiguration', 'apiversion': '2020-07-01', 'name': \"[format('{0}/{1}/{2}', parameters('frontdoorname'), variables('frontendendpointcustomname'), 'default')]\", 'properties': {'protocoltype': 'servernameindication', 'certificatesource': 'frontdoor', 'frontdoorcertificatesourceparameters': {'certificatetype': 'dedicated'}, 'minimumtlsversion': '1.2'}, 'dependson': [\"[resourceid('microsoft.network/frontdoors', parameters('frontdoorname'))]\"]} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway with path override\n\n===\n\n", "completion": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2017-06-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2017-06-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('applicationgatewaysize')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backend1')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled', 'path': \"[parameters('backendpath')]\"}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgatewayname'),'appgatewayfrontendport')]\"}, 'protocol': 'http'}}], 'urlpathmaps': [{'name': 'urlpathmap1', 'properties': {'defaultbackendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'defaultbackendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}, 'pathrules': [{'name': 'pathrule1', 'properties': {'paths': [\"[parameters('pathmatch1')]\"], 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'pathbasedrouting', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'urlpathmap': {'id': \"[resourceid('microsoft.network/applicationgateways/urlpathmaps',variables('applicationgatewayname'), 'urlpathmap1')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nExtend existing VNET to Multi-VNET\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-11-01', 'name': \"[variables('vnetname')]\", 'location': \"[parameters('vnetlocation')]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[concat(variables('vnetname'),'-subnet')]\", 'properties': {'addressprefix': '10.0.0.0/24', 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': \"[parameters('gatewaysubnetname')]\", 'properties': {'addressprefix': '10.0.1.0/24', 'privateendpointnetworkpolicies': 'enabled', 'privatelinkservicenetworkpolicies': 'enabled'}}], 'enableddosprotection': false}}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-11-01', 'name': \"[variables('pipname')]\", 'location': \"[parameters('vnetlocation')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'type': 'microsoft.network/virtualnetworkgateways', 'apiversion': '2020-11-01', 'name': \"[variables('gatewayname')]\", 'location': \"[parameters('vnetlocation')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'enableprivateipaddress': false, 'ipconfigurations': [{'name': 'default', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses/', variables('pipname'))]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), parameters('gatewaysubnetname'))]\"}}}], 'gatewaytype': 'vpn', 'vpntype': 'routebased', 'vpngatewaygeneration': 'generation1'}}{'type': 'microsoft.network/connections', 'apiversion': '2020-11-01', 'name': 'connection', 'location': \"[parameters('existingvnetlocation')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('gatewayname'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[parameters('existinggatewayid')]\"}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways', variables('gatewayname'))]\"}, 'connectiontype': 'vnet2vnet', 'connectionprotocol': 'ikev2', 'routingweight': 0, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': false, 'uselocalazureipaddress': false, 'usepolicybasedtrafficselectors': false, 'expressroutegatewaybypass': false, 'dpdtimeoutseconds': 45, 'connectionmode': 'default'}} END"}
{"prompt": "\n\n###\n\nsite-to-site VPN between two VNets with VPN Gateways in configuration active-active with BGP\n\n===\n\n", "completion": " {'comments': 'network security group applied to the subnets in the vnet1', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-08-01', 'location': \"[variables('location1')]\", 'name': \"[variables('nsg1')]\", 'properties': {'securityrules': [{'name': 'ssh-rule', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 500, 'direction': 'inbound'}}, {'name': 'rdp-rule', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 510, 'direction': 'inbound'}}]}}{'comments': 'network security group applied to the subnets in the vnet2', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-08-01', 'name': \"[variables('nsg2')]\", 'location': \"[variables('location2')]\", 'properties': {'securityrules': [{'name': 'ssh-rule', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 500, 'direction': 'inbound'}}, {'name': 'rdp-rule', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 510, 'direction': 'inbound'}}]}}{'comments': 'virtual network 1', 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-08-01', 'name': \"[variables('vnet1name')]\", 'location': \"[variables('location1')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('nsg1'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet1addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet11name')]\", 'properties': {'addressprefix': \"[variables('subnet11prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsg1'))]\"}}}, {'name': \"[variables('subnet12name')]\", 'properties': {'addressprefix': \"[variables('subnet12prefix')]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('gateway1subnetprefix')]\"}}]}}{'comments': 'virtual network 2', 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-08-01', 'name': \"[variables('vnet2name')]\", 'location': \"[variables('location2')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('nsg2'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet2addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnet21name')]\", 'properties': {'addressprefix': \"[variables('subnet21prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsg2'))]\"}}}, {'name': \"[variables('subnet22name')]\", 'properties': {'addressprefix': \"[variables('subnet22prefix')]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('gateway2subnetprefix')]\"}}]}}{'comments': 'static public ip of the vpn gateway1-instance 0', 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-08-01', 'name': \"[variables('gateway1publicip1name')]\", 'location': \"[variables('location1')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[variables('dnslabelgtw1pubip1')]\"}}}{'comments': 'static public ip of the vpn gateway1- instance 1', 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-08-01', 'name': \"[variables('gateway1publicip2name')]\", 'location': \"[variables('location1')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[variables('dnslabelgtw1pubip2')]\"}}}{'comments': 'static public ip of the vpn gateway2-instance 0', 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-08-01', 'name': \"[variables('gateway2publicip1name')]\", 'location': \"[variables('location2')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[variables('dnslabelgtw2pubip1')]\"}}}{'comments': 'static public ip of the vpn gateway2- instance 1', 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-08-01', 'name': \"[variables('gateway2publicip2name')]\", 'location': \"[variables('location2')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[variables('dnslabelgtw2pubip2')]\"}}}{'comments': 'vpn gateway 1- deployed in location 1', 'type': 'microsoft.network/virtualnetworkgateways', 'apiversion': '2020-08-01', 'name': \"[variables('gateway1name')]\", 'location': \"[variables('location1')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('gateway1publicip1name'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('gateway1publicip2name'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1name'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gateway1subnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('gateway1publicip1name'))]\"}}, 'name': 'vnetgateway1config1'}, {'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gateway1subnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('gateway1publicip2name'))]\"}}, 'name': 'vnetgateway1config2'}], 'sku': {'name': \"[parameters('gatewaysku')]\", 'tier': \"[parameters('gatewaysku')]\"}, 'gatewaytype': 'vpn', 'vpntype': 'routebased', 'enablebgp': true, 'activeactive': true, 'vpngatewaygeneration': \"[variables('vpngatewaygeneration')]\", 'bgpsettings': {'asn': \"[variables('asngtw1')]\"}}}{'comments': 'vpn gateway 2- deployed in location 2', 'type': 'microsoft.network/virtualnetworkgateways', 'apiversion': '2020-08-01', 'name': \"[variables('gateway2name')]\", 'location': \"[variables('location2')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('gateway2publicip1name'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('gateway2publicip2name'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2name'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gateway2subnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('gateway2publicip1name'))]\"}}, 'name': 'vnetgateway2config1'}, {'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gateway2subnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('gateway2publicip2name'))]\"}}, 'name': 'vnetgateway2config2'}], 'sku': {'name': \"[parameters('gatewaysku')]\", 'tier': \"[parameters('gatewaysku')]\"}, 'gatewaytype': 'vpn', 'vpntype': 'routebased', 'enablebgp': true, 'activeactive': true, 'vpngatewaygeneration': \"[variables('vpngatewaygeneration')]\", 'bgpsettings': {'asn': \"[variables('asngtw2')]\"}}}{'comments': 'local network gateway in gateway1 to connect to the remote gateway1-public ip1', 'type': 'microsoft.network/localnetworkgateways', 'apiversion': '2020-08-01', 'name': \"[variables('localgatewayname11')]\", 'location': \"[variables('location2')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('gateway1name'))]\"], 'properties': {'fqdn': \"[reference(variables('gateway1publicip1id'),'2020-06-01').dnssettings.fqdn]\", 'bgpsettings': {'asn': \"[variables('asngtw1')]\", 'bgppeeringaddress': \"[first(split( reference(resourceid('microsoft.network/virtualnetworkgateways',variables('gateway1name')),'2020-06-01').bgpsettings.bgppeeringaddress , ','))]\", 'peerweight': 0}}}{'comments': 'local network gateway in gateway1 to connect to the remote gateway1-public ip2', 'type': 'microsoft.network/localnetworkgateways', 'apiversion': '2020-08-01', 'name': \"[variables('localgatewayname12')]\", 'location': \"[variables('location2')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('gateway1name'))]\"], 'properties': {'fqdn': \"[reference(variables('gateway1publicip2id'),'2020-06-01').dnssettings.fqdn]\", 'bgpsettings': {'asn': \"[variables('asngtw1')]\", 'bgppeeringaddress': \"[last(split( reference(resourceid('microsoft.network/virtualnetworkgateways',variables('gateway1name')),'2020-06-01').bgpsettings.bgppeeringaddress , ','))]\", 'peerweight': 0}}}{'comments': 'local network gateway in gateway1 to connect to the remote gateway2 -public ip1', 'type': 'microsoft.network/localnetworkgateways', 'apiversion': '2020-08-01', 'name': \"[variables('localgatewayname21')]\", 'location': \"[variables('location1')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('gateway2name'))]\"], 'properties': {'fqdn': \"[reference(variables('gateway2publicip1id'),'2020-06-01').dnssettings.fqdn]\", 'bgpsettings': {'asn': \"[variables('asngtw2')]\", 'bgppeeringaddress': \"[first(split( reference(resourceid('microsoft.network/virtualnetworkgateways',variables('gateway2name')),'2020-06-01').bgpsettings.bgppeeringaddress , ','))]\", 'peerweight': 0}}}{'comments': 'local network gateway in gateway1 to connect to the remote gateway2 -public ip2', 'type': 'microsoft.network/localnetworkgateways', 'apiversion': '2020-08-01', 'name': \"[variables('localgatewayname22')]\", 'location': \"[variables('location1')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('gateway2name'))]\"], 'properties': {'fqdn': \"[reference(variables('gateway2publicip2id'),'2020-06-01').dnssettings.fqdn]\", 'bgpsettings': {'asn': \"[variables('asngtw2')]\", 'bgppeeringaddress': \"[last(split( reference(resourceid('microsoft.network/virtualnetworkgateways',variables('gateway2name')),'2020-06-01').bgpsettings.bgppeeringaddress , ','))]\", 'peerweight': 0}}}{'comments': 'vpn connection between [gateway1] and [gateway2-pubip1]', 'type': 'microsoft.network/connections', 'apiversion': '2020-08-01', 'name': \"[variables('connectionname11-21')]\", 'location': \"[variables('location1')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('gateway1name'))]\", \"[resourceid('microsoft.network/localnetworkgateways', variables('localgatewayname21'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('gateway1name'))]\"}, 'localnetworkgateway2': {'id': \"[resourceid('microsoft.network/localnetworkgateways', variables('localgatewayname21'))]\"}, 'connectiontype': 'ipsec', 'routingweight': 0, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}}{'comments': 'vpn connection between [gateway1] and [gateway2-pubip2]', 'type': 'microsoft.network/connections', 'apiversion': '2020-08-01', 'name': \"[variables('connectionname12-22')]\", 'location': \"[variables('location1')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('gateway1name'))]\", \"[resourceid('microsoft.network/localnetworkgateways', variables('localgatewayname22'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('gateway1name'))]\"}, 'localnetworkgateway2': {'id': \"[resourceid('microsoft.network/localnetworkgateways', variables('localgatewayname22'))]\"}, 'connectiontype': 'ipsec', 'routingweight': 0, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}}{'comments': 'vpn connection between [gateway2] and [gateway1-pubip1]', 'type': 'microsoft.network/connections', 'apiversion': '2020-08-01', 'name': \"[variables('connectionname21-11')]\", 'location': \"[variables('location2')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('gateway2name'))]\", \"[resourceid('microsoft.network/localnetworkgateways', variables('localgatewayname11'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('gateway2name'))]\"}, 'localnetworkgateway2': {'id': \"[resourceid('microsoft.network/localnetworkgateways', variables('localgatewayname11'))]\"}, 'connectiontype': 'ipsec', 'routingweight': 0, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}}{'comments': 'vpn connection between [gateway2] and [gateway1-pubip2]', 'type': 'microsoft.network/connections', 'apiversion': '2020-06-01', 'name': \"[variables('connectionname22-12')]\", 'location': \"[variables('location2')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways', variables('gateway2name'))]\", \"[resourceid('microsoft.network/localnetworkgateways', variables('localgatewayname12'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',variables('gateway2name'))]\"}, 'localnetworkgateway2': {'id': \"[resourceid('microsoft.network/localnetworkgateways', variables('localgatewayname12'))]\"}, 'connectiontype': 'ipsec', 'routingweight': 0, 'sharedkey': \"[parameters('sharedkey')]\", 'enablebgp': true}}{'comments': 'public ip address of the vm1', 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-08-01', 'name': \"[variables('vm1publicipname')]\", 'location': \"[variables('location1')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'public ip address of the vm2', 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-08-01', 'name': \"[variables('vm2publicipname')]\", 'location': \"[variables('location2')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'nic of the vm1', 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-08-01', 'name': \"[variables('nic1name')]\", 'location': \"[variables('location1')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('vm1publicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('vm1publicipname'))]\"}, 'subnet': {'id': \"[variables('subnet11ref')]\"}}}]}}{'comments': 'nic of the vm2', 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-08-01', 'name': \"[variables('nic2name')]\", 'location': \"[variables('location2')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('vm2publicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2name'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig2', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('vm2publicipname'))]\"}, 'subnet': {'id': \"[variables('subnet21ref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate a Point-to-Site Gateway with AAD\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-02-01', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('virtualnetworkprefix')]\"]}, 'subnets': [{'name': \"[parameters('frontendsubname')]\", 'properties': {'addressprefix': \"[parameters('frontendsubprefix')]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubprefix')]\"}}]}}{'type': 'microsoft.network/virtualnetworkgateways', 'apiversion': '2021-02-01', 'name': \"[parameters('gatewayname')]\", 'location': \"[parameters('location')]\", 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gatewaysubnetref')]\"}, 'publicipaddress': {'id': \"[variables('publicipaddressref')]\"}}, 'name': 'vnetgatewayconfig'}], 'sku': {'name': \"[parameters('gatewaysku')]\", 'tier': \"[parameters('gatewaysku')]\"}, 'gatewaytype': 'vpn', 'vpntype': \"[parameters('vpntype')]\", 'vpnclientconfiguration': {'vpnclientaddresspool': {'addressprefixes': [\"[parameters('vpnclientaddresspool')]\"]}, 'vpnclientprotocols': ['openvpn'], 'vpnauthenticationtypes': ['aad'], 'aadtenant': \"[variables('tenant')]\", 'aadaudience': \"[variables('audience')]\", 'aadissuer': \"[variables('issuer')]\"}}, 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', parameters('gatewaypublicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\"]}{'type': 'microsoft.network/publicipaddresses', 'apiversion': '2021-02-01', 'name': \"[parameters('gatewaypublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}} END"}
{"prompt": "\n\n###\n\nNetwork Security Group with diagnostic logs\n\n===\n\n", "completion": " {'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-02-01', 'name': \"[parameters('nsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'copy': [{'name': 'securityrules', 'count': \"[length(parameters('securityrules'))]\", 'input': {'name': \"[parameters('securityrules')[copyindex('securityrules')].name]\", 'properties': \"[parameters('securityrules')[copyindex('securityrules')].properties]\"}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Firewall with Firewall Policy (including multiple application and network rules) and IpGroups\n\n===\n\n", "completion": " {'type': 'microsoft.network/ipgroups', 'apiversion': '2019-12-01', 'name': \"[parameters('workloadipgroup')]\", 'location': \"[parameters('location')]\", 'properties': {'ipaddresses': ['10.20.0.0/24', '10.30.0.0/24']}}{'type': 'microsoft.network/ipgroups', 'apiversion': '2019-12-01', 'name': \"[parameters('infraipgroup')]\", 'location': \"[parameters('location')]\", 'properties': {'ipaddresses': ['10.40.0.0/24', '10.50.0.0/24']}}{'name': \"[parameters('virtualnetworkname')]\", 'apiversion': '2019-04-01', 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[parameters('virtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[variables('azurefirewallsubnetprefix')]\"}}], 'enableddosprotection': false}}{'name': \"[concat(variables('azurepublicipname'), add(copyindex(), 1))]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2019-04-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberofpublicipaddresses')]\"}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/firewallpolicies', 'name': \"[parameters('firewallpolicyname')]\", 'location': \"[parameters('location')]\", 'properties': {'threatintelmode': 'alert'}}{'type': 'microsoft.network/firewallpolicies/rulecollectiongroups', 'apiversion': '2020-05-01', 'name': \"[concat(parameters('firewallpolicyname'), '/defaultnetworkrulecollectiongroup')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/ipgroups', parameters('workloadipgroup'))]\", \"[resourceid('microsoft.network/ipgroups', parameters('infraipgroup'))]\", \"[resourceid('microsoft.network/firewallpolicies',parameters('firewallpolicyname'))]\"], 'properties': {'priority': 200, 'rulecollections': [{'rulecollectiontype': 'firewallpolicyfilterrulecollection', 'action': {'type': 'allow'}, 'name': 'azure-global-services-nrc', 'priority': 1250, 'rules': [{'ruletype': 'networkrule', 'name': 'time-windows', 'ipprotocols': ['udp'], 'destinationaddresses': ['13.86.101.172'], 'sourceipgroups': [\"[resourceid('microsoft.network/ipgroups', parameters('workloadipgroup'))]\", \"[resourceid('microsoft.network/ipgroups', parameters('infraipgroup'))]\"], 'destinationports': ['123']}]}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/firewallpolicies/rulecollectiongroups', 'name': \"[concat(parameters('firewallpolicyname'), '/defaultapplicationrulecollectiongroup')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/ipgroups', parameters('workloadipgroup'))]\", \"[resourceid('microsoft.network/ipgroups', parameters('infraipgroup'))]\", \"[resourceid('microsoft.network/firewallpolicies/rulecollectiongroups',parameters('firewallpolicyname'), 'defaultnetworkrulecollectiongroup')]\"], 'properties': {'priority': 300, 'rulecollections': [{'rulecollectiontype': 'firewallpolicyfilterrulecollection', 'name': 'global-rule-url-arc', 'priority': 1000, 'action': {'type': 'allow'}, 'rules': [{'ruletype': 'applicationrule', 'name': 'winupdate-rule-01', 'protocols': [{'protocoltype': 'https', 'port': 443}, {'protocoltype': 'http', 'port': 80}], 'fqdntags': ['windowsupdate'], 'terminatetls': false, 'sourceipgroups': [\"[resourceid('microsoft.network/ipgroups',parameters('workloadipgroup'))]\", \"[resourceid('microsoft.network/ipgroups', parameters('infraipgroup'))]\"]}]}, {'rulecollectiontype': 'firewallpolicyfilterrulecollection', 'action': {'type': 'allow'}, 'name': 'global-rules-arc', 'priority': 1202, 'rules': [{'ruletype': 'applicationrule', 'name': 'global-rule-01', 'protocols': [{'protocoltype': 'https', 'port': 443}], 'targetfqdns': ['www.microsoft.com'], 'terminatetls': false, 'sourceipgroups': [\"[resourceid('microsoft.network/ipgroups',parameters('workloadipgroup'))]\", \"[resourceid('microsoft.network/ipgroups', parameters('infraipgroup'))]\"]}]}]}}{'apiversion': '2019-04-01', 'type': 'microsoft.network/azurefirewalls', 'name': \"[parameters('firewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('virtualnetworkname'))]\", 'publicipcopy', \"[resourceid('microsoft.network/ipgroups', parameters('workloadipgroup'))]\", \"[resourceid('microsoft.network/ipgroups', parameters('infraipgroup'))]\", \"[resourceid('microsoft.network/firewallpolicies',parameters('firewallpolicyname'))]\", \"[resourceid('microsoft.network/firewallpolicies/rulecollectiongroups',parameters('firewallpolicyname'), 'defaultnetworkrulecollectiongroup')]\", \"[resourceid('microsoft.network/firewallpolicies/rulecollectiongroups',parameters('firewallpolicyname'), 'defaultapplicationrulecollectiongroup')]\"], 'properties': {'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'firewallpolicy': {'id': \"[resourceid('microsoft.network/firewallpolicies', parameters('firewallpolicyname'))]\"}}} END"}
{"prompt": "\n\n###\n\nCreates a Front Door that demonstrates priority-based routing for Active-Standby application topology. It sends all traffic to the primary (highest-priority) backend until it becomes unavailable.\n\n===\n\n", "completion": " {'apiversion': '2020-07-01', 'type': 'microsoft.network/frontdoors', 'name': \"[parameters('frontdoorname')]\", 'location': \"[variables('frontdoorlocation')]\", 'properties': {'routingrules': [{'name': 'routingrule1', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), 'frontendendpoint1')]\"}], 'acceptedprotocols': ['http', 'https'], 'patternstomatch': ['/*', '/site1/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), 'backendpool1')]\"}}, 'enabledstate': 'enabled'}}, {'name': 'routingrule2', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), 'frontendendpoint1')]\"}], 'acceptedprotocols': ['https'], 'patternstomatch': ['/site2/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorforwardingconfiguration', 'forwardingprotocol': 'matchrequest', 'backendpool': {'id': \"[resourceid('microsoft.network/frontdoors/backendpools', parameters('frontdoorname'), 'backendpool2')]\"}}, 'enabledstate': 'enabled'}}], 'healthprobesettings': [{'name': 'healthprobesettings1', 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}, {'name': 'healthprobesettings2', 'properties': {'path': '/', 'protocol': 'https', 'intervalinseconds': 60}}], 'loadbalancingsettings': [{'name': 'loadbalancingsettings1', 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}, {'name': 'loadbalancingsettings2', 'properties': {'samplesize': 2, 'successfulsamplesrequired': 1}}], 'backendpools': [{'name': \"[parameters('backendpools1').name]\", 'properties': {'copy': [{'name': 'backends', 'count': \"[length(parameters('backendpools1').backends)]\", 'input': {'address': \"[parameters('backendpools1').backends[copyindex('backends')].address]\", 'httpport': \"[parameters('backendpools1').backends[copyindex('backends')].httpport]\", 'httpsport': \"[parameters('backendpools1').backends[copyindex('backends')].httpsport]\", 'weight': \"[parameters('backendpools1').backends[copyindex('backends')].weight]\", 'priority': \"[parameters('backendpools1').backends[copyindex('backends')].priority]\", 'enabledstate': \"[parameters('backendpools1').backends[copyindex('backends')].enabledstate]\"}}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), 'loadbalancingsettings1')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), 'healthprobesettings1')]\"}}}, {'name': \"[parameters('backendpools2').name]\", 'properties': {'copy': [{'name': 'backends', 'count': \"[length(parameters('backendpools2').backends)]\", 'input': {'address': \"[parameters('backendpools2').backends[copyindex('backends')].address]\", 'httpport': \"[parameters('backendpools2').backends[copyindex('backends')].httpport]\", 'httpsport': \"[parameters('backendpools2').backends[copyindex('backends')].httpsport]\", 'weight': \"[parameters('backendpools2').backends[copyindex('backends')].weight]\", 'priority': \"[parameters('backendpools2').backends[copyindex('backends')].priority]\", 'enabledstate': \"[parameters('backendpools2').backends[copyindex('backends')].enabledstate]\"}}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), 'loadbalancingsettings2')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), 'healthprobesettings2')]\"}}}], 'frontendendpoints': [{'name': 'frontendendpoint1', 'properties': {'hostname': \"[variables('frontdoorhostname')]\"}}], 'enabledstate': 'enabled'}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Firewall with Availability Zones\n\n===\n\n", "completion": " {'name': \"[parameters('virtualnetworkname')]\", 'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'location': \"[parameters('location')]\", 'tags': {'displayname': \"[parameters('virtualnetworkname')]\"}, 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('azurefirewallsubnetname')]\", 'properties': {'addressprefix': \"[parameters('azurefirewallsubnetaddressprefix')]\"}}]}}{'name': \"[concat(parameters('publicipnameprefix'), add(copyindex(), 1))]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberofpublicipaddresses')]\"}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/azurefirewalls', 'name': \"[parameters('firewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('availabilityzones')), 0), json('null'), parameters('availabilityzones'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\", 'publicipcopy'], 'properties': {'ipconfigurations': \"[variables('azurefirewallipconfigurations')]\", 'applicationrulecollections': [{'name': 'apprc1', 'properties': {'priority': 101, 'action': {'type': 'allow'}, 'rules': [{'name': 'apprule1', 'protocols': [{'port': 80, 'protocoltype': 'http'}], 'targetfqdns': ['www.microsoft.com'], 'sourceaddresses': ['10.0.0.0/24']}]}}], 'networkrulecollections': [{'name': 'netrc1', 'properties': {'priority': 200, 'action': {'type': 'allow'}, 'rules': [{'name': 'netrule1', 'protocols': ['tcp'], 'sourceaddresses': ['10.0.0.0/24'], 'destinationaddresses': ['*'], 'destinationports': ['8000-8999']}]}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway with Public IP\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'sslcertificates': [{'name': 'appgatewaysslcert', 'properties': {'data': \"[parameters('certdata')]\", 'password': \"[parameters('certpassword')]\"}}], 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('virtualnetworkname'), variables('subnetname'))]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('publicipaddressname'))]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 443}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}, {'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'https', 'sslcertificate': {'id': \"[resourceid('microsoft.network/applicationgateways/sslcertificates',variables('applicationgatewayname'), 'appgatewaysslcert')]\"}}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis sample shows how to deploy a hub-spoke topology in Azure using the Azure Firewall as a DNS proxy\n\n===\n\n", "completion": " {'comments': 'network security group for the subnets of the hub virtual network', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('hubvnetcommonsubnetnsgname')]\", 'location': \"[parameters('location')]\", 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetcommonsubnetnsgid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'networksecuritygroupevent', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}, {'category': 'networksecuritygrouprulecounter', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}}]}{'comments': 'network security group for the subnets of the development virtual network', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('devvnetdefaultsubnetnsgname')]\", 'location': \"[parameters('location')]\", 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('devvnetdefaultsubnetnsgid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'networksecuritygroupevent', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}, {'category': 'networksecuritygrouprulecounter', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}}]}{'comments': 'network security group for the subnets of the production virtual network', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-07-01', 'name': \"[variables('prodvnetdefaultsubnetnsgname')]\", 'location': \"[parameters('location')]\", 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('prodvnetdefaultsubnetnsgid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'networksecuritygroupevent', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}, {'category': 'networksecuritygrouprulecounter', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}}]}{'comments': 'network security group for azure bastion', 'apiversion': '2020-07-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[variables('hubvnetbastionsubnetnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allowhttpsinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'internet', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'allowgatewaymanagerinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'gatewaymanager', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 110, 'direction': 'inbound'}}, {'name': 'allowloadbalancerinbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': 'azureloadbalancer', 'destinationportrange': '443', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 120, 'direction': 'inbound'}}, {'name': 'allowbastionhostcommunicationinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationportranges': ['8080', '5701'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 130, 'direction': 'inbound'}}, {'name': 'denyallinbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportrange': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 1000, 'direction': 'inbound'}}, {'name': 'allowsshrdpoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportranges': ['22', '3389'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 100, 'direction': 'outbound'}}, {'name': 'allowazurecloudcommunicationoutbound', 'properties': {'protocol': 'tcp', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationportrange': '443', 'destinationaddressprefix': 'azurecloud', 'access': 'allow', 'priority': 110, 'direction': 'outbound'}}, {'name': 'allowbastionhostcommunicationoutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': 'virtualnetwork', 'destinationportranges': ['8080', '5701'], 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 120, 'direction': 'outbound'}}, {'name': 'allowgetsessioninformationoutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'destinationportranges': ['80', '443'], 'access': 'allow', 'priority': 130, 'direction': 'outbound'}}, {'name': 'denyalloutbound', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 1000, 'direction': 'outbound'}}]}, 'resources': [{'type': 'providers/diagnosticsettings', 'apiversion': '2017-05-01-preview', 'name': 'microsoft.insights/default', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetbastionsubnetnsgid')]\", \"[variables('workspaceid')]\"], 'properties': {'workspaceid': \"[variables('workspaceid')]\", 'logs': [{'category': 'networksecuritygroupevent', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}, {'category': 'networksecuritygrouprulecounter', 'enabled': true, 'retentionpolicy': {'enabled': false, 'days': 0}}]}}]}{'comments': 'azure bastion public ip address', 'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('bastionpublicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'comments': 'azure bastion host', 'apiversion': '2020-05-01', 'type': 'microsoft.network/bastionhosts', 'name': \"[parameters('bastionhostname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('bastionpublicipaddressid')]\", \"[variables('hubvnetid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfiguration', 'properties': {'subnet': {'id': \"[variables('bastionsubnetid')]\"}, 'publicipaddress': {'id': \"[variables('bastionpublicipaddressid')]\"}}}]}}{'comments': 'hub virtual network', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('hubvnetname')]\", 'apiversion': '2020-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetcommonsubnetnsgid')]\", \"[variables('hubvnetbastionsubnetnsgid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('hubvnetaddressprefix')]\"]}, 'subnets': [{'name': \"[parameters('hubvnetcommonsubnetname')]\", 'properties': {'addressprefix': \"[parameters('hubvnetcommonsubnetprefix')]\", 'networksecuritygroup': {'id': \"[variables('hubvnetcommonsubnetnsgid')]\"}, 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled'}}, {'name': \"[variables('bastionsubnetname')]\", 'properties': {'addressprefix': \"[parameters('hubvnetbastionsubnetprefix')]\", 'privateendpointnetworkpolicies': 'disabled', 'privatelinkservicenetworkpolicies': 'enabled', 'networksecuritygroup': {'id': \"[variables('hubvnetbastionsubnetnsgid')]\"}}}, {'name': \"[parameters('hubvnetgatewaysubnetname')]\", 'properties': {'addressprefix': \"[parameters('hubvnetgatewaysubnetprefix')]\"}}, {'name': \"[parameters('hubvnetfirewallsubnetname')]\", 'properties': {'addressprefix': \"[parameters('hubvnetfirewallsubnetprefix')]\"}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'comments': 'development virtual network', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('devvnetname')]\", 'apiversion': '2020-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('firewallid')]\", \"[variables('devvnetdefaultsubnetnsgid')]\", \"[variables('devvnetdefaultsubnetroutetableid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('devvnetaddressprefix')]\"]}, 'dhcpoptions': {'dnsservers': [\"[reference(variables('firewallid')).ipconfigurations[0].properties.privateipaddress]\"]}, 'subnets': [{'name': \"[parameters('devvnetdefaultsubnetname')]\", 'properties': {'addressprefix': \"[parameters('devvnetdefaultsubnetprefix')]\", 'routetable': {'id': \"[variables('devvnetdefaultsubnetroutetableid')]\"}, 'networksecuritygroup': {'id': \"[variables('devvnetdefaultsubnetnsgid')]\"}}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'comments': 'production virtual network', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('prodvnetname')]\", 'apiversion': '2020-04-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('firewallid')]\", \"[variables('prodvnetdefaultsubnetnsgid')]\", \"[variables('prodvnetdefaultsubnetroutetableid')]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('prodvnetaddressprefix')]\"]}, 'dhcpoptions': {'dnsservers': [\"[reference(variables('firewallid')).ipconfigurations[0].properties.privateipaddress]\"]}, 'subnets': [{'name': \"[parameters('prodvnetdefaultsubnetname')]\", 'properties': {'addressprefix': \"[parameters('prodvnetdefaultsubnetprefix')]\", 'routetable': {'id': \"[variables('prodvnetdefaultsubnetroutetableid')]\"}, 'networksecuritygroup': {'id': \"[variables('prodvnetdefaultsubnetnsgid')]\"}}}], 'enableddosprotection': false, 'enablevmprotection': false}}{'comments': 'virtual network peering from the hub virtual network to the development virtual network', 'apiversion': '2020-04-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(parameters('hubvnetname'), '/', parameters('hubvnetname'), 'to', parameters('devvnetname'), 'peering')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetid')]\", \"[variables('devvnetid')]\", \"[variables('gatewayid')]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': \"[parameters('deployvpngateway')]\", 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[variables('devvnetid')]\"}}}{'comments': 'virtual network peering from the hub virtual network to the production virtual network', 'apiversion': '2020-04-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(parameters('hubvnetname'), '/', parameters('hubvnetname'), 'to', parameters('prodvnetname'), 'peering')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetid')]\", \"[variables('prodvnetid')]\", \"[variables('gatewayid')]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': \"[parameters('deployvpngateway')]\", 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[variables('prodvnetid')]\"}}}{'comments': 'virtual network peering from the development virtual network to the hub virtual network', 'apiversion': '2020-04-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(parameters('devvnetname'), '/', parameters('devvnetname'), 'to', parameters('hubvnetname'), 'peering')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetid')]\", \"[variables('devvnetid')]\", \"[variables('gatewayid')]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': false, 'useremotegateways': \"[parameters('deployvpngateway')]\", 'remotevirtualnetwork': {'id': \"[variables('hubvnetid')]\"}}}{'comments': 'virtual network peering from the production virtual network to the hub virtual network', 'apiversion': '2020-04-01', 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'name': \"[concat(parameters('prodvnetname'), '/', parameters('prodvnetname'), 'to', parameters('hubvnetname'), 'peering')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetid')]\", \"[variables('prodvnetid')]\", \"[variables('gatewayid')]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': true, 'allowgatewaytransit': false, 'useremotegateways': \"[parameters('deployvpngateway')]\", 'remotevirtualnetwork': {'id': \"[variables('hubvnetid')]\"}}}{'comments': 'virtual network gateway public ip address', 'condition': \"[parameters('deployvpngateway')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-04-01', 'name': \"[variables('gatewaypublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'virtual network gateway', 'condition': \"[parameters('deployvpngateway')]\", 'type': 'microsoft.network/virtualnetworkgateways', 'apiversion': '2020-04-01', 'name': \"[parameters('gatewayname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('gatewaypublicipid')]\", \"[variables('hubvnetid')]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('hubvnetgatewaysubnetid')]\"}, 'publicipaddress': {'id': \"[variables('gatewaypublicipid')]\"}}, 'name': 'vnetgatewayconfig'}], 'sku': {'name': \"[parameters('gatewaysku')]\", 'tier': \"[parameters('gatewaysku')]\"}, 'gatewaytype': \"[parameters('gatewaytype')]\", 'vpntype': \"[parameters('vpntype')]\", 'enablebgp': \"[parameters('enablebgp')]\"}}{'condition': \"[parameters('deploycustomdnsforwarder')]\", 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('dnsvmnicname')]\", 'apiversion': '2020-07-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetid')]\"], 'properties': {'ipconfigurations': [{'name': 'vmipconfig', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('hubvnetcommonsubnetid')]\"}, 'privateipaddressversion': 'ipv4'}}]}}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('devvmnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('devvnetid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('devvnetdefaultsubnetid')]\"}}}]}}{'apiversion': '2020-04-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('prodvmnicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('prodvnetid')]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('prodvnetdefaultsubnetid')]\"}}}]}}{'comments': 'azure firewall public ip addresses', 'name': \"[if(equals(parameters('numberoffirewallpublicipaddresses'), 1), variables('firewallpublicipnameprefix'), concat(variables('firewallpublicipnameprefix'), add(copyindex(), 1)))]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-04-01', 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'publicipcopy', 'count': \"[parameters('numberoffirewallpublicipaddresses')]\"}, 'properties': {'publicipallocationmethod': 'static', 'publicipaddressversion': 'ipv4'}}{'comments': 'azure firewall policy', 'apiversion': '2020-07-01', 'type': 'microsoft.network/firewallpolicies', 'name': \"[parameters('firewallpolicyname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('dnsvmnicid')]\"], 'properties': {'dnssettings': {'enableproxy': true, 'servers': \"[if(parameters('deploycustomdnsforwarder'), createarray(reference(variables('dnsvmnicid')).ipconfigurations[0].properties.privateipaddress), createarray())]\"}, 'threatintelmode': 'alert'}}{'comments': 'azure firewall', 'apiversion': '2020-07-01', 'type': 'microsoft.network/azurefirewalls', 'name': \"[parameters('firewallname')]\", 'location': \"[parameters('location')]\", 'zones': \"[if(equals(length(parameters('firewallavailabilityzones')), 0), json('null'), parameters('firewallavailabilityzones'))]\", 'dependson': [\"[variables('firewallpolicyid')]\", \"[variables('hubvnetid')]\", 'publicipcopy'], 'properties': {'copy': [{'name': 'ipconfigurations', 'count': \"[parameters('numberoffirewallpublicipaddresses')]\", 'input': {'name': \"[if(equals(parameters('numberoffirewallpublicipaddresses'), 1), 'ipconfiguration', concat('ipconfiguration', copyindex('ipconfigurations')))]\", 'properties': {'subnet': \"[if(equals(copyindex('ipconfigurations'), 0), variables('azurefirewallsubnetjson'), json('null'))]\", 'publicipaddress': {'id': \"[if(equals(parameters('numberoffirewallpublicipaddresses'), 1), variables('azurefirewallpublicipid'), concat(variables('azurefirewallpublicipid'), add(copyindex('ipconfigurations'), 1)))]\"}}}}], 'firewallpolicy': {'id': \"[variables('firewallpolicyid')]\"}}}{'comments': 'azure firewall policy network rule collection', 'name': \"[variables('firewallpolicydefaultnetworkrulecollectiongroupname')]\", 'type': 'microsoft.network/firewallpolicies/rulecollectiongroups', 'apiversion': '2020-07-01', 'dependson': [\"[variables('firewallpolicyid')]\", \"[variables('firewallid')]\", \"[variables('hubvnetid')]\", \"[variables('devvnetid')]\", \"[variables('prodvnetid')]\"], 'properties': {'priority': '200', 'rulecollections': [{'name': 'vnettovnetnetworkrules', 'rulecollectiontype': 'firewallpolicyfilterrulecollection', 'priority': '100', 'action': {'type': 'allow'}, 'rules': [{'name': \"[concat('allow-', parameters('devvnetname'), '-', parameters('devvnetdefaultsubnetname'), '-to-', parameters('prodvnetname'), '-', parameters('prodvnetdefaultsubnetname'), '-traffic')]\", 'ruletype': 'networkrule', 'ipprotocols': ['any'], 'sourceaddresses': [\"[parameters('prodvnetaddressprefix')]\"], 'destinationaddresses': [\"[parameters('devvnetaddressprefix')]\"], 'destinationports': ['*']}, {'name': \"[concat('allow-', parameters('prodvnetname'), '-', parameters('prodvnetdefaultsubnetname'), '-to-', parameters('devvnetname'), '-', parameters('devvnetdefaultsubnetname'), '-traffic')]\", 'ruletype': 'networkrule', 'ipprotocols': ['any'], 'sourceaddresses': [\"[parameters('devvnetaddressprefix')]\"], 'destinationaddresses': [\"[parameters('prodvnetaddressprefix')]\"], 'destinationports': ['*']}]}, {'name': 'vnettointernet', 'rulecollectiontype': 'firewallpolicyfilterrulecollection', 'priority': '200', 'action': {'type': 'allow'}, 'rules': [{'name': \"[concat('allow-', parameters('hubvnetname'), '-', parameters('hubvnetcommonsubnetname'), '-internet-traffic')]\", 'ruletype': 'networkrule', 'ipprotocols': ['tcp'], 'sourceaddresses': [\"[parameters('hubvnetcommonsubnetprefix')]\"], 'destinationaddresses': ['*'], 'destinationports': ['80', '443']}, {'name': \"[concat('allow-', parameters('prodvnetname'), '-', parameters('prodvnetdefaultsubnetname'), '-internet-traffic')]\", 'ruletype': 'networkrule', 'ipprotocols': ['tcp'], 'sourceaddresses': [\"[parameters('prodvnetdefaultsubnetprefix')]\"], 'destinationaddresses': ['*'], 'destinationports': ['80', '443']}, {'name': \"[concat('allow-', parameters('devvnetname'), '-', parameters('devvnetdefaultsubnetname'), '-internet-traffic')]\", 'ruletype': 'networkrule', 'ipprotocols': ['tcp'], 'sourceaddresses': [\"[parameters('devvnetdefaultsubnetprefix')]\"], 'destinationaddresses': ['*'], 'destinationports': ['80', '443']}]}]}}{'condition': \"[parameters('creatednatrulecollection')]\", 'comments': 'azure firewall policy nat rule collection', 'name': \"[variables('firewallpolicydefaultdnatrulecollectiongroupname')]\", 'type': 'microsoft.network/firewallpolicies/rulecollectiongroups', 'apiversion': '2020-07-01', 'dependson': [\"[variables('firewallpolicyid')]\", \"[variables('firewallid')]\", \"[variables('firewallpolicydefaultnetworkrulecollectiongroupid')]\", \"[variables('devvmnicid')]\", \"[variables('prodvmnicid')]\"], 'properties': {'priority': '100', 'rulecollections': [{'name': 'virtualmachinenatrules', 'rulecollectiontype': 'firewallpolicynatrulecollection', 'priority': '300', 'action': {'type': 'dnat'}, 'rules': [{'name': \"[concat(parameters('devvmname'), '-rdp-nat-rule')]\", 'ruletype': 'natrule', 'sourceaddresses': ['*'], 'destinationaddresses': [\"[reference(resourceid('microsoft.network/publicipaddresses', if(equals(parameters('numberoffirewallpublicipaddresses'), 1), variables('firewallpublicipnameprefix'), concat(variables('firewallpublicipnameprefix'), add(copyindex(), 1))))).ipaddress]\"], 'destinationports': ['4001'], 'ipprotocols': ['tcp'], 'translatedaddress': \"[reference(variables('devvmnicid')).ipconfigurations[0].properties.privateipaddress]\", 'translatedport': '22'}, {'name': \"[concat(parameters('prodvmname'), '-rdp-nat-rule')]\", 'ruletype': 'natrule', 'sourceaddresses': ['*'], 'destinationaddresses': [\"[reference(resourceid('microsoft.network/publicipaddresses', if(equals(parameters('numberoffirewallpublicipaddresses'), 1), variables('firewallpublicipnameprefix'), concat(variables('firewallpublicipnameprefix'), add(copyindex(), 1))))).ipaddress]\"], 'destinationports': ['4002'], 'ipprotocols': ['tcp'], 'translatedaddress': \"[reference(variables('prodvmnicid')).ipconfigurations[0].properties.privateipaddress]\", 'translatedport': '22'}]}]}}{'comments': 'route table for the subnet(s) of the development virtual network', 'type': 'microsoft.network/routetables', 'name': \"[variables('devvnetdefaultsubnetroutetablename')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('firewallid')]\"], 'properties': {'disablebgproutepropagation': \"[not(parameters('enablebgp'))]\", 'routes': [{'name': \"[concat('routetrafficto', parameters('firewallname'))]\", 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[reference(variables('firewallid')).ipconfigurations[0].properties.privateipaddress]\"}}]}}{'comments': 'route table for the subnet(s) of the production virtual network', 'type': 'microsoft.network/routetables', 'name': \"[variables('prodvnetdefaultsubnetroutetablename')]\", 'apiversion': '2020-06-01', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('firewallid')]\"], 'properties': {'disablebgproutepropagation': \"[not(parameters('enablebgp'))]\", 'routes': [{'name': \"[concat('routetrafficto', parameters('firewallname'))]\", 'properties': {'addressprefix': '0.0.0.0/0', 'nexthoptype': 'virtualappliance', 'nexthopipaddress': \"[reference(variables('firewallid')).ipconfigurations[0].properties.privateipaddress]\"}}]}}{'comments': 'private dns zone used to the virtual machines in the hub, production, and development virtual networks', 'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[parameters('privatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}, 'resources': [{'comments': 'virtual network link between the private dns zone the production virtual network', 'type': 'virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat('linkto', parameters('prodvnetname'))]\", 'location': 'global', 'dependson': [\"[variables('privatednszoneid')]\", \"[variables('prodvnetid')]\"], 'properties': {'registrationenabled': true, 'virtualnetwork': {'id': \"[variables('prodvnetid')]\"}}}, {'comments': 'virtual network link between the private dns zone the hub virtual network', 'type': 'virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat('linkto', parameters('hubvnetname'))]\", 'location': 'global', 'dependson': [\"[variables('privatednszoneid')]\", \"[variables('hubvnetid')]\"], 'properties': {'registrationenabled': true, 'virtualnetwork': {'id': \"[variables('hubvnetid')]\"}}}, {'comments': 'virtual network link between the private dns zone the development virtual network', 'type': 'virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat('linkto', parameters('devvnetname'))]\", 'location': 'global', 'dependson': [\"[variables('privatednszoneid')]\", \"[variables('devvnetid')]\"], 'properties': {'registrationenabled': true, 'virtualnetwork': {'id': \"[variables('devvnetid')]\"}}}]}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('adlsprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}, 'resources': [{'type': 'virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat('link_to_', tolower(parameters('hubvnetname')))]\", 'location': 'global', 'dependson': [\"[variables('adlsprivatednszoneid')]\", \"[variables('hubvnetid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('hubvnetid')]\"}}}]}{'type': 'microsoft.network/privatednszones', 'apiversion': '2020-06-01', 'name': \"[variables('blobprivatednszonename')]\", 'location': 'global', 'properties': {'maxnumberofrecordsets': 25000, 'maxnumberofvirtualnetworklinks': 1000, 'maxnumberofvirtualnetworklinkswithregistration': 100}, 'resources': [{'type': 'virtualnetworklinks', 'apiversion': '2020-06-01', 'name': \"[concat('link_to_', tolower(parameters('hubvnetname')))]\", 'location': 'global', 'dependson': [\"[variables('blobprivatednszoneid')]\", \"[variables('hubvnetid')]\"], 'properties': {'registrationenabled': false, 'virtualnetwork': {'id': \"[variables('hubvnetid')]\"}}}]}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('adlsstorageaccountadlsprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetid')]\", \"[variables('adlsstorageaccountid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('adlsstorageaccountadlsprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('adlsstorageaccountid')]\", 'groupids': [\"[variables('adlsgroupname')]\"]}}], 'subnet': {'id': \"[variables('hubvnetcommonsubnetid')]\"}}, 'resources': [{'type': 'privatednszonegroups', 'apiversion': '2020-07-01', 'name': 'privatednszonegroup', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('adlsprivatednszoneid')]\", \"[variables('adlsstorageaccountadlsprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('adlsprivatednszoneid')]\"}}]}}]}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('adlsstorageaccountblobprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetid')]\", \"[variables('adlsstorageaccountid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('adlsstorageaccountblobprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('adlsstorageaccountid')]\", 'groupids': [\"[variables('blobgroupname')]\"]}}], 'subnet': {'id': \"[variables('hubvnetcommonsubnetid')]\"}}, 'resources': [{'type': 'privatednszonegroups', 'apiversion': '2020-07-01', 'name': 'privatednszonegroup', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('blobprivatednszoneid')]\", \"[variables('adlsstorageaccountblobprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('blobprivatednszoneid')]\"}}]}}]}{'type': 'microsoft.network/privateendpoints', 'apiversion': '2020-07-01', 'name': \"[parameters('blobstorageaccountblobprivateendpointname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[variables('hubvnetid')]\", \"[variables('blobstorageaccountid')]\"], 'properties': {'privatelinkserviceconnections': [{'name': \"[parameters('blobstorageaccountblobprivateendpointname')]\", 'properties': {'privatelinkserviceid': \"[variables('blobstorageaccountid')]\", 'groupids': [\"[variables('blobgroupname')]\"]}}], 'subnet': {'id': \"[variables('hubvnetcommonsubnetid')]\"}}, 'resources': [{'type': 'privatednszonegroups', 'apiversion': '2020-07-01', 'name': 'privatednszonegroup', 'location': \"[parameters('location')]\", 'dependson': [\"[variables('blobprivatednszoneid')]\", \"[variables('blobstorageaccountblobprivateendpointid')]\"], 'properties': {'privatednszoneconfigs': [{'name': 'dnsconfig', 'properties': {'privatednszoneid': \"[variables('blobprivatednszoneid')]\"}}]}}]} END"}
{"prompt": "\n\n###\n\nInstall Virtual Network with DMZ Subnet\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[parameters('fensgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'rdp_rule', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'web_rule', 'properties': {'description': 'allow web', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 101, 'direction': 'inbound'}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[parameters('appnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow_fe', 'properties': {'description': 'allow fe subnet', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': \"[parameters('fesubnetprefix')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'block_rdp_internet', 'properties': {'description': 'block rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': 'internet', 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 101, 'direction': 'inbound'}}, {'name': 'block_internet_outbound', 'properties': {'description': 'block internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'deny', 'priority': 200, 'direction': 'outbound'}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networksecuritygroups', 'name': \"[parameters('dbnsgname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow_app', 'properties': {'description': 'allow app subnet', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '1433', 'sourceaddressprefix': \"[parameters('appsubnetprefix')]\", 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}, {'name': 'block_fe', 'properties': {'description': 'block fe subnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': \"[parameters('fesubnetprefix')]\", 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 101, 'direction': 'inbound'}}, {'name': 'block_app', 'properties': {'description': 'block app subnet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': \"[parameters('appsubnetprefix')]\", 'destinationaddressprefix': '*', 'access': 'deny', 'priority': 102, 'direction': 'inbound'}}, {'name': 'block_internet', 'properties': {'description': 'block internet', 'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '*', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'internet', 'access': 'deny', 'priority': 200, 'direction': 'outbound'}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups/', parameters('fensgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', parameters('appnsgname'))]\", \"[resourceid('microsoft.network/networksecuritygroups/', parameters('dbnsgname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': 'fesubnet', 'properties': {'addressprefix': \"[parameters('fesubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', parameters('fensgname'))]\"}}}, {'name': 'appsubnet', 'properties': {'addressprefix': \"[parameters('appsubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', parameters('appnsgname'))]\"}}}, {'name': 'dbsubnet', 'properties': {'addressprefix': \"[parameters('dbsubnetprefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', parameters('dbnsgname'))]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreates an ExpressRoute Circuit and an AzurePublicPeering BGP Peering\n\n===\n\n", "completion": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/expressroutecircuits', 'name': \"[parameters('circuitname')]\", 'location': \"[parameters('location')]\", 'tags': {'key1': 'value1', 'key2': 'value2'}, 'sku': {'name': \"[concat(parameters('sku_tier'),'_', parameters('sku_family'))]\", 'tier': \"[parameters('sku_tier')]\", 'family': \"[parameters('sku_family')]\"}, 'properties': {'serviceproviderproperties': {'serviceprovidername': \"[parameters('serviceprovidername')]\", 'peeringlocation': \"[parameters('peeringlocation')]\", 'bandwidthinmbps': \"[parameters('bandwidthinmbps')]\"}, 'peerings': [{'name': \"[parameters('peeringtype')]\", 'properties': {'peeringtype': \"[parameters('peeringtype')]\", 'sharedkey': \"[parameters('sharedkey')]\", 'peerasn': \"[parameters('peerasn')]\", 'primarypeeraddressprefix': \"[parameters('primarypeeraddressprefix')]\", 'secondarypeeraddressprefix': \"[parameters('secondarypeeraddressprefix')]\", 'vlanid': \"[parameters('vlanid')]\"}}]}} END"}
{"prompt": "\n\n###\n\nAzure Route Server in BGP peering with Quagga\n\n===\n\n", "completion": " {'comments': 'network security group', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2021-03-01', 'name': \"[variables('nsgname')]\", 'location': \"[variables('location')]\", 'properties': {'securityrules': [{'name': 'ssh-rule', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'comments': 'create vnet1. subnet1 is assigned to routeserversubnet. subnet4 is used for the ubuntu vm', 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2021-03-01', 'name': \"[variables('vnetname')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups',variables('nsgname'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('addressspace1prefix')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\"}}, {'name': \"[variables('subnet2name')]\", 'properties': {'addressprefix': \"[variables('subnet2prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups',variables('nsgname'))]\"}}}, {'name': \"[variables('subnet3name')]\", 'properties': {'addressprefix': \"[variables('subnet3prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups',variables('nsgname'))]\"}}}, {'name': \"[variables('subnet4name')]\", 'properties': {'addressprefix': \"[variables('subnet4prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups',variables('nsgname'))]\"}}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('gatewaysubnetprefix')]\"}}]}}{'comments': 'create a virtual hub object', 'type': 'microsoft.network/virtualhubs', 'apiversion': '2021-03-01', 'name': \"[variables('rsname')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid( 'microsoft.network/virtualnetworks', variables('vnetname') )]\"], 'properties': {'sku': 'standard', 'allowbranchtobranchtraffic': true}, 'resources': []}{'comments': 'public ip of the route server', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('rspubipname')]\", 'apiversion': '2021-03-01', 'location': \"[variables('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'comments': 'create the route server and attach it to the routeserversubnet subnet', 'type': 'microsoft.network/virtualhubs/ipconfigurations', 'apiversion': '2021-03-01', 'name': \"[concat(variables('rsname'), '/',variables('vhubipconfigname'))]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('rsname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('rspubipname') )]\"], 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnet_rs1_id')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', variables('rspubipname') )]\"}}}{'comments': 'name of the bgp connection configured on the route server. the bgp connection can be created when the microsoft.network/virtualhubs/ipconfigurations deployment complete.', 'type': 'microsoft.network/virtualhubs/bgpconnections', 'apiversion': '2021-03-01', 'name': \"[variables('bgpconnectionname')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs/ipconfigurations', variables('rsname'), variables('vhubipconfigname'))]\"], 'properties': {'peerip': \"[variables('peering1ip')]\", 'peerasn': \"[variables('peering1asn')]\"}}{'comments': 'public ip of the vm', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('vmpubipname')]\", 'apiversion': '2021-03-01', 'location': \"[variables('location')]\", 'sku': {'name': 'basic'}, 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'network interface of the vm attached to the subnet4', 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2021-03-01', 'name': \"[variables('nicname')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('vmpubipname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconf-nic0', 'properties': {'privateipallocationmethod': 'static', 'privateipaddress': \"[variables('vmprivip')]\", 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('vmpubipname')  )]\"}, 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), variables('subnet4name') )]\"}}}], 'enableipforwarding': true}} END"}
{"prompt": "\n\n###\n\nCreate a VNET to VNET connection using vNet Peering\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[parameters('vnet1name')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet1config').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet1config').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet1config').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}', parameters('vnet1name'), format('{0}-{1}', parameters('vnet1name'), parameters('vnet2name')))]\", 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': false, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', parameters('vnet2name'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnet1name'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnet2name'))]\"]}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[parameters('vnet2name')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet2config').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet2config').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet2config').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}', parameters('vnet2name'), format('{0}-{1}', parameters('vnet2name'), parameters('vnet1name')))]\", 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': false, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', parameters('vnet1name'))]\"}}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnet1name'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnet2name'))]\"]} END"}
{"prompt": "\n\n###\n\nAdd endpoint to existing profile\n\n===\n\n", "completion": " {'apiversion': '2018-04-01', 'type': 'microsoft.network/trafficmanagerprofiles/externalendpoints', 'name': \"[concat(parameters('existingtmprofilename'), '/', parameters('endpointname'))]\", 'properties': {'endpointstatus': \"[variables('endpointstatus')]\", 'endpointlocation': \"[variables('endpointlocation')]\", 'endpointmonitorstatus': \"[variables('endpointmonitorstatus')]\", 'target': \"[variables('target')]\", 'weight': \"[variables('weight')]\", 'priority': \"[variables('priority')]\"}} END"}
{"prompt": "\n\n###\n\nThis template creates a standard internal Azure Load Balancer with a HA ports load-balancing rule\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnetref')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), 'loadbalancerbackend')]\"}]}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('loadbalancername')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'sku': {'name': \"[variables('lbsku')]\"}, 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'backendaddresspools': [{'name': 'loadbalancerbackend'}], 'loadbalancingrules': [{'name': \"[variables('lbrulename')]\", 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/loadbalancers/frontendipconfigurations', variables('loadbalancername'), 'loadbalancerfrontend')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools', variables('loadbalancername'), 'loadbalancerbackend')]\"}, 'probe': {'id': \"[resourceid('microsoft.network/loadbalancers/probes', variables('loadbalancername'), variables('lbprobename'))]\"}, 'protocol': 'all', 'frontendport': 0, 'backendport': 0, 'enablefloatingip': false, 'enabletcpreset': true, 'loaddistribution': 'default', 'disableoutboundsnat': true, 'idletimeoutinminutes': 15}}], 'probes': [{'name': \"[variables('lbprobename')]\", 'properties': {'protocol': 'tcp', 'port': 80, 'intervalinseconds': 15, 'numberofprobes': 2}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway V2 with Key Vault\n\n===\n\n", "completion": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'sku': {'name': 'standard'}, 'properties': {'publicipallocationmethod': 'static'}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/applicationgateways', 'name': \"[parameters('applicationgatewayname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\", \"[resourceid('microsoft.keyvault/vaults', parameters('keyvaultname'))]\"], 'identity': {'type': 'userassigned', 'userassignedidentities': {\"[variables('identityid')]\": {}}}, 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard_v2', 'capacity': 2}, 'sslcertificates': [{'name': 'appgatewaysslcert', 'properties': {'keyvaultsecretid': \"[concat(reference(parameters('keyvaultname')).vaulturi,'secrets/sslcert')]\"}}], 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[variables('publicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 443}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}, {'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations', parameters('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports', parameters('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'https', 'sslcertificate': {'id': \"[resourceid('microsoft.network/applicationgateways/sslcertificates', parameters('applicationgatewayname'), 'appgatewaysslcert')]\"}}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners', parameters('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',parameters('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',parameters('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nThis template creates an Azure Traffic Manager profile that load-balances across multiple virtual machines placed in Availability Zones.\n\n===\n\n", "completion": " {'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'name': \"[concat(variables('publicipaddressname'), copyindex())]\", 'zones': \"[split(string(add(mod(copyindex(),3),1)), ',')]\", 'sku': {'name': 'standard'}, 'copy': {'name': 'iploop', 'count': \"[parameters('numberofvms')]\"}, 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'static', 'dnssettings': {'domainnamelabel': \"[concat(parameters('publicipdnsname'), copyindex())]\"}}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': ['10.0.0.0/16']}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': '10.0.0.0/24'}}]}}{'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-05-01', 'name': \"[concat(variables('nicname'), copyindex())]\", 'copy': {'name': 'nicloop', 'count': \"[parameters('numberofvms')]\"}, 'location': \"[parameters('location')]\", 'dependson': ['iploop', \"[variables('virtualnetworkname')]\", \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses', concat(variables('publicipaddressname'), copyindex()))]\"}, 'subnet': {'id': \"[variables('subnetref')]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('networksecuritygroupname'))]\"}}}{'apiversion': '2018-08-01', 'type': 'microsoft.network/trafficmanagerprofiles', 'name': 'vmendpointexample', 'location': 'global', 'dependson': ['iploop'], 'properties': {'profilestatus': 'enabled', 'trafficroutingmethod': 'weighted', 'dnsconfig': {'relativename': \"[parameters('trafficmanagerdnsname')]\", 'ttl': 30}, 'monitorconfig': {'protocol': 'http', 'port': 80, 'path': '/'}, 'copy': [{'name': 'endpoints', 'count': \"[parameters('numberofvms')]\", 'input': {'name': \"[concat('endpoint', copyindex('endpoints'))]\", 'type': 'microsoft.network/trafficmanagerprofiles/azureendpoints', 'properties': {'targetresourceid': \"[resourceid('microsoft.network/publicipaddresses', concat(variables('publicipaddressname'), copyindex('endpoints')))]\", 'endpointstatus': 'enabled', 'weight': 1}}}]}}{'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'name': \"[variables('networksecuritygroupname')]\", 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'port_80', 'properties': {'protocol': '*', 'sourceportrange': '*', 'destinationportrange': '80', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}} END"}
{"prompt": "\n\n###\n\nCreate a VNET to VNET connection across two different regions\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname1')]\", 'location': \"[parameters('location1')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix1')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name1')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix1')]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix1')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname2')]\", 'location': \"[parameters('location2')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix2')]\"]}, 'subnets': [{'name': \"[parameters('subnet1name2')]\", 'properties': {'addressprefix': \"[parameters('subnet1prefix2')]\"}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix2')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('gatewaypublicipname1')]\", 'location': \"[parameters('location1')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('gatewaypublicipname2')]\", 'location': \"[parameters('location2')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[parameters('gatewayname1')]\", 'location': \"[parameters('location1')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', parameters('gatewaypublicipname1'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname1'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname1'), 'gatewaysubnet')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',parameters('gatewaypublicipname1'))]\"}}, 'name': 'vnetgatewayconfig1'}], 'gatewaytype': 'vpn', 'vpntype': 'routebased', 'enablebgp': false}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[parameters('gatewayname2')]\", 'location': \"[parameters('location2')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', parameters('gatewaypublicipname2'))]\", \"[resourceid('microsoft.network/virtualnetworks/', parameters('virtualnetworkname2'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('virtualnetworkname2'), 'gatewaysubnet')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',parameters('gatewaypublicipname2'))]\"}}, 'name': 'vnetgatewayconfig2'}], 'gatewaytype': 'vpn', 'vpntype': 'routebased', 'enablebgp': false}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/connections', 'name': \"[parameters('connectionname1')]\", 'location': \"[parameters('location1')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways/', parameters('gatewayname1'))]\", \"[resourceid('microsoft.network/virtualnetworkgateways/', parameters('gatewayname2'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',parameters('gatewayname1'))]\"}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',parameters('gatewayname2'))]\"}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\"}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/connections', 'name': \"[parameters('connectionname2')]\", 'location': \"[parameters('location2')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworkgateways/', parameters('gatewayname1'))]\", \"[resourceid('microsoft.network/virtualnetworkgateways/', parameters('gatewayname2'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',parameters('gatewayname2'))]\"}, 'virtualnetworkgateway2': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',parameters('gatewayname1'))]\"}, 'connectiontype': 'vnet2vnet', 'routingweight': 3, 'sharedkey': \"[parameters('sharedkey')]\"}} END"}
{"prompt": "\n\n###\n\nThis template configures WAF managed defaultRuleSet for Azure Front Door\n\n===\n\n", "completion": " {'type': 'microsoft.network/frontdoorwebapplicationfirewallpolicies', 'apiversion': '2020-11-01', 'name': \"[parameters('wafpolicyname')]\", 'location': 'global', 'properties': {'policysettings': {'mode': \"[parameters('wafmode')]\", 'enabledstate': 'enabled'}, 'managedrules': {'managedrulesets': [{'rulesettype': 'defaultruleset', 'rulesetversion': '1.0'}]}}} END"}
{"prompt": "\n\n###\n\nThis template creates two vNets with peerings, a Bastion host in the Hub vNet and a Linux VM in the spoke vNet\n\n===\n\n", "completion": " {'name': \"[parameters('vnethubname')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnethubprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetbastionname')]\", 'properties': {'addressprefix': \"[variables('subnetbastionprefix')]\"}}]}}{'name': \"[parameters('vnetspokename')]\", 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetspokeprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetspokename')]\", 'properties': {'addressprefix': \"[variables('subnetspokeprefix')]\"}}]}}{'name': \"[concat(parameters('vnethubname'),'/peering-to-',parameters('vnetspokename'))]\", 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'apiversion': '2020-05-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnethubname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetspokename'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': false, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks',parameters('vnetspokename'))]\"}}}{'name': \"[concat(parameters('vnetspokename'),'/peering-to-',parameters('vnethubname'))]\", 'type': 'microsoft.network/virtualnetworks/virtualnetworkpeerings', 'apiversion': '2020-05-01', 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnethubname'))]\", \"[resourceid('microsoft.network/virtualnetworks', parameters('vnetspokename'))]\"], 'properties': {'allowvirtualnetworkaccess': true, 'allowforwardedtraffic': false, 'allowgatewaytransit': false, 'useremotegateways': false, 'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks',parameters('vnethubname'))]\"}}}{'name': \"[variables('nsgname')]\", 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'securityrules': [{'name': 'allow-inbound-https', 'properties': {'description': 'allows inbound traffic for https', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '443', 'sourceaddressprefix': '*', 'destinationaddressprefix': '*', 'access': 'allow', 'priority': 100, 'direction': 'inbound'}}]}}{'name': \"[variables('bastionpublicipname')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'static'}, 'sku': {'name': 'standard'}}{'name': \"[variables('vmpublicipname')]\", 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'static'}, 'sku': {'name': 'standard'}}{'name': \"[parameters('bastionhostname')]\", 'type': 'microsoft.network/bastionhosts', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('bastionpublicipname'))]\"], 'properties': {'ipconfigurations': [{'properties': {'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets',parameters('vnethubname'),variables('subnetbastionname'))]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('bastionpublicipname'))]\"}, 'privateipallocationmethod': 'dynamic'}, 'name': 'ipconfig1'}]}}{'name': \"[concat(parameters('vmname'),'-nic-01')]\", 'type': 'microsoft.network/networkinterfaces', 'apiversion': '2020-05-01', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', parameters('vnetspokename'))]\", \"[resourceid('microsoft.network/networksecuritygroups',variables('nsgname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('vmpublicipname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', parameters('vnetspokename'),variables('subnetspokename'))]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('vmpublicipname'))]\"}}}], 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups',variables('nsgname'))]\"}}} END"}
{"prompt": "\n\n###\n\nApplication Gateway for URL Path Based Routing\n\n===\n\n", "completion": " {'apiversion': '2020-08-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2020-08-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2017-06-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendpublicip', 'properties': {'publicipaddress': {'id': \"[variables('publicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport80', 'properties': {'port': 80}}], 'backendaddresspools': [{'name': 'appgatewaybackendpooldefault', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddressdefault')]\"}]}}, {'name': 'appgatewaybackendpool1', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddressforpathrule1')]\"}]}}, {'name': 'appgatewaybackendpool2', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddressforpathrule2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgatewayname'), 'appgatewayfrontendpublicip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgatewayname'), 'appgatewayfrontendport80')]\"}, 'protocol': 'http'}}], 'urlpathmaps': [{'name': 'urlpathmap1', 'properties': {'defaultbackendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpooldefault')]\"}, 'defaultbackendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}, 'pathrules': [{'name': 'pathrule1', 'properties': {'paths': [\"[parameters('pathmatch1')]\"], 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool1')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}, {'name': 'pathrule2', 'properties': {'paths': [\"[parameters('pathmatch2')]\"], 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool2')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}]}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'pathbasedrouting', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'urlpathmap': {'id': \"[resourceid('microsoft.network/applicationgateways/urlpathmaps',variables('applicationgatewayname'), 'urlpathmap1')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nCreate an Azure Virtual WAN (vWAN) Multi-Hub Deployment\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualwans', 'apiversion': '2020-05-01', 'name': \"[parameters('vwanname')]\", 'location': \"[parameters('hub1_location')]\", 'properties': {'allowvnettovnettraffic': true, 'allowbranchtobranchtraffic': true, 'type': \"[variables('vwan_cfg').type]\"}}{'type': 'microsoft.network/virtualhubs', 'apiversion': '2020-05-01', 'name': \"[variables('virtual_hub1_cfg').name]\", 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"], 'properties': {'addressprefix': \"[variables('virtual_hub1_cfg').addressspaceprefix]\", 'virtualwan': {'id': \"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"}}}{'type': 'microsoft.network/virtualhubs', 'apiversion': '2020-05-01', 'name': \"[variables('virtual_hub2_cfg').name]\", 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"], 'properties': {'addressprefix': \"[variables('virtual_hub2_cfg').addressspaceprefix]\", 'virtualwan': {'id': \"[resourceid('microsoft.network/virtualwans', parameters('vwanname'))]\"}}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('vnet1_cfg').name]\", 'location': \"[parameters('hub1_location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet1_cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet1_cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet1_cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('vnet2_cfg').name]\", 'location': \"[parameters('hub1_location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet2_cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet2_cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet2_cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('vnet3_cfg').name]\", 'location': \"[parameters('hub2_location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet3_cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet3_cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet3_cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-05-01', 'name': \"[variables('vnet4_cfg').name]\", 'location': \"[parameters('hub2_location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnet4_cfg').addressspaceprefix]\"]}, 'subnets': [{'name': \"[variables('vnet4_cfg').subnetname]\", 'properties': {'addressprefix': \"[variables('vnet4_cfg').subnetprefix]\"}}]}}{'type': 'microsoft.network/virtualhubs/hubvirtualnetworkconnections', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}_connection', variables('virtual_hub1_cfg').name, variables('vnet1_cfg').name)]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1_cfg').name)]\", \"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub1_cfg').name))]\"], 'properties': {'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet1_cfg').name)]\"}, 'allowhubtoremotevnettransit': true, 'allowremotevnettousehubvnetgateways': true, 'enableinternetsecurity': true}}{'type': 'microsoft.network/virtualhubs/hubvirtualnetworkconnections', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}_connection', variables('virtual_hub1_cfg').name, variables('vnet2_cfg').name)]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2_cfg').name)]\", \"[resourceid('microsoft.network/virtualhubs/hubvirtualnetworkconnections', variables('virtual_hub1_cfg').name, format('{0}_connection', variables('vnet1_cfg').name))]\"], 'properties': {'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet2_cfg').name)]\"}, 'allowhubtoremotevnettransit': true, 'allowremotevnettousehubvnetgateways': true, 'enableinternetsecurity': true}}{'type': 'microsoft.network/virtualhubs/hubvirtualnetworkconnections', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}_connection', variables('virtual_hub2_cfg').name, variables('vnet3_cfg').name)]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet3_cfg').name)]\", \"[resourceid('microsoft.network/vpngateways', format('{0}_s2svpngw', variables('virtual_hub2_cfg').name))]\"], 'properties': {'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet3_cfg').name)]\"}, 'allowhubtoremotevnettransit': true, 'allowremotevnettousehubvnetgateways': true, 'enableinternetsecurity': true}}{'type': 'microsoft.network/virtualhubs/hubvirtualnetworkconnections', 'apiversion': '2020-05-01', 'name': \"[format('{0}/{1}_connection', variables('virtual_hub2_cfg').name, variables('vnet4_cfg').name)]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnet4_cfg').name)]\", \"[resourceid('microsoft.network/virtualhubs/hubvirtualnetworkconnections', variables('virtual_hub2_cfg').name, format('{0}_connection', variables('vnet3_cfg').name))]\"], 'properties': {'remotevirtualnetwork': {'id': \"[resourceid('microsoft.network/virtualnetworks', variables('vnet4_cfg').name)]\"}, 'allowhubtoremotevnettransit': true, 'allowremotevnettousehubvnetgateways': true, 'enableinternetsecurity': true}}{'type': 'microsoft.network/vpngateways', 'name': \"[format('{0}_s2svpngw', variables('virtual_hub1_cfg').name)]\", 'apiversion': '2020-05-01', 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\"], 'properties': {'vpngatewayscaleunit': \"[parameters('hub1_s2svpngatewayscaleunit')]\", 'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\"}, 'bgpsettings': {'asn': 65515}}}{'type': 'microsoft.network/vpngateways', 'name': \"[format('{0}_s2svpngw', variables('virtual_hub2_cfg').name)]\", 'apiversion': '2020-05-01', 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\"], 'properties': {'vpngatewayscaleunit': \"[parameters('hub2_s2svpngatewayscaleunit')]\", 'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\"}, 'bgpsettings': {'asn': 65515}}}{'type': 'microsoft.network/expressroutegateways', 'apiversion': '2020-05-01', 'name': \"[format('{0}_ergw', variables('virtual_hub1_cfg').name)]\", 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs/hubvirtualnetworkconnections', variables('virtual_hub1_cfg').name, format('{0}_connection', variables('vnet2_cfg').name))]\"], 'properties': {'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\"}, 'autoscaleconfiguration': {'bounds': {'min': \"[parameters('hub1_expressroutegatewayscaleunit')]\"}}}}{'type': 'microsoft.network/expressroutegateways', 'apiversion': '2020-05-01', 'name': \"[format('{0}_ergw', variables('virtual_hub2_cfg').name)]\", 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualhubs/hubvirtualnetworkconnections', variables('virtual_hub2_cfg').name, format('{0}_connection', variables('vnet4_cfg').name))]\"], 'properties': {'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\"}, 'autoscaleconfiguration': {'bounds': {'min': \"[parameters('hub2_expressroutegatewayscaleunit')]\"}}}}{'type': 'microsoft.network/vpnserverconfigurations', 'apiversion': '2020-05-01', 'name': \"[format('{0}_p2svpnserverconfiguration', variables('virtual_hub1_cfg').name)]\", 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/expressroutegateways', format('{0}_ergw', variables('virtual_hub1_cfg').name))]\"], 'properties': {'vpnprotocols': ['ikev2', 'openvpn'], 'vpnauthenticationtypes': ['certificate'], 'vpnclientrootcertificates': [{'name': 'p2srootcerthub1', 'publiccertdata': \"[parameters('hub1_publiccertificatedataforp2s')]\"}]}}{'type': 'microsoft.network/vpnserverconfigurations', 'apiversion': '2020-05-01', 'name': \"[format('{0}_p2svpnserverconfiguration', variables('virtual_hub2_cfg').name)]\", 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/expressroutegateways', format('{0}_ergw', variables('virtual_hub2_cfg').name))]\"], 'properties': {'vpnprotocols': ['ikev2', 'openvpn'], 'vpnauthenticationtypes': ['certificate'], 'vpnclientrootcertificates': [{'name': 'p2srootcerthub2', 'publiccertdata': \"[parameters('hub2_publiccertificatedataforp2s')]\"}]}}{'type': 'microsoft.network/p2svpngateways', 'apiversion': '2020-05-01', 'name': \"[format('{0}_p2sgateway', variables('virtual_hub1_cfg').name)]\", 'location': \"[parameters('hub1_location')]\", 'dependson': [\"[resourceid('microsoft.network/vpnserverconfigurations', format('{0}_p2svpnserverconfiguration', variables('virtual_hub1_cfg').name))]\"], 'properties': {'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub1_cfg').name)]\"}, 'vpnserverconfiguration': {'id': \"[resourceid('microsoft.network/vpnserverconfigurations', format('{0}_p2svpnserverconfiguration', variables('virtual_hub1_cfg').name))]\"}, 'p2sconnectionconfigurations': [{'name': 'hub1_p2sconnectionconfigdefault', 'properties': {'routingconfiguration': {'associatedroutetable': {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name,'defaultroutetable')]\"}, 'propagatedroutetables': {'labels': ['default'], 'ids': [{'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub1_cfg').name,'defaultroutetable')]\"}]}}, 'vpnclientaddresspool': {'addressprefixes': [\"[variables('virtual_hub1_cfg').hub1_p2svpnclientaddresspoolprefix]\"]}}}], 'vpngatewayscaleunit': \"[parameters('hub1_p2svpngatewayscaleunit')]\"}}{'type': 'microsoft.network/p2svpngateways', 'apiversion': '2020-05-01', 'name': \"[format('{0}_p2sgateway', variables('virtual_hub2_cfg').name)]\", 'location': \"[parameters('hub2_location')]\", 'dependson': [\"[resourceid('microsoft.network/vpnserverconfigurations', format('{0}_p2svpnserverconfiguration', variables('virtual_hub2_cfg').name))]\"], 'properties': {'virtualhub': {'id': \"[resourceid('microsoft.network/virtualhubs', variables('virtual_hub2_cfg').name)]\"}, 'vpnserverconfiguration': {'id': \"[resourceid('microsoft.network/vpnserverconfigurations', format('{0}_p2svpnserverconfiguration', variables('virtual_hub2_cfg').name))]\"}, 'p2sconnectionconfigurations': [{'name': 'hub2_p2sconnectionconfigdefault', 'properties': {'routingconfiguration': {'associatedroutetable': {'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name,'defaultroutetable')]\"}, 'propagatedroutetables': {'labels': ['default'], 'ids': [{'id': \"[resourceid('microsoft.network/virtualhubs/hubroutetables', variables('virtual_hub2_cfg').name,'defaultroutetable')]\"}]}}, 'vpnclientaddresspool': {'addressprefixes': [\"[variables('virtual_hub2_cfg').hub2_p2svpnclientaddresspoolprefix]\"]}}}], 'vpngatewayscaleunit': \"[parameters('hub2_p2svpngatewayscaleunit')]\"}} END"}
{"prompt": "\n\n###\n\nConfigure ExpressRoute private peering, deploy and connect an Azure VNet to an ExpressRoute circuit\n\n===\n\n", "completion": " {'comments': 'create the er circuit', 'type': 'microsoft.network/expressroutecircuits', 'apiversion': '2020-06-01', 'name': \"[variables('ercircuitname')]\", 'location': \"[variables('erlocation')]\", 'sku': {'name': \"[variables('ersku_name')]\", 'tier': \"[variables('ersku_tier')]\", 'family': \"[variables('ersku_family')]\"}, 'properties': {'serviceproviderproperties': {'serviceprovidername': \"[variables('serviceprovidername')]\", 'peeringlocation': \"[variables('erpeeringlocation')]\", 'bandwidthinmbps': \"[variables('bandwidthinmbps')]\"}, 'allowclassicoperations': false}}{'comments': 'create er private peering', 'type': 'microsoft.network/expressroutecircuits/peerings', 'apiversion': '2020-06-01', 'name': \"[concat(variables('ercircuitname'),'/','azureprivatepeering')]\", 'location': \"[variables('erlocation')]\", 'dependson': [\"[resourceid('microsoft.network/expressroutecircuits', variables('ercircuitname'))]\"], 'properties': {'peeringtype': 'azureprivatepeering', 'peerasn': \"[variables('peerasn')]\", 'primarypeeraddressprefix': \"[variables('primarypeeraddressprefix')]\", 'secondarypeeraddressprefix': \"[variables('secondarypeeraddressprefix')]\", 'vlanid': \"[variables('vlanid')]\"}}{'comments': 'nsg applied to the subnets in vnet1', 'type': 'microsoft.network/networksecuritygroups', 'apiversion': '2020-06-01', 'name': \"[variables('nsg')]\", 'location': \"[variables('location')]\", 'properties': {'securityrules': [{'name': 'ssh-rule', 'properties': {'description': 'allow ssh', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '22', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 500, 'direction': 'inbound'}}, {'name': 'rdp-rule', 'properties': {'description': 'allow rdp', 'protocol': 'tcp', 'sourceportrange': '*', 'destinationportrange': '3389', 'sourceaddressprefix': '*', 'destinationaddressprefix': 'virtualnetwork', 'access': 'allow', 'priority': 600, 'direction': 'inbound'}}]}}{'comments': 'it builds a virtual network with gatewaysubnet', 'type': 'microsoft.network/virtualnetworks', 'apiversion': '2020-06-01', 'name': \"[variables('vnetname')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.network/networksecuritygroups', variables('nsg'))]\"], 'properties': {'addressspace': {'addressprefixes': [\"[variables('vnetaddressspace')]\"]}, 'subnets': [{'name': \"[variables('subnet1name')]\", 'properties': {'addressprefix': \"[variables('subnet1prefix')]\", 'networksecuritygroup': {'id': \"[resourceid('microsoft.network/networksecuritygroups', variables('nsg'))]\"}}}, {'name': 'gatewaysubnet', 'properties': {'addressprefix': \"[variables('gatewaysubnetprefix')]\"}}]}}{'comments': 'public ip of the expressroute gateway. only public ip dynamic allocation is supported', 'type': 'microsoft.network/publicipaddresses', 'apiversion': '2020-06-01', 'name': \"[variables('gatewaypublicipname')]\", 'location': \"[variables('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'comments': 'expressroute gateway in the gatewaysubnet', 'type': 'microsoft.network/virtualnetworkgateways', 'apiversion': '2020-06-01', 'name': \"[variables('gatewayname')]\", 'location': \"[variables('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses', variables('gatewaypublicipname'))]\", \"[resourceid('microsoft.network/virtualnetworks', variables('vnetname'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[resourceid('microsoft.network/virtualnetworks/subnets', variables('vnetname'), 'gatewaysubnet')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',variables('gatewaypublicipname'))]\"}}, 'name': 'gwipconf'}], 'gatewaytype': 'expressroute', 'sku': {'name': \"[variables('gatewaysku')]\", 'tier': \"[variables('gatewaysku')]\"}, 'vpntype': 'routebased'}} END"}
{"prompt": "\n\n###\n\nThis template creates a Front Door configuration with routing rule that is used to redirect HTTP traffic to HTTPS.\n\n===\n\n", "completion": " {'type': 'microsoft.network/frontdoors', 'apiversion': '2020-05-01', 'name': \"[parameters('frontdoorname')]\", 'location': 'global', 'properties': {'routingrules': [{'name': 'httptohttps', 'properties': {'frontendendpoints': [{'id': \"[resourceid('microsoft.network/frontdoors/frontendendpoints', parameters('frontdoorname'), 'frontendendpoint1')]\"}], 'acceptedprotocols': ['http'], 'patternstomatch': ['/*'], 'routeconfiguration': {'@odata.type': '#microsoft.azure.frontdoor.models.frontdoorredirectconfiguration', 'redirectprotocol': 'httpsonly', 'redirecttype': 'moved'}, 'enabledstate': 'enabled'}}], 'healthprobesettings': [{'name': 'healthprobesettings1', 'properties': {'path': '/', 'protocol': 'http', 'intervalinseconds': 120}}], 'loadbalancingsettings': [{'name': 'loadbalancingsettings1', 'properties': {'samplesize': 4, 'successfulsamplesrequired': 2}}], 'backendpools': [{'name': 'backendpool1', 'properties': {'backends': [{'address': \"[parameters('backendaddress')]\", 'backendhostheader': \"[parameters('backendaddress')]\", 'httpport': 80, 'httpsport': 443, 'weight': 50, 'priority': 1, 'enabledstate': 'enabled'}], 'loadbalancingsettings': {'id': \"[resourceid('microsoft.network/frontdoors/loadbalancingsettings', parameters('frontdoorname'), 'loadbalancingsettings1')]\"}, 'healthprobesettings': {'id': \"[resourceid('microsoft.network/frontdoors/healthprobesettings', parameters('frontdoorname'), 'healthprobesettings1')]\"}}}], 'frontendendpoints': [{'name': 'frontendendpoint1', 'properties': {'hostname': \"[format('{0}.azurefd.net', parameters('frontdoorname'))]\", 'sessionaffinityenabledstate': 'disabled'}}], 'enabledstate': 'enabled'}} END"}
{"prompt": "\n\n###\n\nAdd a subnet to an existing VNET\n\n===\n\n", "completion": " {'type': 'microsoft.network/virtualnetworks/subnets', 'apiversion': '2021-03-01', 'name': \"[format('{0}/{1}', parameters('existingvnetname'), parameters('newsubnetname'))]\", 'properties': {'addressprefix': \"[parameters('newsubnetaddressprefix')]\"}} END"}
{"prompt": "\n\n###\n\nThis template configures a WAF rule for Azure Front Door to rate limit incoming traffic for a given frontend host.\n\n===\n\n", "completion": " {'apiversion': '2019-03-01', 'type': 'microsoft.network/frontdoorwebapplicationfirewallpolicies', 'name': \"[parameters('wafpolicyname')]\", 'location': \"[variables('waflocation')]\", 'properties': {'policysettings': {'mode': \"[parameters('wafmode')]\", 'enabledstate': 'enabled'}, 'customrules': {'rules': [{'name': 'rule1', 'enabledstate': 'enabled', 'priority': 1, 'ruletype': 'ratelimitrule', 'ratelimitthreshold': \"[parameters('ratelimitthreshold')]\", 'ratelimitdurationinminutes': \"[parameters('ratelimitdurationinminutes')]\", 'matchconditions': [{'matchvariable': 'remoteaddr', 'operator': 'ipmatch', 'matchvalue': [\"[parameters('ipmatch')]\"]}], 'action': \"[parameters('ratelimitaction')]\"}]}}} END"}
{"prompt": "\n\n###\n\nNetwork Interface in a Virtual Network with Public IP Address\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnslabelprefix')]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('vnetaddressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'publicipaddress': {'id': \"[resourceid ('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"}, 'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnetref')]\"}}}]}} END"}
{"prompt": "\n\n###\n\nLoad Balancer with 2 public IP addresses (VIP), each VIP associated to one LB rule\n\n===\n\n", "completion": " {'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname1')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\", 'dnssettings': {'domainnamelabel': \"[parameters('dnsnameforlbip')]\"}}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname2')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': \"[parameters('publicipaddresstype')]\"}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2020-05-01', 'type': 'microsoft.network/networkinterfaces', 'name': \"[variables('nicname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/loadbalancers/', variables('loadbalancername'))]\"], 'properties': {'ipconfigurations': [{'name': 'ipconfig1', 'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('subnetref')]\"}, 'loadbalancerbackendaddresspools': [{'id': \"[resourceid('microsoft.network/loadbalancers/backendaddresspools/', variables('loadbalancername'), 'loadbalancerbackend')]\"}]}}]}}{'apiversion': '2020-05-01', 'name': \"[variables('loadbalancername')]\", 'type': 'microsoft.network/loadbalancers', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname1'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname2'))]\"], 'properties': {'frontendipconfigurations': [{'name': 'loadbalancerfrontend1', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid1')]\"}}}, {'name': 'loadbalancerfrontend2', 'properties': {'publicipaddress': {'id': \"[variables('publicipaddressid2')]\"}}}], 'backendaddresspools': [{'name': 'loadbalancerbackend'}], 'loadbalancingrules': [{'name': 'lbruleforvip1', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid1')]\"}, 'backendaddresspool': {'id': \"[variables('lbbackendpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 443, 'backendport': 443, 'probe': {'id': \"[variables('lbprobeid')]\"}}}, {'name': 'lbruleforvip2', 'properties': {'frontendipconfiguration': {'id': \"[variables('frontendipconfigid2')]\"}, 'backendaddresspool': {'id': \"[variables('lbbackendpoolid')]\"}, 'protocol': 'tcp', 'frontendport': 443, 'backendport': 444, 'probe': {'id': \"[variables('lbprobeid')]\"}}}], 'probes': [{'name': 'tcpprobe', 'properties': {'protocol': 'tcp', 'port': 445, 'intervalinseconds': 5, 'numberofprobes': 2}}]}} END"}
{"prompt": "\n\n###\n\nThis template configures WAF client IP restriction for Azure Front Door endpoint\n\n===\n\n", "completion": " {'apiversion': '2019-03-01', 'type': 'microsoft.network/frontdoorwebapplicationfirewallpolicies', 'name': \"[parameters('wafpolicyname')]\", 'location': \"[variables('waflocation')]\", 'properties': {'policysettings': {'mode': \"[parameters('wafmode')]\", 'enabledstate': 'enabled'}, 'customrules': {'rules': [{'name': 'rule1', 'priority': 1, 'enabledstate': 'enabled', 'ruletype': 'matchrule', 'matchconditions': [{'matchvariable': 'remoteaddr', 'operator': 'ipmatch', 'matchvalue': [\"[parameters('ipmatch')]\"]}], 'action': \"[parameters('ipfilteringaction')]\"}]}}} END"}
{"prompt": "\n\n###\n\nCreate an Application Gateway\n\n===\n\n", "completion": " {'apiversion': '2021-02-01', 'type': 'microsoft.network/publicipaddresses', 'name': \"[variables('publicipaddressname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2017-06-01', 'type': 'microsoft.network/virtualnetworks', 'name': \"[variables('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[variables('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}]}}{'apiversion': '2017-06-01', 'name': \"[variables('applicationgatewayname')]\", 'type': 'microsoft.network/applicationgateways', 'location': \"[parameters('location')]\", 'dependson': [\"[resourceid('microsoft.network/virtualnetworks/', variables('virtualnetworkname'))]\", \"[resourceid('microsoft.network/publicipaddresses/', variables('publicipaddressname'))]\"], 'properties': {'sku': {'name': \"[parameters('skuname')]\", 'tier': 'standard', 'capacity': \"[parameters('capacity')]\"}, 'sslcertificates': [{'name': 'appgatewaysslcert', 'properties': {'data': \"[parameters('certdata')]\", 'password': \"[parameters('certpassword')]\"}}], 'gatewayipconfigurations': [{'name': 'appgatewayipconfig', 'properties': {'subnet': {'id': \"[variables('subnetref')]\"}}}], 'frontendipconfigurations': [{'name': 'appgatewayfrontendip', 'properties': {'publicipaddress': {'id': \"[variables('publicipref')]\"}}}], 'frontendports': [{'name': 'appgatewayfrontendport', 'properties': {'port': 443}}], 'backendaddresspools': [{'name': 'appgatewaybackendpool', 'properties': {'backendaddresses': [{'ipaddress': \"[parameters('backendipaddress1')]\"}, {'ipaddress': \"[parameters('backendipaddress2')]\"}]}}], 'backendhttpsettingscollection': [{'name': 'appgatewaybackendhttpsettings', 'properties': {'port': 80, 'protocol': 'http', 'cookiebasedaffinity': 'disabled'}}], 'httplisteners': [{'name': 'appgatewayhttplistener', 'properties': {'frontendipconfiguration': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendipconfigurations',variables('applicationgatewayname'), 'appgatewayfrontendip')]\"}, 'frontendport': {'id': \"[resourceid('microsoft.network/applicationgateways/frontendports',variables('applicationgatewayname'), 'appgatewayfrontendport')]\"}, 'protocol': 'https', 'sslcertificate': {'id': \"[resourceid('microsoft.network/applicationgateways/sslcertificates',variables('applicationgatewayname'), 'appgatewaysslcert')]\"}}}], 'requestroutingrules': [{'name': 'rule1', 'properties': {'ruletype': 'basic', 'httplistener': {'id': \"[resourceid('microsoft.network/applicationgateways/httplisteners',variables('applicationgatewayname'), 'appgatewayhttplistener')]\"}, 'backendaddresspool': {'id': \"[resourceid('microsoft.network/applicationgateways/backendaddresspools',variables('applicationgatewayname'), 'appgatewaybackendpool')]\"}, 'backendhttpsettings': {'id': \"[resourceid('microsoft.network/applicationgateways/backendhttpsettingscollection',variables('applicationgatewayname'), 'appgatewaybackendhttpsettings')]\"}}}], 'sslpolicy': {'policytype': 'custom', 'minprotocolversion': 'tlsv1_1', 'ciphersuites': ['tls_ecdhe_ecdsa_with_aes_128_gcm_sha256', 'tls_ecdhe_ecdsa_with_aes_256_gcm_sha384', 'tls_ecdhe_ecdsa_with_aes_128_cbc_sha', 'tls_ecdhe_ecdsa_with_aes_256_cbc_sha', 'tls_ecdhe_ecdsa_with_aes_128_cbc_sha256', 'tls_ecdhe_ecdsa_with_aes_256_cbc_sha384', 'tls_ecdhe_rsa_with_aes_256_gcm_sha384', 'tls_ecdhe_rsa_with_aes_128_gcm_sha256', 'tls_ecdhe_rsa_with_aes_128_cbc_sha', 'tls_ecdhe_rsa_with_aes_256_cbc_sha', 'tls_rsa_with_aes_256_gcm_sha384', 'tls_rsa_with_aes_128_gcm_sha256', 'tls_rsa_with_aes_256_cbc_sha256', 'tls_rsa_with_aes_128_cbc_sha256', 'tls_rsa_with_aes_256_cbc_sha', 'tls_rsa_with_aes_128_cbc_sha']}}} END"}
{"prompt": "\n\n###\n\nEstablish connection to a VNET via an ExpressRoute circuit\n\n===\n\n", "completion": " {'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworks', 'name': \"[parameters('virtualnetworkname')]\", 'location': \"[parameters('location')]\", 'properties': {'addressspace': {'addressprefixes': [\"[parameters('addressprefix')]\"]}, 'subnets': [{'name': \"[parameters('subnetname')]\", 'properties': {'addressprefix': \"[parameters('subnetprefix')]\"}}, {'name': \"[parameters('gatewaysubnet')]\", 'properties': {'addressprefix': \"[parameters('gatewaysubnetprefix')]\"}}]}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/publicipaddresses', 'name': \"[parameters('gatewaypublicipname')]\", 'location': \"[parameters('location')]\", 'properties': {'publicipallocationmethod': 'dynamic'}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/virtualnetworkgateways', 'name': \"[parameters('gatewayname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.network/publicipaddresses/', parameters('gatewaypublicipname'))]\", \"[concat('microsoft.network/virtualnetworks/', parameters('virtualnetworkname'))]\"], 'properties': {'ipconfigurations': [{'properties': {'privateipallocationmethod': 'dynamic', 'subnet': {'id': \"[variables('gatewaysubnetref')]\"}, 'publicipaddress': {'id': \"[resourceid('microsoft.network/publicipaddresses',parameters('gatewaypublicipname'))]\"}}, 'name': 'vnetgatewayconfig'}], 'gatewaytype': \"[parameters('gatewaytype')]\"}}{'apiversion': '2015-06-15', 'type': 'microsoft.network/connections', 'name': \"[parameters('connectionname')]\", 'location': \"[parameters('location')]\", 'dependson': [\"[concat('microsoft.network/virtualnetworkgateways/', parameters('gatewayname'))]\"], 'properties': {'virtualnetworkgateway1': {'id': \"[resourceid('microsoft.network/virtualnetworkgateways',parameters('gatewayname'))]\"}, 'peer': {'id': \"[resourceid('microsoft.network/expressroutecircuits',parameters('circuitname'))]\"}, 'connectiontype': \"[parameters('connectiontype')]\", 'routingweight': \"[variables('routingweight')]\"}} END"}
{"prompt": "\n\n###\n\nCreate an Azure portal dashboard\n\n===\n\n", "completion": " {'type': 'microsoft.portal/dashboards', 'apiversion': '2019-01-01-preview', 'name': \"[parameters('dashboardname')]\", 'location': \"[parameters('location')]\", 'tags': {'hidden-title': \"[parameters('dashboarddisplayname')]\"}, 'properties': {'lenses': {'0': {'order': 0, 'parts': {'0': {'position': {'x': 0, 'y': 0, 'rowspan': 2, 'colspan': 3}, 'metadata': {'inputs': [], 'type': 'extension[azure]/hubsextension/parttype/markdownpart', 'settings': {'content': {'settings': {'content': '## azure virtual machines overview\\r\\nnew team members should watch this video to get familiar with azure virtual machines.'}}}}}, '1': {'position': {'x': 3, 'y': 0, 'rowspan': 4, 'colspan': 8}, 'metadata': {'inputs': [], 'type': 'extension[azure]/hubsextension/parttype/markdownpart', 'settings': {'content': {'settings': {'content': 'this is the team dashboard for the test vm we use on our team. here are some useful links:\\r\\n\\r\\n1. [create a linux virtual machine](https://docs.microsoft.com/azure/virtual-machines/linux/quick-create-portal)\\r\\n1. [create a windows virtual machine](https://docs.microsoft.com/azure/virtual-machines/windows/quick-create-portal)\\r\\n1. [create a virtual machine scale set](https://docs.microsoft.com/azure/virtual-machine-scale-sets/quick-create-portal)', 'title': 'test vm dashboard', 'subtitle': 'contoso'}}}}}, '2': {'position': {'x': 0, 'y': 2, 'rowspan': 2, 'colspan': 3}, 'metadata': {'inputs': [], 'type': 'extension[azure]/hubsextension/parttype/videopart', 'settings': {'content': {'settings': {'src': 'https://www.youtube.com/watch?v=roisrkxtteu', 'autoplay': false}}}}}, '3': {'position': {'x': 0, 'y': 4, 'rowspan': 3, 'colspan': 11}, 'metadata': {'inputs': [{'name': 'queryinputs', 'value': {'timespan': {'duration': 'pt1h'}, 'id': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\", 'charttype': 0, 'metrics': [{'name': 'percentage cpu', 'resourceid': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"}]}}], 'type': 'extension/microsoft_azure_monitoring/parttype/metricschartpart'}}, '4': {'position': {'x': 0, 'y': 7, 'rowspan': 2, 'colspan': 3}, 'metadata': {'inputs': [{'name': 'queryinputs', 'value': {'timespan': {'duration': 'pt1h'}, 'id': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\", 'charttype': 0, 'metrics': [{'name': 'disk read operations/sec', 'resourceid': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"}, {'name': 'disk write operations/sec', 'resourceid': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"}]}}], 'type': 'extension/microsoft_azure_monitoring/parttype/metricschartpart'}}, '5': {'position': {'x': 3, 'y': 7, 'rowspan': 2, 'colspan': 3}, 'metadata': {'inputs': [{'name': 'queryinputs', 'value': {'timespan': {'duration': 'pt1h'}, 'id': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\", 'charttype': 0, 'metrics': [{'name': 'disk read bytes', 'resourceid': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"}, {'name': 'disk write bytes', 'resourceid': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"}]}}], 'type': 'extension/microsoft_azure_monitoring/parttype/metricschartpart'}}, '6': {'position': {'x': 6, 'y': 7, 'rowspan': 2, 'colspan': 3}, 'metadata': {'inputs': [{'name': 'queryinputs', 'value': {'timespan': {'duration': 'pt1h'}, 'id': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\", 'charttype': 0, 'metrics': [{'name': 'network in total', 'resourceid': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"}, {'name': 'network out total', 'resourceid': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"}]}}], 'type': 'extension/microsoft_azure_monitoring/parttype/metricschartpart'}}, '7': {'position': {'x': 9, 'y': 7, 'rowspan': 2, 'colspan': 2}, 'metadata': {'inputs': [{'name': 'id', 'value': \"[resourceid(parameters('virtualmachineresourcegroup'), 'microsoft.compute/virtualmachines', parameters('virtualmachinename'))]\"}], 'type': 'extension/microsoft_azure_compute/parttype/virtualmachinepart', 'asset': {'idinputname': 'id', 'type': 'virtualmachine'}}}}}}}} END"}
{"prompt": "\n\n###\n\nA default dashboard that includes a pinned resource group tile and a markup tile with instructions to customize and share\n\n===\n\n", "completion": " {'apiversion': '2020-09-01-preview', 'name': \"[concat('shared-dashboard-', parameters('dashboardname'))]\", 'type': 'microsoft.portal/dashboards', 'location': \"[parameters('location')]\", 'tags': {'hidden-title': \"[parameters('dashboardname')]\"}, 'properties': {'lenses': [{'order': 0, 'parts': [{'position': {'x': 0, 'y': 0, 'colspan': 4, 'rowspan': 6}, 'metadata': {'inputs': [{'name': 'resourcegroup', 'isoptional': true}, {'name': 'id', 'value': '[resourcegroup().id]', 'isoptional': true}], 'type': 'extension/hubsextension/parttype/resourcegroupmappinnedpart'}}, {'position': {'x': 4, 'y': 0, 'rowspan': 3, 'colspan': 4}, 'metadata': {'inputs': [], 'type': 'extension[azure]/hubsextension/parttype/markdownpart', 'settings': {'content': {'settings': {'content': \"__customizations__\\n\\nuse this dashboard to create and share the operational views of services critical to the application performing. to customize simply pin components to the dashboard and then publish when you're done. others will see your changes when you publish and share the dashboard.\\n\\nyou can customize this text too. it supports plain text, __markdown__, and even limited html like images <img width='10' src='https://portal.azure.com/favicon.ico'/> and <a href='https://azure.microsoft.com' target='_blank'>links</a> that open in a new tab.\\n\", 'title': 'operations', 'subtitle': '[resourcegroup().name]'}}}}}]}], 'metadata': {'model': {'timerange': {'value': {'relative': {'duration': 24, 'timeunit': 1}}, 'type': 'msportalfx.composition.configuration.valuetypes.timerange'}}}}} END"}
{"prompt": "\n\n###\n\nThis template creates a scheduled analytics rule\n\n===\n\n", "completion": " {'scope': \"[concat('microsoft.operationalinsights/workspaces/', parameters('existingworkspacename'))]\", 'type': 'microsoft.securityinsights/alertrules', 'apiversion': '2021-03-01-preview', 'name': \"[variables('ruleguid')]\", 'kind': 'scheduled', 'properties': {'displayname': 'known iridium ip', 'description': 'iridium command and control ip. identifies a match across various data feeds for ip iocs related to the iridium activity group.', 'severity': 'high', 'enabled': true, 'query': 'let iplist = dynamic([\"154.223.45.38\",\"185.141.207.140\",\"185.234.73.19\",\"216.245.210.106\",\"51.91.48.210\",\"46.255.230.229\"]);\\n(union isfuzzy=true\\n(commonsecuritylog\\n| where isnotempty(sourceip) or isnotempty(destinationip)\\n| where sourceip in (iplist) or destinationip in (iplist) or message has_any (iplist)\\n| extend ipmatch = case(sourceip in (iplist), \"sourceip\", destinationip in (iplist), \"destinationip\", \"message\") \\n| summarize starttimeutc = min(timegenerated), endtimeutc = max(timegenerated) by sourceip, destinationip, deviceproduct, deviceaction, message, protocol, sourceport, destinationport, deviceaddress, devicename, ipmatch\\n| extend timestamp = starttimeutc, ipcustomentity = case(ipmatch == \"sourceip\", sourceip, ipmatch == \"destinationip\", destinationip, \"ip in message field\") \\n),\\n(officeactivity\\n|extend sourceipaddress = clientip, account = userid\\n| where  sourceipaddress in (iplist)\\n| extend timestamp = timegenerated , ipcustomentity = sourceipaddress , accountcustomentity = account\\n),\\n(dnsevents \\n| extend destinationipaddress = ipaddresses,  host = computer\\n| where  destinationipaddress has_any (iplist) \\n| extend timestamp = timegenerated, ipcustomentity = destinationipaddress, hostcustomentity = host\\n),\\n(imdns \\n| extend destinationipaddress = dnsresponsename,  host = dvc\\n| where  destinationipaddress has_any (iplist) \\n| extend timestamp = timegenerated, ipcustomentity = srcipaddr, hostcustomentity = host\\n),\\n(vmconnection \\n| where isnotempty(sourceip) or isnotempty(destinationip) \\n| where sourceip in (iplist) or destinationip in (iplist) \\n| extend ipmatch = case( sourceip in (iplist), \"sourceip\", destinationip in (iplist), \"destinationip\", \"none\") \\n| extend timestamp = timegenerated , ipcustomentity = case(ipmatch == \"sourceip\", sourceip, ipmatch == \"destinationip\", destinationip, \"none\"), host = computer\\n),\\n(event\\n| where source == \"microsoft-windows-sysmon\"\\n| where eventid == 3\\n| extend evdata = parse_xml(eventdata)\\n| extend eventdetail = evdata.dataitem.eventdata.data\\n| extend sourceip = eventdetail.[9].[\"#text\"], destinationip = eventdetail.[14].[\"#text\"]\\n| where sourceip in (iplist) or destinationip in (iplist) \\n| extend ipmatch = case( sourceip in (iplist), \"sourceip\", destinationip in (iplist), \"destinationip\", \"none\") \\n| extend timestamp = timegenerated, accountcustomentity = username, hostcustomentity = computer , ipcustomentity = case(ipmatch == \"sourceip\", sourceip, ipmatch == \"destinationip\", destinationip, \"none\")\\n),\\n(signinlogs\\n| where isnotempty(ipaddress)\\n| where ipaddress in (iplist)\\n| extend timestamp = timegenerated, accountcustomentity = userprincipalname, ipcustomentity = ipaddress\\n),\\n(aadnoninteractiveusersigninlogs\\n| where isnotempty(ipaddress)\\n| where ipaddress in (iplist)\\n| extend timestamp = timegenerated, accountcustomentity = userprincipalname, ipcustomentity = ipaddress\\n),\\n(w3ciislog \\n| where isnotempty(cip)\\n| where cip in (iplist)\\n| extend timestamp = timegenerated, ipcustomentity = cip, hostcustomentity = computer, accountcustomentity = csusername\\n),\\n(azureactivity \\n| where isnotempty(calleripaddress)\\n| where calleripaddress in (iplist)\\n| extend timestamp = timegenerated, ipcustomentity = calleripaddress, accountcustomentity = caller\\n),\\n(\\nawscloudtrail\\n| where isnotempty(sourceipaddress)\\n| where sourceipaddress in (iplist)\\n| extend timestamp = timegenerated, ipcustomentity = sourceipaddress, accountcustomentity = useridentityusername\\n),\\n(\\nazurediagnostics\\n| where resourcetype == \"azurefirewalls\"\\n| where category == \"azurefirewallapplicationrule\"\\n| parse msg_s with protocol \\'request from \\' sourcehost \\':\\' sourceport \\'to \\' destinationhost \\':\\' destinationport \\'. action:\\' action\\n| where isnotempty(destinationhost)\\n| where destinationhost has_any (iplist)  \\n| extend destinationip = destinationhost \\n| extend ipcustomentity = sourcehost\\n),\\n(\\nazurediagnostics\\n| where resourcetype == \"azurefirewalls\"\\n| where category == \"azurefirewallnetworkrule\"\\n| parse msg_s with protocol \\'request from \\' sourcehost \\':\\' sourceport \\'to \\' destinationhost \\':\\' destinationport \\'. action:\\' action\\n| where isnotempty(destinationhost)\\n| where destinationhost has_any (iplist)  \\n| extend destinationip = destinationhost \\n| extend ipcustomentity = sourcehost\\n)\\n)', 'queryfrequency': 'p1d', 'queryperiod': 'p1d', 'triggeroperator': 'greaterthan', 'triggerthreshold': 0, 'suppressionduration': 'pt5h', 'suppressionenabled': false, 'tactics': ['commandandcontrol'], 'alertruletemplatename': '7ee72a9e-2e54-459c-bc8a-8c08a6532a63', 'incidentconfiguration': {'createincident': true, 'groupingconfiguration': {'enabled': false, 'reopenclosedincident': false, 'lookbackduration': 'pt5h', 'matchingmethod': 'allentities', 'groupbyentities': [], 'groupbyalertdetails': [], 'groupbycustomdetails': []}}, 'eventgroupingsettings': {'aggregationkind': 'singlealert'}, 'alertdetailsoverride': {'alertdisplaynameformat': 'known iridium ip: {{ipcustomentity}}', 'alertdescriptionformat': 'alert generated at {{timegenerated}}', 'alerttacticscolumnname': none, 'alertseveritycolumnname': 'severity'}, 'customdetails': {'group': 'aadgroupid'}, 'entitymappings': [{'entitytype': 'account', 'fieldmappings': [{'identifier': 'fullname', 'columnname': 'accountcustomentity'}]}, {'entitytype': 'host', 'fieldmappings': [{'identifier': 'fullname', 'columnname': 'hostcustomentity'}]}, {'entitytype': 'ip', 'fieldmappings': [{'identifier': 'address', 'columnname': 'ipcustomentity'}]}]}} END"}
{"prompt": "\n\n###\n\nThis template creates an automation rule that triggers on incident creation (with certain conditions), executes a playbook and modifies two incident properies\n\n===\n\n", "completion": " {'type': 'microsoft.securityinsights/automationrules', 'name': \"[variables('automationruleguid')]\", 'scope': \"[concat('microsoft.operationalinsights/workspaces/', parameters('existingworkspacename'))]\", 'apiversion': '2019-01-01-preview', 'properties': {'displayname': \"[parameters('automationrulename')]\", 'order': 2, 'triggeringlogic': {'isenabled': true, 'expirationtimeutc': none, 'triggerson': 'incidents', 'triggerswhen': 'created', 'conditions': [{'conditiontype': 'property', 'conditionproperties': {'propertyname': 'incidentrelatedanalyticruleids', 'operator': 'contains', 'propertyvalues': [\"[resourceid('microsoft.operationalinsights/workspaces/providers/alertrules',parameters('existingworkspacename'),'microsoft.securityinsights',parameters('existingruleid'))]\"]}}, {'conditiontype': 'property', 'conditionproperties': {'propertyname': 'incidentseverity', 'operator': 'equals', 'propertyvalues': ['high']}}, {'conditiontype': 'property', 'conditionproperties': {'propertyname': 'incidenttactics', 'operator': 'contains', 'propertyvalues': ['initialaccess', 'execution']}}, {'conditiontype': 'property', 'conditionproperties': {'propertyname': 'incidenttitle', 'operator': 'contains', 'propertyvalues': ['urgent']}}]}, 'actions': [{'order': 2, 'actiontype': 'modifyproperties', 'actionconfiguration': {'status': 'closed', 'classification': 'undetermined', 'classificationreason': none}}, {'order': 3, 'actiontype': 'modifyproperties', 'actionconfiguration': {'labels': [{'labelname': 'tag'}]}}]}} END"}
